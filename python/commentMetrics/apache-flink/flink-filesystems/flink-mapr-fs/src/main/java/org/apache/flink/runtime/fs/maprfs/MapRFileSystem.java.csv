commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;24;;private static org.apache.hadoop.fs.FileSystem instantiateMapRFileSystem(URI fsUri) throws IOException {     checkNotNull(fsUri, "fsUri").     final org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration().     final com.mapr.fs.MapRFileSystem fs.     final String authority = fsUri.getAuthority().     if (authority == null || authority.isEmpty()) {         // Use the default constructor to instantiate MapR file system object         fs = new com.mapr.fs.MapRFileSystem().     } else {         // We have an authority, check the MapR cluster configuration to         // find the CLDB locations.         final String[] cldbLocations = getCLDBLocations(authority).         fs = new com.mapr.fs.MapRFileSystem(authority, cldbLocations).     }     // now initialize the Hadoop File System object     fs.initialize(fsUri, conf).     return fs. }
true;private,static;1;71;/**  * Retrieves the CLDB locations for the given MapR cluster name.  *  * @param authority  *            the name of the MapR cluster  * @return a list of CLDB locations  * @throws IOException  *             thrown if the CLDB locations for the given MapR cluster name  *             cannot be determined  */ ;/**  * Retrieves the CLDB locations for the given MapR cluster name.  *  * @param authority  *            the name of the MapR cluster  * @return a list of CLDB locations  * @throws IOException  *             thrown if the CLDB locations for the given MapR cluster name  *             cannot be determined  */ private static String[] getCLDBLocations(String authority) throws IOException {     // Determine the MapR home     String maprHome = System.getenv(MAPR_HOME_ENV).     if (maprHome == null) {         maprHome = DEFAULT_MAPR_HOME.     }     final File maprClusterConf = new File(maprHome, MAPR_CLUSTER_CONF_FILE).     if (LOG.isDebugEnabled()) {         LOG.debug(String.format("Trying to retrieve MapR cluster configuration from %s", maprClusterConf)).     }     if (!maprClusterConf.exists()) {         throw new IOException("Could not find CLDB configuration '" + maprClusterConf.getAbsolutePath() + "', assuming MapR home is '" + maprHome + "'.").     }     try (BufferedReader br = new BufferedReader(new FileReader(maprClusterConf))) {         String line.         while ((line = br.readLine()) != null) {             // Normalize the string             line = line.trim().             line = line.replace('\t', ' ').             final String[] fields = line.split(" ").             if (fields.length < 1) {                 continue.             }             final String clusterName = fields[0].             if (!clusterName.equals(authority)) {                 continue.             }             final List<String> cldbLocations = new ArrayList<>().             for (int i = 1. i < fields.length. ++i) {                 // features.                 if (!fields[i].isEmpty() && !fields[i].contains("=")) {                     cldbLocations.add(fields[i]).                 }             }             if (cldbLocations.isEmpty()) {                 throw new IOException(String.format("%s contains entry for cluster %s but no CLDB locations.", maprClusterConf, authority)).             }             return cldbLocations.toArray(new String[cldbLocations.size()]).         }     }     throw new IOException(String.format("Unable to find CLDB locations for cluster %s", authority)). }
false;public;0;4;;@Override public FileSystemKind getKind() {     return FileSystemKind.FILE_SYSTEM. }
