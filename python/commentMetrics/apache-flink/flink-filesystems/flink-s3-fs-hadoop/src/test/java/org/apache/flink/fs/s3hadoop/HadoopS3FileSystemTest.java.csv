commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testShadingOfAwsCredProviderConfig() {     final Configuration conf = new Configuration().     conf.setString("fs.s3a.aws.credentials.provider", "com.amazonaws.auth.ContainerCredentialsProvider").     HadoopConfigLoader configLoader = S3FileSystemFactory.createHadoopConfigLoader().     configLoader.setFlinkConfig(conf).     org.apache.hadoop.conf.Configuration hadoopConfig = configLoader.getOrLoadHadoopConfig().     assertEquals("org.apache.flink.fs.s3hadoop.shaded.com.amazonaws.auth.ContainerCredentialsProvider", hadoopConfig.get("fs.s3a.aws.credentials.provider")). }
true;public;0;8;/**  * Test forwarding of standard Hadoop-style credential keys.  */ ;// ------------------------------------------------------------------------ // These tests check that the S3FileSystemFactory properly forwards // various patterns of keys for credentials. // ------------------------------------------------------------------------ /**  * Test forwarding of standard Hadoop-style credential keys.  */ @Test public void testConfigKeysForwardingHadoopStyle() {     Configuration conf = new Configuration().     conf.setString("fs.s3a.access.key", "test_access_key").     conf.setString("fs.s3a.secret.key", "test_secret_key").     checkHadoopAccessKeys(conf, "test_access_key", "test_secret_key"). }
true;public;0;8;/**  * Test forwarding of shortened Hadoop-style credential keys.  */ ;/**  * Test forwarding of shortened Hadoop-style credential keys.  */ @Test public void testConfigKeysForwardingShortHadoopStyle() {     Configuration conf = new Configuration().     conf.setString("s3.access.key", "my_key_a").     conf.setString("s3.secret.key", "my_key_b").     checkHadoopAccessKeys(conf, "my_key_a", "my_key_b"). }
true;public;0;7;/**  * Test forwarding of shortened Presto-style credential keys.  */ ;/**  * Test forwarding of shortened Presto-style credential keys.  */ @Test public void testConfigKeysForwardingPrestoStyle() {     Configuration conf = new Configuration().     conf.setString("s3.access-key", "clé d'accès").     conf.setString("s3.secret-key", "clef secrète").     checkHadoopAccessKeys(conf, "clé d'accès", "clef secrète"). }
false;private,static;3;9;;private static void checkHadoopAccessKeys(Configuration flinkConf, String accessKey, String secretKey) {     HadoopConfigLoader configLoader = S3FileSystemFactory.createHadoopConfigLoader().     configLoader.setFlinkConfig(flinkConf).     org.apache.hadoop.conf.Configuration hadoopConf = configLoader.getOrLoadHadoopConfig().     assertEquals(accessKey, hadoopConf.get("fs.s3a.access.key", null)).     assertEquals(secretKey, hadoopConf.get("fs.s3a.secret.key", null)). }
