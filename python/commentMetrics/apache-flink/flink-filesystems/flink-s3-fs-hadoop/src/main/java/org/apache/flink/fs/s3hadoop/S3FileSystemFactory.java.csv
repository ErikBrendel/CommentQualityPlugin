commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getScheme() {     return "s3". }
false;static;0;5;;@VisibleForTesting static HadoopConfigLoader createHadoopConfigLoader() {     return new HadoopConfigLoader(FLINK_CONFIG_PREFIXES, MIRRORED_CONFIG_KEYS, "fs.s3a.", PACKAGE_PREFIXES_TO_SHADE, CONFIG_KEYS_TO_SHADE, FLINK_SHADING_PREFIX). }
false;protected;0;4;;@Override protected org.apache.hadoop.fs.FileSystem createHadoopFileSystem() {     return new S3AFileSystem(). }
false;protected;2;19;;@Override protected URI getInitURI(URI fsUri, org.apache.hadoop.conf.Configuration hadoopConfig) {     final String scheme = fsUri.getScheme().     final String authority = fsUri.getAuthority().     if (scheme == null && authority == null) {         fsUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConfig).     } else if (scheme != null && authority == null) {         URI defaultUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConfig).         if (scheme.equals(defaultUri.getScheme()) && defaultUri.getAuthority() != null) {             fsUri = defaultUri.         }     }     LOG.debug("Using scheme {} for s3a file system backing the S3 File System", fsUri).     return fsUri. }
false;protected;1;6;;@Nullable @Override protected S3AccessHelper getS3AccessHelper(FileSystem fs) {     final S3AFileSystem s3Afs = (S3AFileSystem) fs.     return new HadoopS3AccessHelper(s3Afs, s3Afs.getConf()). }
