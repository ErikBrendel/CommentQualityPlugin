commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public String startMultiPartUpload(String key) throws IOException {     return s3accessHelper.initiateMultiPartUpload(key). }
false;public;5;6;;@Override public UploadPartResult uploadPart(String key, String uploadId, int partNumber, File inputFile, long length) throws IOException {     final UploadPartRequest uploadRequest = s3accessHelper.newUploadPartRequest(key, uploadId, partNumber, MathUtils.checkedDownCast(length), null, inputFile, 0L).     return s3accessHelper.uploadPart(uploadRequest). }
false;public;2;5;;@Override public PutObjectResult putObject(String key, File inputFile) throws IOException {     final PutObjectRequest putRequest = s3accessHelper.createPutObjectRequest(key, inputFile).     return s3accessHelper.putObject(putRequest). }
false;public;5;4;;@Override public CompleteMultipartUploadResult commitMultiPartUpload(String destKey, String uploadId, List<PartETag> partETags, long length, AtomicInteger errorCount) throws IOException {     return s3accessHelper.completeMPUwithRetries(destKey, uploadId, partETags, length, errorCount). }
false;public;1;4;;@Override public boolean deleteObject(String key) throws IOException {     return s3a.delete(new org.apache.hadoop.fs.Path('/' + key), false). }
false;public;2;27;;@Override public long getObject(String key, File targetLocation) throws IOException {     long numBytes = 0L.     try (final OutputStream outStream = new FileOutputStream(targetLocation).         final org.apache.hadoop.fs.FSDataInputStream inStream = s3a.open(new org.apache.hadoop.fs.Path('/' + key))) {         final byte[] buffer = new byte[32 * 1024].         int numRead.         while ((numRead = inStream.read(buffer)) != -1) {             outStream.write(buffer, 0, numRead).             numBytes += numRead.         }     }     // some sanity checks     if (numBytes != targetLocation.length()) {         throw new IOException(String.format("Error recovering writer: " + "Downloading the last data chunk file gives incorrect length. " + "File=%d bytes, Stream=%d bytes", targetLocation.length(), numBytes)).     }     return numBytes. }
false;public;1;9;;@Override public ObjectMetadata getObjectMetadata(String key) throws IOException {     try {         return s3a.getObjectMetadata(new Path('/' + key)).     } catch (SdkBaseException e) {         throw S3AUtils.translateException("getObjectMetadata", key, e).     } }
