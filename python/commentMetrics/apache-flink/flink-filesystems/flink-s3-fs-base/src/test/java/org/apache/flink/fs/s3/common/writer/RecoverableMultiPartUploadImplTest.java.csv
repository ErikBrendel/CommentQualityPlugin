commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void before() throws IOException {     stubMultiPartUploader = new StubMultiPartUploader().     multiPartUploadUnderTest = RecoverableMultiPartUploadImpl.newUpload(stubMultiPartUploader, new MainThreadExecutor(), TEST_OBJECT_NAME). }
false;public;0;8;;@Test public void singlePartUploadShouldBeIncluded() throws IOException {     final byte[] part = bytesOf("hello world").     uploadPart(part).     assertThat(stubMultiPartUploader, hasMultiPartUploadWithPart(1, part)). }
false;public;0;8;;@Test public void incompletePartShouldBeUploadedAsIndividualObject() throws IOException {     final byte[] incompletePart = bytesOf("Hi!").     uploadObject(incompletePart).     assertThat(stubMultiPartUploader, hasUploadedObject(incompletePart)). }
false;public;0;19;;@Test public void multiplePartAndObjectUploadsShouldBeIncluded() throws IOException {     final byte[] firstCompletePart = bytesOf("hello world").     final byte[] secondCompletePart = bytesOf("hello again").     final byte[] thirdIncompletePart = bytesOf("!!!").     uploadPart(firstCompletePart).     uploadPart(secondCompletePart).     uploadObject(thirdIncompletePart).     assertThat(stubMultiPartUploader, allOf(hasMultiPartUploadWithPart(1, firstCompletePart), hasMultiPartUploadWithPart(2, secondCompletePart), hasUploadedObject(thirdIncompletePart))). }
false;public;0;13;;@Test public void multiplePartAndObjectUploadsShouldBeReflectedInRecoverable() throws IOException {     final byte[] firstCompletePart = bytesOf("hello world").     final byte[] secondCompletePart = bytesOf("hello again").     final byte[] thirdIncompletePart = bytesOf("!!!").     uploadPart(firstCompletePart).     uploadPart(secondCompletePart).     final S3Recoverable recoverable = uploadObject(thirdIncompletePart).     assertThat(recoverable, isEqualTo(thirdIncompletePart, firstCompletePart, secondCompletePart)). }
false;public;0;12;;@Test public void s3RecoverableReflectsTheLatestPartialObject() throws IOException {     final byte[] incompletePartOne = bytesOf("AB").     final byte[] incompletePartTwo = bytesOf("ABC").     S3Recoverable recoverableOne = uploadObject(incompletePartOne).     S3Recoverable recoverableTwo = uploadObject(incompletePartTwo).     assertThat(recoverableTwo.incompleteObjectName(), not(equalTo(recoverableOne.incompleteObjectName()))). }
false;public;0;9;;@Test(expected = IllegalStateException.class) public void uploadingNonClosedFileAsCompleteShouldThroughException() throws IOException {     final byte[] incompletePart = bytesOf("!!!").     final RefCountedBufferingFileStream incompletePartFile = writeContent(incompletePart).     multiPartUploadUnderTest.uploadPart(incompletePartFile). }
false;protected;1;12;;@Override protected boolean matchesSafely(StubMultiPartUploader testMultipartUploader) {     final List<TestUploadPartResult> actualCompleteParts = testMultipartUploader.getCompletePartsUploaded().     for (TestUploadPartResult result : actualCompleteParts) {         if (result.equals(expectedCompletePart)) {             return true.         }     }     return false. }
false;public;1;6;;@Override public void describeTo(Description description) {     description.appendText("a TestMultiPartUploader with complete part=").appendValue(expectedCompletePart). }
false;private,static;2;29;;// --------------------------------- Matchers --------------------------------- private static TypeSafeMatcher<StubMultiPartUploader> hasMultiPartUploadWithPart(final int partNo, final byte[] content) {     final TestUploadPartResult expectedCompletePart = createUploadPartResult(TEST_OBJECT_NAME, partNo, content).     return new TypeSafeMatcher<StubMultiPartUploader>() {          @Override         protected boolean matchesSafely(StubMultiPartUploader testMultipartUploader) {             final List<TestUploadPartResult> actualCompleteParts = testMultipartUploader.getCompletePartsUploaded().             for (TestUploadPartResult result : actualCompleteParts) {                 if (result.equals(expectedCompletePart)) {                     return true.                 }             }             return false.         }          @Override         public void describeTo(Description description) {             description.appendText("a TestMultiPartUploader with complete part=").appendValue(expectedCompletePart).         }     }. }
false;protected;1;12;;@Override protected boolean matchesSafely(StubMultiPartUploader testMultipartUploader) {     final List<TestPutObjectResult> actualIncompleteParts = testMultipartUploader.getIncompletePartsUploaded().     for (TestPutObjectResult result : actualIncompleteParts) {         if (result.equals(expectedIncompletePart)) {             return true.         }     }     return false. }
false;public;1;6;;@Override public void describeTo(Description description) {     description.appendText("a TestMultiPartUploader with complete parts=").appendValue(expectedIncompletePart). }
false;private,static;1;28;;private static TypeSafeMatcher<StubMultiPartUploader> hasUploadedObject(final byte[] content) {     final TestPutObjectResult expectedIncompletePart = createPutObjectResult(TEST_OBJECT_NAME, content).     return new TypeSafeMatcher<StubMultiPartUploader>() {          @Override         protected boolean matchesSafely(StubMultiPartUploader testMultipartUploader) {             final List<TestPutObjectResult> actualIncompleteParts = testMultipartUploader.getIncompletePartsUploaded().             for (TestPutObjectResult result : actualIncompleteParts) {                 if (result.equals(expectedIncompletePart)) {                     return true.                 }             }             return false.         }          @Override         public void describeTo(Description description) {             description.appendText("a TestMultiPartUploader with complete parts=").appendValue(expectedIncompletePart).         }     }. }
false;protected;1;9;;@Override protected boolean matchesSafely(S3Recoverable actualRecoverable) {     return Objects.equals(expectedRecoverable.getObjectName(), actualRecoverable.getObjectName()) && Objects.equals(expectedRecoverable.uploadId(), actualRecoverable.uploadId()) && expectedRecoverable.numBytesInParts() == actualRecoverable.numBytesInParts() && expectedRecoverable.incompleteObjectLength() == actualRecoverable.incompleteObjectLength() && compareLists(expectedRecoverable.parts(), actualRecoverable.parts()). }
false;private;2;6;;private boolean compareLists(final List<PartETag> first, final List<PartETag> second) {     return Arrays.equals(first.stream().map(PartETag::getETag).toArray(), second.stream().map(PartETag::getETag).toArray()). }
false;public;1;4;;@Override public void describeTo(Description description) {     description.appendText(expectedRecoverable + " with ignored LAST_PART_OBJECT_NAME."). }
false;private,static;2;29;;private static TypeSafeMatcher<S3Recoverable> isEqualTo(byte[] incompletePart, byte[]... completeParts) {     return new TypeSafeMatcher<S3Recoverable>() {          private final S3Recoverable expectedRecoverable = createS3Recoverable(incompletePart, completeParts).          @Override         protected boolean matchesSafely(S3Recoverable actualRecoverable) {             return Objects.equals(expectedRecoverable.getObjectName(), actualRecoverable.getObjectName()) && Objects.equals(expectedRecoverable.uploadId(), actualRecoverable.uploadId()) && expectedRecoverable.numBytesInParts() == actualRecoverable.numBytesInParts() && expectedRecoverable.incompleteObjectLength() == actualRecoverable.incompleteObjectLength() && compareLists(expectedRecoverable.parts(), actualRecoverable.parts()).         }          private boolean compareLists(final List<PartETag> first, final List<PartETag> second) {             return Arrays.equals(first.stream().map(PartETag::getETag).toArray(), second.stream().map(PartETag::getETag).toArray()).         }          @Override         public void describeTo(Description description) {             description.appendText(expectedRecoverable + " with ignored LAST_PART_OBJECT_NAME.").         }     }. }
false;private,static;1;3;;// ---------------------------------- Test Methods ------------------------------------------- private static byte[] bytesOf(String str) {     return str.getBytes(StandardCharsets.UTF_8). }
false;private,static;2;19;;private static S3Recoverable createS3Recoverable(byte[] incompletePart, byte[]... completeParts) {     final List<PartETag> eTags = new ArrayList<>().     int index = 1.     long bytesInPart = 0L.     for (byte[] part : completeParts) {         eTags.add(new PartETag(index, createETag(TEST_OBJECT_NAME, index))).         bytesInPart += part.length.         index++.     }     return new S3Recoverable(TEST_OBJECT_NAME, createMPUploadId(TEST_OBJECT_NAME), eTags, bytesInPart, "IGNORED-DUE-TO-RANDOMNESS", (long) incompletePart.length). }
false;private,static;2;6;;private static RecoverableMultiPartUploadImplTest.TestPutObjectResult createPutObjectResult(String key, byte[] content) {     final RecoverableMultiPartUploadImplTest.TestPutObjectResult result = new RecoverableMultiPartUploadImplTest.TestPutObjectResult().     result.setETag(createETag(key, -1)).     result.setContent(content).     return result. }
false;private,static;3;7;;private static RecoverableMultiPartUploadImplTest.TestUploadPartResult createUploadPartResult(String key, int number, byte[] payload) {     final RecoverableMultiPartUploadImplTest.TestUploadPartResult result = new RecoverableMultiPartUploadImplTest.TestUploadPartResult().     result.setETag(createETag(key, number)).     result.setPartNumber(number).     result.setContent(payload).     return result. }
false;private,static;1;3;;private static String createMPUploadId(String key) {     return "MPU-" + key. }
false;private,static;2;3;;private static String createETag(String key, int partNo) {     return "ETAG-" + key + '-' + partNo. }
false;private;1;10;;private S3Recoverable uploadObject(byte[] content) throws IOException {     final RefCountedBufferingFileStream incompletePartFile = writeContent(content).     incompletePartFile.flush().     return multiPartUploadUnderTest.snapshotAndGetRecoverable(incompletePartFile). }
false;private;1;10;;private void uploadPart(final byte[] content) throws IOException {     RefCountedBufferingFileStream partFile = writeContent(content).     // as in the production code, we assume that a file containing     // a completed part is closed before being passed to the uploader.     partFile.close().     multiPartUploadUnderTest.uploadPart(partFile). }
false;private;1;10;;private RefCountedBufferingFileStream writeContent(byte[] content) throws IOException {     final File newFile = new File(temporaryFolder.getRoot(), ".tmp_" + UUID.randomUUID()).     final OutputStream out = Files.newOutputStream(newFile.toPath(), StandardOpenOption.CREATE_NEW).     final RefCountedBufferingFileStream testStream = new RefCountedBufferingFileStream(RefCountedFile.newFile(newFile, out), BUFFER_SIZE).     testStream.write(content, 0, content.length).     return testStream. }
false;public;1;4;;@Override public void execute(Runnable command) {     command.run(). }
false;;0;3;;List<RecoverableMultiPartUploadImplTest.TestUploadPartResult> getCompletePartsUploaded() {     return completePartsUploaded. }
false;;0;3;;List<RecoverableMultiPartUploadImplTest.TestPutObjectResult> getIncompletePartsUploaded() {     return incompletePartsUploaded. }
false;public;1;4;;@Override public String startMultiPartUpload(String key) throws IOException {     return createMPUploadId(key). }
false;public;5;5;;@Override public UploadPartResult uploadPart(String key, String uploadId, int partNumber, File inputFile, long length) throws IOException {     final byte[] content = getFileContentBytes(inputFile, MathUtils.checkedDownCast(length)).     return storeAndGetUploadPartResult(key, partNumber, content). }
false;public;2;5;;@Override public PutObjectResult putObject(String key, File inputFile) throws IOException {     final byte[] content = getFileContentBytes(inputFile, MathUtils.checkedDownCast(inputFile.length())).     return storeAndGetPutObjectResult(key, content). }
false;public;1;4;;@Override public boolean deleteObject(String key) throws IOException {     return false. }
false;public;2;4;;@Override public long getObject(String key, File targetLocation) throws IOException {     return 0. }
false;public;5;9;;@Override public CompleteMultipartUploadResult commitMultiPartUpload(String key, String uploadId, List<PartETag> partETags, long length, AtomicInteger errorCount) throws IOException {     return null. }
false;public;1;4;;@Override public ObjectMetadata getObjectMetadata(String key) throws IOException {     return null. }
false;private;2;5;;private byte[] getFileContentBytes(File file, int length) throws IOException {     final byte[] content = new byte[length].     new FileInputStream(file).read(content, 0, length).     return content. }
false;private;3;5;;private RecoverableMultiPartUploadImplTest.TestUploadPartResult storeAndGetUploadPartResult(String key, int number, byte[] payload) {     final RecoverableMultiPartUploadImplTest.TestUploadPartResult result = createUploadPartResult(key, number, payload).     completePartsUploaded.add(result).     return result. }
false;private;2;5;;private RecoverableMultiPartUploadImplTest.TestPutObjectResult storeAndGetPutObjectResult(String key, byte[] payload) {     final RecoverableMultiPartUploadImplTest.TestPutObjectResult result = createPutObjectResult(key, payload).     incompletePartsUploaded.add(result).     return result. }
false;;1;3;;void setContent(byte[] payload) {     this.content = payload. }
false;public;0;3;;public byte[] getContent() {     return content. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final TestPutObjectResult that = (TestPutObjectResult) o.     // we ignore the etag as it contains randomness     return Arrays.equals(getContent(), that.getContent()). }
false;public;0;4;;@Override public int hashCode() {     return Arrays.hashCode(getContent()). }
false;public;0;7;;@Override public String toString() {     return '{' + " eTag=" + getETag() + ", payload=" + Arrays.toString(content) + '}'. }
false;;1;3;;void setContent(byte[] content) {     this.content = content. }
false;public;0;3;;public byte[] getContent() {     return content. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final TestUploadPartResult that = (TestUploadPartResult) o.     return getETag().equals(that.getETag()) && getPartNumber() == that.getPartNumber() && Arrays.equals(content, that.content). }
false;public;0;4;;@Override public int hashCode() {     return 31 * Objects.hash(getETag(), getPartNumber()) + Arrays.hashCode(getContent()). }
false;public;0;8;;@Override public String toString() {     return '{' + "etag=" + getETag() + ", partNo=" + getPartNumber() + ", content=" + Arrays.toString(content) + '}'. }
