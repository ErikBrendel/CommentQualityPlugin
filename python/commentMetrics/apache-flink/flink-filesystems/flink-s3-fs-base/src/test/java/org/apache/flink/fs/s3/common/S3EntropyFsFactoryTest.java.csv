commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testEntropyInjectionConfig() throws Exception {     final Configuration conf = new Configuration().     conf.setString("s3.entropy.key", "__entropy__").     conf.setInteger("s3.entropy.length", 7).     TestFsFactory factory = new TestFsFactory().     factory.configure(conf).     FlinkS3FileSystem fs = (FlinkS3FileSystem) factory.create(new URI("s3://test")).     assertEquals("__entropy__", fs.getEntropyInjectionKey()).     assertEquals(7, fs.generateEntropy().length()). }
true;public;0;13;/**  * Test validates that the produced by AbstractS3FileSystemFactory object will contains  * only first path from multiple paths in config.  */ ;/**  * Test validates that the produced by AbstractS3FileSystemFactory object will contains  * only first path from multiple paths in config.  */ @Test public void testMultipleTempDirsConfig() throws Exception {     final Configuration conf = new Configuration().     String dir1 = "/tmp/dir1".     String dir2 = "/tmp/dir2".     conf.setString("io.tmp.dirs", dir1 + "," + dir2).     TestFsFactory factory = new TestFsFactory().     factory.configure(conf).     FlinkS3FileSystem fs = (FlinkS3FileSystem) factory.create(new URI("s3://test")).     assertEquals(fs.getLocalTmpDir(), dir1). }
false;protected;0;4;;@Override protected org.apache.hadoop.fs.FileSystem createHadoopFileSystem() {     return Mockito.mock(org.apache.hadoop.fs.FileSystem.class). }
false;protected;2;4;;@Override protected URI getInitURI(URI fsUri, org.apache.hadoop.conf.Configuration hadoopConfig) {     return fsUri. }
false;protected;1;5;;@Nullable @Override protected S3AccessHelper getS3AccessHelper(FileSystem fs) {     return null. }
false;public;0;4;;@Override public String getScheme() {     return "test". }
