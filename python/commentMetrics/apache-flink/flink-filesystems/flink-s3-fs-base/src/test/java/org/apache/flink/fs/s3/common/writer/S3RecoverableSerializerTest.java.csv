commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void serializeEmptyS3Recoverable() throws IOException {     S3Recoverable originalEmptyRecoverable = createTestS3Recoverable(false).     byte[] serializedRecoverable = serializer.serialize(originalEmptyRecoverable).     S3Recoverable copiedEmptyRecoverable = serializer.deserialize(1, serializedRecoverable).     assertThat(originalEmptyRecoverable, isEqualTo(copiedEmptyRecoverable)). }
false;public;0;9;;@Test public void serializeS3RecoverableWithoutIncompleteObject() throws IOException {     S3Recoverable originalNoIncompletePartRecoverable = createTestS3Recoverable(false, 1, 5, 9).     byte[] serializedRecoverable = serializer.serialize(originalNoIncompletePartRecoverable).     S3Recoverable copiedNoIncompletePartRecoverable = serializer.deserialize(1, serializedRecoverable).     assertThat(originalNoIncompletePartRecoverable, isEqualTo(copiedNoIncompletePartRecoverable)). }
false;public;0;9;;@Test public void serializeS3RecoverableOnlyWithIncompleteObject() throws IOException {     S3Recoverable originalOnlyIncompletePartRecoverable = createTestS3Recoverable(true).     byte[] serializedRecoverable = serializer.serialize(originalOnlyIncompletePartRecoverable).     S3Recoverable copiedOnlyIncompletePartRecoverable = serializer.deserialize(1, serializedRecoverable).     assertThat(originalOnlyIncompletePartRecoverable, isEqualTo(copiedOnlyIncompletePartRecoverable)). }
false;public;0;9;;@Test public void serializeS3RecoverableWithCompleteAndIncompleteParts() throws IOException {     S3Recoverable originalFullRecoverable = createTestS3Recoverable(true, 1, 5, 9).     byte[] serializedRecoverable = serializer.serialize(originalFullRecoverable).     S3Recoverable copiedFullRecoverable = serializer.deserialize(1, serializedRecoverable).     assertThat(originalFullRecoverable, isEqualTo(copiedFullRecoverable)). }
false;protected;1;10;;@Override protected boolean matchesSafely(S3Recoverable actualRecoverable) {     return Objects.equals(expectedRecoverable.getObjectName(), actualRecoverable.getObjectName()) && Objects.equals(expectedRecoverable.uploadId(), actualRecoverable.uploadId()) && expectedRecoverable.numBytesInParts() == actualRecoverable.numBytesInParts() && Objects.equals(expectedRecoverable.incompleteObjectName(), actualRecoverable.incompleteObjectName()) && expectedRecoverable.incompleteObjectLength() == actualRecoverable.incompleteObjectLength() && compareLists(expectedRecoverable.parts(), actualRecoverable.parts()). }
false;private;2;6;;private boolean compareLists(final List<PartETag> first, final List<PartETag> second) {     return Arrays.equals(first.stream().map(PartETag::getETag).toArray(), second.stream().map(PartETag::getETag).toArray()). }
false;public;1;4;;@Override public void describeTo(Description description) {     description.appendText(expectedRecoverable + " with ignored LAST_PART_OBJECT_NAME."). }
false;private,static;1;27;;// --------------------------------- Matchers --------------------------------- private static TypeSafeMatcher<S3Recoverable> isEqualTo(S3Recoverable expectedRecoverable) {     return new TypeSafeMatcher<S3Recoverable>() {          @Override         protected boolean matchesSafely(S3Recoverable actualRecoverable) {             return Objects.equals(expectedRecoverable.getObjectName(), actualRecoverable.getObjectName()) && Objects.equals(expectedRecoverable.uploadId(), actualRecoverable.uploadId()) && expectedRecoverable.numBytesInParts() == actualRecoverable.numBytesInParts() && Objects.equals(expectedRecoverable.incompleteObjectName(), actualRecoverable.incompleteObjectName()) && expectedRecoverable.incompleteObjectLength() == actualRecoverable.incompleteObjectLength() && compareLists(expectedRecoverable.parts(), actualRecoverable.parts()).         }          private boolean compareLists(final List<PartETag> first, final List<PartETag> second) {             return Arrays.equals(first.stream().map(PartETag::getETag).toArray(), second.stream().map(PartETag::getETag).toArray()).         }          @Override         public void describeTo(Description description) {             description.appendText(expectedRecoverable + " with ignored LAST_PART_OBJECT_NAME.").         }     }. }
false;private,static;2;12;;// --------------------------------- Test Utils --------------------------------- private static S3Recoverable createTestS3Recoverable(boolean withIncompletePart, int... partNumbers) {     List<PartETag> etags = new ArrayList<>().     for (int i : partNumbers) {         etags.add(createEtag(i)).     }     if (withIncompletePart) {         return new S3Recoverable(TEST_OBJECT_NAME, TEST_UPLOAD_ID, etags, 12345L, INCOMPLETE_OBJECT_NAME, 54321L).     } else {         return new S3Recoverable(TEST_OBJECT_NAME, TEST_UPLOAD_ID, etags, 12345L).     } }
false;private,static;1;3;;private static PartETag createEtag(int partNumber) {     return new PartETag(partNumber, ETAG_PREFIX + partNumber). }
