commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSmallWritesGoToBuffer() throws IOException {     RefCountedBufferingFileStream stream = getStreamToTest().     final byte[] contentToWrite = bytesOf("hello").     stream.write(contentToWrite).     Assert.assertEquals(contentToWrite.length, stream.getPositionInBuffer()).     Assert.assertEquals(contentToWrite.length, stream.getPos()).     stream.close().     stream.release(). }
false;public;0;14;;@Test(expected = IOException.class) public void testExceptionWhenWritingToClosedFile() throws IOException {     RefCountedBufferingFileStream stream = getStreamToTest().     final byte[] contentToWrite = bytesOf("hello").     stream.write(contentToWrite).     Assert.assertEquals(contentToWrite.length, stream.getPositionInBuffer()).     Assert.assertEquals(contentToWrite.length, stream.getPos()).     stream.close().     stream.write(contentToWrite). }
false;public;0;13;;@Test public void testBigWritesGoToFile() throws IOException {     RefCountedBufferingFileStream stream = getStreamToTest().     final byte[] contentToWrite = bytesOf("hello big world").     stream.write(contentToWrite).     Assert.assertEquals(0, stream.getPositionInBuffer()).     Assert.assertEquals(contentToWrite.length, stream.getPos()).     stream.close().     stream.release(). }
false;public;0;19;;@Test public void testSpillingWhenBufferGetsFull() throws IOException {     RefCountedBufferingFileStream stream = getStreamToTest().     final byte[] firstContentToWrite = bytesOf("hello").     stream.write(firstContentToWrite).     Assert.assertEquals(firstContentToWrite.length, stream.getPositionInBuffer()).     Assert.assertEquals(firstContentToWrite.length, stream.getPos()).     final byte[] secondContentToWrite = bytesOf(" world!").     stream.write(secondContentToWrite).     Assert.assertEquals(secondContentToWrite.length, stream.getPositionInBuffer()).     Assert.assertEquals(firstContentToWrite.length + secondContentToWrite.length, stream.getPos()).     stream.close().     stream.release(). }
false;public;0;21;;@Test public void testFlush() throws IOException {     RefCountedBufferingFileStream stream = getStreamToTest().     final byte[] contentToWrite = bytesOf("hello").     stream.write(contentToWrite).     Assert.assertEquals(contentToWrite.length, stream.getPositionInBuffer()).     Assert.assertEquals(contentToWrite.length, stream.getPos()).     stream.flush().     Assert.assertEquals(0, stream.getPositionInBuffer()).     Assert.assertEquals(contentToWrite.length, stream.getPos()).     final byte[] contentRead = new byte[contentToWrite.length].     new FileInputStream(stream.getInputFile()).read(contentRead, 0, contentRead.length).     Assert.assertTrue(Arrays.equals(contentToWrite, contentRead)).     stream.release(). }
false;private;0;3;;// ---------------------------- Utility Classes ---------------------------- private RefCountedBufferingFileStream getStreamToTest() throws IOException {     return new RefCountedBufferingFileStream(getRefCountedFileWithContent(), BUFFER_SIZE). }
false;private;0;6;;private RefCountedFile getRefCountedFileWithContent() throws IOException {     final File newFile = new File(temporaryFolder.getRoot(), ".tmp_" + UUID.randomUUID()).     final OutputStream out = Files.newOutputStream(newFile.toPath(), StandardOpenOption.CREATE_NEW).     return RefCountedFile.newFile(newFile, out). }
false;private,static;1;3;;private static byte[] bytesOf(String str) {     return str.getBytes(StandardCharsets.UTF_8). }
