commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Initializes a Multi-Part Upload.  *  * @param key the key whose value we want to upload in parts.  * @return The id of the initiated Multi-Part Upload which will be used during the uploading of the parts.  * @throws IOException  */ ;/**  * Initializes a Multi-Part Upload.  *  * @param key the key whose value we want to upload in parts.  * @return The id of the initiated Multi-Part Upload which will be used during the uploading of the parts.  * @throws IOException  */ String startMultiPartUpload(String key) throws IOException.
true;;5;1;/**  * Uploads a part and associates it with the MPU with the provided {@code uploadId}.  *  * @param key the key this MPU is associated with.  * @param uploadId the id of the MPU.  * @param partNumber the number of the part being uploaded (has to be in [1 ... 10000]).  * @param inputFile the (local) file holding the part to be uploaded.  * @param length the length of the part.  * @return The {@link UploadPartResult result} of the attempt to upload the part.  * @throws IOException  */ ;/**  * Uploads a part and associates it with the MPU with the provided {@code uploadId}.  *  * @param key the key this MPU is associated with.  * @param uploadId the id of the MPU.  * @param partNumber the number of the part being uploaded (has to be in [1 ... 10000]).  * @param inputFile the (local) file holding the part to be uploaded.  * @param length the length of the part.  * @return The {@link UploadPartResult result} of the attempt to upload the part.  * @throws IOException  */ UploadPartResult uploadPart(String key, String uploadId, int partNumber, File inputFile, long length) throws IOException.
true;;2;1;/**  * Uploads an object to S3. Contrary to the {@link #uploadPart(String, String, int, File, long)} method,  * this object is not going to be associated to any MPU and, as such, it is not subject to the garbage collection  * policies specified for your S3 bucket.  *  * @param key the key used to identify this part.  * @param inputFile the (local) file holding the data to be uploaded.  * @return The {@link PutObjectResult result} of the attempt to stage the incomplete part.  * @throws IOException  */ ;/**  * Uploads an object to S3. Contrary to the {@link #uploadPart(String, String, int, File, long)} method,  * this object is not going to be associated to any MPU and, as such, it is not subject to the garbage collection  * policies specified for your S3 bucket.  *  * @param key the key used to identify this part.  * @param inputFile the (local) file holding the data to be uploaded.  * @return The {@link PutObjectResult result} of the attempt to stage the incomplete part.  * @throws IOException  */ PutObjectResult putObject(String key, File inputFile) throws IOException.
true;;5;1;/**  * Finalizes a Multi-Part Upload.  *  * @param key the key identifying the object we finished uploading.  * @param uploadId the id of the MPU.  * @param partETags the list of {@link PartETag ETags} associated with this MPU.  * @param length the size of the uploaded object.  * @param errorCount a counter that will be used to count any failed attempts to commit the MPU.  * @return The {@link CompleteMultipartUploadResult result} of the attempt to finalize the MPU.  * @throws IOException  */ ;/**  * Finalizes a Multi-Part Upload.  *  * @param key the key identifying the object we finished uploading.  * @param uploadId the id of the MPU.  * @param partETags the list of {@link PartETag ETags} associated with this MPU.  * @param length the size of the uploaded object.  * @param errorCount a counter that will be used to count any failed attempts to commit the MPU.  * @return The {@link CompleteMultipartUploadResult result} of the attempt to finalize the MPU.  * @throws IOException  */ CompleteMultipartUploadResult commitMultiPartUpload(String key, String uploadId, List<PartETag> partETags, long length, AtomicInteger errorCount) throws IOException.
true;;1;1;/**  * Deletes the object associated with the provided key.  *  * @param key The key to be deleted.  * @return {@code true} if the resources were successfully freed, {@code false} otherwise  * (e.g. the file to be deleted was not there).  * @throws IOException  */ ;/**  * Deletes the object associated with the provided key.  *  * @param key The key to be deleted.  * @return {@code true} if the resources were successfully freed, {@code false} otherwise  * (e.g. the file to be deleted was not there).  * @throws IOException  */ boolean deleteObject(String key) throws IOException.
true;;2;1;/**  * Gets the object associated with the provided {@code key} from S3 and  * puts it in the provided {@code targetLocation}.  *  * @param key the key of the object to fetch.  * @param targetLocation the file to read the object to.  * @return The number of bytes read.  * @throws IOException  */ ;/**  * Gets the object associated with the provided {@code key} from S3 and  * puts it in the provided {@code targetLocation}.  *  * @param key the key of the object to fetch.  * @param targetLocation the file to read the object to.  * @return The number of bytes read.  * @throws IOException  */ long getObject(String key, File targetLocation) throws IOException.
true;;1;1;/**  * Fetches the metadata associated with a given key on S3.  *  * @param key the key.  * @return The associated {@link ObjectMetadata}.  * @throws IOException  */ ;/**  * Fetches the metadata associated with a given key on S3.  *  * @param key the key.  * @return The associated {@link ObjectMetadata}.  * @throws IOException  */ ObjectMetadata getObjectMetadata(String key) throws IOException.
