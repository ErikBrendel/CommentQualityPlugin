commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public void commit() throws IOException {     if (totalLength > 0L) {         LOG.info("Committing {} with MPU ID {}", objectName, uploadId).         final AtomicInteger errorCount = new AtomicInteger().         s3AccessHelper.commitMultiPartUpload(objectName, uploadId, parts, totalLength, errorCount).         if (errorCount.get() == 0) {             LOG.debug("Successfully committed {} with MPU ID {}", objectName, uploadId).         } else {             LOG.debug("Successfully committed {} with MPU ID {} after {} retries.", objectName, uploadId, errorCount.get()).         }     } else {         LOG.debug("No data to commit for file: {}", objectName).     } }
false;public;0;31;;@Override public void commitAfterRecovery() throws IOException {     if (totalLength > 0L) {         LOG.info("Trying to commit after recovery {} with MPU ID {}", objectName, uploadId).         try {             s3AccessHelper.commitMultiPartUpload(objectName, uploadId, parts, totalLength, new AtomicInteger()).         } catch (IOException e) {             LOG.info("Failed to commit after recovery {} with MPU ID {}. " + "Checking if file was committed before...", objectName, uploadId).             LOG.trace("Exception when committing:", e).             try {                 ObjectMetadata metadata = s3AccessHelper.getObjectMetadata(objectName).                 if (totalLength != metadata.getContentLength()) {                     String message = String.format("Inconsistent result for object %s: conflicting lengths. " + "Recovered committer for upload %s indicates %s bytes, present object is %s bytes", objectName, uploadId, totalLength, metadata.getContentLength()).                     LOG.warn(message).                     throw new IOException(message, e).                 }             } catch (FileNotFoundException fnf) {                 LOG.warn("Object {} not existing after failed recovery commit with MPU ID {}", objectName, uploadId).                 throw new IOException(String.format("Recovering commit failed for object %s. " + "Object does not exist and MultiPart Upload %s is not valid.", objectName, uploadId), e).             }         }     } else {         LOG.debug("No data to commit for file: {}", objectName).     } }
false;public;0;4;;@Override public RecoverableWriter.CommitRecoverable getRecoverable() {     return new S3Recoverable(objectName, uploadId, parts, totalLength). }
