commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public RecoverableFsDataOutputStream open(Path path) throws IOException {     final RecoverableMultiPartUpload upload = uploadFactory.getNewRecoverableUpload(path).     return S3RecoverableFsDataOutputStream.newStream(upload, tempFileCreator, userDefinedMinPartSize). }
false;public;1;6;;@Override public Committer recoverForCommit(CommitRecoverable recoverable) throws IOException {     final S3Recoverable s3recoverable = castToS3Recoverable(recoverable).     final S3RecoverableFsDataOutputStream recovered = recover(s3recoverable).     return recovered.closeForCommit(). }
false;public;1;12;;@Override public S3RecoverableFsDataOutputStream recover(ResumeRecoverable recoverable) throws IOException {     final S3Recoverable s3recoverable = castToS3Recoverable(recoverable).     final RecoverableMultiPartUpload upload = uploadFactory.recoverRecoverableUpload(s3recoverable).     return S3RecoverableFsDataOutputStream.recoverStream(upload, tempFileCreator, userDefinedMinPartSize, s3recoverable.numBytesInParts()). }
false;public;0;4;;@Override public boolean requiresCleanupOfRecoverableState() {     return true. }
false;public;1;6;;@Override public boolean cleanupRecoverableState(ResumeRecoverable resumable) throws IOException {     final S3Recoverable s3recoverable = castToS3Recoverable(resumable).     final String smallPartObjectToDelete = s3recoverable.incompleteObjectName().     return smallPartObjectToDelete != null && s3AccessHelper.deleteObject(smallPartObjectToDelete). }
false;public;0;5;;@Override @SuppressWarnings({ "rawtypes", "unchecked" }) public SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer() {     return (SimpleVersionedSerializer) S3RecoverableSerializer.INSTANCE. }
false;public;0;5;;@Override @SuppressWarnings({ "rawtypes", "unchecked" }) public SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer() {     return (SimpleVersionedSerializer) S3RecoverableSerializer.INSTANCE. }
false;public;0;4;;@Override public boolean supportsResume() {     return true. }
false;private,static;1;7;;// --------------------------- Utils --------------------------- private static S3Recoverable castToS3Recoverable(CommitRecoverable recoverable) {     if (recoverable instanceof S3Recoverable) {         return (S3Recoverable) recoverable.     }     throw new IllegalArgumentException("S3 File System cannot recover recoverable for other file system: " + recoverable). }
false;public,static;6;20;;// --------------------------- Static Constructor --------------------------- public static S3RecoverableWriter writer(final FileSystem fs, final FunctionWithException<File, RefCountedFile, IOException> tempFileCreator, final S3AccessHelper s3AccessHelper, final Executor uploadThreadPool, final long userDefinedMinPartSize, final int maxConcurrentUploadsPerStream) {     checkArgument(userDefinedMinPartSize >= S3_MULTIPART_MIN_PART_SIZE).     final S3RecoverableMultipartUploadFactory uploadFactory = new S3RecoverableMultipartUploadFactory(fs, s3AccessHelper, maxConcurrentUploadsPerStream, uploadThreadPool, tempFileCreator).     return new S3RecoverableWriter(s3AccessHelper, uploadFactory, tempFileCreator, userDefinedMinPartSize). }
