commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void setFlinkConfig(Configuration config) {     flinkConfig = config.     hadoopConfig = null. }
true;public;0;15;/**  * get the loaded Hadoop config (or fall back to one loaded from the classpath).  */ ;/**  * get the loaded Hadoop config (or fall back to one loaded from the classpath).  */ public org.apache.hadoop.conf.Configuration getOrLoadHadoopConfig() {     org.apache.hadoop.conf.Configuration hadoopConfig = this.hadoopConfig.     if (hadoopConfig == null) {         if (flinkConfig != null) {             hadoopConfig = mirrorCertainHadoopConfig(loadHadoopConfigFromFlink()).         } else {             LOG.warn("Flink configuration is not set prior to loading this configuration." + " Cannot forward configuration keys from Flink configuration.").             hadoopConfig = new org.apache.hadoop.conf.Configuration().         }     }     this.hadoopConfig = hadoopConfig.     return hadoopConfig. }
true;private;0;15;// add additional config entries from the Flink config to the Hadoop config ;// add additional config entries from the Flink config to the Hadoop config private org.apache.hadoop.conf.Configuration loadHadoopConfigFromFlink() {     org.apache.hadoop.conf.Configuration hadoopConfig = new org.apache.hadoop.conf.Configuration().     for (String key : flinkConfig.keySet()) {         for (String prefix : flinkConfigPrefixes) {             if (key.startsWith(prefix)) {                 String newKey = hadoopConfigPrefix + key.substring(prefix.length()).                 String newValue = fixHadoopConfig(key, flinkConfig.getString(key, null)).                 hadoopConfig.set(newKey, newValue).                 LOG.debug("Adding Flink config entry for {} as {} to Hadoop config", key, newKey).             }         }     }     return hadoopConfig. }
true;private;1;10;// with different keys ;// mirror certain keys to make use more uniform across implementations // with different keys private org.apache.hadoop.conf.Configuration mirrorCertainHadoopConfig(org.apache.hadoop.conf.Configuration hadoopConfig) {     for (String[] mirrored : mirroredConfigKeys) {         String value = hadoopConfig.get(mirrored[0], null).         if (value != null) {             hadoopConfig.set(mirrored[1], value).         }     }     return hadoopConfig. }
false;private;2;4;;private String fixHadoopConfig(String key, String value) {     return key != null && configKeysToShade.contains(key) ? shadeClassConfig(value) : value. }
false;private;1;4;;private String shadeClassConfig(String classConfig) {     return packagePrefixesToShade.stream().anyMatch(classConfig::startsWith) ? flinkShadingPrefix + classConfig : classConfig. }
