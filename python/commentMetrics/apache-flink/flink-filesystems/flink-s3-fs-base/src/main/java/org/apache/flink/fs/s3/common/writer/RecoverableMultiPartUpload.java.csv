commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Creates a snapshot of this MultiPartUpload (MPU) and returns a  * {@link RecoverableFsDataOutputStream.Committer Committer} which can be used to finalize the MPU.  *  * @return The {@link RecoverableFsDataOutputStream.Committer Committer} that can be used to complete the MPU.  */ ;/**  * Creates a snapshot of this MultiPartUpload (MPU) and returns a  * {@link RecoverableFsDataOutputStream.Committer Committer} which can be used to finalize the MPU.  *  * @return The {@link RecoverableFsDataOutputStream.Committer Committer} that can be used to complete the MPU.  */ RecoverableFsDataOutputStream.Committer snapshotAndGetCommitter() throws IOException.
true;;1;2;/**  * Creates a snapshot of this MultiPartUpload, from which the upload can be resumed.  *  * @param incompletePartFile The file containing the in-progress part which has not yet reached the minimum  *                           part size in order to be uploaded.  *  * @return The {@link RecoverableWriter.ResumeRecoverable ResumeRecoverable} which  * can be used to resume the upload.  */ ;/**  * Creates a snapshot of this MultiPartUpload, from which the upload can be resumed.  *  * @param incompletePartFile The file containing the in-progress part which has not yet reached the minimum  *                           part size in order to be uploaded.  *  * @return The {@link RecoverableWriter.ResumeRecoverable ResumeRecoverable} which  * can be used to resume the upload.  */ RecoverableWriter.ResumeRecoverable snapshotAndGetRecoverable(@Nullable final RefCountedFSOutputStream incompletePartFile) throws IOException.
true;;1;1;/**  * Adds a part to the uploads without any size limitations.  *  * @param file The file with the part data.  *  * @throws IOException If this method throws an exception, the RecoverableS3MultiPartUpload  *                     should not be used any more, but recovered instead.  */ ;/**  * Adds a part to the uploads without any size limitations.  *  * @param file The file with the part data.  *  * @throws IOException If this method throws an exception, the RecoverableS3MultiPartUpload  *                     should not be used any more, but recovered instead.  */ void uploadPart(final RefCountedFSOutputStream file) throws IOException.
true;;0;1;/**  * In case of an incomplete part which had not reached the minimum part size at the time of  * snapshotting, this returns a file containing the in-progress part at which writing can be resumed.  */ ;/**  * In case of an incomplete part which had not reached the minimum part size at the time of  * snapshotting, this returns a file containing the in-progress part at which writing can be resumed.  */ Optional<File> getIncompletePart().
