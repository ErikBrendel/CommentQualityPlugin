commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@Parameterized.Parameters(name = "Scheme = {0}") public static List<String> parameters() {     return Arrays.asList("s3", "s3p"). }
false;public,static;0;17;;@BeforeClass public static void setup() throws IOException {     S3TestCredentials.assumeCredentialsAvailable().     // initialize configuration with valid credentials     final Configuration conf = new Configuration().     conf.setString("s3.access.key", S3TestCredentials.getS3AccessKey()).     conf.setString("s3.secret.key", S3TestCredentials.getS3SecretKey()).     FileSystem.initialize(conf).     basePath = new Path(S3TestCredentials.getTestBucketUri() + TEST_DATA_DIR).     fs = basePath.getFileSystem().     deadline = System.nanoTime() + 30_000_000_000L.     // check for uniqueness of the test directory     // directory must not yet exist     assertFalse(fs.exists(basePath)). }
false;public;0;64;;@Test public void testConfigKeysForwarding() throws Exception {     final Path path = basePath.     // access without credentials should fail     {         Configuration conf = new Configuration().         // fail fast and do not fall back to trying EC2 credentials         conf.setString(S3_USE_INSTANCE_CREDENTIALS, "false").         FileSystem.initialize(conf).         try {             path.getFileSystem().exists(path).             fail("should fail with an exception").         } catch (IOException ignored) {         }     }     // standard Presto-style credential keys     {         Configuration conf = new Configuration().         conf.setString(S3_USE_INSTANCE_CREDENTIALS, "false").         conf.setString("presto.s3.access-key", S3TestCredentials.getS3AccessKey()).         conf.setString("presto.s3.secret-key", S3TestCredentials.getS3SecretKey()).         FileSystem.initialize(conf).         path.getFileSystem().exists(path).     }     // shortened Presto-style credential keys     {         Configuration conf = new Configuration().         conf.setString(S3_USE_INSTANCE_CREDENTIALS, "false").         conf.setString("s3.access-key", S3TestCredentials.getS3AccessKey()).         conf.setString("s3.secret-key", S3TestCredentials.getS3SecretKey()).         FileSystem.initialize(conf).         path.getFileSystem().exists(path).     }     // shortened Hadoop-style credential keys     {         Configuration conf = new Configuration().         conf.setString(S3_USE_INSTANCE_CREDENTIALS, "false").         conf.setString("s3.access.key", S3TestCredentials.getS3AccessKey()).         conf.setString("s3.secret.key", S3TestCredentials.getS3SecretKey()).         FileSystem.initialize(conf).         path.getFileSystem().exists(path).     }     // shortened Hadoop-style credential keys with presto prefix     {         Configuration conf = new Configuration().         conf.setString(S3_USE_INSTANCE_CREDENTIALS, "false").         conf.setString("presto.s3.access.key", S3TestCredentials.getS3AccessKey()).         conf.setString("presto.s3.secret.key", S3TestCredentials.getS3SecretKey()).         FileSystem.initialize(conf).         path.getFileSystem().exists(path).     }     // re-set configuration     FileSystem.initialize(new Configuration()). }
false;protected;1;5;;@Override protected void checkEmptyDirectory(Path path) throws IOException, InterruptedException { // seems the presto file system does not assume existence of empty directories in S3 // do nothing as before }
