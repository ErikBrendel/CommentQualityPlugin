commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testConfigPropagation() throws Exception {     final Configuration conf = new Configuration().     conf.setString("s3.access-key", "test_access_key_id").     conf.setString("s3.secret-key", "test_secret_access_key").     FileSystem.initialize(conf).     FileSystem fs = FileSystem.get(new URI("s3://test")).     validateBasicCredentials(fs). }
false;public;0;11;;@Test public void testConfigPropagationWithPrestoPrefix() throws Exception {     final Configuration conf = new Configuration().     conf.setString("presto.s3.access-key", "test_access_key_id").     conf.setString("presto.s3.secret-key", "test_secret_access_key").     FileSystem.initialize(conf).     FileSystem fs = FileSystem.get(new URI("s3://test")).     validateBasicCredentials(fs). }
false;public;0;11;;@Test public void testConfigPropagationAlternateStyle() throws Exception {     final Configuration conf = new Configuration().     conf.setString("s3.access.key", "test_access_key_id").     conf.setString("s3.secret.key", "test_secret_access_key").     FileSystem.initialize(conf).     FileSystem fs = FileSystem.get(new URI("s3://test")).     validateBasicCredentials(fs). }
false;public;0;12;;@Test public void testShadingOfAwsCredProviderConfig() {     final Configuration conf = new Configuration().     conf.setString("presto.s3.credentials-provider", "com.amazonaws.auth.ContainerCredentialsProvider").     HadoopConfigLoader configLoader = S3FileSystemFactory.createHadoopConfigLoader().     configLoader.setFlinkConfig(conf).     org.apache.hadoop.conf.Configuration hadoopConfig = configLoader.getOrLoadHadoopConfig().     assertEquals("org.apache.flink.fs.s3presto.shaded.com.amazonaws.auth.ContainerCredentialsProvider", hadoopConfig.get("presto.s3.credentials-provider")). }
false;private,static;1;11;;// ------------------------------------------------------------------------ // utilities // ------------------------------------------------------------------------ private static void validateBasicCredentials(FileSystem fs) throws Exception {     assertTrue(fs instanceof FlinkS3FileSystem).     org.apache.hadoop.fs.FileSystem hadoopFs = ((FlinkS3FileSystem) fs).getHadoopFileSystem().     assertTrue(hadoopFs instanceof PrestoS3FileSystem).     try (PrestoS3FileSystem prestoFs = (PrestoS3FileSystem) hadoopFs) {         AWSCredentialsProvider provider = getAwsCredentialsProvider(prestoFs).         assertTrue(provider instanceof AWSStaticCredentialsProvider).     } }
false;private,static;1;9;;private static AWSCredentialsProvider getAwsCredentialsProvider(PrestoS3FileSystem fs) throws Exception {     Field amazonS3field = PrestoS3FileSystem.class.getDeclaredField("s3").     amazonS3field.setAccessible(true).     AmazonS3Client amazonS3 = (AmazonS3Client) amazonS3field.get(fs).     Field providerField = AmazonS3Client.class.getDeclaredField("awsCredentialsProvider").     providerField.setAccessible(true).     return (AWSCredentialsProvider) providerField.get(amazonS3). }
