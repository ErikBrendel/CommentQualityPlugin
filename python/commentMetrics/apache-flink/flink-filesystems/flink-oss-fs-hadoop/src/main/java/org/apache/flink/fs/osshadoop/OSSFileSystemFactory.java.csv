commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getScheme() {     return "oss". }
false;public;1;5;;@Override public void configure(Configuration config) {     flinkConfig = config.     hadoopConfig = null. }
false;public;1;20;;@Override public FileSystem create(URI fsUri) throws IOException {     this.hadoopConfig = getHadoopConfiguration().     final String scheme = fsUri.getScheme().     final String authority = fsUri.getAuthority().     if (scheme == null && authority == null) {         fsUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConfig).     } else if (scheme != null && authority == null) {         URI defaultUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConfig).         if (scheme.equals(defaultUri.getScheme()) && defaultUri.getAuthority() != null) {             fsUri = defaultUri.         }     }     final AliyunOSSFileSystem fs = new AliyunOSSFileSystem().     fs.initialize(fsUri, hadoopConfig).     return new HadoopFileSystem(fs). }
false;;0;23;;@VisibleForTesting org.apache.hadoop.conf.Configuration getHadoopConfiguration() {     org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration().     if (flinkConfig == null) {         return conf.     }     // read all configuration with prefix 'FLINK_CONFIG_PREFIXES'     for (String key : flinkConfig.keySet()) {         for (String prefix : FLINK_CONFIG_PREFIXES) {             if (key.startsWith(prefix)) {                 String value = flinkConfig.getString(key, null).                 conf.set(key, value).                 if (CONFIG_KEYS_TO_SHADE.contains(key)) {                     conf.set(key, FLINK_SHADING_PREFIX + value).                 }                 LOG.debug("Adding Flink config entry for {} as {} to Hadoop config", key, conf.get(key)).             }         }     }     return conf. }
