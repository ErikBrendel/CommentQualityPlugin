commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;11;;public static void checkPathExistence(Path path, boolean expectedExists, long deadline) throws IOException, InterruptedException {     if (deadline == 0) {         // strongly consistency         assertEquals(expectedExists, fs.exists(path)).     } else {         // eventually consistency         checkPathEventualExistence(fs, path, expectedExists, deadline).     } }
false;protected;1;3;;protected void checkEmptyDirectory(Path path) throws IOException, InterruptedException {     checkPathExistence(path, true, deadline). }
false;public;0;28;;@Test public void testSimpleFileWriteAndRead() throws Exception {     final String testLine = "Hello Upload!".     final Path path = new Path(basePath, "test.txt").     try {         try (FSDataOutputStream out = fs.create(path, FileSystem.WriteMode.OVERWRITE).             OutputStreamWriter writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {             writer.write(testLine).         }         // just in case, wait for the path to exist         checkPathExistence(path, true, deadline).         try (FSDataInputStream in = fs.open(path).             InputStreamReader ir = new InputStreamReader(in, StandardCharsets.UTF_8).             BufferedReader reader = new BufferedReader(ir)) {             String line = reader.readLine().             assertEquals(testLine, line).         }     } finally {         fs.delete(path, false).     }     checkPathExistence(path, false, deadline). }
false;public;0;48;;@Test public void testDirectoryListing() throws Exception {     final Path directory = new Path(basePath, "testdir/").     // directory must not yet exist     assertFalse(fs.exists(directory)).     try {         // create directory         assertTrue(fs.mkdirs(directory)).         checkEmptyDirectory(directory).         // directory empty         assertEquals(0, fs.listStatus(directory).length).         // create some files         final int numFiles = 3.         for (int i = 0. i < numFiles. i++) {             Path file = new Path(directory, "/file-" + i).             try (FSDataOutputStream out = fs.create(file, FileSystem.WriteMode.OVERWRITE).                 OutputStreamWriter writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {                 writer.write("hello-" + i + "\n").             }             // just in case, wait for the file to exist (should then also be reflected in the             // directory's file list below)             checkPathExistence(file, true, deadline).         }         FileStatus[] files = fs.listStatus(directory).         assertNotNull(files).         assertEquals(3, files.length).         for (FileStatus status : files) {             assertFalse(status.isDir()).         }         // now that there are files, the directory must exist         assertTrue(fs.exists(directory)).     } finally {         // clean up         fs.delete(directory, true).     }     // now directory must be gone     checkPathExistence(directory, false, deadline). }
false;public,static;0;15;;@AfterClass public static void teardown() throws IOException, InterruptedException {     try {         if (fs != null) {             // clean up             fs.delete(basePath, true).             // now directory must be gone             checkPathExistence(basePath, false, deadline).         }     } finally {         FileSystem.initialize(new Configuration()).     } }
