commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public RecoverableFsDataOutputStream open(Path filePath) throws IOException {     final org.apache.hadoop.fs.Path targetFile = HadoopFileSystem.toHadoopPath(filePath).     final org.apache.hadoop.fs.Path tempFile = generateStagingTempFilePath(fs, targetFile).     return new HadoopRecoverableFsDataOutputStream(fs, targetFile, tempFile). }
false;public;1;10;;@Override public RecoverableFsDataOutputStream recover(ResumeRecoverable recoverable) throws IOException {     if (recoverable instanceof HadoopFsRecoverable) {         return new HadoopRecoverableFsDataOutputStream(fs, (HadoopFsRecoverable) recoverable).     } else {         throw new IllegalArgumentException("Hadoop File System cannot recover a recoverable for another file system: " + recoverable).     } }
false;public;0;4;;@Override public boolean requiresCleanupOfRecoverableState() {     return false. }
false;public;1;4;;@Override public boolean cleanupRecoverableState(ResumeRecoverable resumable) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;10;;@Override public Committer recoverForCommit(CommitRecoverable recoverable) throws IOException {     if (recoverable instanceof HadoopFsRecoverable) {         return new HadoopRecoverableFsDataOutputStream.HadoopFsCommitter(fs, (HadoopFsRecoverable) recoverable).     } else {         throw new IllegalArgumentException("Hadoop File System  cannot recover a recoverable for another file system: " + recoverable).     } }
false;public;0;8;;@Override public SimpleVersionedSerializer<CommitRecoverable> getCommitRecoverableSerializer() {     @SuppressWarnings("unchecked")     SimpleVersionedSerializer<CommitRecoverable> typedSerializer = (SimpleVersionedSerializer<CommitRecoverable>) (SimpleVersionedSerializer<?>) HadoopRecoverableSerializer.INSTANCE.     return typedSerializer. }
false;public;0;8;;@Override public SimpleVersionedSerializer<ResumeRecoverable> getResumeRecoverableSerializer() {     @SuppressWarnings("unchecked")     SimpleVersionedSerializer<ResumeRecoverable> typedSerializer = (SimpleVersionedSerializer<ResumeRecoverable>) (SimpleVersionedSerializer<?>) HadoopRecoverableSerializer.INSTANCE.     return typedSerializer. }
false;public;0;4;;@Override public boolean supportsResume() {     return true. }
false;static;2;20;;@VisibleForTesting static org.apache.hadoop.fs.Path generateStagingTempFilePath(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path targetFile) throws IOException {     checkArgument(targetFile.isAbsolute(), "targetFile must be absolute").     final org.apache.hadoop.fs.Path parent = targetFile.getParent().     final String name = targetFile.getName().     checkArgument(parent != null, "targetFile must not be the root directory").     while (true) {         org.apache.hadoop.fs.Path candidate = new org.apache.hadoop.fs.Path(parent, "." + name + ".inprogress." + UUID.randomUUID().toString()).         if (!fs.exists(candidate)) {             return candidate.         }     } }
