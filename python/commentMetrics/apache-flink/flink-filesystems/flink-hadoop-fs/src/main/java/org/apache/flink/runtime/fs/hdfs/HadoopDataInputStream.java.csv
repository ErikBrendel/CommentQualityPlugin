commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public void seek(long seekPos) throws IOException {     // We do some optimizations to avoid that some implementations of distributed FS perform     // expensive seeks when they are actually not needed.     long delta = seekPos - getPos().     if (delta > 0L && delta <= MIN_SKIP_BYTES) {         // Instead of a small forward seek, we skip over the gap         skipFully(delta).     } else if (delta != 0L) {         // For larger gaps and backward seeks, we do a real seek         forceSeek(seekPos).     } // Do nothing if delta is zero. }
false;public;0;4;;@Override public long getPos() throws IOException {     return fsDataInputStream.getPos(). }
false;public;0;4;;@Override public int read() throws IOException {     return fsDataInputStream.read(). }
false;public;0;4;;@Override public void close() throws IOException {     fsDataInputStream.close(). }
false;public;3;4;;@Override public int read(@Nonnull byte[] buffer, int offset, int length) throws IOException {     return fsDataInputStream.read(buffer, offset, length). }
false;public;0;4;;@Override public int available() throws IOException {     return fsDataInputStream.available(). }
false;public;1;4;;@Override public long skip(long n) throws IOException {     return fsDataInputStream.skip(n). }
true;public;0;3;/**  * Gets the wrapped Hadoop input stream.  * @return The wrapped Hadoop input stream.  */ ;/**  * Gets the wrapped Hadoop input stream.  * @return The wrapped Hadoop input stream.  */ public org.apache.hadoop.fs.FSDataInputStream getHadoopInputStream() {     return fsDataInputStream. }
true;public;1;3;/**  * Positions the stream to the given location. In contrast to {@link #seek(long)}, this method will  * always issue a "seek" command to the dfs and may not replace it by {@link #skip(long)} for small seeks.  *  * <p>Notice that the underlying DFS implementation can still decide to do skip instead of seek.  *  * @param seekPos the position to seek to.  * @throws IOException  */ ;/**  * Positions the stream to the given location. In contrast to {@link #seek(long)}, this method will  * always issue a "seek" command to the dfs and may not replace it by {@link #skip(long)} for small seeks.  *  * <p>Notice that the underlying DFS implementation can still decide to do skip instead of seek.  *  * @param seekPos the position to seek to.  * @throws IOException  */ public void forceSeek(long seekPos) throws IOException {     fsDataInputStream.seek(seekPos). }
true;public;1;5;/**  * Skips over a given amount of bytes in the stream.  *  * @param bytes the number of bytes to skip.  * @throws IOException  */ ;/**  * Skips over a given amount of bytes in the stream.  *  * @param bytes the number of bytes to skip.  * @throws IOException  */ public void skipFully(long bytes) throws IOException {     while (bytes > 0) {         bytes -= fsDataInputStream.skip(bytes).     } }
