commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Override public String[] getHosts() throws IOException {     /**      * Unfortunately, the Hadoop API is not precise about if the list returned by BlockLocation.getHosts() contains      * the hostnames with their respective domain suffix or not (FQDN or not). We have witnessed both versions,      * depending on the cluster's network configuration. As a workaround, we therefore strip every hostname to make      * sure it does not contain the domain suffix.      */     if (this.hostnames == null) {         final String[] hadoopHostnames = blockLocation.getHosts().         this.hostnames = new String[hadoopHostnames.length].         for (int i = 0. i < hadoopHostnames.length. ++i) {             this.hostnames[i] = stripHostname(hadoopHostnames[i]).         }     }     return this.hostnames. }
true;private,static;1;20;/**  * Looks for a domain suffix in a FQDN and strips it if present.  *  * @param originalHostname  *        the original hostname, possibly an FQDN  * @return the stripped hostname without the domain suffix  */ ;/**  * Looks for a domain suffix in a FQDN and strips it if present.  *  * @param originalHostname  *        the original hostname, possibly an FQDN  * @return the stripped hostname without the domain suffix  */ private static String stripHostname(final String originalHostname) {     // Check if the hostname domains the domain separator character     final int index = originalHostname.indexOf(DOMAIN_SEPARATOR).     if (index == -1) {         return originalHostname.     }     // Make sure we are not stripping an IPv4 address     final Matcher matcher = IPV4_PATTERN.matcher(originalHostname).     if (matcher.matches()) {         return originalHostname.     }     if (index == 0) {         throw new IllegalStateException("Hostname " + originalHostname + " starts with a " + DOMAIN_SEPARATOR).     }     return originalHostname.substring(0, index). }
false;public;0;5;;@Override public long getLength() {     return this.blockLocation.getLength(). }
false;public;0;5;;@Override public long getOffset() {     return this.blockLocation.getOffset(). }
false;public;1;7;;@Override public int compareTo(final BlockLocation o) {     final long diff = getOffset() - o.getOffset().     return diff < 0 ? -1 : diff > 0 ? 1 : 0. }
