# id;timestamp;commentText;codeText;commentWords;codeWords
JarHelper -> public JarHelper();1452779215;Instantiates a new JarHelper.;public JarHelper() {};instantiates,a,new,jar,helper;public,jar,helper
JarHelper -> public JarHelper();1461591030;Instantiates a new JarHelper.;public JarHelper() {};instantiates,a,new,jar,helper;public,jar,helper
JarHelper -> public JarHelper();1496260672;Instantiates a new JarHelper.;public JarHelper() {_	};instantiates,a,new,jar,helper;public,jar,helper
JarHelper -> public void unjarDir(File jarFile, File destDir) throws IOException;1452779215;Unjars a given jar file into a given directory.;public void unjarDir(File jarFile, File destDir) throws IOException {_	BufferedOutputStream dest = null__	FileInputStream fis = new FileInputStream(jarFile)__	unjar(fis, destDir)__	};unjars,a,given,jar,file,into,a,given,directory;public,void,unjar,dir,file,jar,file,file,dest,dir,throws,ioexception,buffered,output,stream,dest,null,file,input,stream,fis,new,file,input,stream,jar,file,unjar,fis,dest,dir
JarHelper -> public void unjarDir(File jarFile, File destDir) throws IOException;1461591030;Unjars a given jar file into a given directory.;public void unjarDir(File jarFile, File destDir) throws IOException {_	BufferedOutputStream dest = null__	FileInputStream fis = new FileInputStream(jarFile)__	unjar(fis, destDir)__	};unjars,a,given,jar,file,into,a,given,directory;public,void,unjar,dir,file,jar,file,file,dest,dir,throws,ioexception,buffered,output,stream,dest,null,file,input,stream,fis,new,file,input,stream,jar,file,unjar,fis,dest,dir
JarHelper -> public void unjarDir(File jarFile, File destDir) throws IOException;1496260672;Unjars a given jar file into a given directory.;public void unjarDir(File jarFile, File destDir) throws IOException {_		BufferedOutputStream dest = null__		FileInputStream fis = new FileInputStream(jarFile)__		unjar(fis, destDir)__	};unjars,a,given,jar,file,into,a,given,directory;public,void,unjar,dir,file,jar,file,file,dest,dir,throws,ioexception,buffered,output,stream,dest,null,file,input,stream,fis,new,file,input,stream,jar,file,unjar,fis,dest,dir
JarHelper -> public void jarDir(File dirOrFile2Jar, File destJar) 		throws IOException;1452779215;Jars a given directory or single file into a JarOutputStream.;public void jarDir(File dirOrFile2Jar, File destJar)_		throws IOException {__	if (dirOrFile2Jar == null || destJar == null)_	{_		throw new IllegalArgumentException()__	}__	mDestJarName = destJar.getCanonicalPath()__	FileOutputStream fout = new FileOutputStream(destJar)__	JarOutputStream jout = new JarOutputStream(fout)__	_	try {_		jarDir(dirOrFile2Jar, jout, null)__	} catch(IOException ioe) {_		throw ioe__	} finally {_		jout.close()__		fout.close()__	}_	};jars,a,given,directory,or,single,file,into,a,jar,output,stream;public,void,jar,dir,file,dir,or,file2jar,file,dest,jar,throws,ioexception,if,dir,or,file2jar,null,dest,jar,null,throw,new,illegal,argument,exception,m,dest,jar,name,dest,jar,get,canonical,path,file,output,stream,fout,new,file,output,stream,dest,jar,jar,output,stream,jout,new,jar,output,stream,fout,try,jar,dir,dir,or,file2jar,jout,null,catch,ioexception,ioe,throw,ioe,finally,jout,close,fout,close
JarHelper -> public void jarDir(File dirOrFile2Jar, File destJar) 		throws IOException;1461591030;Jars a given directory or single file into a JarOutputStream.;public void jarDir(File dirOrFile2Jar, File destJar)_		throws IOException {__	if (dirOrFile2Jar == null || destJar == null)_	{_		throw new IllegalArgumentException()__	}__	mDestJarName = destJar.getCanonicalPath()__	FileOutputStream fout = new FileOutputStream(destJar)__	JarOutputStream jout = new JarOutputStream(fout)__	_	try {_		jarDir(dirOrFile2Jar, jout, null)__	} catch(IOException ioe) {_		throw ioe__	} finally {_		jout.close()__		fout.close()__	}_	};jars,a,given,directory,or,single,file,into,a,jar,output,stream;public,void,jar,dir,file,dir,or,file2jar,file,dest,jar,throws,ioexception,if,dir,or,file2jar,null,dest,jar,null,throw,new,illegal,argument,exception,m,dest,jar,name,dest,jar,get,canonical,path,file,output,stream,fout,new,file,output,stream,dest,jar,jar,output,stream,jout,new,jar,output,stream,fout,try,jar,dir,dir,or,file2jar,jout,null,catch,ioexception,ioe,throw,ioe,finally,jout,close,fout,close
JarHelper -> public void jarDir(File dirOrFile2Jar, File destJar) 		throws IOException;1496260672;Jars a given directory or single file into a JarOutputStream.;public void jarDir(File dirOrFile2Jar, File destJar)_		throws IOException {__		if (dirOrFile2Jar == null || destJar == null) {_			throw new IllegalArgumentException()__		}__		mDestJarName = destJar.getCanonicalPath()__		FileOutputStream fout = new FileOutputStream(destJar)__		JarOutputStream jout = new JarOutputStream(fout)__		_		try {_			jarDir(dirOrFile2Jar, jout, null)__		} catch (IOException ioe) {_			throw ioe__		} finally {_			jout.close()__			fout.close()__		}_	};jars,a,given,directory,or,single,file,into,a,jar,output,stream;public,void,jar,dir,file,dir,or,file2jar,file,dest,jar,throws,ioexception,if,dir,or,file2jar,null,dest,jar,null,throw,new,illegal,argument,exception,m,dest,jar,name,dest,jar,get,canonical,path,file,output,stream,fout,new,file,output,stream,dest,jar,jar,output,stream,jout,new,jar,output,stream,fout,try,jar,dir,dir,or,file2jar,jout,null,catch,ioexception,ioe,throw,ioe,finally,jout,close,fout,close
JarHelper -> public void unjar(InputStream in, File destDir) throws IOException;1452779215;Given an InputStream on a jar file, unjars the contents into the given_directory.;public void unjar(InputStream in, File destDir) throws IOException {_	BufferedOutputStream dest = null__	JarInputStream jis = new JarInputStream(in)__	JarEntry entry__	while ((entry = jis.getNextJarEntry()) != null) {_		if (entry.isDirectory()) {_		File dir = new File(destDir,entry.getName())__		dir.mkdir()__		if (entry.getTime() != -1) {dir.setLastModified(entry.getTime())_}_		continue__		}_		int count__		byte[] data = new byte[ BUFFER_SIZE ]__		File destFile = new File(destDir, entry.getName())__		if (mVerbose) {_			System.out.println("unjarring " + destFile +_					" from " + entry.getName())__		}_		FileOutputStream fos = new FileOutputStream(destFile)__		dest = new BufferedOutputStream(fos, BUFFER_SIZE)__		try {_			while ((count = jis.read(data, 0, BUFFER_SIZE)) != -1) {_				dest.write(data, 0, count)__			}_			dest.flush()__		} finally {_			dest.close()__		}_		if (entry.getTime() != -1) {destFile.setLastModified(entry.getTime())_}_	}_	jis.close()__	};given,an,input,stream,on,a,jar,file,unjars,the,contents,into,the,given,directory;public,void,unjar,input,stream,in,file,dest,dir,throws,ioexception,buffered,output,stream,dest,null,jar,input,stream,jis,new,jar,input,stream,in,jar,entry,entry,while,entry,jis,get,next,jar,entry,null,if,entry,is,directory,file,dir,new,file,dest,dir,entry,get,name,dir,mkdir,if,entry,get,time,1,dir,set,last,modified,entry,get,time,continue,int,count,byte,data,new,byte,file,dest,file,new,file,dest,dir,entry,get,name,if,m,verbose,system,out,println,unjarring,dest,file,from,entry,get,name,file,output,stream,fos,new,file,output,stream,dest,file,dest,new,buffered,output,stream,fos,try,while,count,jis,read,data,0,1,dest,write,data,0,count,dest,flush,finally,dest,close,if,entry,get,time,1,dest,file,set,last,modified,entry,get,time,jis,close
JarHelper -> public void unjar(InputStream in, File destDir) throws IOException;1461591030;Given an InputStream on a jar file, unjars the contents into the given_directory.;public void unjar(InputStream in, File destDir) throws IOException {_	BufferedOutputStream dest = null__	JarInputStream jis = new JarInputStream(in)__	JarEntry entry__	while ((entry = jis.getNextJarEntry()) != null) {_		if (entry.isDirectory()) {_		File dir = new File(destDir,entry.getName())__		dir.mkdir()__		if (entry.getTime() != -1) {dir.setLastModified(entry.getTime())_}_		continue__		}_		int count__		byte[] data = new byte[ BUFFER_SIZE ]__		File destFile = new File(destDir, entry.getName())__		if (mVerbose) {_			System.out.println("unjarring " + destFile +_					" from " + entry.getName())__		}_		FileOutputStream fos = new FileOutputStream(destFile)__		dest = new BufferedOutputStream(fos, BUFFER_SIZE)__		try {_			while ((count = jis.read(data, 0, BUFFER_SIZE)) != -1) {_				dest.write(data, 0, count)__			}_			dest.flush()__		} finally {_			dest.close()__		}_		if (entry.getTime() != -1) {destFile.setLastModified(entry.getTime())_}_	}_	jis.close()__	};given,an,input,stream,on,a,jar,file,unjars,the,contents,into,the,given,directory;public,void,unjar,input,stream,in,file,dest,dir,throws,ioexception,buffered,output,stream,dest,null,jar,input,stream,jis,new,jar,input,stream,in,jar,entry,entry,while,entry,jis,get,next,jar,entry,null,if,entry,is,directory,file,dir,new,file,dest,dir,entry,get,name,dir,mkdir,if,entry,get,time,1,dir,set,last,modified,entry,get,time,continue,int,count,byte,data,new,byte,file,dest,file,new,file,dest,dir,entry,get,name,if,m,verbose,system,out,println,unjarring,dest,file,from,entry,get,name,file,output,stream,fos,new,file,output,stream,dest,file,dest,new,buffered,output,stream,fos,try,while,count,jis,read,data,0,1,dest,write,data,0,count,dest,flush,finally,dest,close,if,entry,get,time,1,dest,file,set,last,modified,entry,get,time,jis,close
JarHelper -> public void unjar(InputStream in, File destDir) throws IOException;1496260672;Given an InputStream on a jar file, unjars the contents into the given_directory.;public void unjar(InputStream in, File destDir) throws IOException {_		BufferedOutputStream dest = null__		JarInputStream jis = new JarInputStream(in)__		JarEntry entry__		while ((entry = jis.getNextJarEntry()) != null) {_			if (entry.isDirectory()) {_				File dir = new File(destDir, entry.getName())__				dir.mkdir()__				if (entry.getTime() != -1) {_					dir.setLastModified(entry.getTime())__				}_				continue__			}_			int count__			byte[] data = new byte[BUFFER_SIZE]__			File destFile = new File(destDir, entry.getName())__			if (mVerbose) {_				System.out.println("unjarring " + destFile +_					" from " + entry.getName())__			}_			FileOutputStream fos = new FileOutputStream(destFile)__			dest = new BufferedOutputStream(fos, BUFFER_SIZE)__			try {_				while ((count = jis.read(data, 0, BUFFER_SIZE)) != -1) {_					dest.write(data, 0, count)__				}_				dest.flush()__			} finally {_				dest.close()__			}_			if (entry.getTime() != -1) {_				destFile.setLastModified(entry.getTime())__			}_		}_		jis.close()__	};given,an,input,stream,on,a,jar,file,unjars,the,contents,into,the,given,directory;public,void,unjar,input,stream,in,file,dest,dir,throws,ioexception,buffered,output,stream,dest,null,jar,input,stream,jis,new,jar,input,stream,in,jar,entry,entry,while,entry,jis,get,next,jar,entry,null,if,entry,is,directory,file,dir,new,file,dest,dir,entry,get,name,dir,mkdir,if,entry,get,time,1,dir,set,last,modified,entry,get,time,continue,int,count,byte,data,new,byte,file,dest,file,new,file,dest,dir,entry,get,name,if,m,verbose,system,out,println,unjarring,dest,file,from,entry,get,name,file,output,stream,fos,new,file,output,stream,dest,file,dest,new,buffered,output,stream,fos,try,while,count,jis,read,data,0,1,dest,write,data,0,count,dest,flush,finally,dest,close,if,entry,get,time,1,dest,file,set,last,modified,entry,get,time,jis,close
JarHelper -> private void jarDir(File dirOrFile2jar, JarOutputStream jos, String path) 		throws IOException;1452779215;Recursively jars up the given path under the given directory.;private void jarDir(File dirOrFile2jar, JarOutputStream jos, String path)_		throws IOException {_	if (mVerbose) { System.out.println("checking " + dirOrFile2jar)_}_	if (dirOrFile2jar.isDirectory()) {_		String[] dirList = dirOrFile2jar.list()__		String subPath = (path == null) ? "" : (path+dirOrFile2jar.getName()+SEP)__		if (path != null) {_		JarEntry je = new JarEntry(subPath)__		je.setTime(dirOrFile2jar.lastModified())__		jos.putNextEntry(je)__		jos.flush()__		jos.closeEntry()__		}_		for (int i = 0_ i < dirList.length_ i++) {_		File f = new File(dirOrFile2jar, dirList[i])__		jarDir(f,jos,subPath)__		}_	} else {_		if (dirOrFile2jar.getCanonicalPath().equals(mDestJarName))_		{_		if (mVerbose) {System.out.println("skipping " + dirOrFile2jar.getPath())_}_		return__		}__		if (mVerbose) {_			System.out.println("adding " + dirOrFile2jar.getPath())__		}_		FileInputStream fis = new FileInputStream(dirOrFile2jar)__		try {_		JarEntry entry = new JarEntry(path+dirOrFile2jar.getName())__		entry.setTime(dirOrFile2jar.lastModified())__		jos.putNextEntry(entry)__		while ((mByteCount = fis.read(mBuffer)) != -1) {_			jos.write(mBuffer, 0, mByteCount)__			if (mVerbose) { System.out.println("wrote " + mByteCount + " bytes")_}_		}_		jos.flush()__		jos.closeEntry()__		} catch (IOException ioe) {_		throw ioe__		} finally {_		fis.close()__		}_	}_	};recursively,jars,up,the,given,path,under,the,given,directory;private,void,jar,dir,file,dir,or,file2jar,jar,output,stream,jos,string,path,throws,ioexception,if,m,verbose,system,out,println,checking,dir,or,file2jar,if,dir,or,file2jar,is,directory,string,dir,list,dir,or,file2jar,list,string,sub,path,path,null,path,dir,or,file2jar,get,name,sep,if,path,null,jar,entry,je,new,jar,entry,sub,path,je,set,time,dir,or,file2jar,last,modified,jos,put,next,entry,je,jos,flush,jos,close,entry,for,int,i,0,i,dir,list,length,i,file,f,new,file,dir,or,file2jar,dir,list,i,jar,dir,f,jos,sub,path,else,if,dir,or,file2jar,get,canonical,path,equals,m,dest,jar,name,if,m,verbose,system,out,println,skipping,dir,or,file2jar,get,path,return,if,m,verbose,system,out,println,adding,dir,or,file2jar,get,path,file,input,stream,fis,new,file,input,stream,dir,or,file2jar,try,jar,entry,entry,new,jar,entry,path,dir,or,file2jar,get,name,entry,set,time,dir,or,file2jar,last,modified,jos,put,next,entry,entry,while,m,byte,count,fis,read,m,buffer,1,jos,write,m,buffer,0,m,byte,count,if,m,verbose,system,out,println,wrote,m,byte,count,bytes,jos,flush,jos,close,entry,catch,ioexception,ioe,throw,ioe,finally,fis,close
JarHelper -> private void jarDir(File dirOrFile2jar, JarOutputStream jos, String path) 		throws IOException;1461591030;Recursively jars up the given path under the given directory.;private void jarDir(File dirOrFile2jar, JarOutputStream jos, String path)_		throws IOException {_	if (mVerbose) { System.out.println("checking " + dirOrFile2jar)_}_	if (dirOrFile2jar.isDirectory()) {_		String[] dirList = dirOrFile2jar.list()__		String subPath = (path == null) ? "" : (path+dirOrFile2jar.getName()+SEP)__		if (path != null) {_		JarEntry je = new JarEntry(subPath)__		je.setTime(dirOrFile2jar.lastModified())__		jos.putNextEntry(je)__		jos.flush()__		jos.closeEntry()__		}_		for (int i = 0_ i < dirList.length_ i++) {_		File f = new File(dirOrFile2jar, dirList[i])__		jarDir(f,jos,subPath)__		}_	} else if (dirOrFile2jar.exists()) {_		if (dirOrFile2jar.getCanonicalPath().equals(mDestJarName))_		{_		if (mVerbose) {System.out.println("skipping " + dirOrFile2jar.getPath())_}_		return__		}__		if (mVerbose) {_			System.out.println("adding " + dirOrFile2jar.getPath())__		}_		FileInputStream fis = new FileInputStream(dirOrFile2jar)__		try {_		JarEntry entry = new JarEntry(path+dirOrFile2jar.getName())__		entry.setTime(dirOrFile2jar.lastModified())__		jos.putNextEntry(entry)__		while ((mByteCount = fis.read(mBuffer)) != -1) {_			jos.write(mBuffer, 0, mByteCount)__			if (mVerbose) { System.out.println("wrote " + mByteCount + " bytes")_}_		}_		jos.flush()__		jos.closeEntry()__		} catch (IOException ioe) {_		throw ioe__		} finally {_		fis.close()__		}_	}_	};recursively,jars,up,the,given,path,under,the,given,directory;private,void,jar,dir,file,dir,or,file2jar,jar,output,stream,jos,string,path,throws,ioexception,if,m,verbose,system,out,println,checking,dir,or,file2jar,if,dir,or,file2jar,is,directory,string,dir,list,dir,or,file2jar,list,string,sub,path,path,null,path,dir,or,file2jar,get,name,sep,if,path,null,jar,entry,je,new,jar,entry,sub,path,je,set,time,dir,or,file2jar,last,modified,jos,put,next,entry,je,jos,flush,jos,close,entry,for,int,i,0,i,dir,list,length,i,file,f,new,file,dir,or,file2jar,dir,list,i,jar,dir,f,jos,sub,path,else,if,dir,or,file2jar,exists,if,dir,or,file2jar,get,canonical,path,equals,m,dest,jar,name,if,m,verbose,system,out,println,skipping,dir,or,file2jar,get,path,return,if,m,verbose,system,out,println,adding,dir,or,file2jar,get,path,file,input,stream,fis,new,file,input,stream,dir,or,file2jar,try,jar,entry,entry,new,jar,entry,path,dir,or,file2jar,get,name,entry,set,time,dir,or,file2jar,last,modified,jos,put,next,entry,entry,while,m,byte,count,fis,read,m,buffer,1,jos,write,m,buffer,0,m,byte,count,if,m,verbose,system,out,println,wrote,m,byte,count,bytes,jos,flush,jos,close,entry,catch,ioexception,ioe,throw,ioe,finally,fis,close
JarHelper -> private void jarDir(File dirOrFile2jar, JarOutputStream jos, String path) 		throws IOException;1496260672;Recursively jars up the given path under the given directory.;private void jarDir(File dirOrFile2jar, JarOutputStream jos, String path)_		throws IOException {_		if (mVerbose) {_			System.out.println("checking " + dirOrFile2jar)__		}_		if (dirOrFile2jar.isDirectory()) {_			String[] dirList = dirOrFile2jar.list()__			String subPath = (path == null) ? "" : (path + dirOrFile2jar.getName() + SEP)__			if (path != null) {_				JarEntry je = new JarEntry(subPath)__				je.setTime(dirOrFile2jar.lastModified())__				jos.putNextEntry(je)__				jos.flush()__				jos.closeEntry()__			}_			for (int i = 0_ i < dirList.length_ i++) {_				File f = new File(dirOrFile2jar, dirList[i])__				jarDir(f, jos, subPath)__			}_		} else if (dirOrFile2jar.exists()) {_			if (dirOrFile2jar.getCanonicalPath().equals(mDestJarName)) {_				if (mVerbose) {_					System.out.println("skipping " + dirOrFile2jar.getPath())__				}_				return__			}__			if (mVerbose) {_				System.out.println("adding " + dirOrFile2jar.getPath())__			}_			FileInputStream fis = new FileInputStream(dirOrFile2jar)__			try {_				JarEntry entry = new JarEntry(path + dirOrFile2jar.getName())__				entry.setTime(dirOrFile2jar.lastModified())__				jos.putNextEntry(entry)__				while ((mByteCount = fis.read(mBuffer)) != -1) {_					jos.write(mBuffer, 0, mByteCount)__					if (mVerbose) {_						System.out.println("wrote " + mByteCount + " bytes")__					}_				}_				jos.flush()__				jos.closeEntry()__			} catch (IOException ioe) {_				throw ioe__			} finally {_				fis.close()__			}_		}_	};recursively,jars,up,the,given,path,under,the,given,directory;private,void,jar,dir,file,dir,or,file2jar,jar,output,stream,jos,string,path,throws,ioexception,if,m,verbose,system,out,println,checking,dir,or,file2jar,if,dir,or,file2jar,is,directory,string,dir,list,dir,or,file2jar,list,string,sub,path,path,null,path,dir,or,file2jar,get,name,sep,if,path,null,jar,entry,je,new,jar,entry,sub,path,je,set,time,dir,or,file2jar,last,modified,jos,put,next,entry,je,jos,flush,jos,close,entry,for,int,i,0,i,dir,list,length,i,file,f,new,file,dir,or,file2jar,dir,list,i,jar,dir,f,jos,sub,path,else,if,dir,or,file2jar,exists,if,dir,or,file2jar,get,canonical,path,equals,m,dest,jar,name,if,m,verbose,system,out,println,skipping,dir,or,file2jar,get,path,return,if,m,verbose,system,out,println,adding,dir,or,file2jar,get,path,file,input,stream,fis,new,file,input,stream,dir,or,file2jar,try,jar,entry,entry,new,jar,entry,path,dir,or,file2jar,get,name,entry,set,time,dir,or,file2jar,last,modified,jos,put,next,entry,entry,while,m,byte,count,fis,read,m,buffer,1,jos,write,m,buffer,0,m,byte,count,if,m,verbose,system,out,println,wrote,m,byte,count,bytes,jos,flush,jos,close,entry,catch,ioexception,ioe,throw,ioe,finally,fis,close
