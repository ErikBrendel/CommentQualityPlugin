commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;26;;@Override protected PlanExecutor getExecutor() throws Exception {     // be a new jar file available for the user code classes     if (this.executor != null) {         this.executor.stop().     }     // write generated classes to disk so that they can be shipped to the cluster     URL jarUrl = flinkILoop.writeFilesToDisk().getAbsoluteFile().toURI().toURL().     List<URL> allJarFiles = new ArrayList<>(jarFiles).     allJarFiles.add(jarUrl).     this.executor = PlanExecutor.createRemoteExecutor(host, port, clientConfiguration, allJarFiles, globalClasspaths).     executor.setPrintStatusDuringExecution(getConfig().isSysoutLoggingEnabled()).     return executor. }
false;public;0;5;;@Override public ExecutionEnvironment createExecutionEnvironment() {     throw new UnsupportedOperationException("Execution Environment is already defined" + " for this shell."). }
false;public,static;0;14;;public static void disableAllContextAndOtherEnvironments() {     // we create a context environment that prevents the instantiation of further     // context environments. at the same time, setting the context environment prevents manual     // creation of local and remote environments     ExecutionEnvironmentFactory factory = new ExecutionEnvironmentFactory() {          @Override         public ExecutionEnvironment createExecutionEnvironment() {             throw new UnsupportedOperationException("Execution Environment is already defined" + " for this shell.").         }     }.     initializeContextEnvironment(factory). }
false;public,static;0;3;;public static void resetContextEnvironments() {     ExecutionEnvironment.resetContextEnvironment(). }
