commented;modifiers;parameterAmount;loc;comment;code
true;protected;2;16;/**  * Executes the remote job.  *  * @param streamGraph  *            Stream Graph to execute  * @param jarFiles  * 			  List of jar file URLs to ship to the cluster  * @return The result of the job execution, containing elapsed time and accumulators.  */ ;/**  * Executes the remote job.  *  * @param streamGraph  *            Stream Graph to execute  * @param jarFiles  * 			  List of jar file URLs to ship to the cluster  * @return The result of the job execution, containing elapsed time and accumulators.  */ @Override protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {     URL jarUrl.     try {         jarUrl = flinkILoop.writeFilesToDisk().getAbsoluteFile().toURI().toURL().     } catch (MalformedURLException e) {         throw new ProgramInvocationException("Could not write the user code classes to disk.", streamGraph.getJobGraph().getJobID(), e).     }     List<URL> allJarFiles = new ArrayList<>(jarFiles.size() + 1).     allJarFiles.addAll(jarFiles).     allJarFiles.add(jarUrl).     return super.executeRemotely(streamGraph, allJarFiles). }
false;public;0;5;;@Override public StreamExecutionEnvironment createExecutionEnvironment() {     throw new UnsupportedOperationException("Execution Environment is already defined" + " for this shell."). }
false;public;0;10;;public void setAsContext() {     StreamExecutionEnvironmentFactory factory = new StreamExecutionEnvironmentFactory() {          @Override         public StreamExecutionEnvironment createExecutionEnvironment() {             throw new UnsupportedOperationException("Execution Environment is already defined" + " for this shell.").         }     }.     initializeContextEnvironment(factory). }
false;public;0;5;;@Override public StreamExecutionEnvironment createExecutionEnvironment() {     throw new UnsupportedOperationException("Execution Environment is already defined" + " for this shell."). }
false;public,static;0;13;;public static void disableAllContextAndOtherEnvironments() {     // we create a context environment that prevents the instantiation of further     // context environments. at the same time, setting the context environment prevents manual     // creation of local and remote environments     StreamExecutionEnvironmentFactory factory = new StreamExecutionEnvironmentFactory() {          @Override         public StreamExecutionEnvironment createExecutionEnvironment() {             throw new UnsupportedOperationException("Execution Environment is already defined" + " for this shell.").         }     }.     initializeContextEnvironment(factory). }
false;public,static;0;3;;public static void resetContextEnvironments() {     StreamExecutionEnvironment.resetContextEnvironment(). }
