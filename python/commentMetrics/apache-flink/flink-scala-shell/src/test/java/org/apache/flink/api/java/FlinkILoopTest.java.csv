commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public PlanExecutor answer(InvocationOnMock invocation) throws Throwable {     testPlanExecutor.setHost((String) invocation.getArguments()[0]).     testPlanExecutor.setPort((Integer) invocation.getArguments()[1]).     testPlanExecutor.setConfiguration((Configuration) invocation.getArguments()[2]).     testPlanExecutor.setJars((List<String>) invocation.getArguments()[3]).     testPlanExecutor.setGlobalClasspaths((List<String>) invocation.getArguments()[4]).     return testPlanExecutor. }
false;public;0;44;;@Test public void testConfigurationForwarding() throws Exception {     Configuration configuration = new Configuration().     configuration.setString("foobar", "foobar").     FlinkILoop flinkILoop = new FlinkILoop("localhost", 6123, configuration, Option.<String[]>empty()).     final TestPlanExecutor testPlanExecutor = new TestPlanExecutor().     PowerMockito.mockStatic(PlanExecutor.class).     BDDMockito.given(PlanExecutor.createRemoteExecutor(Matchers.anyString(), Matchers.anyInt(), Matchers.any(Configuration.class), Matchers.any(java.util.List.class), Matchers.any(java.util.List.class))).willAnswer(new Answer<PlanExecutor>() {          @Override         public PlanExecutor answer(InvocationOnMock invocation) throws Throwable {             testPlanExecutor.setHost((String) invocation.getArguments()[0]).             testPlanExecutor.setPort((Integer) invocation.getArguments()[1]).             testPlanExecutor.setConfiguration((Configuration) invocation.getArguments()[2]).             testPlanExecutor.setJars((List<String>) invocation.getArguments()[3]).             testPlanExecutor.setGlobalClasspaths((List<String>) invocation.getArguments()[4]).             return testPlanExecutor.         }     }).     Settings settings = new Settings().     ((MutableSettings.BooleanSetting) settings.usejavacp()).value_$eq(true).     flinkILoop.settings_$eq(settings).     flinkILoop.createInterpreter().     ExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv().     env.fromElements(1).output(new DiscardingOutputFormat<Integer>()).     env.execute("Test job").     Configuration forwardedConfiguration = testPlanExecutor.getConfiguration().     assertEquals(configuration, forwardedConfiguration). }
false;public;0;17;;@Test public void testConfigurationForwardingStreamEnvironment() {     Configuration configuration = new Configuration().     configuration.setString("foobar", "foobar").     FlinkILoop flinkILoop = new FlinkILoop("localhost", 6123, configuration, Option.<String[]>empty()).     StreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv().     assertTrue(streamEnv instanceof RemoteStreamEnvironment).     RemoteStreamEnvironment remoteStreamEnv = (RemoteStreamEnvironment) streamEnv.     Configuration forwardedConfiguration = remoteStreamEnv.getClientConfiguration().     assertEquals(configuration, forwardedConfiguration). }
false;public;0;4;;@Override public void start() throws Exception { }
false;public;0;4;;@Override public void stop() throws Exception { }
false;public;0;4;;@Override public boolean isRunning() {     return false. }
false;public;1;4;;@Override public JobExecutionResult executePlan(Plan plan) throws Exception {     return null. }
false;public;1;4;;@Override public String getOptimizerPlanAsJSON(Plan plan) throws Exception {     return null. }
false;public;1;4;;@Override public void endSession(JobID jobID) throws Exception { }
false;public;0;3;;public String getHost() {     return host. }
false;public;1;3;;public void setHost(String host) {     this.host = host. }
false;public;0;3;;public int getPort() {     return port. }
false;public;1;3;;public void setPort(int port) {     this.port = port. }
false;public;0;3;;public Configuration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(Configuration configuration) {     this.configuration = configuration. }
false;public;0;3;;public List<String> getJars() {     return jars. }
false;public;1;3;;public void setJars(List<String> jars) {     this.jars = jars. }
false;public;0;3;;public List<String> getGlobalClasspaths() {     return globalClasspaths. }
false;public;1;3;;public void setGlobalClasspaths(List<String> globalClasspaths) {     this.globalClasspaths = globalClasspaths. }
