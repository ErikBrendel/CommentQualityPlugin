commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Test public void testPrimitiveTypes() {     testReadAndWrite("VARCHAR", Types.STRING).     testReadAndWrite("BOOLEAN", Types.BOOLEAN).     testReadAndWrite("TINYINT", Types.BYTE).     testReadAndWrite("SMALLINT", Types.SHORT).     testReadAndWrite("INT", Types.INT).     testReadAndWrite("BIGINT", Types.LONG).     testReadAndWrite("FLOAT", Types.FLOAT).     testReadAndWrite("DOUBLE", Types.DOUBLE).     testReadAndWrite("DECIMAL", Types.BIG_DEC).     testReadAndWrite("DATE", Types.SQL_DATE).     testReadAndWrite("TIME", Types.SQL_TIME).     testReadAndWrite("TIMESTAMP", Types.SQL_TIMESTAMP).     // unsupported type information     testReadAndWrite("ANY<java.lang.Void, " + "rO0ABXNyADJvcmcuYXBhY2hlLmZsaW5rLmFwaS5jb21tb24udHlwZWluZm8uQmFzaWNUeXBlSW5mb_oE8IKl" + "ad0GAgAETAAFY2xhenp0ABFMamF2YS9sYW5nL0NsYXNzO0wAD2NvbXBhcmF0b3JDbGFzc3EAfgABWwAXcG9z" + "c2libGVDYXN0VGFyZ2V0VHlwZXN0ABJbTGphdmEvbGFuZy9DbGFzcztMAApzZXJpYWxpemVydAA2TG9yZy9h" + "cGFjaGUvZmxpbmsvYXBpL2NvbW1vbi90eXBldXRpbHMvVHlwZVNlcmlhbGl6ZXI7eHIANG9yZy5hcGFjaGUu" + "ZmxpbmsuYXBpLmNvbW1vbi50eXBlaW5mby5UeXBlSW5mb3JtYXRpb26UjchIurN66wIAAHhwdnIADmphdmEu" + "bGFuZy5Wb2lkAAAAAAAAAAAAAAB4cHB1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAABz" + "cgA5b3JnLmFwYWNoZS5mbGluay5hcGkuY29tbW9uLnR5cGV1dGlscy5iYXNlLlZvaWRTZXJpYWxpemVyAAAA" + "AAAAAAECAAB4cgBCb3JnLmFwYWNoZS5mbGluay5hcGkuY29tbW9uLnR5cGV1dGlscy5iYXNlLlR5cGVTZXJp" + "YWxpemVyU2luZ2xldG9ueamHqscud0UCAAB4cgA0b3JnLmFwYWNoZS5mbGluay5hcGkuY29tbW9uLnR5cGV1" + "dGlscy5UeXBlU2VyaWFsaXplcgAAAAAAAAABAgAAeHA>", Types.VOID). }
false;public;0;66;;@Test public void testWriteComplexTypes() {     testReadAndWrite("ROW<f0 DECIMAL, f1 TINYINT>", Types.ROW(Types.BIG_DEC, Types.BYTE)).     testReadAndWrite("ROW<hello DECIMAL, world TINYINT>", Types.ROW_NAMED(new String[] { "hello", "world" }, Types.BIG_DEC, Types.BYTE)).     testReadAndWrite("POJO<org.apache.flink.table.utils.TypeStringUtilsTest$TestPojo>", TypeExtractor.createTypeInfo(TestPojo.class)).     testReadAndWrite("ANY<org.apache.flink.table.utils.TypeStringUtilsTest$TestNoPojo>", TypeExtractor.createTypeInfo(TestNoPojo.class)).     testReadAndWrite("MAP<VARCHAR, ROW<f0 DECIMAL, f1 TINYINT>>", Types.MAP(Types.STRING, Types.ROW(Types.BIG_DEC, Types.BYTE))).     testReadAndWrite("MULTISET<ROW<f0 DECIMAL, f1 TINYINT>>", new MultisetTypeInfo<>(Types.ROW(Types.BIG_DEC, Types.BYTE))).     testReadAndWrite("PRIMITIVE_ARRAY<TINYINT>", Types.PRIMITIVE_ARRAY(Types.BYTE)).     testReadAndWrite("OBJECT_ARRAY<POJO<org.apache.flink.table.utils.TypeStringUtilsTest$TestPojo>>", Types.OBJECT_ARRAY(TypeExtractor.createTypeInfo(TestPojo.class))).     // test escaping     assertEquals(Types.ROW_NAMED(new String[] { "he         \nllo", "world" }, Types.BIG_DEC, Types.BYTE), TypeStringUtils.readTypeInfo("ROW<`he         \nllo` DECIMAL, world TINYINT>")).     assertEquals(Types.ROW_NAMED(new String[] { "he`llo", "world" }, Types.BIG_DEC, Types.BYTE), TypeStringUtils.readTypeInfo("ROW<`he``llo` DECIMAL, world TINYINT>")).     // test backward compatibility with brackets ()     assertEquals(Types.ROW_NAMED(new String[] { "he         \nllo", "world" }, Types.BIG_DEC, Types.BYTE), TypeStringUtils.readTypeInfo("ROW(`he         \nllo` DECIMAL, world TINYINT)")).     // test nesting     testReadAndWrite("ROW<singleton ROW<f0 INT>, twoField ROW<`Field 1` ROW<f0 DECIMAL>, `Field``s 2` VARCHAR>>", Types.ROW_NAMED(new String[] { "singleton", "twoField" }, Types.ROW(Types.INT), Types.ROW_NAMED(new String[] { "Field 1", "Field`s 2" }, Types.ROW(Types.BIG_DEC), Types.STRING))). }
false;public;0;4;;@Test(expected = ValidationException.class) public void testSyntaxError1() {     // additional <     TypeStringUtils.readTypeInfo("ROW<<f0 DECIMAL, f1 TINYINT>"). }
false;public;0;4;;@Test(expected = ValidationException.class) public void testSyntaxError2() {     // duplicate type     TypeStringUtils.readTypeInfo("ROW<f0 DECIMAL DECIMAL, f1 TINYINT>"). }
false;public;0;4;;@Test(expected = ValidationException.class) public void testSyntaxError3() {     // invalid type     TypeStringUtils.readTypeInfo("ROW<f0 INVALID, f1 TINYINT>"). }
false;private;2;7;;private void testReadAndWrite(String expected, TypeInformation<?> type) {     // test read from string     assertEquals(type, TypeStringUtils.readTypeInfo(expected)).     // test write to string     assertEquals(expected, TypeStringUtils.writeTypeInfo(type)). }
