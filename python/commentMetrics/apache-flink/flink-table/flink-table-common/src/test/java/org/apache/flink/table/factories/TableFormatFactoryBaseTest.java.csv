commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testSchemaDerivation() {     final Map<String, String> properties = new HashMap<>().     properties.put("schema.0.name", "otherField").     properties.put("schema.0.type", "VARCHAR").     properties.put("schema.0.from", "csvField").     properties.put("schema.1.name", "abcField").     properties.put("schema.1.type", "VARCHAR").     properties.put("schema.2.name", "p").     properties.put("schema.2.type", "TIMESTAMP").     properties.put("schema.2.proctime", "true").     properties.put("schema.3.name", "r").     properties.put("schema.3.type", "TIMESTAMP").     properties.put("schema.3.rowtime.timestamps.type", "from-source").     properties.put("schema.3.rowtime.watermarks.type", "from-source").     final TableSchema actualSchema = TableFormatFactoryBase.deriveSchema(properties).     final TableSchema expectedSchema = TableSchema.builder().field("csvField", // aliased     Types.STRING).field("abcField", Types.STRING).build().     assertEquals(expectedSchema, actualSchema). }
false;public;0;25;;@Test public void testSchemaDerivationWithRowtime() {     final Map<String, String> properties = new HashMap<>().     properties.put("schema.0.name", "otherField").     properties.put("schema.0.type", "VARCHAR").     properties.put("schema.0.from", "csvField").     properties.put("schema.1.name", "abcField").     properties.put("schema.1.type", "VARCHAR").     properties.put("schema.2.name", "p").     properties.put("schema.2.type", "TIMESTAMP").     properties.put("schema.2.proctime", "true").     properties.put("schema.3.name", "r").     properties.put("schema.3.type", "TIMESTAMP").     // from-field strategy     properties.put("schema.3.rowtime.timestamps.type", "from-field").     properties.put("schema.3.rowtime.timestamps.from", "myTime").     properties.put("schema.3.rowtime.watermarks.type", "from-source").     final TableSchema actualSchema = TableFormatFactoryBase.deriveSchema(properties).     final TableSchema expectedSchema = TableSchema.builder().field("csvField", // aliased     Types.STRING).field("abcField", Types.STRING).field("myTime", Types.SQL_TIMESTAMP).build().     assertEquals(expectedSchema, actualSchema). }
