commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/**  * Returns a set of valid descriptors.  */ ;/**  * Returns a set of valid descriptors.  */ protected abstract List<Descriptor> descriptors().
true;protected,abstract;0;1;/**  * Returns a set of properties for each valid descriptor.  */ ;/**  * Returns a set of properties for each valid descriptor.  */ protected abstract List<Map<String, String>> properties().
true;protected,abstract;0;1;/**  * Returns a validator that can validate all valid descriptors.  */ ;/**  * Returns a validator that can validate all valid descriptors.  */ protected abstract DescriptorValidator validator().
false;public;0;11;;@Test public void testValidation() {     final List<Descriptor> descriptors = descriptors().     final List<Map<String, String>> properties = properties().     Preconditions.checkArgument(descriptors.size() == properties.size()).     for (int i = 0. i < descriptors.size(). i++) {         verifyProperties(descriptors.get(i), properties.get(i)).     } }
false;protected;2;9;;protected void verifyProperties(Descriptor descriptor, Map<String, String> expected) {     // test produced properties     assertEquals(expected, descriptor.toProperties()).     // test validation logic     final DescriptorProperties properties = new DescriptorProperties().     properties.putProperties(expected).     validator().validate(properties). }
false;protected;3;7;;protected void addPropertyAndVerify(Descriptor descriptor, String property, String newValue) {     final DescriptorProperties properties = new DescriptorProperties().     properties.putProperties(descriptor.toProperties()).     final DescriptorProperties copy = properties.withoutKeys(Collections.singletonList(property)).     copy.putString(property, newValue).     validator().validate(copy). }
false;protected;2;6;;protected void removePropertyAndVerify(Descriptor descriptor, String property) {     final DescriptorProperties properties = new DescriptorProperties().     properties.putProperties(descriptor.toProperties()).     final DescriptorProperties copy = properties.withoutKeys(Collections.singletonList(property)).     validator().validate(copy). }
