commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Creates and initializes the accumulator for this {@link AggregateFunction}. The accumulator  * is used to keep the aggregated values which are needed to compute an aggregation result.  *  * @return the accumulator with the initial value  */ ;/**  * Creates and initializes the accumulator for this {@link AggregateFunction}. The accumulator  * is used to keep the aggregated values which are needed to compute an aggregation result.  *  * @return the accumulator with the initial value  */ public abstract ACC createAccumulator().
true;public,abstract;1;1;/**  * Called every time when an aggregation result should be materialized.  * The returned value could be either an early and incomplete result  * (periodically emitted as data arrive) or the final result of the  * aggregation.  *  * @param accumulator the accumulator which contains the current  *                    aggregated results  * @return the aggregation result  */ ;/**  * Called every time when an aggregation result should be materialized.  * The returned value could be either an early and incomplete result  * (periodically emitted as data arrive) or the final result of the  * aggregation.  *  * @param accumulator the accumulator which contains the current  *                    aggregated results  * @return the aggregation result  */ public abstract T getValue(ACC accumulator).
true;public;0;3;/**  * Returns <code>true</code> if this {@link AggregateFunction} can only be applied in an  * OVER window.  *  * @return <code>true</code> if the {@link AggregateFunction} requires an OVER window,  *         <code>false</code> otherwise.  */ ;/**  * Returns <code>true</code> if this {@link AggregateFunction} can only be applied in an  * OVER window.  *  * @return <code>true</code> if the {@link AggregateFunction} requires an OVER window,  *         <code>false</code> otherwise.  */ public boolean requiresOver() {     return false. }
true;public;0;3;/**  * Returns the {@link TypeInformation} of the {@link AggregateFunction}'s result.  *  * @return The {@link TypeInformation} of the {@link AggregateFunction}'s result or  *         <code>null</code> if the result type should be automatically inferred.  */ ;/**  * Returns the {@link TypeInformation} of the {@link AggregateFunction}'s result.  *  * @return The {@link TypeInformation} of the {@link AggregateFunction}'s result or  *         <code>null</code> if the result type should be automatically inferred.  */ public TypeInformation<T> getResultType() {     return null. }
true;public;0;3;/**  * Returns the {@link TypeInformation} of the {@link AggregateFunction}'s accumulator.  *  * @return The {@link TypeInformation} of the {@link AggregateFunction}'s accumulator or  *         <code>null</code> if the accumulator type should be automatically inferred.  */ ;/**  * Returns the {@link TypeInformation} of the {@link AggregateFunction}'s accumulator.  *  * @return The {@link TypeInformation} of the {@link AggregateFunction}'s accumulator or  *         <code>null</code> if the accumulator type should be automatically inferred.  */ public TypeInformation<ACC> getAccumulatorType() {     return null. }
