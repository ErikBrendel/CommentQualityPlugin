commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the metric group for this parallel subtask.  *  * @return metric group for this parallel subtask.  */ ;/**  * Returns the metric group for this parallel subtask.  *  * @return metric group for this parallel subtask.  */ public MetricGroup getMetricGroup() {     return context.getMetricGroup(). }
true;public;1;3;/**  * Gets the local temporary file copy of a distributed cache files.  *  * @param name distributed cache file name  * @return local temporary file copy of a distributed cache file.  */ ;/**  * Gets the local temporary file copy of a distributed cache files.  *  * @param name distributed cache file name  * @return local temporary file copy of a distributed cache file.  */ public File getCachedFile(String name) {     return context.getDistributedCache().getFile(name). }
true;public;2;8;/**  * Gets the global job parameter value associated with the given key as a string.  *  * @param key          key pointing to the associated value  * @param defaultValue default value which is returned in case global job parameter is null  *                     or there is no value associated with the given key  * @return (default) value associated with the given key  */ ;/**  * Gets the global job parameter value associated with the given key as a string.  *  * @param key          key pointing to the associated value  * @param defaultValue default value which is returned in case global job parameter is null  *                     or there is no value associated with the given key  * @return (default) value associated with the given key  */ public String getJobParameter(String key, String defaultValue) {     final GlobalJobParameters conf = context.getExecutionConfig().getGlobalJobParameters().     if (conf != null && conf.toMap().containsKey(key)) {         return conf.toMap().get(key).     } else {         return defaultValue.     } }
