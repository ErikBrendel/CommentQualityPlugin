commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isBasicType() {     return false. }
false;public;0;4;;@Override public boolean isTupleType() {     return false. }
false;public;0;4;;@Override public int getArity() {     return 1. }
false;public;0;4;;@Override public int getTotalFields() {     return 1. }
false;public;0;4;;@Override public Class<T> getTypeClass() {     return clazz. }
false;public;0;4;;@Override public boolean isKeyType() {     return true. }
false;public;1;4;;@Override public TypeSerializer<T> createSerializer(ExecutionConfig config) {     return serializer. }
false;public;2;12;;@Override public TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig) {     try {         Constructor<? extends TypeComparator<T>> constructor = comparatorClass.getConstructor(Boolean.TYPE).         return constructor.newInstance(sortOrderAscending).     } catch (Exception e) {         throw new RuntimeException("Could not initialize comparator " + comparatorClass.getName(), e).     } }
false;public;0;4;;// ---------------------------------------------------------------------------------------------- @Override public int hashCode() {     return Objects.hash(clazz, serializer, comparatorClass). }
false;public;1;4;;@Override public boolean canEqual(Object obj) {     return obj instanceof TimeIntervalTypeInfo. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj instanceof TimeIntervalTypeInfo) {         TimeIntervalTypeInfo other = (TimeIntervalTypeInfo) obj.         return other.canEqual(this) && this.clazz.equals(other.clazz) && serializer == other.serializer && this.comparatorClass.equals(other.comparatorClass).     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return TimeIntervalTypeInfo.class.getSimpleName() + "(" + clazz.getSimpleName() + ")". }
