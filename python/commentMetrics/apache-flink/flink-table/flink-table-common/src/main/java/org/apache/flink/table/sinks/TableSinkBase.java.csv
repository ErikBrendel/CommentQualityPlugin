commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/**  * Returns a deep copy of the {@link TableSink}.  */ ;/**  * Returns a deep copy of the {@link TableSink}.  */ protected abstract TableSinkBase<T> copy().
true;public;0;8;/**  * Returns the field names of the table to emit.  */ ;/**  * Returns the field names of the table to emit.  */ public String[] getFieldNames() {     if (fieldNames.isPresent()) {         return fieldNames.get().     } else {         throw new IllegalStateException("Table sink must be configured to retrieve field names.").     } }
true;public;0;8;/**  * Returns the field types of the table to emit.  */ ;/**  * Returns the field types of the table to emit.  */ public TypeInformation<?>[] getFieldTypes() {     if (fieldTypes.isPresent()) {         return fieldTypes.get().     } else {         throw new IllegalStateException("Table sink must be configured to retrieve field types.").     } }
true;public,final;2;8;/**  * Returns a copy of this {@link TableSink} configured with the field names and types of the  * table to emit.  *  * @param fieldNames The field names of the table to emit.  * @param fieldTypes The field types of the table to emit.  * @return A copy of this {@link TableSink} configured with the field names and types of the  *         table to emit.  */ ;/**  * Returns a copy of this {@link TableSink} configured with the field names and types of the  * table to emit.  *  * @param fieldNames The field names of the table to emit.  * @param fieldTypes The field types of the table to emit.  * @return A copy of this {@link TableSink} configured with the field names and types of the  *         table to emit.  */ public final TableSink<T> configure(String[] fieldNames, TypeInformation<?>[] fieldTypes) {     final TableSinkBase<T> configuredSink = this.copy().     configuredSink.fieldNames = Optional.of(fieldNames).     configuredSink.fieldTypes = Optional.of(fieldTypes).     return configuredSink. }
