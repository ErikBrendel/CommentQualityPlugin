commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Returns the result type of the evaluation method with a given signature.  *  * <p>This method needs to be overridden in case Flink's type extraction facilities are not  * sufficient to extract the {@link TypeInformation} based on the return type of the evaluation  * method. Flink's type extraction facilities can handle basic types or  * simple POJOs but might be wrong for more complex, custom, or composite types.  *  * @param signature signature of the method the return type needs to be determined  * @return {@link TypeInformation} of result type or <code>null</code> if Flink should  *         determine the type  */ ;/**  * Returns the result type of the evaluation method with a given signature.  *  * <p>This method needs to be overridden in case Flink's type extraction facilities are not  * sufficient to extract the {@link TypeInformation} based on the return type of the evaluation  * method. Flink's type extraction facilities can handle basic types or  * simple POJOs but might be wrong for more complex, custom, or composite types.  *  * @param signature signature of the method the return type needs to be determined  * @return {@link TypeInformation} of result type or <code>null</code> if Flink should  *         determine the type  */ public TypeInformation<?> getResultType(Class<?>[] signature) {     return null. }
true;public;1;13;/**  * Returns {@link TypeInformation} about the operands of the evaluation method with a given  * signature.  *  * <p>In order to perform operand type inference in SQL (especially when <code>NULL</code> is  * used) it might be necessary to determine the parameter {@link TypeInformation} of an  * evaluation method. By default Flink's type extraction facilities are used for this but might  * be wrong for more complex, custom, or composite types.  *  * @param signature signature of the method the operand types need to be determined  * @return {@link TypeInformation} of operand types  */ ;/**  * Returns {@link TypeInformation} about the operands of the evaluation method with a given  * signature.  *  * <p>In order to perform operand type inference in SQL (especially when <code>NULL</code> is  * used) it might be necessary to determine the parameter {@link TypeInformation} of an  * evaluation method. By default Flink's type extraction facilities are used for this but might  * be wrong for more complex, custom, or composite types.  *  * @param signature signature of the method the operand types need to be determined  * @return {@link TypeInformation} of operand types  */ public TypeInformation<?>[] getParameterTypes(Class<?>[] signature) {     final TypeInformation<?>[] types = new TypeInformation<?>[signature.length].     for (int i = 0. i < signature.length. i++) {         try {             types[i] = TypeExtractor.getForClass(signature[i]).         } catch (InvalidTypesException e) {             throw new ValidationException("Parameter types of scalar function " + this.getClass().getCanonicalName() + " cannot be automatically determined. Please provide type information manually.").         }     }     return types. }
