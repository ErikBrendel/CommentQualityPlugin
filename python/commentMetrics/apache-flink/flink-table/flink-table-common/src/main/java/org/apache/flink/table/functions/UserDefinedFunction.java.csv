commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;4;/**  * Returns a unique, serialized representation for this function.  */ ;/**  * Returns a unique, serialized representation for this function.  */ public final String functionIdentifier() {     final String md5 = EncodingUtils.hex(EncodingUtils.md5(EncodingUtils.encodeObjectToString(this))).     return getClass().getCanonicalName().replace('.', '$').concat("$").concat(md5). }
true;public;1;3;/**  * Setup method for user-defined function. It can be used for initialization work.  * By default, this method does nothing.  */ ;/**  * Setup method for user-defined function. It can be used for initialization work.  * By default, this method does nothing.  */ public void open(FunctionContext context) throws Exception { // do nothing }
true;public;0;3;/**  * Tear-down method for user-defined function. It can be used for clean up work.  * By default, this method does nothing.  */ ;/**  * Tear-down method for user-defined function. It can be used for clean up work.  * By default, this method does nothing.  */ public void close() throws Exception { // do nothing }
true;public;0;3;/**  * Returns information about the determinism of the function's results.  *  * @return <code>true</code> if and only if a call to this function is guaranteed to  *         always return the same result given the same parameters. <code>true</code> is  *         assumed by default. If the function is not pure functional like  *         <code>random(), date(), now(), ...</code> this method must return <code>false</code>.  */ ;/**  * Returns information about the determinism of the function's results.  *  * @return <code>true</code> if and only if a call to this function is guaranteed to  *         always return the same result given the same parameters. <code>true</code> is  *         assumed by default. If the function is not pure functional like  *         <code>random(), date(), now(), ...</code> this method must return <code>false</code>.  */ public boolean isDeterministic() {     return true. }
true;public;0;4;/**  * Returns the name of the UDF that is used for plan explain and logging.  */ ;/**  * Returns the name of the UDF that is used for plan explain and logging.  */ @Override public String toString() {     return getClass().getSimpleName(). }
