commented;modifiers;parameterAmount;loc;comment;code
true;;0;2;/**  * Returns the mapping for the fields of the {@link TableSource}'s {@link TableSchema} to the fields of  * its return type {@link TypeInformation}.  *  * <p>The mapping is done based on field names, e.g., a mapping "name" -> "f1" maps the schema field  * "name" to the field "f1" of the return type, for example in this case the second field of a  * {@link org.apache.flink.api.java.tuple.Tuple}.  *  * <p>The returned mapping must map all fields (except proctime and rowtime fields) to the return  * type. It can also provide a mapping for fields which are not in the {@link TableSchema} to make  * fields in the physical {@link TypeInformation} accessible for a {@code TimestampExtractor}.  *  * @return A mapping from {@link TableSchema} fields to {@link TypeInformation} fields or  * null if no mapping is necessary.  */ ;/**  * Returns the mapping for the fields of the {@link TableSource}'s {@link TableSchema} to the fields of  * its return type {@link TypeInformation}.  *  * <p>The mapping is done based on field names, e.g., a mapping "name" -> "f1" maps the schema field  * "name" to the field "f1" of the return type, for example in this case the second field of a  * {@link org.apache.flink.api.java.tuple.Tuple}.  *  * <p>The returned mapping must map all fields (except proctime and rowtime fields) to the return  * type. It can also provide a mapping for fields which are not in the {@link TableSchema} to make  * fields in the physical {@link TypeInformation} accessible for a {@code TimestampExtractor}.  *  * @return A mapping from {@link TableSchema} fields to {@link TypeInformation} fields or  * null if no mapping is necessary.  */ @Nullable Map<String, String> getFieldMapping().
