commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Object getValue() {     return value. }
false;public;0;3;;public TypeInformation<?> getType() {     return type. }
false;public;0;4;;@Override public List<CommonExpression> getChildren() {     return Collections.emptyList(). }
false;public;1;4;;@Override public <R> R accept(ExpressionVisitor<R> visitor) {     return visitor.visitValueLiteral(this). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     ValueLiteralExpression that = (ValueLiteralExpression) o.     return Objects.equals(value, that.value) && Objects.equals(type, that.type). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(value, type). }
false;public;0;22;;@Override public String toString() {     if (value == null) {         return "null".     }     if (type.equals(SqlTimeTypeInfo.DATE)) {         return stringifyValue(value.toString()) + ".toDate".     } else if (type.equals(SqlTimeTypeInfo.TIME)) {         return stringifyValue(value.toString()) + ".toTime".     } else if (type.equals(SqlTimeTypeInfo.TIMESTAMP)) {         return stringifyValue(value.toString()) + ".toTimestamp".     } else if (type.equals(TimeIntervalTypeInfo.INTERVAL_MILLIS)) {         return value + ".millis".     } else if (type.equals(TimeIntervalTypeInfo.INTERVAL_MONTHS)) {         return value + ".months".     } else if (type.equals(RowIntervalTypeInfo.INTERVAL_ROWS)) {         return value + ".rows".     } else {         return stringifyValue(value).     } }
false;private,static;1;6;;private static String stringifyValue(Object value) {     if (value instanceof String) {         return "'" + value + "'".     }     return value.toString(). }
false;private,static;1;30;;private static TypeInformation<?> deriveTypeFromValue(Object value) {     if (value instanceof String) {         return Types.STRING.     } else if (value instanceof Long) {         return Types.LONG.     } else if (value instanceof Integer) {         return Types.INT.     } else if (value instanceof Short) {         return Types.SHORT.     } else if (value instanceof Byte) {         return Types.BYTE.     } else if (value instanceof Double) {         return Types.DOUBLE.     } else if (value instanceof Float) {         return Types.FLOAT.     } else if (value instanceof Boolean) {         return Types.BOOLEAN.     } else if (value instanceof BigDecimal) {         return Types.BIG_DEC.     } else if (value instanceof Date) {         return Types.SQL_DATE.     } else if (value instanceof Time) {         return Types.SQL_TIME.     } else if (value instanceof Timestamp) {         return Types.SQL_TIMESTAMP.     } else {         throw new IllegalArgumentException("Cannot derive a type for value '" + value + "'. The type must be specified explicitly.").     } }
