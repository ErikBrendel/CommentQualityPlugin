commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Accumulator0 createAccumulator() {     return new Accumulator0(). }
false;public;1;4;;@Override public Long getValue(Accumulator0 accumulator) {     return 1L. }
true;public;3;2;// Overloaded accumulate method ;// Overloaded accumulate method public void accumulate(Accumulator0 accumulator, long iValue, int iWeight) { }
false;public;0;4;;@Override public boolean requiresOver() {     return true. }
false;public;0;4;;@Override public WeightedAvgAccum createAccumulator() {     return new WeightedAvgAccum(). }
false;public;1;8;;@Override public Long getValue(WeightedAvgAccum accumulator) {     if (accumulator.count == 0) {         return null.     } else {         return accumulator.sum / accumulator.count.     } }
true;public;5;4;// dummy to test constants ;// overloaded accumulate method // dummy to test constants public void accumulate(WeightedAvgAccum accumulator, long iValue, int iWeight, int x, String string) {     accumulator.sum += (iValue + Integer.parseInt(string)) * iWeight.     accumulator.count += iWeight. }
true;public;3;4;// overloaded accumulate method ;// overloaded accumulate method public void accumulate(WeightedAvgAccum accumulator, long iValue, int iWeight) {     accumulator.sum += iValue * iWeight.     accumulator.count += iWeight. }
true;public;3;4;// Overloaded accumulate method ;// Overloaded accumulate method public void accumulate(WeightedAvgAccum accumulator, int iValue, int iWeight) {     accumulator.sum += iValue * iWeight.     accumulator.count += iWeight. }
false;public;2;8;;public void merge(WeightedAvgAccum acc, Iterable<WeightedAvgAccum> it) {     Iterator<WeightedAvgAccum> iter = it.iterator().     while (iter.hasNext()) {         WeightedAvgAccum a = iter.next().         acc.count += a.count.         acc.sum += a.sum.     } }
false;public;0;4;;@Override public String toString() {     return "myWeightedAvg". }
false;public;1;4;;public void resetAccumulator(WeightedAvgAccum acc) {     acc.count = 0.     acc.sum = 0L. }
true;public;3;4;// Overloaded retract method ;// Overloaded retract method public void retract(WeightedAvgAccum accumulator, long iValue, int iWeight) {     accumulator.sum -= iValue * iWeight.     accumulator.count -= iWeight. }
true;public;3;4;// Overloaded retract method ;// Overloaded retract method public void retract(WeightedAvgAccum accumulator, int iValue, int iWeight) {     accumulator.sum -= iValue * iWeight.     accumulator.count -= iWeight. }
false;public;0;7;;@Override public CountDistinctAccum createAccumulator() {     CountDistinctAccum accum = new CountDistinctAccum().     accum.map = new MapView<>(Types.STRING, Types.INT).     accum.count = 0L.     return accum. }
true;public;2;14;// Overloaded accumulate method ;// Overloaded accumulate method public void accumulate(CountDistinctAccum accumulator, String id) {     try {         Integer cnt = accumulator.map.get(id).         if (cnt != null) {             cnt += 1.             accumulator.map.put(id, cnt).         } else {             accumulator.map.put(id, 1).             accumulator.count += 1.         }     } catch (Exception e) {         e.printStackTrace().     } }
true;public;2;14;// Overloaded accumulate method ;// Overloaded accumulate method public void accumulate(CountDistinctAccum accumulator, long id) {     try {         Integer cnt = accumulator.map.get(String.valueOf(id)).         if (cnt != null) {             cnt += 1.             accumulator.map.put(String.valueOf(id), cnt).         } else {             accumulator.map.put(String.valueOf(id), 1).             accumulator.count += 1.         }     } catch (Exception e) {         e.printStackTrace().     } }
false;public;1;4;;@Override public Long getValue(CountDistinctAccum accumulator) {     return accumulator.count. }
true;public;2;24;// Overloaded merge method ;// Overloaded merge method public void merge(CountDistinctAccum acc, Iterable<CountDistinctAccum> it) {     Iterator<CountDistinctAccum> iter = it.iterator().     while (iter.hasNext()) {         CountDistinctAccum mergeAcc = iter.next().         acc.count += mergeAcc.count.         try {             Iterator itrMap = mergeAcc.map.iterator().             while (itrMap.hasNext()) {                 Map.Entry<String, Integer> entry = (Map.Entry<String, Integer>) itrMap.next().                 String key = entry.getKey().                 Integer cnt = entry.getValue().                 if (acc.map.contains(key)) {                     acc.map.put(key, acc.map.get(key) + cnt).                 } else {                     acc.map.put(key, cnt).                 }             }         } catch (Exception e) {             e.printStackTrace().         }     } }
true;public;1;4;// Overloaded retract method ;// Overloaded retract method public void resetAccumulator(CountDistinctAccum acc) {     acc.map.clear().     acc.count = 0. }
true;public;2;16;// Overloaded retract method ;// Overloaded retract method public void retract(CountDistinctAccum accumulator, long id) {     try {         Integer cnt = accumulator.map.get(String.valueOf(id)).         if (cnt != null) {             cnt -= 1.             if (cnt <= 0) {                 accumulator.map.remove(String.valueOf(id)).                 accumulator.count -= 1.             } else {                 accumulator.map.put(String.valueOf(id), cnt).             }         }     } catch (Exception e) {         e.printStackTrace().     } }
true;public;1;4;// Overloaded retract method ;// Overloaded retract method public void resetAccumulator(CountDistinctAccum acc) {     acc.map.clear().     acc.count = 0. }
false;public;0;3;;public ListView<Long> getList() {     return list. }
false;public;1;3;;public void setList(ListView<Long> list) {     this.list = list. }
false;public;0;7;;@Override public DataViewTestAccum createAccumulator() {     DataViewTestAccum accum = new DataViewTestAccum().     accum.map = new MapView<>(Types.STRING, Types.INT).     accum.count = 0L.     return accum. }
true;public;3;12;// Overloaded accumulate method ;// Overloaded accumulate method public void accumulate(DataViewTestAccum accumulator, String a, long b) {     try {         if (!accumulator.map.contains(a)) {             accumulator.map.put(a, 1).             accumulator.count++.         }         accumulator.list.add(b).     } catch (Exception e) {         e.printStackTrace().     } }
false;public;1;12;;@Override public Long getValue(DataViewTestAccum accumulator) {     long sum = accumulator.count.     try {         for (Long value : accumulator.list.get()) {             sum += value.         }     } catch (Exception e) {         e.printStackTrace().     }     return sum. }
false;public;0;4;;@Override public void close() {     isCloseCalled = true. }
false;public;0;6;;@Override public MultiArgCountAcc createAccumulator() {     MultiArgCountAcc acc = new MultiArgCountAcc().     acc.count = 0L.     return acc. }
false;public;3;5;;public void accumulate(MultiArgCountAcc acc, Object in1, Object in2) {     if (in1 != null && in2 != null) {         acc.count += 1.     } }
false;public;3;5;;public void retract(MultiArgCountAcc acc, Object in1, Object in2) {     if (in1 != null && in2 != null) {         acc.count -= 1.     } }
false;public;2;5;;public void merge(MultiArgCountAcc accumulator, java.lang.Iterable<MultiArgCountAcc> iterable) {     for (MultiArgCountAcc otherAcc : iterable) {         accumulator.count += otherAcc.count.     } }
false;public;1;4;;@Override public Long getValue(MultiArgCountAcc acc) {     return acc.count. }
false;public;0;6;;@Override public MultiArgSumAcc createAccumulator() {     MultiArgSumAcc acc = new MultiArgSumAcc().     acc.count = 0L.     return acc. }
false;public;3;3;;public void accumulate(MultiArgSumAcc acc, long in1, long in2) {     acc.count += in1 + in2. }
false;public;3;3;;public void retract(MultiArgSumAcc acc, long in1, long in2) {     acc.count -= in1 + in2. }
false;public;1;4;;@Override public Long getValue(MultiArgSumAcc acc) {     return acc.count. }
