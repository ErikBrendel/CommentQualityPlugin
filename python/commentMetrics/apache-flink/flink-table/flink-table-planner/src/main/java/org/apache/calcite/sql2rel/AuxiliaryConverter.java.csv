commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Converts an expression.  *  * @param rexBuilder Rex  builder  * @param groupCall Call to the group function, e.g. "TUMBLE($2, 36000)"  * @param e Expression holding result of the group function, e.g. "$0"  *  * @return Expression for auxiliary function, e.g. "$0 + 36000" converts  * the result of TUMBLE to the result of TUMBLE_END  */ ;/**  * Converts an expression.  *  * @param rexBuilder Rex  builder  * @param groupCall Call to the group function, e.g. "TUMBLE($2, 36000)"  * @param e Expression holding result of the group function, e.g. "$0"  *  * @return Expression for auxiliary function, e.g. "$0 + 36000" converts  * the result of TUMBLE to the result of TUMBLE_END  */ RexNode convert(RexBuilder rexBuilder, RexNode groupCall, RexNode e).
false;public;3;23;;public RexNode convert(RexBuilder rexBuilder, RexNode groupCall, RexNode e) {     return rexBuilder.makeCall(this.f, e). // FLINK QUICK FIX // we do not use this logic right now // switch (f.getKind()) { // case TUMBLE_START: // case HOP_START: // case SESSION_START: // case SESSION_END: // TODO: ? // return e. // case TUMBLE_END: // return rexBuilder.makeCall( // SqlStdOperatorTable.PLUS, e, // ((RexCall) groupCall).operands.get(1)). // case HOP_END: // return rexBuilder.makeCall( // SqlStdOperatorTable.PLUS, e, // ((RexCall) groupCall).operands.get(2)). // default: // throw new AssertionError("unknown: " + f). // } }
