commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;// -------------------------------------------------------------------------------------------- @Override protected String[] getRow(String[] resultRow) {     return Arrays.copyOfRange(resultRow, 1, resultRow.length). }
false;protected;1;9;;@Override protected int computeColumnWidth(int idx) {     // change column has a fixed length     if (idx == 0) {         return 3.     } else {         return MAX_COLUMN_WIDTH.     } }
false;protected;0;11;;@Override protected void display() {     // scroll down before displaying     if (scrolling > 0) {         selectedRow = NO_ROW_SELECTED.     }     scrollDown(scrolling).     scrolling = 0.     super.display(). }
false;protected;0;54;;@Override protected void refresh() {     // retrieve change record     final TypedResult<List<Tuple2<Boolean, Row>>> result.     try {         result = client.getExecutor().retrieveResultChanges(client.getContext(), resultDescriptor.getResultId()).     } catch (SqlExecutionException e) {         close(e).         return.     }     // do nothing if result is empty     switch(result.getType()) {         case EMPTY:             // do nothing             break.         // stop retrieval if job is done         case EOS:             stopRetrieval(false).             break.         default:             List<Tuple2<Boolean, Row>> changes = result.getPayload().             for (Tuple2<Boolean, Row> change : changes) {                 // convert row                 final String[] changeRow = new String[change.f1.getArity() + 1].                 final String[] row = rowToString(change.f1).                 System.arraycopy(row, 0, changeRow, 1, row.length).                 if (change.f0) {                     changeRow[0] = "+".                 } else {                     changeRow[0] = "-".                 }                 // keep the CLI responsive                 if (results.size() >= DEFAULT_MAX_ROW_COUNT) {                     results.remove(0).                 }                 results.add(changeRow).                 scrolling++.             }             break.     }     // reset view     resetAllParts().     lastRetrieval = LocalTime.now(). }
false;protected;0;15;;@Override protected KeyMap<ResultChangelogOperation> getKeys() {     final KeyMap<ResultChangelogOperation> keys = new KeyMap<>().     // make ESC quicker     keys.setAmbiguousTimeout(200).     keys.bind(ResultChangelogOperation.QUIT, "q", "Q", esc(), ctrl('c')).     keys.bind(ResultChangelogOperation.REFRESH, "r", "R", key(client.getTerminal(), Capability.key_f5)).     keys.bind(ResultChangelogOperation.UP, "w", "W", key(client.getTerminal(), Capability.key_up)).     keys.bind(ResultChangelogOperation.DOWN, "s", "S", key(client.getTerminal(), Capability.key_down)).     keys.bind(ResultChangelogOperation.LEFT, "a", "A", key(client.getTerminal(), Capability.key_left)).     keys.bind(ResultChangelogOperation.RIGHT, "d", "D", key(client.getTerminal(), Capability.key_right)).     keys.bind(ResultChangelogOperation.OPEN, "o", "O", "\r").     keys.bind(ResultChangelogOperation.INC_REFRESH, "+").     keys.bind(ResultChangelogOperation.DEC_REFRESH, "-").     return keys. }
false;protected;2;32;;@Override protected void evaluate(ResultChangelogOperation operation, String binding) {     switch(operation) {         case QUIT:             close().             break.         case REFRESH:             refresh().             break.         case UP:             selectRowUp().             break.         case DOWN:             selectRowDown().             break.         case OPEN:             openRow().             break.         case LEFT:             scrollLeft().             break.         case RIGHT:             scrollRight().             break.         case INC_REFRESH:             increaseRefreshInterval().             break.         case DEC_REFRESH:             decreaseRefreshInterval(MIN_REFRESH_INTERVAL).             break.     } }
false;protected;0;4;;@Override protected String getTitle() {     return CliStrings.RESULT_TITLE + " (" + CliStrings.RESULT_CHANGELOG + ")". }
false;protected;0;28;;@Override protected List<AttributedString> computeHeaderLines() {     final AttributedStringBuilder statusLine = new AttributedStringBuilder().     statusLine.style(AttributedStyle.INVERSE).     // left     final String left.     if (isRetrieving()) {         left = CliStrings.DEFAULT_MARGIN + CliStrings.RESULT_REFRESH_INTERVAL + ' ' + REFRESH_INTERVALS.get(refreshInterval).f0.     } else {         left = CliStrings.DEFAULT_MARGIN + CliStrings.RESULT_STOPPED.     }     // right     final String right.     if (lastRetrieval == null) {         right = CliStrings.RESULT_LAST_REFRESH + ' ' + CliStrings.RESULT_REFRESH_UNKNOWN + CliStrings.DEFAULT_MARGIN.     } else {         right = CliStrings.RESULT_LAST_REFRESH + ' ' + lastRetrieval.format(TIME_FORMATTER) + CliStrings.DEFAULT_MARGIN.     }     // all together     final int middleSpace = getWidth() - left.length() - right.length().     statusLine.append(left).     repeatChar(statusLine, ' ', middleSpace).     statusLine.append(right).     return Arrays.asList(statusLine.toAttributedString(), AttributedString.EMPTY). }
false;protected;0;19;;@Override protected List<AttributedString> computeMainHeaderLines() {     final AttributedStringBuilder schemaHeader = new AttributedStringBuilder().     // add change column     schemaHeader.append(' ').     schemaHeader.style(AttributedStyle.DEFAULT.underline()).     schemaHeader.append("+/-").     schemaHeader.style(AttributedStyle.DEFAULT).     Arrays.stream(resultDescriptor.getResultSchema().getFieldNames()).forEach(s -> {         schemaHeader.append(' ').         schemaHeader.style(AttributedStyle.DEFAULT.underline()).         normalizeColumn(schemaHeader, s, MAX_COLUMN_WIDTH).         schemaHeader.style(AttributedStyle.DEFAULT).     }).     return Collections.singletonList(schemaHeader.toAttributedString()). }
false;protected;0;4;;@Override protected List<AttributedString> computeFooterLines() {     return formatTwoLineHelpOptions(getWidth(), getHelpOptions()). }
false;private;0;13;;// -------------------------------------------------------------------------------------------- private List<Tuple2<String, String>> getHelpOptions() {     final List<Tuple2<String, String>> options = new ArrayList<>().     options.add(Tuple2.of("Q", CliStrings.RESULT_QUIT)).     options.add(Tuple2.of("R", CliStrings.RESULT_REFRESH)).     options.add(Tuple2.of("+", CliStrings.RESULT_INC_REFRESH)).     options.add(Tuple2.of("-", CliStrings.RESULT_DEC_REFRESH)).     options.add(Tuple2.of("O", CliStrings.RESULT_OPEN)).     return options. }
