commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isMaterialized() {     return true. }
false;public;1;29;;@Override public TypedResult<Integer> snapshot(int pageSize) {     if (pageSize < 1) {         throw new SqlExecutionException("Page size must be greater than 0.").     }     synchronized (resultLock) {         // or program failed         if ((!isRetrieving() && isLastSnapshot) || executionException != null) {             return handleMissingResult().         } else // this snapshot is the last result that can be delivered         if (!isRetrieving()) {             isLastSnapshot = true.         }         this.pageSize = pageSize.         snapshot.clear().         for (int i = validRowPosition. i < materializedTable.size(). i++) {             snapshot.add(materializedTable.get(i)).         }         // at least one page         pageCount = Math.max(1, (int) Math.ceil(((double) snapshot.size() / pageSize))).         return TypedResult.payload(pageCount).     } }
false;public;1;10;;@Override public List<Row> retrievePage(int page) {     synchronized (resultLock) {         if (page <= 0 || page > pageCount) {             throw new SqlExecutionException("Invalid page '" + page + "'.").         }         return snapshot.subList(pageSize * (page - 1), Math.min(snapshot.size(), pageSize * page)).     } }
false;protected;1;13;;// -------------------------------------------------------------------------------------------- @Override protected void processRecord(Tuple2<Boolean, Row> change) {     synchronized (resultLock) {         // insert         if (change.f0) {             processInsert(change.f1).         } else // delete         {             processDelete(change.f1).         }     } }
false;protected;0;4;;@VisibleForTesting protected List<Row> getMaterializedTable() {     return materializedTable. }
false;private;1;8;;// -------------------------------------------------------------------------------------------- private void processInsert(Row row) {     // limit the materialized table     if (materializedTable.size() - validRowPosition >= maxRowCount) {         cleanUp().     }     materializedTable.add(row).     rowPositionCache.put(row, materializedTable.size() - 1). }
false;private;1;18;;private void processDelete(Row row) {     // delete the newest record first to minimize per-page changes     final Integer cachedPos = rowPositionCache.get(row).     final int startSearchPos.     if (cachedPos != null) {         startSearchPos = Math.min(cachedPos, materializedTable.size() - 1).     } else {         startSearchPos = materializedTable.size() - 1.     }     for (int i = startSearchPos. i >= validRowPosition. i--) {         if (materializedTable.get(i).equals(row)) {             materializedTable.remove(i).             rowPositionCache.remove(row).             break.         }     } }
false;private;0;20;;private void cleanUp() {     // invalidate row     final Row deleteRow = materializedTable.get(validRowPosition).     if (rowPositionCache.get(deleteRow) == validRowPosition) {         // this row has no duplicates in the materialized table,         // it can be removed from the cache         rowPositionCache.remove(deleteRow).     }     materializedTable.set(validRowPosition, null).     validRowPosition++.     // perform clean up in batches     if (validRowPosition >= overcommitThreshold) {         materializedTable.subList(0, validRowPosition).clear().         // adjust all cached indexes         rowPositionCache.replaceAll((k, v) -> v - validRowPosition).         validRowPosition = 0.     } }
false;private,static;1;5;;private static int computeMaterializedTableCapacity(int maxRowCount) {     return Math.min(MATERIALIZED_TABLE_MAX_INITIAL_CAPACITY, Math.max(1, (int) (maxRowCount * MATERIALIZED_TABLE_CAPACITY_FACTOR))). }
false;private,static;1;5;;private static int computeMaterializedTableOvercommit(int maxRowCount) {     return Math.min(MATERIALIZED_TABLE_MAX_OVERCOMMIT, (int) (maxRowCount * MATERIALIZED_TABLE_OVERCOMMIT_FACTOR)). }
