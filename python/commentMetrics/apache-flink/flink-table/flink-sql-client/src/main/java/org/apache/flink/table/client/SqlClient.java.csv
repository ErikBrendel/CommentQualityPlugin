commented;modifiers;parameterAmount;loc;comment;code
false;private;0;39;;private void start() {     if (isEmbedded) {         // create local executor with default environment         final List<URL> jars.         if (options.getJars() != null) {             jars = options.getJars().         } else {             jars = Collections.emptyList().         }         final List<URL> libDirs.         if (options.getLibraryDirs() != null) {             libDirs = options.getLibraryDirs().         } else {             libDirs = Collections.emptyList().         }         final Executor executor = new LocalExecutor(options.getDefaults(), jars, libDirs).         executor.start().         // create CLI client with session environment         final Environment sessionEnv = readSessionEnvironment(options.getEnvironment()).         final SessionContext context.         if (options.getSessionId() == null) {             context = new SessionContext(DEFAULT_SESSION_ID, sessionEnv).         } else {             context = new SessionContext(options.getSessionId(), sessionEnv).         }         // validate the environment (defaults and session)         validateEnvironment(context, executor).         // add shutdown hook         Runtime.getRuntime().addShutdownHook(new EmbeddedShutdownThread(context, executor)).         // do the actual work         openCli(context, executor).     } else {         throw new SqlClientException("Gateway mode is not supported yet.").     } }
true;private;2;21;/**  * Opens the CLI client for executing SQL statements.  *  * @param context session context  * @param executor executor  */ ;/**  * Opens the CLI client for executing SQL statements.  *  * @param context session context  * @param executor executor  */ private void openCli(SessionContext context, Executor executor) {     CliClient cli = null.     try {         cli = new CliClient(context, executor).         // interactive CLI mode         if (options.getUpdateStatement() == null) {             cli.open().         } else // execute single update statement         {             final boolean success = cli.submitUpdate(options.getUpdateStatement()).             if (!success) {                 throw new SqlClientException("Could not submit given SQL update statement to cluster.").             }         }     } finally {         if (cli != null) {             cli.close().         }     } }
false;private,static;2;10;;// -------------------------------------------------------------------------------------------- private static void validateEnvironment(SessionContext context, Executor executor) {     System.out.print("Validating current environment...").     try {         executor.validateSession(context).         System.out.println("done.").     } catch (SqlExecutionException e) {         throw new SqlClientException("The configured environment is invalid. Please check your environment files again.", e).     } }
false;private,static;2;6;;private static void shutdown(SessionContext context, Executor executor) {     System.out.println().     System.out.print("Shutting down executor...").     executor.stop(context).     System.out.println("done."). }
false;private,static;1;15;;private static Environment readSessionEnvironment(URL envUrl) {     // use an empty environment by default     if (envUrl == null) {         System.out.println("No session environment specified.").         return new Environment().     }     System.out.println("Reading session environment from: " + envUrl).     LOG.info("Using session environment file: {}", envUrl).     try {         return Environment.parse(envUrl).     } catch (IOException e) {         throw new SqlClientException("Could not read session environment file at: " + envUrl, e).     } }
false;public,static;1;41;;// -------------------------------------------------------------------------------------------- public static void main(String[] args) {     if (args.length < 1) {         CliOptionsParser.printHelpClient().         return.     }     switch(args[0]) {         case MODE_EMBEDDED:             // remove mode             final String[] modeArgs = Arrays.copyOfRange(args, 1, args.length).             final CliOptions options = CliOptionsParser.parseEmbeddedModeClient(modeArgs).             if (options.isPrintHelp()) {                 CliOptionsParser.printHelpEmbeddedModeClient().             } else {                 try {                     final SqlClient client = new SqlClient(true, options).                     client.start().                 } catch (SqlClientException e) {                     // make space in terminal                     System.out.println().                     System.out.println().                     LOG.error("SQL Client must stop.", e).                     throw e.                 } catch (Throwable t) {                     // make space in terminal                     System.out.println().                     System.out.println().                     LOG.error("SQL Client must stop. Unexpected exception. This is a bug. Please consider filing an issue.", t).                     throw new SqlClientException("Unexpected exception. This is a bug. Please consider filing an issue.", t).                 }             }             break.         case MODE_GATEWAY:             throw new SqlClientException("Gateway mode is not supported yet.").         default:             CliOptionsParser.printHelpClient().     } }
false;public;0;4;;@Override public void run() {     shutdown(context, executor). }
