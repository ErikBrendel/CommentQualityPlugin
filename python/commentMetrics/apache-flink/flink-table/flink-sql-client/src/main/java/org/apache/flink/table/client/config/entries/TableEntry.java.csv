commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public,static;1;3;;public static TableEntry create(Map<String, Object> config) {     return create(ConfigUtil.normalizeYaml(config)). }
false;private,static;1;38;;private static TableEntry create(DescriptorProperties properties) {     properties.validateString(TABLES_NAME, false, 1).     properties.validateEnumValues(TABLES_TYPE, false, Arrays.asList(TABLES_TYPE_VALUE_SOURCE, TABLES_TYPE_VALUE_SOURCE_TABLE, TABLES_TYPE_VALUE_SINK, TABLES_TYPE_VALUE_SINK_TABLE, TABLES_TYPE_VALUE_BOTH, TABLES_TYPE_VALUE_SOURCE_SINK_TABLE, TABLES_TYPE_VALUE_VIEW, TABLES_TYPE_VALUE_TEMPORAL_TABLE)).     final String name = properties.getString(TABLES_NAME).     final DescriptorProperties cleanedProperties = properties.withoutKeys(Arrays.asList(TABLES_NAME, TABLES_TYPE)).     switch(properties.getString(TABLES_TYPE)) {         case TABLES_TYPE_VALUE_SOURCE:         case TABLES_TYPE_VALUE_SOURCE_TABLE:             return new SourceTableEntry(name, cleanedProperties).         case TABLES_TYPE_VALUE_SINK:         case TABLES_TYPE_VALUE_SINK_TABLE:             return new SinkTableEntry(name, cleanedProperties).         case TABLES_TYPE_VALUE_BOTH:         case TABLES_TYPE_VALUE_SOURCE_SINK_TABLE:             return new SourceSinkTableEntry(name, cleanedProperties).         case TABLES_TYPE_VALUE_VIEW:             return new ViewEntry(name, cleanedProperties).         case TABLES_TYPE_VALUE_TEMPORAL_TABLE:             return new TemporalTableEntry(name, cleanedProperties).         default:             throw new SqlClientException("Unexpected table type.").     } }
