commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Starts the executor and ensures that its is ready for commands to be executed.  */ ;/**  * Starts the executor and ensures that its is ready for commands to be executed.  */ void start() throws SqlExecutionException.
true;;1;1;/**  * Lists all session properties that are defined by the executor and the session.  */ ;/**  * Lists all session properties that are defined by the executor and the session.  */ Map<String, String> getSessionProperties(SessionContext session) throws SqlExecutionException.
true;;1;1;/**  * Lists all tables known to the executor.  */ ;/**  * Lists all tables known to the executor.  */ List<String> listTables(SessionContext session) throws SqlExecutionException.
true;;1;1;/**  * Lists all user-defined functions known to the executor.  */ ;/**  * Lists all user-defined functions known to the executor.  */ List<String> listUserDefinedFunctions(SessionContext session) throws SqlExecutionException.
true;;2;1;/**  * Returns the schema of a table. Throws an exception if the table could not be found. The  * schema might contain time attribute types for helping the user during debugging a query.  */ ;/**  * Returns the schema of a table. Throws an exception if the table could not be found. The  * schema might contain time attribute types for helping the user during debugging a query.  */ TableSchema getTableSchema(SessionContext session, String name) throws SqlExecutionException.
true;;2;1;/**  * Returns a string-based explanation about AST and execution plan of the given statement.  */ ;/**  * Returns a string-based explanation about AST and execution plan of the given statement.  */ String explainStatement(SessionContext session, String statement) throws SqlExecutionException.
true;;3;1;/**  * Returns a list of completion hints for the given statement at the given position.  */ ;/**  * Returns a list of completion hints for the given statement at the given position.  */ List<String> completeStatement(SessionContext session, String statement, int position).
true;;2;1;/**  * Submits a Flink SQL query job (detached) and returns the result descriptor.  */ ;/**  * Submits a Flink SQL query job (detached) and returns the result descriptor.  */ ResultDescriptor executeQuery(SessionContext session, String query) throws SqlExecutionException.
true;;2;1;/**  * Asks for the next changelog results (non-blocking).  */ ;/**  * Asks for the next changelog results (non-blocking).  */ TypedResult<List<Tuple2<Boolean, Row>>> retrieveResultChanges(SessionContext session, String resultId) throws SqlExecutionException.
true;;3;1;/**  * Creates an immutable result snapshot of the running Flink job. Throws an exception if no Flink job can be found.  * Returns the number of pages.  */ ;/**  * Creates an immutable result snapshot of the running Flink job. Throws an exception if no Flink job can be found.  * Returns the number of pages.  */ TypedResult<Integer> snapshotResult(SessionContext session, String resultId, int pageSize) throws SqlExecutionException.
true;;2;1;/**  * Returns the rows that are part of the current page or throws an exception if the snapshot has been expired.  */ ;/**  * Returns the rows that are part of the current page or throws an exception if the snapshot has been expired.  */ List<Row> retrieveResultPage(String resultId, int page) throws SqlExecutionException.
true;;2;1;/**  * Cancels a table program and stops the result retrieval. Blocking until cancellation command has  * been sent to cluster.  */ ;/**  * Cancels a table program and stops the result retrieval. Blocking until cancellation command has  * been sent to cluster.  */ void cancelQuery(SessionContext session, String resultId) throws SqlExecutionException.
true;;2;1;/**  * Submits a Flink SQL update statement such as INSERT INTO.  *  * @param session context in with the statement is executed  * @param statement SQL update statement (currently only INSERT INTO is supported)  * @return information about the target of the submitted Flink job  */ ;/**  * Submits a Flink SQL update statement such as INSERT INTO.  *  * @param session context in with the statement is executed  * @param statement SQL update statement (currently only INSERT INTO is supported)  * @return information about the target of the submitted Flink job  */ ProgramTargetDescriptor executeUpdate(SessionContext session, String statement) throws SqlExecutionException.
true;;1;1;/**  * Validates the current session. For example, it checks whether all views are still valid.  */ ;/**  * Validates the current session. For example, it checks whether all views are still valid.  */ void validateSession(SessionContext session) throws SqlExecutionException.
true;;1;1;/**  * Stops the executor.  */ ;/**  * Stops the executor.  */ void stop(SessionContext session).
