commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static void buildGeneralOptions(Options options) {     options.addOption(OPTION_HELP). }
false;public,static;1;10;;public static Options getEmbeddedModeClientOptions(Options options) {     buildGeneralOptions(options).     options.addOption(OPTION_SESSION).     options.addOption(OPTION_ENVIRONMENT).     options.addOption(OPTION_DEFAULTS).     options.addOption(OPTION_JAR).     options.addOption(OPTION_LIBRARY).     options.addOption(OPTION_UPDATE).     return options. }
false;public,static;1;7;;public static Options getGatewayModeClientOptions(Options options) {     buildGeneralOptions(options).     options.addOption(OPTION_SESSION).     options.addOption(OPTION_ENVIRONMENT).     options.addOption(OPTION_UPDATE).     return options. }
false;public,static;1;7;;public static Options getGatewayModeGatewayOptions(Options options) {     buildGeneralOptions(options).     options.addOption(OPTION_DEFAULTS).     options.addOption(OPTION_JAR).     options.addOption(OPTION_LIBRARY).     return options. }
true;public,static;0;10;/**  * Prints the help for the client.  */ ;// -------------------------------------------------------------------------------------------- // Help // -------------------------------------------------------------------------------------------- /**  * Prints the help for the client.  */ public static void printHelpClient() {     System.out.println("./sql-client [MODE] [OPTIONS]").     System.out.println().     System.out.println("The following options are available:").     printHelpEmbeddedModeClient().     printHelpGatewayModeClient().     System.out.println(). }
true;public,static;0;9;/**  * Prints the help for the gateway.  */ ;/**  * Prints the help for the gateway.  */ public static void printHelpGateway() {     System.out.println("./sql-gateway [OPTIONS]").     System.out.println().     System.out.println("The following options are available:").     printHelpGatewayModeGateway().     System.out.println(). }
false;public,static;0;12;;public static void printHelpEmbeddedModeClient() {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     System.out.println("\nMode \"embedded\" submits Flink jobs from the local machine.").     System.out.println("\n  Syntax: embedded [OPTIONS]").     formatter.setSyntaxPrefix("  \"embedded\" mode options:").     formatter.printHelp(" ", EMBEDDED_MODE_CLIENT_OPTIONS).     System.out.println(). }
false;public,static;0;13;;public static void printHelpGatewayModeClient() { // TODO enable this once gateway mode is in place // HelpFormatter formatter = new HelpFormatter(). // formatter.setLeftPadding(5). // formatter.setWidth(80). //  // System.out.println("\nIn future versions: Mode \"gateway\" mode connects to the SQL gateway for submission."). // System.out.println("\n  Syntax: gateway [OPTIONS]"). // formatter.setSyntaxPrefix("  \"gateway\" mode options:"). // formatter.printHelp(" ", GATEWAY_MODE_CLIENT_OPTIONS). //  // System.out.println(). }
false;public,static;0;9;;public static void printHelpGatewayModeGateway() {     HelpFormatter formatter = new HelpFormatter().     formatter.setLeftPadding(5).     formatter.setWidth(80).     formatter.printHelp(" ", GATEWAY_MODE_GATEWAY_OPTIONS).     System.out.println(). }
false;public,static;1;18;;// -------------------------------------------------------------------------------------------- // Line Parsing // -------------------------------------------------------------------------------------------- public static CliOptions parseEmbeddedModeClient(String[] args) {     try {         DefaultParser parser = new DefaultParser().         CommandLine line = parser.parse(EMBEDDED_MODE_CLIENT_OPTIONS, args, true).         return new CliOptions(line.hasOption(CliOptionsParser.OPTION_HELP.getOpt()), checkSessionId(line), checkUrl(line, CliOptionsParser.OPTION_ENVIRONMENT), checkUrl(line, CliOptionsParser.OPTION_DEFAULTS), checkUrls(line, CliOptionsParser.OPTION_JAR), checkUrls(line, CliOptionsParser.OPTION_LIBRARY), line.getOptionValue(CliOptionsParser.OPTION_UPDATE.getOpt())).     } catch (ParseException e) {         throw new SqlClientException(e.getMessage()).     } }
false;public,static;1;18;;public static CliOptions parseGatewayModeClient(String[] args) {     try {         DefaultParser parser = new DefaultParser().         CommandLine line = parser.parse(GATEWAY_MODE_CLIENT_OPTIONS, args, true).         return new CliOptions(line.hasOption(CliOptionsParser.OPTION_HELP.getOpt()), checkSessionId(line), checkUrl(line, CliOptionsParser.OPTION_ENVIRONMENT), null, checkUrls(line, CliOptionsParser.OPTION_JAR), checkUrls(line, CliOptionsParser.OPTION_LIBRARY), line.getOptionValue(CliOptionsParser.OPTION_UPDATE.getOpt())).     } catch (ParseException e) {         throw new SqlClientException(e.getMessage()).     } }
false;public,static;1;18;;public static CliOptions parseGatewayModeGateway(String[] args) {     try {         DefaultParser parser = new DefaultParser().         CommandLine line = parser.parse(GATEWAY_MODE_GATEWAY_OPTIONS, args, true).         return new CliOptions(line.hasOption(CliOptionsParser.OPTION_HELP.getOpt()), null, null, checkUrl(line, CliOptionsParser.OPTION_DEFAULTS), checkUrls(line, CliOptionsParser.OPTION_JAR), checkUrls(line, CliOptionsParser.OPTION_LIBRARY), null).     } catch (ParseException e) {         throw new SqlClientException(e.getMessage()).     } }
false;private,static;2;7;;// -------------------------------------------------------------------------------------------- private static URL checkUrl(CommandLine line, Option option) {     final List<URL> urls = checkUrls(line, option).     if (urls != null && !urls.isEmpty()) {         return urls.get(0).     }     return null. }
false;private,static;2;16;;private static List<URL> checkUrls(CommandLine line, Option option) {     if (line.hasOption(option.getOpt())) {         final String[] urls = line.getOptionValues(option.getOpt()).         return Arrays.stream(urls).distinct().map((url) -> {             try {                 return Path.fromLocalFile(new File(url).getAbsoluteFile()).toUri().toURL().             } catch (Exception e) {                 throw new SqlClientException("Invalid path for option '" + option.getLongOpt() + "': " + url, e).             }         }).collect(Collectors.toList()).     }     return null. }
false;private,static;1;7;;private static String checkSessionId(CommandLine line) {     final String sessionId = line.getOptionValue(CliOptionsParser.OPTION_SESSION.getOpt()).     if (sessionId != null && !sessionId.matches("[a-zA-Z0-9_\\-.]+")) {         throw new SqlClientException("Session identifier must only consists of 'a-zA-Z0-9_-.'.").     }     return sessionId. }
