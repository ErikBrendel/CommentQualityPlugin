commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;// -------------------------------------------------------------------------------------------- @Override protected void init() { // nothing to do }
false;protected;0;11;;@Override protected KeyMap<RowOperation> getKeys() {     final KeyMap<RowOperation> keys = new KeyMap<>().     // make ESC quicker     keys.setAmbiguousTimeout(200).     keys.bind(RowOperation.QUIT, "q", "Q", esc()).     keys.bind(RowOperation.UP, "w", "W", key(client.getTerminal(), Capability.key_up)).     keys.bind(RowOperation.DOWN, "s", "S", key(client.getTerminal(), Capability.key_down)).     keys.bind(RowOperation.LEFT, "a", "A", key(client.getTerminal(), Capability.key_left)).     keys.bind(RowOperation.RIGHT, "d", "D", key(client.getTerminal(), Capability.key_right)).     return keys. }
false;protected;2;20;;@Override protected void evaluate(RowOperation operation, String binding) {     switch(operation) {         case QUIT:             close().             break.         case UP:             scrollUp().             break.         case DOWN:             scrollDown().             break.         case LEFT:             scrollLeft().             break.         case RIGHT:             scrollRight().             break.     } }
false;protected;0;4;;@Override protected String getTitle() {     return CliStrings.ROW_HEADER. }
false;protected;0;4;;@Override protected List<AttributedString> computeHeaderLines() {     return Collections.singletonList(AttributedString.EMPTY). }
false;protected;0;4;;@Override protected List<AttributedString> computeFooterLines() {     return Collections.singletonList(CliStrings.ROW_QUIT). }
false;protected;0;4;;@Override protected List<AttributedString> computeMainHeaderLines() {     return Collections.emptyList(). }
false;protected;0;30;;@Override protected List<AttributedString> computeMainLines() {     final List<AttributedString> lines = new ArrayList<>().     final AttributedStringBuilder sb = new AttributedStringBuilder().     IntStream.range(0, row.length).forEach(i -> {         final String name = columnNames[i].         final String type = columnTypes[i].         sb.setLength(0).         sb.append(CliStrings.DEFAULT_MARGIN).         sb.style(AttributedStyle.BOLD).         sb.append(name).         sb.append(" (").         sb.append(type).         sb.append(')').         sb.append(':').         lines.add(sb.toAttributedString()).         sb.setLength(0).         sb.append(CliStrings.DEFAULT_MARGIN).         sb.style(AttributedStyle.DEFAULT).         sb.append(row[i]).         lines.add(sb.toAttributedString()).         lines.add(AttributedString.EMPTY).     }).     return lines. }
false;protected;0;4;;@Override protected void cleanUp() { // nothing to do }
