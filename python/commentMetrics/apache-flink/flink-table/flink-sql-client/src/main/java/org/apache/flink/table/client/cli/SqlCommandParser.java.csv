commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;22;;public static Optional<SqlCommandCall> parse(String stmt) {     // normalize     stmt = stmt.trim().     // remove '.' at the end     if (stmt.endsWith(".")) {         stmt = stmt.substring(0, stmt.length() - 1).trim().     }     // parse     for (SqlCommand cmd : SqlCommand.values()) {         final Matcher matcher = cmd.pattern.matcher(stmt).         if (matcher.matches()) {             final String[] groups = new String[matcher.groupCount()].             for (int i = 0. i < groups.length. i++) {                 groups[i] = matcher.group(i + 1).             }             return cmd.operandConverter.apply(groups).map((operands) -> new SqlCommandCall(cmd, operands)).         }     }     return Optional.empty(). }
false;public;0;4;;@Override public String toString() {     return super.toString().replace('_', ' '). }
false;public;0;3;;public boolean hasOperands() {     return operandConverter != NO_OPERANDS. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     SqlCommandCall that = (SqlCommandCall) o.     return command == that.command && Arrays.equals(operands, that.operands). }
false;public;0;6;;@Override public int hashCode() {     int result = Objects.hash(command).     result = 31 * result + Arrays.hashCode(operands).     return result. }
false;public;0;4;;@Override public String toString() {     return command + "(" + Arrays.toString(operands) + ")". }
