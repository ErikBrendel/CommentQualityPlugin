commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;33;;@Override protected void validate(DescriptorProperties properties) {     properties.validateEnumValues(EXECUTION_TYPE, true, Arrays.asList(EXECUTION_TYPE_VALUE_BATCH, EXECUTION_TYPE_VALUE_STREAMING)).     properties.validateEnumValues(EXECUTION_TIME_CHARACTERISTIC, true, Arrays.asList(EXECUTION_TIME_CHARACTERISTIC_VALUE_EVENT_TIME, EXECUTION_TIME_CHARACTERISTIC_VALUE_PROCESSING_TIME)).     properties.validateLong(EXECUTION_PERIODIC_WATERMARKS_INTERVAL, true, 1).     properties.validateLong(EXECUTION_MIN_STATE_RETENTION, true, 0).     properties.validateLong(EXECUTION_MAX_STATE_RETENTION, true, 0).     properties.validateInt(EXECUTION_PARALLELISM, true, 1).     properties.validateInt(EXECUTION_MAX_PARALLELISM, true, 1).     properties.validateInt(EXECUTION_MAX_TABLE_RESULT_ROWS, true, 1).     properties.validateEnumValues(EXECUTION_RESTART_STRATEGY_TYPE, true, Arrays.asList(EXECUTION_RESTART_STRATEGY_TYPE_VALUE_FALLBACK, EXECUTION_RESTART_STRATEGY_TYPE_VALUE_NONE, EXECUTION_RESTART_STRATEGY_TYPE_VALUE_FIXED_DELAY, EXECUTION_RESTART_STRATEGY_TYPE_VALUE_FAILURE_RATE)).     properties.validateInt(EXECUTION_RESTART_STRATEGY_ATTEMPTS, true, 1).     properties.validateLong(EXECUTION_RESTART_STRATEGY_DELAY, true, 0).     properties.validateLong(EXECUTION_RESTART_STRATEGY_FAILURE_RATE_INTERVAL, true, 1).     properties.validateInt(EXECUTION_RESTART_STRATEGY_MAX_FAILURES_PER_INTERVAL, true, 1). }
false;public;0;5;;public boolean isStreamingExecution() {     return properties.getOptionalString(EXECUTION_TYPE).map((v) -> v.equals(EXECUTION_TYPE_VALUE_STREAMING)).orElse(false). }
false;public;0;5;;public boolean isBatchExecution() {     return properties.getOptionalString(EXECUTION_TYPE).map((v) -> v.equals(EXECUTION_TYPE_VALUE_BATCH)).orElse(false). }
false;public;0;18;;public TimeCharacteristic getTimeCharacteristic() {     return properties.getOptionalString(EXECUTION_TIME_CHARACTERISTIC).flatMap((v) -> {         switch(v) {             case EXECUTION_TIME_CHARACTERISTIC_VALUE_EVENT_TIME:                 return Optional.of(TimeCharacteristic.EventTime).             case EXECUTION_TIME_CHARACTERISTIC_VALUE_PROCESSING_TIME:                 return Optional.of(TimeCharacteristic.ProcessingTime).             default:                 return Optional.empty().         }     }).orElseGet(() -> useDefaultValue(EXECUTION_TIME_CHARACTERISTIC, TimeCharacteristic.EventTime, EXECUTION_TIME_CHARACTERISTIC_VALUE_EVENT_TIME)). }
false;public;0;4;;public long getPeriodicWatermarksInterval() {     return properties.getOptionalLong(EXECUTION_PERIODIC_WATERMARKS_INTERVAL).orElseGet(() -> useDefaultValue(EXECUTION_PERIODIC_WATERMARKS_INTERVAL, 200L)). }
false;public;0;4;;public long getMinStateRetention() {     return properties.getOptionalLong(EXECUTION_MIN_STATE_RETENTION).orElseGet(() -> useDefaultValue(EXECUTION_MIN_STATE_RETENTION, 0L)). }
false;public;0;4;;public long getMaxStateRetention() {     return properties.getOptionalLong(EXECUTION_MAX_STATE_RETENTION).orElseGet(() -> useDefaultValue(EXECUTION_MAX_STATE_RETENTION, 0L)). }
false;public;0;4;;public int getParallelism() {     return properties.getOptionalInt(EXECUTION_PARALLELISM).orElseGet(() -> useDefaultValue(EXECUTION_PARALLELISM, 1)). }
false;public;0;4;;public int getMaxParallelism() {     return properties.getOptionalInt(EXECUTION_MAX_PARALLELISM).orElseGet(() -> useDefaultValue(EXECUTION_MAX_PARALLELISM, 128)). }
false;public;0;4;;public int getMaxTableResultRows() {     return properties.getOptionalInt(EXECUTION_MAX_TABLE_RESULT_ROWS).orElseGet(() -> useDefaultValue(EXECUTION_MAX_TABLE_RESULT_ROWS, 1_000_000)). }
false;public;0;33;;public RestartStrategies.RestartStrategyConfiguration getRestartStrategy() {     return properties.getOptionalString(EXECUTION_RESTART_STRATEGY_TYPE).flatMap((v) -> {         switch(v) {             case EXECUTION_RESTART_STRATEGY_TYPE_VALUE_NONE:                 return Optional.of(RestartStrategies.noRestart()).             case EXECUTION_RESTART_STRATEGY_TYPE_VALUE_FIXED_DELAY:                 final int attempts = properties.getOptionalInt(EXECUTION_RESTART_STRATEGY_ATTEMPTS).orElseGet(() -> useDefaultValue(EXECUTION_RESTART_STRATEGY_ATTEMPTS, Integer.MAX_VALUE)).                 final long fixedDelay = properties.getOptionalLong(EXECUTION_RESTART_STRATEGY_DELAY).orElseGet(() -> useDefaultValue(EXECUTION_RESTART_STRATEGY_DELAY, 10_000L)).                 return Optional.of(RestartStrategies.fixedDelayRestart(attempts, fixedDelay)).             case EXECUTION_RESTART_STRATEGY_TYPE_VALUE_FAILURE_RATE:                 final int failureRate = properties.getOptionalInt(EXECUTION_RESTART_STRATEGY_MAX_FAILURES_PER_INTERVAL).orElseGet(() -> useDefaultValue(EXECUTION_RESTART_STRATEGY_MAX_FAILURES_PER_INTERVAL, 1)).                 final long failureInterval = properties.getOptionalLong(EXECUTION_RESTART_STRATEGY_FAILURE_RATE_INTERVAL).orElseGet(() -> useDefaultValue(EXECUTION_RESTART_STRATEGY_FAILURE_RATE_INTERVAL, 60_000L)).                 final long attemptDelay = properties.getOptionalLong(EXECUTION_RESTART_STRATEGY_DELAY).orElseGet(() -> useDefaultValue(EXECUTION_RESTART_STRATEGY_DELAY, 10_000L)).                 return Optional.of(RestartStrategies.failureRateRestart(failureRate, Time.milliseconds(failureInterval), Time.milliseconds(attemptDelay))).             default:                 return Optional.empty().         }     }).orElseGet(() -> useDefaultValue(EXECUTION_RESTART_STRATEGY_TYPE, RestartStrategies.fallBackRestart(), EXECUTION_RESTART_STRATEGY_TYPE_VALUE_FALLBACK)). }
false;public;0;5;;public boolean isChangelogMode() {     return properties.getOptionalString(EXECUTION_RESULT_MODE).map((v) -> v.equals(EXECUTION_RESULT_MODE_VALUE_CHANGELOG)).orElse(false). }
false;public;0;5;;public boolean isTableMode() {     return properties.getOptionalString(EXECUTION_RESULT_MODE).map((v) -> v.equals(EXECUTION_RESULT_MODE_VALUE_TABLE)).orElse(false). }
false;public;0;3;;public Map<String, String> asTopLevelMap() {     return properties.asPrefixedMap(EXECUTION_ENTRY + '.'). }
false;private;2;3;;private <V> V useDefaultValue(String key, V defaultValue) {     return useDefaultValue(key, defaultValue, defaultValue.toString()). }
false;private;3;4;;private <V> V useDefaultValue(String key, V defaultValue, String defaultString) {     LOG.info("Property '{}.{}' not specified. Using default value: {}", EXECUTION_ENTRY, key, defaultString).     return defaultValue. }
false;public,static;1;3;;// -------------------------------------------------------------------------------------------- public static ExecutionEntry create(Map<String, Object> config) {     return new ExecutionEntry(ConfigUtil.normalizeYaml(config)). }
true;public,static;2;9;/**  * Merges two execution entries. The properties of the first execution entry might be  * overwritten by the second one.  */ ;/**  * Merges two execution entries. The properties of the first execution entry might be  * overwritten by the second one.  */ public static ExecutionEntry merge(ExecutionEntry execution1, ExecutionEntry execution2) {     final Map<String, String> mergedProperties = new HashMap<>(execution1.asMap()).     mergedProperties.putAll(execution2.asMap()).     final DescriptorProperties properties = new DescriptorProperties(true).     properties.putProperties(mergedProperties).     return new ExecutionEntry(properties). }
true;public,static;2;15;/**  * Creates a new execution entry enriched with additional properties that are prefixed with  * {@link Environment#EXECUTION_ENTRY}.  */ ;/**  * Creates a new execution entry enriched with additional properties that are prefixed with  * {@link Environment#EXECUTION_ENTRY}.  */ public static ExecutionEntry enrich(ExecutionEntry execution, Map<String, String> prefixedProperties) {     final Map<String, String> enrichedProperties = new HashMap<>(execution.asMap()).     prefixedProperties.forEach((k, v) -> {         final String normalizedKey = k.toLowerCase().         if (k.startsWith(EXECUTION_ENTRY + '.')) {             enrichedProperties.put(normalizedKey.substring(EXECUTION_ENTRY.length() + 1), v).         }     }).     final DescriptorProperties properties = new DescriptorProperties(true).     properties.putProperties(enrichedProperties).     return new ExecutionEntry(properties). }
