commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;// -------------------------------------------------------------------------------------------- @Override protected String[] getRow(String[] resultRow) {     return resultRow. }
false;protected;1;4;;@Override protected int computeColumnWidth(int idx) {     return MAX_COLUMN_WIDTH. }
false;protected;0;30;;@Override protected void refresh() {     // take snapshot     TypedResult<Integer> result.     try {         result = client.getExecutor().snapshotResult(client.getContext(), resultDescriptor.getResultId(), getVisibleMainHeight()).     } catch (SqlExecutionException e) {         close(e).         return.     }     // stop retrieval if job is done     if (result.getType() == TypedResult.ResultType.EOS) {         stopRetrieval(false).     } else // update page     if (result.getType() == TypedResult.ResultType.PAYLOAD) {         int newPageCount = result.getPayload().         pageCount = newPageCount.         if (page > newPageCount) {             page = LAST_PAGE.         }         updatePage().     }     lastRetrieval = LocalTime.now().     // reset view     resetAllParts(). }
false;protected;0;19;;@Override protected KeyMap<ResultTableOperation> getKeys() {     final KeyMap<ResultTableOperation> keys = new KeyMap<>().     // make ESC quicker     keys.setAmbiguousTimeout(200).     keys.bind(ResultTableOperation.QUIT, "q", "Q", esc(), ctrl('c')).     keys.bind(ResultTableOperation.REFRESH, "r", "R", key(client.getTerminal(), Capability.key_f5)).     keys.bind(ResultTableOperation.UP, "w", "W", key(client.getTerminal(), Capability.key_up)).     keys.bind(ResultTableOperation.DOWN, "s", "S", key(client.getTerminal(), Capability.key_down)).     keys.bind(ResultTableOperation.LEFT, "a", "A", key(client.getTerminal(), Capability.key_left)).     keys.bind(ResultTableOperation.RIGHT, "d", "D", key(client.getTerminal(), Capability.key_right)).     keys.bind(ResultTableOperation.OPEN, "o", "O", "\r").     keys.bind(ResultTableOperation.GOTO, "g", "G").     keys.bind(ResultTableOperation.NEXT, "n", "N").     keys.bind(ResultTableOperation.PREV, "p", "P").     keys.bind(ResultTableOperation.LAST, "l", "L", key(client.getTerminal(), Capability.key_end)).     keys.bind(ResultTableOperation.INC_REFRESH, "+").     keys.bind(ResultTableOperation.DEC_REFRESH, "-").     return keys. }
false;protected;2;44;;@Override protected void evaluate(ResultTableOperation operation, String binding) {     switch(operation) {         case QUIT:             close().             break.         case REFRESH:             refresh().             break.         case UP:             selectRowUp().             break.         case DOWN:             selectRowDown().             break.         case OPEN:             openRow().             break.         case GOTO:             gotoPage().             break.         case NEXT:             gotoNextPage().             break.         case PREV:             gotoPreviousPage().             break.         case LAST:             gotoLastPage().             break.         case LEFT:             scrollLeft().             break.         case RIGHT:             scrollRight().             break.         case INC_REFRESH:             increaseRefreshInterval().             break.         case DEC_REFRESH:             decreaseRefreshInterval(MIN_REFRESH_INTERVAL).             break.     } }
false;protected;0;4;;@Override protected String getTitle() {     return CliStrings.RESULT_TITLE + " (" + CliStrings.RESULT_TABLE + ")". }
false;protected;0;42;;@Override protected List<AttributedString> computeHeaderLines() {     final AttributedStringBuilder statusLine = new AttributedStringBuilder().     statusLine.style(AttributedStyle.INVERSE).     // left     final String left.     if (isRetrieving()) {         left = CliStrings.DEFAULT_MARGIN + CliStrings.RESULT_REFRESH_INTERVAL + ' ' + REFRESH_INTERVALS.get(refreshInterval).f0.     } else {         left = CliStrings.DEFAULT_MARGIN + CliStrings.RESULT_STOPPED.     }     // middle     final StringBuilder middleBuilder = new StringBuilder().     middleBuilder.append(CliStrings.RESULT_PAGE).     middleBuilder.append(' ').     if (page == LAST_PAGE) {         middleBuilder.append(CliStrings.RESULT_LAST_PAGE).     } else {         middleBuilder.append(page).     }     middleBuilder.append(CliStrings.RESULT_PAGE_OF).     middleBuilder.append(pageCount).     final String middle = middleBuilder.toString().     // right     final String right.     if (lastRetrieval == null) {         right = CliStrings.RESULT_LAST_REFRESH + ' ' + CliStrings.RESULT_REFRESH_UNKNOWN + CliStrings.DEFAULT_MARGIN.     } else {         right = CliStrings.RESULT_LAST_REFRESH + ' ' + lastRetrieval.format(TIME_FORMATTER) + CliStrings.DEFAULT_MARGIN.     }     // all together     final int totalLeftSpace = getWidth() - middle.length().     final int leftSpace = totalLeftSpace / 2 - left.length().     statusLine.append(left).     repeatChar(statusLine, ' ', leftSpace).     statusLine.append(middle).     final int rightSpacing = getWidth() - statusLine.length() - right.length().     repeatChar(statusLine, ' ', rightSpacing).     statusLine.append(right).     return Arrays.asList(statusLine.toAttributedString(), AttributedString.EMPTY). }
false;protected;0;13;;@Override protected List<AttributedString> computeMainHeaderLines() {     final AttributedStringBuilder schemaHeader = new AttributedStringBuilder().     Arrays.stream(resultDescriptor.getResultSchema().getFieldNames()).forEach(s -> {         schemaHeader.append(' ').         schemaHeader.style(AttributedStyle.DEFAULT.underline()).         normalizeColumn(schemaHeader, s, MAX_COLUMN_WIDTH).         schemaHeader.style(AttributedStyle.DEFAULT).     }).     return Collections.singletonList(schemaHeader.toAttributedString()). }
false;protected;0;4;;@Override protected List<AttributedString> computeFooterLines() {     return formatTwoLineHelpOptions(getWidth(), getHelpOptions()). }
false;private;0;39;;// -------------------------------------------------------------------------------------------- private void updatePage() {     // retrieve page     final int retrievalPage = page == LAST_PAGE ? pageCount : page.     final List<Row> rows.     try {         rows = client.getExecutor().retrieveResultPage(resultDescriptor.getResultId(), retrievalPage).     } catch (SqlExecutionException e) {         close(e).         return.     }     // convert page     final List<String[]> stringRows = rows.stream().map(CliUtils::rowToString).collect(Collectors.toList()).     // update results     if (previousResultsPage == retrievalPage) {         // only use the previous results if the current page number has not changed         // this allows for updated results when the key space remains constant         previousResults = results.     } else {         previousResults = null.         previousResultsPage = retrievalPage.     }     results = stringRows.     // check if selected row is still valid     if (selectedRow != NO_ROW_SELECTED) {         if (selectedRow >= results.size()) {             selectedRow = NO_ROW_SELECTED.         }     }     // reset view     resetAllParts(). }
false;private;0;19;;private List<Tuple2<String, String>> getHelpOptions() {     final List<Tuple2<String, String>> options = new ArrayList<>().     options.add(Tuple2.of("Q", CliStrings.RESULT_QUIT)).     options.add(Tuple2.of("R", CliStrings.RESULT_REFRESH)).     options.add(Tuple2.of("+", CliStrings.RESULT_INC_REFRESH)).     options.add(Tuple2.of("-", CliStrings.RESULT_DEC_REFRESH)).     options.add(Tuple2.of("G", CliStrings.RESULT_GOTO)).     options.add(Tuple2.of("L", CliStrings.RESULT_LAST)).     options.add(Tuple2.of("N", CliStrings.RESULT_NEXT)).     options.add(Tuple2.of("P", CliStrings.RESULT_PREV)).     options.add(Tuple2.of("O", CliStrings.RESULT_OPEN)).     return options. }
false;private;0;20;;private void gotoPage() {     final CliInputView view = new CliInputView(client, CliStrings.INPUT_ENTER_PAGE + " [1 to " + pageCount + "]", (s) -> {         // validate input         final int newPage.         try {             newPage = Integer.parseInt(s).         } catch (NumberFormatException e) {             return false.         }         return newPage > 0 && newPage <= pageCount.     }).     // enter view     view.open().     if (view.getResult() != null) {         page = Integer.parseInt(view.getResult()).         updatePage().     } }
false;private;0;7;;private void gotoNextPage() {     final int curPageIndex = page == LAST_PAGE ? pageCount : page.     if (curPageIndex < pageCount) {         page = curPageIndex + 1.     }     updatePage(). }
false;private;0;7;;private void gotoPreviousPage() {     final int curPageIndex = page == LAST_PAGE ? pageCount : page.     if (curPageIndex > 1) {         page = curPageIndex - 1.     }     updatePage(). }
false;private;0;4;;private void gotoLastPage() {     page = LAST_PAGE.     updatePage(). }
