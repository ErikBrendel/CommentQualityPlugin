commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;public void setSessionProperty(String key, String value) {     sessionProperties.put(key, value). }
false;public;0;3;;public void resetSessionProperties() {     sessionProperties.clear(). }
false;public;1;3;;public void addView(ViewEntry viewEntry) {     views.put(viewEntry.getName(), viewEntry). }
false;public;1;3;;public void removeView(String name) {     views.remove(name). }
false;public;0;3;;public Map<String, ViewEntry> getViews() {     return Collections.unmodifiableMap(views). }
false;public;0;3;;public String getName() {     return name. }
false;public;0;6;;public Environment getEnvironment() {     return Environment.enrich(defaultEnvironment, sessionProperties, views). }
false;public;0;6;;public SessionContext copy() {     final SessionContext session = new SessionContext(name, defaultEnvironment).     session.sessionProperties.putAll(sessionProperties).     session.views.putAll(views).     return session. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (!(o instanceof SessionContext)) {         return false.     }     SessionContext context = (SessionContext) o.     return Objects.equals(name, context.name) && Objects.equals(defaultEnvironment, context.defaultEnvironment) && Objects.equals(sessionProperties, context.sessionProperties) && Objects.equals(views, context.views). }
false;public;0;8;;@Override public int hashCode() {     return Objects.hash(name, defaultEnvironment, sessionProperties, views). }
