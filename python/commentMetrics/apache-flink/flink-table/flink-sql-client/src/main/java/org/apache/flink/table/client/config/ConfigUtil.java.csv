commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;7;/**  * Normalizes key-value properties from Yaml in the normalized format of the Table API.  */ ;/**  * Normalizes key-value properties from Yaml in the normalized format of the Table API.  */ public static DescriptorProperties normalizeYaml(Map<String, Object> yamlMap) {     final Map<String, String> normalized = new HashMap<>().     yamlMap.forEach((k, v) -> normalizeYamlObject(normalized, k, v)).     final DescriptorProperties properties = new DescriptorProperties(true).     properties.putProperties(normalized).     return properties. }
false;private,static;3;13;;private static void normalizeYamlObject(Map<String, String> normalized, String key, Object value) {     if (value instanceof Map) {         final Map<?, ?> map = (Map<?, ?>) value.         map.forEach((k, v) -> normalizeYamlObject(normalized, key + "." + k, v)).     } else if (value instanceof List) {         final List<?> list = (List<?>) value.         for (int i = 0. i < list.size(). i++) {             normalizeYamlObject(normalized, key + "." + i, list.get(i)).         }     } else {         normalized.put(key, value.toString()).     } }
false;public;0;7;;@Override public String getCurrentName() throws IOException {     if (_currToken == JsonToken.FIELD_NAME) {         return _currentFieldName.toLowerCase().     }     return super.getCurrentName(). }
false;public;0;7;;@Override public String getText() throws IOException {     if (_currToken == JsonToken.FIELD_NAME) {         return _currentFieldName.toLowerCase().     }     return super.getText(). }
false;protected;2;22;;@Override protected YAMLParser _createParser(InputStream in, IOContext ctxt) throws IOException {     final Reader r = _createReader(in, null, ctxt).     // normalize all key to lower case keys     return new YAMLParser(ctxt, _getBufferRecycler(), _parserFeatures, _yamlParserFeatures, _objectCodec, r) {          @Override         public String getCurrentName() throws IOException {             if (_currToken == JsonToken.FIELD_NAME) {                 return _currentFieldName.toLowerCase().             }             return super.getCurrentName().         }          @Override         public String getText() throws IOException {             if (_currToken == JsonToken.FIELD_NAME) {                 return _currentFieldName.toLowerCase().             }             return super.getText().         }     }. }
