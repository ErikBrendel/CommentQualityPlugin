commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isMaterialized() {     return false. }
false;public;0;27;;@Override public TypedResult<List<Tuple2<Boolean, Row>>> retrieveChanges() {     synchronized (resultLock) {         // but the program must not have failed         if (isRetrieving() && executionException == null) {             if (changeRecordBuffer.isEmpty()) {                 return TypedResult.empty().             } else {                 final List<Tuple2<Boolean, Row>> change = new ArrayList<>(changeRecordBuffer).                 changeRecordBuffer.clear().                 resultLock.notify().                 return TypedResult.payload(change).             }         } else // retrieval thread is dead but there is still a record to be delivered         if (!isRetrieving() && !changeRecordBuffer.isEmpty()) {             final List<Tuple2<Boolean, Row>> change = new ArrayList<>(changeRecordBuffer).             changeRecordBuffer.clear().             return TypedResult.payload(change).         } else // no results can be returned anymore         {             return handleMissingResult().         }     } }
false;protected;1;15;;// -------------------------------------------------------------------------------------------- @Override protected void processRecord(Tuple2<Boolean, Row> change) {     synchronized (resultLock) {         // wait if the buffer is full         if (changeRecordBuffer.size() >= CHANGE_RECORD_BUFFER_SIZE) {             try {                 resultLock.wait().             } catch (InterruptedException e) {             // ignore             }         } else {             changeRecordBuffer.add(change).         }     } }
