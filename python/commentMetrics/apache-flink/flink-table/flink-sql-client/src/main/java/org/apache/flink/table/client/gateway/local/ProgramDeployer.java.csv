commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void run() {     LOG.info("Submitting job {} for query {}`", jobGraph.getJobID(), jobName).     if (LOG.isDebugEnabled()) {         LOG.debug("Submitting job {} with the following environment: \n{}", jobGraph.getJobID(), context.getMergedEnvironment()).     }     deployJob(context, jobGraph, result). }
false;public;0;3;;public JobExecutionResult fetchExecutionResult() {     return executionResultBucket.poll(). }
true;private;3;21;/**  * Deploys a job. Depending on the deployment creates a new job cluster. It saves the cluster id in  * the result and blocks until job completion.  */ ;/**  * Deploys a job. Depending on the deployment creates a new job cluster. It saves the cluster id in  * the result and blocks until job completion.  */ private <T> void deployJob(ExecutionContext<T> context, JobGraph jobGraph, Result<T> result) {     // create or retrieve cluster and deploy job     try (final ClusterDescriptor<T> clusterDescriptor = context.createClusterDescriptor()) {         try {             // new cluster             if (context.getClusterId() == null) {                 deployJobOnNewCluster(clusterDescriptor, jobGraph, result, context.getClassLoader()).             } else // reuse existing cluster             {                 deployJobOnExistingCluster(context.getClusterId(), clusterDescriptor, jobGraph, result).             }         } catch (Exception e) {             throw new SqlExecutionException("Could not retrieve or create a cluster.", e).         }     } catch (SqlExecutionException e) {         throw e.     } catch (Exception e) {         throw new SqlExecutionException("Could not locate a cluster.", e).     } }
false;private;4;30;;private <T> void deployJobOnNewCluster(ClusterDescriptor<T> clusterDescriptor, JobGraph jobGraph, Result<T> result, ClassLoader classLoader) throws Exception {     ClusterClient<T> clusterClient = null.     try {         // deploy job cluster with job attached         clusterClient = clusterDescriptor.deployJobCluster(context.getClusterSpec(), jobGraph, false).         // save information about the new cluster         result.setClusterInformation(clusterClient.getClusterId(), clusterClient.getWebInterfaceURL()).         // get result         if (awaitJobResult) {             // we need to hard cast for now             final JobExecutionResult jobResult = ((RestClusterClient<T>) clusterClient).requestJobResult(jobGraph.getJobID()).get().toJobExecutionResult(// throws exception if job fails             context.getClassLoader()).             executionResultBucket.add(jobResult).         }     } finally {         try {             if (clusterClient != null) {                 clusterClient.shutdown().             }         } catch (Exception e) {         // ignore         }     } }
false;private;4;40;;private <T> void deployJobOnExistingCluster(T clusterId, ClusterDescriptor<T> clusterDescriptor, JobGraph jobGraph, Result<T> result) throws Exception {     ClusterClient<T> clusterClient = null.     try {         // retrieve existing cluster         clusterClient = clusterDescriptor.retrieve(clusterId).         String webInterfaceUrl.         // TODO remove this once we drop support for legacy deployment code         try {             webInterfaceUrl = clusterClient.getWebInterfaceURL().         } catch (Exception e) {             webInterfaceUrl = "N/A".         }         // save the cluster information         result.setClusterInformation(clusterClient.getClusterId(), webInterfaceUrl).         // submit job (and get result)         if (awaitJobResult) {             clusterClient.setDetached(false).             final JobExecutionResult jobResult = clusterClient.submitJob(jobGraph, context.getClassLoader()).getJobExecutionResult().             executionResultBucket.add(jobResult).         } else {             clusterClient.setDetached(true).             clusterClient.submitJob(jobGraph, context.getClassLoader()).         }     } finally {         try {             if (clusterClient != null) {                 clusterClient.shutdown().             }         } catch (Exception e) {         // ignore         }     } }
