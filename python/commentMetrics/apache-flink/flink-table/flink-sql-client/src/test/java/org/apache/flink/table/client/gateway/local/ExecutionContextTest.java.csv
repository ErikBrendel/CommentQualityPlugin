commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testExecutionConfig() throws Exception {     final ExecutionContext<?> context = createDefaultExecutionContext().     final ExecutionConfig config = context.createEnvironmentInstance().getExecutionConfig().     assertEquals(99, config.getAutoWatermarkInterval()).     final RestartStrategies.RestartStrategyConfiguration restartConfig = config.getRestartStrategy().     assertTrue(restartConfig instanceof RestartStrategies.FailureRateRestartStrategyConfiguration).     final RestartStrategies.FailureRateRestartStrategyConfiguration failureRateStrategy = (RestartStrategies.FailureRateRestartStrategyConfiguration) restartConfig.     assertEquals(10, failureRateStrategy.getMaxFailureRate()).     assertEquals(99_000, failureRateStrategy.getFailureInterval().toMilliseconds()).     assertEquals(1_000, failureRateStrategy.getDelayBetweenAttemptsInterval().toMilliseconds()). }
false;public;0;10;;@Test public void testFunctions() throws Exception {     final ExecutionContext<?> context = createDefaultExecutionContext().     final TableEnvironment tableEnv = context.createEnvironmentInstance().getTableEnvironment().     final String[] expected = new String[] { "scalarUDF", "tableUDF", "aggregateUDF" }.     final String[] actual = tableEnv.listUserDefinedFunctions().     Arrays.sort(expected).     Arrays.sort(actual).     assertArrayEquals(expected, actual). }
false;public;0;44;;@Test public void testTables() throws Exception {     final ExecutionContext<?> context = createDefaultExecutionContext().     final Map<String, TableSource<?>> sources = context.getTableSources().     final Map<String, TableSink<?>> sinks = context.getTableSinks().     assertEquals(new HashSet<>(Arrays.asList("TableSourceSink", "TableNumber1", "TableNumber2")), sources.keySet()).     assertEquals(new HashSet<>(Collections.singletonList("TableSourceSink")), sinks.keySet()).     assertArrayEquals(new String[] { "IntegerField1", "StringField1" }, sources.get("TableNumber1").getTableSchema().getFieldNames()).     assertArrayEquals(new TypeInformation[] { Types.INT(), Types.STRING() }, sources.get("TableNumber1").getTableSchema().getFieldTypes()).     assertArrayEquals(new String[] { "IntegerField2", "StringField2" }, sources.get("TableNumber2").getTableSchema().getFieldNames()).     assertArrayEquals(new TypeInformation[] { Types.INT(), Types.STRING() }, sources.get("TableNumber2").getTableSchema().getFieldTypes()).     assertArrayEquals(new String[] { "BooleanField", "StringField" }, sinks.get("TableSourceSink").getFieldNames()).     assertArrayEquals(new TypeInformation[] { Types.BOOLEAN(), Types.STRING() }, sinks.get("TableSourceSink").getFieldTypes()).     final TableEnvironment tableEnv = context.createEnvironmentInstance().getTableEnvironment().     assertArrayEquals(new String[] { "TableNumber1", "TableNumber2", "TableSourceSink", "TestView1", "TestView2" }, tableEnv.listTables()). }
false;public;0;22;;@Test public void testTemporalTables() throws Exception {     final ExecutionContext<?> context = createStreamingExecutionContext().     assertEquals(new HashSet<>(Arrays.asList("EnrichmentSource", "HistorySource")), context.getTableSources().keySet()).     final StreamTableEnvironment tableEnv = (StreamTableEnvironment) context.createEnvironmentInstance().getTableEnvironment().     assertArrayEquals(new String[] { "EnrichmentSource", "HistorySource", "HistoryView", "TemporalTableUsage" }, tableEnv.listTables()).     assertArrayEquals(new String[] { "SourceTemporalTable", "ViewTemporalTable" }, tableEnv.listUserDefinedFunctions()).     assertArrayEquals(new String[] { "integerField", "stringField", "rowtimeField", "integerField0", "stringField0", "rowtimeField0" }, tableEnv.scan("TemporalTableUsage").getSchema().getFieldNames()). }
false;private;2;14;;private <T> ExecutionContext<T> createExecutionContext(String file, Map<String, String> replaceVars) throws Exception {     final Environment env = EnvironmentFileUtil.parseModified(file, replaceVars).     final SessionContext session = new SessionContext("test-session", new Environment()).     final Configuration flinkConfig = new Configuration().     return new ExecutionContext<>(env, session, Collections.emptyList(), flinkConfig, new Options(), Collections.singletonList(new DefaultCLI(flinkConfig))). }
false;private;0;8;;private <T> ExecutionContext<T> createDefaultExecutionContext() throws Exception {     final Map<String, String> replaceVars = new HashMap<>().     replaceVars.put("$VAR_EXECUTION_TYPE", "streaming").     replaceVars.put("$VAR_RESULT_MODE", "changelog").     replaceVars.put("$VAR_UPDATE_MODE", "update-mode: append").     replaceVars.put("$VAR_MAX_ROWS", "100").     return createExecutionContext(DEFAULTS_ENVIRONMENT_FILE, replaceVars). }
false;private;0;7;;private <T> ExecutionContext<T> createStreamingExecutionContext() throws Exception {     final Map<String, String> replaceVars = new HashMap<>().     replaceVars.put("$VAR_CONNECTOR_TYPE", DummyTableSourceFactory.CONNECTOR_TYPE_VALUE).     replaceVars.put("$VAR_CONNECTOR_PROPERTY", DummyTableSourceFactory.TEST_PROPERTY).     replaceVars.put("$VAR_CONNECTOR_PROPERTY_VALUE", "").     return createExecutionContext(STREAMING_ENVIRONMENT_FILE, replaceVars). }
