commented;modifiers;parameterAmount;loc;comment;code
false;public;0;47;;@Test public void testSnapshot() throws UnknownHostException {     final TypeInformation<Row> type = Types.ROW(Types.STRING, Types.LONG).     TestMaterializedCollectStreamResult<?> result = null.     try {         result = new TestMaterializedCollectStreamResult<>(type, new ExecutionConfig(), InetAddress.getLocalHost(), 0, Integer.MAX_VALUE).         result.isRetrieving = true.         result.processRecord(Tuple2.of(true, Row.of("A", 1))).         result.processRecord(Tuple2.of(true, Row.of("B", 1))).         result.processRecord(Tuple2.of(true, Row.of("A", 1))).         result.processRecord(Tuple2.of(true, Row.of("C", 2))).         assertEquals(TypedResult.payload(4), result.snapshot(1)).         assertEquals(Collections.singletonList(Row.of("A", 1)), result.retrievePage(1)).         assertEquals(Collections.singletonList(Row.of("B", 1)), result.retrievePage(2)).         assertEquals(Collections.singletonList(Row.of("A", 1)), result.retrievePage(3)).         assertEquals(Collections.singletonList(Row.of("C", 2)), result.retrievePage(4)).         result.processRecord(Tuple2.of(false, Row.of("A", 1))).         assertEquals(TypedResult.payload(3), result.snapshot(1)).         assertEquals(Collections.singletonList(Row.of("A", 1)), result.retrievePage(1)).         assertEquals(Collections.singletonList(Row.of("B", 1)), result.retrievePage(2)).         assertEquals(Collections.singletonList(Row.of("C", 2)), result.retrievePage(3)).         result.processRecord(Tuple2.of(false, Row.of("C", 2))).         result.processRecord(Tuple2.of(false, Row.of("A", 1))).         assertEquals(TypedResult.payload(1), result.snapshot(1)).         assertEquals(Collections.singletonList(Row.of("B", 1)), result.retrievePage(1)).     } finally {         if (result != null) {             result.close().         }     } }
false;public;0;47;;@Test public void testLimitedSnapshot() throws UnknownHostException {     final TypeInformation<Row> type = Types.ROW(Types.STRING, Types.LONG).     TestMaterializedCollectStreamResult<?> result = null.     try {         result = new TestMaterializedCollectStreamResult<>(type, new ExecutionConfig(), InetAddress.getLocalHost(), 0, // limit the materialized table to 2 rows         2, // with 3 rows overcommitment         3).         result.isRetrieving = true.         result.processRecord(Tuple2.of(true, Row.of("D", 1))).         result.processRecord(Tuple2.of(true, Row.of("A", 1))).         result.processRecord(Tuple2.of(true, Row.of("B", 1))).         result.processRecord(Tuple2.of(true, Row.of("A", 1))).         assertEquals(// two over-committed rows         Arrays.asList(null, null, Row.of("B", 1), Row.of("A", 1)), result.getMaterializedTable()).         assertEquals(TypedResult.payload(2), result.snapshot(1)).         assertEquals(Collections.singletonList(Row.of("B", 1)), result.retrievePage(1)).         assertEquals(Collections.singletonList(Row.of("A", 1)), result.retrievePage(2)).         result.processRecord(Tuple2.of(true, Row.of("C", 1))).         assertEquals(// limit clean up has taken place         Arrays.asList(Row.of("A", 1), Row.of("C", 1)), result.getMaterializedTable()).         result.processRecord(Tuple2.of(false, Row.of("A", 1))).         assertEquals(// regular clean up has taken place         Collections.singletonList(Row.of("C", 1)), result.getMaterializedTable()).     } finally {         if (result != null) {             result.close().         }     } }
false;protected;0;4;;@Override protected boolean isRetrieving() {     return isRetrieving. }
false;public;0;4;;@Override public List<Row> getMaterializedTable() {     return super.getMaterializedTable(). }
