commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testUpdateSubmission() {     verifyUpdateSubmission(INSERT_INTO_STATEMENT, false, false). }
false;public;0;8;;@Test public void testFailedUpdateSubmission() {     // fail at executor     verifyUpdateSubmission(INSERT_INTO_STATEMENT, true, true).     // fail early in client     verifyUpdateSubmission(SELECT_STATEMENT, false, true). }
false;public;0;11;;@Test public void testSqlCompletion() throws IOException {     verifySqlCompletion("", 0, Arrays.asList("SELECT", "QUIT.", "RESET."), Collections.emptyList()).     verifySqlCompletion("SELEC", 5, Collections.singletonList("SELECT"), Collections.singletonList("QUIT.")).     verifySqlCompletion("SELE", 0, Collections.singletonList("SELECT"), Collections.singletonList("QUIT.")).     verifySqlCompletion("QU", 2, Collections.singletonList("QUIT."), Collections.singletonList("SELECT")).     verifySqlCompletion("qu", 2, Collections.singletonList("QUIT."), Collections.singletonList("SELECT")).     verifySqlCompletion("  qu", 2, Collections.singletonList("QUIT."), Collections.singletonList("SELECT")).     verifySqlCompletion("set ", 3, Collections.emptyList(), Collections.singletonList("SET")).     verifySqlCompletion("show t ", 6, Collections.emptyList(), Collections.singletonList("SET")). }
false;private;3;22;;// -------------------------------------------------------------------------------------------- private void verifyUpdateSubmission(String statement, boolean failExecution, boolean testFailure) {     final SessionContext context = new SessionContext("test-session", new Environment()).     final MockExecutor mockExecutor = new MockExecutor().     mockExecutor.failExecution = failExecution.     CliClient cli = null.     try {         cli = new CliClient(TerminalUtils.createDummyTerminal(), context, mockExecutor).         if (testFailure) {             assertFalse(cli.submitUpdate(statement)).         } else {             assertTrue(cli.submitUpdate(statement)).             assertEquals(statement, mockExecutor.receivedStatement).             assertEquals(context, mockExecutor.receivedContext).         }     } finally {         if (cli != null) {             cli.close().         }     } }
false;private;4;28;;private void verifySqlCompletion(String statement, int position, List<String> expectedHints, List<String> notExpectedHints) throws IOException {     final SessionContext context = new SessionContext("test-session", new Environment()).     final MockExecutor mockExecutor = new MockExecutor().     final SqlCompleter completer = new SqlCompleter(context, mockExecutor).     final SqlMultiLineParser parser = new SqlMultiLineParser().     try (Terminal terminal = TerminalUtils.createDummyTerminal()) {         final LineReader reader = LineReaderBuilder.builder().terminal(terminal).build().         final ParsedLine parsedLine = parser.parse(statement, position, Parser.ParseContext.COMPLETE).         final List<Candidate> candidates = new ArrayList<>().         final List<String> results = new ArrayList<>().         completer.complete(reader, parsedLine, candidates).         candidates.forEach(item -> results.add(item.value())).         assertTrue(results.containsAll(expectedHints)).         assertEquals(statement, mockExecutor.receivedStatement).         assertEquals(context, mockExecutor.receivedContext).         assertEquals(position, mockExecutor.receivedPosition).         assertTrue(results.contains("HintA")).         assertTrue(results.contains("Hint B")).         results.retainAll(notExpectedHints).         assertEquals(0, results.size()).     } }
false;public;0;4;;@Override public void start() throws SqlExecutionException { // nothing to do }
false;public;1;4;;@Override public Map<String, String> getSessionProperties(SessionContext session) throws SqlExecutionException {     return null. }
false;public;1;4;;@Override public List<String> listTables(SessionContext session) throws SqlExecutionException {     return null. }
false;public;1;4;;@Override public List<String> listUserDefinedFunctions(SessionContext session) throws SqlExecutionException {     return null. }
false;public;2;4;;@Override public TableSchema getTableSchema(SessionContext session, String name) throws SqlExecutionException {     return null. }
false;public;2;4;;@Override public String explainStatement(SessionContext session, String statement) throws SqlExecutionException {     return null. }
false;public;3;7;;@Override public List<String> completeStatement(SessionContext session, String statement, int position) {     receivedContext = session.     receivedStatement = statement.     receivedPosition = position.     return Arrays.asList("HintA", "Hint B"). }
false;public;2;4;;@Override public ResultDescriptor executeQuery(SessionContext session, String query) throws SqlExecutionException {     return null. }
false;public;2;4;;@Override public TypedResult<List<Tuple2<Boolean, Row>>> retrieveResultChanges(SessionContext session, String resultId) throws SqlExecutionException {     return null. }
false;public;3;4;;@Override public TypedResult<Integer> snapshotResult(SessionContext session, String resultId, int pageSize) throws SqlExecutionException {     return null. }
false;public;2;4;;@Override public List<Row> retrieveResultPage(String resultId, int page) throws SqlExecutionException {     return null. }
false;public;2;4;;@Override public void cancelQuery(SessionContext session, String resultId) throws SqlExecutionException { // nothing to do }
false;public;2;9;;@Override public ProgramTargetDescriptor executeUpdate(SessionContext session, String statement) throws SqlExecutionException {     receivedContext = session.     receivedStatement = statement.     if (failExecution) {         throw new SqlExecutionException("Fail execution.").     }     return new ProgramTargetDescriptor("testClusterId", "testJobId", "http://testcluster:1234"). }
false;public;1;4;;@Override public void validateSession(SessionContext session) throws SqlExecutionException { // nothing to do }
false;public;1;4;;@Override public void stop(SessionContext session) { // nothing to do }
