commented;modifiers;parameterAmount;loc;comment;code
false;public;0;42;;@Test public void testCommands() {     testValidSqlCommand("QUIT.", new SqlCommandCall(SqlCommand.QUIT)).     testValidSqlCommand("eXiT", new SqlCommandCall(SqlCommand.QUIT)).     testValidSqlCommand("CLEAR", new SqlCommandCall(SqlCommand.CLEAR)).     testValidSqlCommand("SHOW TABLES", new SqlCommandCall(SqlCommand.SHOW_TABLES)).     testValidSqlCommand("  SHOW   TABLES   ", new SqlCommandCall(SqlCommand.SHOW_TABLES)).     testValidSqlCommand("SHOW FUNCTIONS", new SqlCommandCall(SqlCommand.SHOW_FUNCTIONS)).     testValidSqlCommand("  SHOW    FUNCTIONS   ", new SqlCommandCall(SqlCommand.SHOW_FUNCTIONS)).     testValidSqlCommand("DESCRIBE MyTable", new SqlCommandCall(SqlCommand.DESCRIBE, new String[] { "MyTable" })).     testValidSqlCommand("DESCRIBE         MyTable     ", new SqlCommandCall(SqlCommand.DESCRIBE, new String[] { "MyTable" })).     // no table name     testInvalidSqlCommand("DESCRIBE  ").     testValidSqlCommand("EXPLAIN SELECT complicated FROM table", new SqlCommandCall(SqlCommand.EXPLAIN, new String[] { "SELECT complicated FROM table" })).     // no query     testInvalidSqlCommand("EXPLAIN  ").     testValidSqlCommand("SELECT complicated FROM table", new SqlCommandCall(SqlCommand.SELECT, new String[] { "SELECT complicated FROM table" })).     testValidSqlCommand("   SELECT  complicated FROM table    ", new SqlCommandCall(SqlCommand.SELECT, new String[] { "SELECT  complicated FROM table" })).     testValidSqlCommand("INSERT INTO other SELECT 1+1", new SqlCommandCall(SqlCommand.INSERT_INTO, new String[] { "INSERT INTO other SELECT 1+1" })).     testValidSqlCommand("CREATE VIEW x AS SELECT 1+1", new SqlCommandCall(SqlCommand.CREATE_VIEW, new String[] { "x", "SELECT 1+1" })).     testValidSqlCommand("CREATE   VIEW    MyTable   AS     SELECT 1+1 FROM y", new SqlCommandCall(SqlCommand.CREATE_VIEW, new String[] { "MyTable", "SELECT 1+1 FROM y" })).     // missing AS     testInvalidSqlCommand("CREATE VIEW x SELECT 1+1").     testValidSqlCommand("DROP VIEW MyTable", new SqlCommandCall(SqlCommand.DROP_VIEW, new String[] { "MyTable" })).     testValidSqlCommand("DROP VIEW  MyTable", new SqlCommandCall(SqlCommand.DROP_VIEW, new String[] { "MyTable" })).     testInvalidSqlCommand("DROP VIEW").     testValidSqlCommand("SET", new SqlCommandCall(SqlCommand.SET)).     testValidSqlCommand("SET x=y", new SqlCommandCall(SqlCommand.SET, new String[] { "x", "y" })).     testValidSqlCommand("SET    x  = y", new SqlCommandCall(SqlCommand.SET, new String[] { "x", " y" })).     testValidSqlCommand("reset.", new SqlCommandCall(SqlCommand.RESET)).     testValidSqlCommand("source /my/file", new SqlCommandCall(SqlCommand.SOURCE, new String[] { "/my/file" })).     // missing path     testInvalidSqlCommand("source"). }
false;private;1;6;;private void testInvalidSqlCommand(String stmt) {     final Optional<SqlCommandCall> actualCall = SqlCommandParser.parse(stmt).     if (actualCall.isPresent()) {         fail().     } }
false;private;2;7;;private void testValidSqlCommand(String stmt, SqlCommandCall expectedCall) {     final Optional<SqlCommandCall> actualCall = SqlCommandParser.parse(stmt).     if (!actualCall.isPresent()) {         fail().     }     assertEquals(expectedCall, actualCall.get()). }
