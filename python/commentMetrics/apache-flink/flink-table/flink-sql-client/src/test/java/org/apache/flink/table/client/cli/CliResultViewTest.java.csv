commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testTableResultViewKeepJobResult() throws Exception {     testResultViewClearResult(TypedResult.endOfStream(), true, 0). }
false;public;0;4;;@Test public void testTableResultViewClearEmptyResult() throws Exception {     testResultViewClearResult(TypedResult.empty(), true, 1). }
false;public;0;4;;@Test public void testTableResultViewClearPayloadResult() throws Exception {     testResultViewClearResult(TypedResult.payload(1), true, 1). }
false;public;0;4;;@Test public void testChangelogResultViewKeepJobResult() throws Exception {     testResultViewClearResult(TypedResult.endOfStream(), false, 0). }
false;public;0;4;;@Test public void testChangelogResultViewClearEmptyResult() throws Exception {     testResultViewClearResult(TypedResult.empty(), false, 1). }
false;public;0;4;;@Test public void testChangelogResultViewClearPayloadResult() throws Exception {     testResultViewClearResult(TypedResult.payload(Collections.emptyList()), false, 1). }
false;private;3;28;;private void testResultViewClearResult(TypedResult<?> typedResult, boolean isTableMode, int expectedCancellationCount) throws Exception {     final CountDownLatch cancellationCounterLatch = new CountDownLatch(expectedCancellationCount).     final SessionContext session = new SessionContext("test-session", new Environment()).     final MockExecutor executor = new MockExecutor(typedResult, cancellationCounterLatch).     final ResultDescriptor descriptor = new ResultDescriptor("result-id", TableSchema.builder().field("Null Field", Types.STRING()).build(), false).     Thread resultViewRunner = null.     CliClient cli = null.     try {         cli = new CliClient(TerminalUtils.createDummyTerminal(), session, executor).         resultViewRunner = new Thread(new TestingCliResultView(cli, descriptor, isTableMode)).         resultViewRunner.start().     } finally {         if (resultViewRunner != null && !resultViewRunner.isInterrupted()) {             resultViewRunner.interrupt().         }         if (cli != null) {             cli.close().         }     }     assertTrue("Invalid number of cancellations.", cancellationCounterLatch.await(10, TimeUnit.SECONDS)). }
false;public;0;4;;@Override public void start() throws SqlExecutionException { // do nothing }
false;public;1;4;;@Override public Map<String, String> getSessionProperties(SessionContext session) throws SqlExecutionException {     return null. }
false;public;1;4;;@Override public List<String> listTables(SessionContext session) throws SqlExecutionException {     return null. }
false;public;1;4;;@Override public List<String> listUserDefinedFunctions(SessionContext session) throws SqlExecutionException {     return null. }
false;public;2;4;;@Override public TableSchema getTableSchema(SessionContext session, String name) throws SqlExecutionException {     return null. }
false;public;2;4;;@Override public String explainStatement(SessionContext session, String statement) throws SqlExecutionException {     return null. }
false;public;3;4;;@Override public List<String> completeStatement(SessionContext session, String statement, int position) {     return null. }
false;public;2;4;;@Override public ResultDescriptor executeQuery(SessionContext session, String query) throws SqlExecutionException {     return null. }
false;public;2;5;;@Override @SuppressWarnings("unchecked") public TypedResult<List<Tuple2<Boolean, Row>>> retrieveResultChanges(SessionContext session, String resultId) throws SqlExecutionException {     return (TypedResult<List<Tuple2<Boolean, Row>>>) typedResult. }
false;public;3;5;;@Override @SuppressWarnings("unchecked") public TypedResult<Integer> snapshotResult(SessionContext session, String resultId, int pageSize) throws SqlExecutionException {     return (TypedResult<Integer>) typedResult. }
false;public;2;4;;@Override public List<Row> retrieveResultPage(String resultId, int page) throws SqlExecutionException {     return Collections.singletonList(new Row(1)). }
false;public;2;4;;@Override public void cancelQuery(SessionContext session, String resultId) throws SqlExecutionException {     cancellationCounter.countDown(). }
false;public;2;4;;@Override public ProgramTargetDescriptor executeUpdate(SessionContext session, String statement) throws SqlExecutionException {     return null. }
false;public;1;4;;@Override public void validateSession(SessionContext session) throws SqlExecutionException { // do nothing }
false;public;1;4;;@Override public void stop(SessionContext session) { // do nothing }
false;public;0;4;;@Override public void run() {     realResultView.open(). }
false;protected;0;4;;@Override protected List<AttributedString> computeMainHeaderLines() {     return Collections.emptyList(). }
false;protected;0;4;;@Override protected List<AttributedString> computeMainHeaderLines() {     return Collections.emptyList(). }
