commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testCopy() {     // test copy the content of the latter Seg     MemorySegment[] segments = new MemorySegment[2].     segments[0] = MemorySegmentFactory.wrap(new byte[] { 0, 2, 5 }).     segments[1] = MemorySegmentFactory.wrap(new byte[] { 6, 12, 15 }).     byte[] bytes = SegmentsUtil.copyToBytes(segments, 4, 2).     Assert.assertArrayEquals(new byte[] { 12, 15 }, bytes). }
false;public;0;17;;@Test public void testEquals() {     // test copy the content of the latter Seg     MemorySegment[] segments1 = new MemorySegment[3].     segments1[0] = MemorySegmentFactory.wrap(new byte[] { 0, 2, 5 }).     segments1[1] = MemorySegmentFactory.wrap(new byte[] { 6, 12, 15 }).     segments1[2] = MemorySegmentFactory.wrap(new byte[] { 1, 1, 1 }).     MemorySegment[] segments2 = new MemorySegment[2].     segments2[0] = MemorySegmentFactory.wrap(new byte[] { 6, 0, 2, 5 }).     segments2[1] = MemorySegmentFactory.wrap(new byte[] { 6, 12, 15, 18 }).     Assert.assertTrue(SegmentsUtil.equalsMultiSegments(segments1, 0, segments2, 0, 0)).     Assert.assertTrue(SegmentsUtil.equals(segments1, 0, segments2, 1, 3)).     Assert.assertTrue(SegmentsUtil.equals(segments1, 0, segments2, 1, 6)).     Assert.assertFalse(SegmentsUtil.equals(segments1, 0, segments2, 1, 7)). }
