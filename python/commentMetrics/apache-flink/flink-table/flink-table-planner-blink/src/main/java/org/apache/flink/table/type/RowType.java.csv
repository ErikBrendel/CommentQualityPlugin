commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static String[] generateDefaultFieldNames(int length) {     String[] fieldNames = new String[length].     for (int i = 0. i < length. i++) {         fieldNames[i] = "f" + i.     }     return fieldNames. }
false;public;0;3;;public int getArity() {     return types.length. }
false;public;0;3;;public InternalType[] getFieldTypes() {     return types. }
false;public;1;3;;public InternalType getTypeAt(int i) {     return types[i]. }
false;public;0;3;;public String[] getFieldNames() {     return fieldNames. }
false;public;1;8;;public int getFieldIndex(String fieldName) {     for (int i = 0. i < fieldNames.length. i++) {         if (fieldNames[i].equals(fieldName)) {             return i.         }     }     return -1. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     RowType that = (RowType) o.     // RowType comparisons should not compare names and are compatible with the behavior of CompositeTypeInfo.     return Arrays.equals(getFieldTypes(), that.getFieldTypes()). }
false;public;0;4;;@Override public int hashCode() {     return Arrays.hashCode(types). }
false;public;0;7;;@Override public String toString() {     return "RowType{" + "types=" + Arrays.toString(types) + ", fieldNames=" + Arrays.toString(fieldNames) + '}'. }
