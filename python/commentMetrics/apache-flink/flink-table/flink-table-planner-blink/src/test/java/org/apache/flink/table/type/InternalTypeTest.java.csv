commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testHashCodeAndEquals() throws IOException, ClassNotFoundException {     testHashCodeAndEquals(InternalTypes.INT).     testHashCodeAndEquals(InternalTypes.DATE).     testHashCodeAndEquals(InternalTypes.TIME).     testHashCodeAndEquals(InternalTypes.TIMESTAMP).     testHashCodeAndEquals(InternalTypes.BINARY).     testHashCodeAndEquals(InternalTypes.STRING).     testHashCodeAndEquals(new DecimalType(15, 5)).     testHashCodeAndEquals(new GenericType<>(InternalTypeTest.class)).     testHashCodeAndEquals(new RowType(InternalTypes.STRING, InternalTypes.INT, InternalTypes.INT)).     testHashCodeAndEquals(new ArrayType(InternalTypes.INT)).     testHashCodeAndEquals(new ArrayType(InternalTypes.STRING)).     testHashCodeAndEquals(new MapType(InternalTypes.STRING, InternalTypes.INT)). }
false;private;1;11;;private void testHashCodeAndEquals(InternalType type) throws IOException, ClassNotFoundException {     InternalType newType = InstantiationUtil.deserializeObject(InstantiationUtil.serializeObject(type), Thread.currentThread().getContextClassLoader()).     Assert.assertEquals(type.hashCode(), newType.hashCode()).     Assert.assertEquals(type, newType).     // need override toString.     Assert.assertFalse(newType.toString().contains("@")). }
false;public;0;16;;@Test public void testConverter() throws IOException, ClassNotFoundException {     testConvertToRowType(new RowTypeInfo(new TypeInformation[] { Types.INT, Types.STRING }, new String[] { "field1", "field2" })).     testConvertToRowType((CompositeType) TypeInformation.of(MyPojo.class)).     testConvertCompare(PrimitiveArrayTypeInfo.DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO, new ArrayType(InternalTypes.DOUBLE)).     testConvertCompare(BasicArrayTypeInfo.DOUBLE_ARRAY_TYPE_INFO, new ArrayType(InternalTypes.DOUBLE)).     testConvertCompare(ObjectArrayTypeInfo.getInfoFor(TypeInformation.of(MyPojo.class)), new ArrayType(createInternalTypeFromTypeInfo(TypeInformation.of(MyPojo.class)))).     testConvertCompare(new MapTypeInfo<>(Types.INT, Types.STRING), new MapType(InternalTypes.INT, InternalTypes.STRING)).     testConvertCompare(new GenericTypeInfo<>(MyPojo.class), new GenericType<>(MyPojo.class)). }
false;private;1;9;;private void testConvertToRowType(CompositeType typeInfo) {     RowType rowType = (RowType) createInternalTypeFromTypeInfo(typeInfo).     Assert.assertArrayEquals(new InternalType[] { InternalTypes.INT, InternalTypes.STRING }, rowType.getFieldTypes()).     Assert.assertArrayEquals(new String[] { "field1", "field2" }, rowType.getFieldNames()). }
false;private;2;5;;private void testConvertCompare(TypeInformation typeInfo, InternalType internalType) {     InternalType converted = createInternalTypeFromTypeInfo(typeInfo).     Assert.assertEquals(internalType, converted).     Assert.assertEquals(internalType.hashCode(), converted.hashCode()). }
