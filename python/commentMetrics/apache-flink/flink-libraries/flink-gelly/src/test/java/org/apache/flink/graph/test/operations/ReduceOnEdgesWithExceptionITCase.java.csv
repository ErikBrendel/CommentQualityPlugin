commented;modifiers;parameterAmount;loc;comment;code
true;public;0;22;/**  * Test groupReduceOnEdges() with an edge having a srcId that does not exist in the vertex DataSet.  */ ;/**  * Test groupReduceOnEdges() with an edge having a srcId that does not exist in the vertex DataSet.  */ @Test public void testGroupReduceOnEdgesInvalidEdgeSrcId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(PARALLELISM).     env.getConfig().disableSysoutLogging().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeInvalidSrcData(env), env).     try {         DataSet<Tuple2<Long, Long>> verticesWithAllNeighbors = graph.groupReduceOnEdges(new SelectNeighborsValueGreaterThanFour(), EdgeDirection.ALL).         verticesWithAllNeighbors.output(new DiscardingOutputFormat<>()).         env.execute().         fail("Expected an exception.").     } catch (Exception e) {     // We expect the job to fail with an exception     } }
true;public;0;22;/**  * Test groupReduceOnEdges() with an edge having a trgId that does not exist in the vertex DataSet.  */ ;/**  * Test groupReduceOnEdges() with an edge having a trgId that does not exist in the vertex DataSet.  */ @Test public void testGroupReduceOnEdgesInvalidEdgeTrgId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(PARALLELISM).     env.getConfig().disableSysoutLogging().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeInvalidTrgData(env), env).     try {         DataSet<Tuple2<Long, Long>> verticesWithAllNeighbors = graph.groupReduceOnEdges(new SelectNeighborsValueGreaterThanFour(), EdgeDirection.ALL).         verticesWithAllNeighbors.output(new DiscardingOutputFormat<>()).         env.execute().         fail("Expected an exception.").     } catch (Exception e) {     // We expect the job to fail with an exception     } }
false;public;3;13;;@Override public void iterateEdges(Vertex<Long, Long> v, Iterable<Edge<Long, Long>> edges, Collector<Tuple2<Long, Long>> out) throws Exception {     for (Edge<Long, Long> edge : edges) {         if (v.getValue() > 4) {             if (v.getId().equals(edge.getTarget())) {                 out.collect(new Tuple2<>(v.getId(), edge.getSource())).             } else {                 out.collect(new Tuple2<>(v.getId(), edge.getTarget())).             }         }     } }
