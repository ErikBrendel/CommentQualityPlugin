commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSimpleGraphSorted() throws Exception {     DataSet<Result<IntValue>> tl = directedSimpleGraph.run(new TriangleListing<IntValue, NullValue, NullValue>().setSortTriangleVertices(true)).     String expectedResult = "(0,1,2,41)\n" + "(1,2,3,22)".     TestBaseUtils.compareResultAsText(tl.collect(), expectedResult). }
false;public;0;30;;@Test public void testSimpleGraphPermuted() throws Exception {     DataSet<Result<IntValue>> tl = directedSimpleGraph.run(new TriangleListing<IntValue, NullValue, NullValue>().setPermuteResults(true)).     String expectedResult = // permutation of (0,1,2,41)     "1st vertex ID: 0, 2nd vertex ID: 1, 3rd vertex ID: 2, edge directions: 0->1, 0->2, 1<-2\n" + "1st vertex ID: 0, 2nd vertex ID: 2, 3rd vertex ID: 1, edge directions: 0->2, 0->1, 2->1\n" + "1st vertex ID: 1, 2nd vertex ID: 0, 3rd vertex ID: 2, edge directions: 1<-0, 1<-2, 0->2\n" + "1st vertex ID: 1, 2nd vertex ID: 2, 3rd vertex ID: 0, edge directions: 1<-2, 1<-0, 2<-0\n" + "1st vertex ID: 2, 2nd vertex ID: 0, 3rd vertex ID: 1, edge directions: 2<-0, 2->1, 0->1\n" + "1st vertex ID: 2, 2nd vertex ID: 1, 3rd vertex ID: 0, edge directions: 2->1, 2<-0, 1<-0\n" + // permutation of (1,2,3,22)     "1st vertex ID: 1, 2nd vertex ID: 2, 3rd vertex ID: 3, edge directions: 1<-2, 1<-3, 2->3\n" + "1st vertex ID: 1, 2nd vertex ID: 3, 3rd vertex ID: 2, edge directions: 1<-3, 1<-2, 3<-2\n" + "1st vertex ID: 2, 2nd vertex ID: 1, 3rd vertex ID: 3, edge directions: 2->1, 2->3, 1<-3\n" + "1st vertex ID: 2, 2nd vertex ID: 3, 3rd vertex ID: 1, edge directions: 2->3, 2->1, 3->1\n" + "1st vertex ID: 3, 2nd vertex ID: 1, 3rd vertex ID: 2, edge directions: 3->1, 3<-2, 1<-2\n" + "1st vertex ID: 3, 2nd vertex ID: 2, 3rd vertex ID: 1, edge directions: 3<-2, 3->1, 2->1".     List<String> printableStrings = new ArrayList<>().     for (Result<IntValue> result : tl.collect()) {         printableStrings.add(result.toPrintableString()).     }     TestBaseUtils.compareResultAsText(printableStrings, expectedResult). }
false;public;0;17;;@Test public void testCompleteGraph() throws Exception {     long expectedDegree = completeGraphVertexCount - 1.     long expectedCount = completeGraphVertexCount * CombinatoricsUtils.binomialCoefficient((int) expectedDegree, 2) / 3.     DataSet<Result<LongValue>> tl = completeGraph.run(new TriangleListing<>()).     List<Result<LongValue>> results = tl.collect().     assertEquals(expectedCount, results.size()).     for (Result<LongValue> result : results) {         assertEquals(0b111111, result.getBitmask().getValue()).     } }
false;public;0;7;;@Test public void testWithEmptyGraphWithVertices() throws Exception {     DataSet<Result<LongValue>> tl = emptyGraphWithVertices.run(new TriangleListing<>()).     assertEquals(0, tl.collect().size()). }
false;public;0;7;;@Test public void testWithEmptyGraphWithoutVertices() throws Exception {     DataSet<Result<LongValue>> tl = emptyGraphWithoutVertices.run(new TriangleListing<>()).     assertEquals(0, tl.collect().size()). }
false;public;0;13;;@Test public void testRMatGraph() throws Exception {     DataSet<Result<LongValue>> tl = directedRMatGraph(10, 16).run(new TriangleListing<LongValue, NullValue, NullValue>().setSortTriangleVertices(true)).     Checksum checksum = new ChecksumHashCode<Result<LongValue>>().run(tl).execute().     assertEquals(75049, checksum.getCount()).     assertEquals(0x000092399c79299eL, checksum.getChecksum()). }
