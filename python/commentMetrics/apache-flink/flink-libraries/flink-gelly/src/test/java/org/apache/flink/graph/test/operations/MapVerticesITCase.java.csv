commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testWithSameValue() throws Exception {     /* 		 * Test mapVertices() keeping the same value type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     DataSet<Vertex<Long, Long>> mappedVertices = graph.mapVertices(new AddOneMapper()).getVertices().     List<Vertex<Long, Long>> result = mappedVertices.collect().     expectedResult = "1,2\n" + "2,3\n" + "3,4\n" + "4,5\n" + "5,6\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;21;;@Test public void testWithStringValue() throws Exception {     /* 		 * Test mapVertices() and change the value type to String 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     DataSet<Vertex<Long, String>> mappedVertices = graph.mapVertices(new ToStringMapper()).getVertices().     List<Vertex<Long, String>> result = mappedVertices.collect().     expectedResult = "1,one\n" + "2,two\n" + "3,three\n" + "4,four\n" + "5,five\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;21;;@Test public void testWithtuple1Value() throws Exception {     /* 		 * Test mapVertices() and change the value type to a Tuple1 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     DataSet<Vertex<Long, Tuple1<Long>>> mappedVertices = graph.mapVertices(new ToTuple1Mapper()).getVertices().     List<Vertex<Long, Tuple1<Long>>> result = mappedVertices.collect().     expectedResult = "1,(1)\n" + "2,(2)\n" + "3,(3)\n" + "4,(4)\n" + "5,(5)\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;21;;@Test public void testWithCustomType() throws Exception {     /* 		 * Test mapVertices() and change the value type to a custom type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     DataSet<Vertex<Long, DummyCustomType>> mappedVertices = graph.mapVertices(new ToCustomTypeMapper()).getVertices().     List<Vertex<Long, DummyCustomType>> result = mappedVertices.collect().     expectedResult = "1,(T,1)\n" + "2,(T,2)\n" + "3,(T,3)\n" + "4,(T,4)\n" + "5,(T,5)\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;22;;@Test public void testWithCustomParametrizedType() throws Exception {     /* 		 * Test mapVertices() and change the value type to a parameterized custom type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     DataSet<Vertex<Long, DummyCustomParameterizedType<Double>>> mappedVertices = graph.mapVertices(new ToCustomParametrizedTypeMapper()).getVertices().     List<Vertex<Long, DummyCustomParameterizedType<Double>>> result = mappedVertices.collect().     expectedResult = "1,(1.0,1)\n" + "2,(2.0,2)\n" + "3,(3.0,3)\n" + "4,(4.0,4)\n" + "5,(5.0,5)\n".     compareResultAsTuples(result, expectedResult). }
false;public;1;3;;public Long map(Vertex<Long, Long> value) throws Exception {     return value.getValue() + 1. }
false;public;1;17;;public String map(Vertex<Long, Long> vertex) throws Exception {     String stringValue.     if (vertex.getValue() == 1) {         stringValue = "one".     } else if (vertex.getValue() == 2) {         stringValue = "two".     } else if (vertex.getValue() == 3) {         stringValue = "three".     } else if (vertex.getValue() == 4) {         stringValue = "four".     } else if (vertex.getValue() == 5) {         stringValue = "five".     } else {         stringValue = "".     }     return stringValue. }
false;public;1;5;;public Tuple1<Long> map(Vertex<Long, Long> vertex) throws Exception {     Tuple1<Long> tupleValue = new Tuple1<>().     tupleValue.setFields(vertex.getValue()).     return tupleValue. }
false;public;1;5;;public DummyCustomType map(Vertex<Long, Long> vertex) throws Exception {     DummyCustomType dummyValue = new DummyCustomType().     dummyValue.setIntField(vertex.getValue().intValue()).     return dummyValue. }
false;public;1;6;;public DummyCustomParameterizedType<Double> map(Vertex<Long, Long> vertex) throws Exception {     DummyCustomParameterizedType<Double> dummyValue = new DummyCustomParameterizedType<>().     dummyValue.setIntField(vertex.getValue().intValue()).     dummyValue.setTField(new Double(vertex.getValue())).     return dummyValue. }
