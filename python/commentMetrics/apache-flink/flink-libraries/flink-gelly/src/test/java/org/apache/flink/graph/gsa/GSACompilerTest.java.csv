commented;modifiers;parameterAmount;loc;comment;code
false;public;0;53;;@Test public void testGSACompiler() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(DEFAULT_PARALLELISM).     // compose test program     DataSet<Edge<Long, NullValue>> edges = env.fromElements(new Tuple3<>(1L, 2L, NullValue.getInstance())).map(new Tuple3ToEdgeMap<>()).     Graph<Long, Long, NullValue> graph = Graph.fromDataSet(edges, new InitVertices(), env).     DataSet<Vertex<Long, Long>> result = graph.runGatherSumApplyIteration(new GatherNeighborIds(), new SelectMinId(), new UpdateComponentId(), 100).getVertices().     result.output(new DiscardingOutputFormat<>()).     Plan p = env.createProgramPlan("GSA Connected Components").     OptimizedPlan op = compileNoStats(p).     // check the sink     SinkPlanNode sink = op.getDataSinks().iterator().next().     assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).     assertEquals(DEFAULT_PARALLELISM, sink.getParallelism()).     assertEquals(PartitioningProperty.HASH_PARTITIONED, sink.getGlobalProperties().getPartitioning()).     // check the iteration     WorksetIterationPlanNode iteration = (WorksetIterationPlanNode) sink.getInput().getSource().     assertEquals(DEFAULT_PARALLELISM, iteration.getParallelism()).     // check the solution set join and the delta     PlanNode ssDelta = iteration.getSolutionSetDeltaPlanNode().     // this is only true if the update function preserves the partitioning     assertTrue(ssDelta instanceof DualInputPlanNode).     DualInputPlanNode ssJoin = (DualInputPlanNode) ssDelta.     assertEquals(DEFAULT_PARALLELISM, ssJoin.getParallelism()).     assertEquals(ShipStrategyType.PARTITION_HASH, ssJoin.getInput1().getShipStrategy()).     assertEquals(new FieldList(0), ssJoin.getInput1().getShipStrategyKeys()).     // check the workset set join     SingleInputPlanNode sumReducer = (SingleInputPlanNode) ssJoin.getInput1().getSource().     SingleInputPlanNode gatherMapper = (SingleInputPlanNode) sumReducer.getInput().getSource().     DualInputPlanNode edgeJoin = (DualInputPlanNode) gatherMapper.getInput().getSource().     assertEquals(DEFAULT_PARALLELISM, edgeJoin.getParallelism()).     // input1 is the workset     assertEquals(ShipStrategyType.FORWARD, edgeJoin.getInput1().getShipStrategy()).     // input2 is the edges     assertEquals(ShipStrategyType.PARTITION_HASH, edgeJoin.getInput2().getShipStrategy()).     assertTrue(edgeJoin.getInput2().getTempMode().isCached()).     assertEquals(new FieldList(0), edgeJoin.getInput2().getShipStrategyKeys()). }
false;public;1;3;;public Long map(Long vertexId) {     return vertexId. }
false;public;1;3;;public Long gather(Neighbor<Long, NullValue> neighbor) {     return neighbor.getNeighborValue(). }
false;public;2;3;;public Long sum(Long newValue, Long currentValue) {     return Math.min(newValue, currentValue). }
false;public;2;5;;public void apply(Long summedValue, Long origValue) {     if (summedValue < origValue) {         setResult(summedValue).     } }
