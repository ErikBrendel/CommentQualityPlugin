commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public Tuple3<String, String, NullValue> map(Tuple2<String, String> edge) {     return new Tuple3<>(edge.f0, edge.f1, NullValue.getInstance()). }
false;public;0;56;;@Test public void testTranslationPlainEdges() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> bcVar = env.fromElements(1L).     DataSet<Vertex<String, Double>> result.     // ------------ construct the test program ------------------     DataSet<Tuple2<String, Double>> initialVertices = env.fromElements(new Tuple2<>("abc", 3.44)).     DataSet<Tuple2<String, String>> edges = env.fromElements(new Tuple2<>("a", "c")).     Graph<String, Double, NullValue> graph = Graph.fromTupleDataSet(initialVertices, edges.map(new MapFunction<Tuple2<String, String>, Tuple3<String, String, NullValue>>() {          public Tuple3<String, String, NullValue> map(Tuple2<String, String> edge) {             return new Tuple3<>(edge.f0, edge.f1, NullValue.getInstance()).         }     }), env).     VertexCentricConfiguration parameters = new VertexCentricConfiguration().     parameters.addBroadcastSet(BC_SET_NAME, bcVar).     parameters.setName(ITERATION_NAME).     parameters.setParallelism(ITERATION_parallelism).     parameters.registerAggregator(AGGREGATOR_NAME, new LongSumAggregator()).     result = graph.runVertexCentricIteration(new MyCompute(), null, NUM_ITERATIONS, parameters).getVertices().     result.output(new DiscardingOutputFormat<>()).     // ------------- validate the java program ----------------     assertTrue(result instanceof DeltaIterationResultSet).     DeltaIterationResultSet<?, ?> resultSet = (DeltaIterationResultSet<?, ?>) result.     DeltaIteration<?, ?> iteration = resultSet.getIterationHead().     // check the basic iteration properties     assertEquals(NUM_ITERATIONS, resultSet.getMaxIterations()).     assertArrayEquals(new int[] { 0 }, resultSet.getKeyPositions()).     assertEquals(ITERATION_parallelism, iteration.getParallelism()).     assertEquals(ITERATION_NAME, iteration.getName()).     assertEquals(AGGREGATOR_NAME, iteration.getAggregators().getAllRegisteredAggregators().iterator().next().getName()).     TwoInputUdfOperator<?, ?, ?, ?> computationCoGroup = (TwoInputUdfOperator<?, ?, ?, ?>) ((SingleInputUdfOperator<?, ?, ?>) resultSet.getNextWorkset()).getInput().     // validate that the broadcast sets are forwarded     assertEquals(bcVar, computationCoGroup.getBroadcastSets().get(BC_SET_NAME)). }
false;public;2;3;;@Override public void compute(Vertex<String, Double> vertex, MessageIterator<Double> messages) throws Exception { }
