commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     env = ExecutionEnvironment.getExecutionEnvironment().     vertices = TestGraphUtils.getLongLongVertexData(env).     edges = TestGraphUtils.getLongLongEdgeData(env).     inputGraph = Graph.fromDataSet(vertices, edges, env). }
false;public;0;9;;@Test public void testMapVerticesType() throws Exception {     // test type extraction in mapVertices     DataSet<Vertex<Long, Tuple2<Long, Integer>>> outVertices = inputGraph.mapVertices(new VertexMapper<>()).getVertices().     Assert.assertTrue(new TupleTypeInfo(Vertex.class, BasicTypeInfo.LONG_TYPE_INFO, new TupleTypeInfo<Tuple2<Long, Integer>>(BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO)).equals(outVertices.getType())). }
false;public;0;9;;@Test public void testMapEdgesType() throws Exception {     // test type extraction in mapEdges     DataSet<Edge<Long, Tuple2<Long, Integer>>> outEdges = inputGraph.mapEdges(new EdgeMapper<>()).getEdges().     Assert.assertTrue(new TupleTypeInfo(Edge.class, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, new TupleTypeInfo<Tuple2<Long, Integer>>(BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO)).equals(outEdges.getType())). }
false;public;0;8;;@Test public void testFromDataSet() throws Exception {     DataSet<Vertex<Long, Tuple2<Long, Integer>>> outVertices = Graph.fromDataSet(edges, new VertexInitializer<>(), env).getVertices().     Assert.assertTrue(new TupleTypeInfo(Vertex.class, BasicTypeInfo.LONG_TYPE_INFO, new TupleTypeInfo<Tuple2<Long, Integer>>(BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO)).equals(outVertices.getType())). }
false;public;0;5;;@Test public void testGroupReduceOnEdges() throws Exception {     DataSet<Tuple2<Long, Long>> output = inputGraph.groupReduceOnEdges(new EdgesGroupFunction<>(), EdgeDirection.OUT).     Assert.assertTrue((new TupleTypeInfo<Tuple2<Long, Long>>(BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO)).equals(output.getType())). }
false;public;1;4;;@Override public Tuple2<K, Integer> map(Vertex<K, Long> inputVertex) throws Exception {     return outTuple. }
false;public;1;4;;@Override public Tuple2<K, Integer> map(Edge<K, Long> inputEdge) throws Exception {     return outTuple. }
false;public;2;4;;@Override public void iterateEdges(Iterable<Tuple2<K, Edge<K, EV>>> edges, Collector<Tuple2<K, EV>> out) throws Exception {     out.collect(new Tuple2<>()). }
false;public;1;4;;@Override public Tuple2<K, Integer> map(K value) throws Exception {     return null. }
