commented;modifiers;parameterAmount;loc;comment;code
true;private,static;5;12;/**  * Validate a test result.  *  * @param graph input graph  * @param includeZeroDegreeVertices whether to include zero-degree vertices  * @param result expected {@link Result}  * @param averageDegree result average degree  * @param density result density  * @param <T> graph ID type  * @throws Exception on error  */ ;/**  * Validate a test result.  *  * @param graph input graph  * @param includeZeroDegreeVertices whether to include zero-degree vertices  * @param result expected {@link Result}  * @param averageDegree result average degree  * @param density result density  * @param <T> graph ID type  * @throws Exception on error  */ private static <T extends Comparable<T>> void validate(Graph<T, NullValue, NullValue> graph, boolean includeZeroDegreeVertices, Result result, float averageDegree, float density) throws Exception {     Result vertexMetrics = new VertexMetrics<T, NullValue, NullValue>().setIncludeZeroDegreeVertices(includeZeroDegreeVertices).run(graph).execute().     assertEquals(result, vertexMetrics).     assertEquals(averageDegree, vertexMetrics.getAverageDegree(), ACCURACY).     assertEquals(density, vertexMetrics.getDensity(), ACCURACY). }
false;public;0;4;;@Test public void testWithSimpleGraph() throws Exception {     validate(directedSimpleGraph, false, new Result(6, 7, 0, 13, 4, 2, 3, 6), 7f / 6, 7f / 30). }
false;public;0;12;;@Test public void testWithCompleteGraph() throws Exception {     long expectedDegree = completeGraphVertexCount - 1.     long expectedBidirectionalEdges = completeGraphVertexCount * expectedDegree / 2.     long expectedMaximumTriplets = CombinatoricsUtils.binomialCoefficient((int) expectedDegree, 2).     long expectedTriplets = completeGraphVertexCount * expectedMaximumTriplets.     Result expectedResult = new Result(completeGraphVertexCount, 0, expectedBidirectionalEdges, expectedTriplets, expectedDegree, expectedDegree, expectedDegree, expectedMaximumTriplets).     validate(completeGraph, false, expectedResult, expectedDegree, 1.0f). }
false;public;0;5;;@Test public void testWithEmptyGraphWithVertices() throws Exception {     validate(emptyGraphWithVertices, false, new Result(0, 0, 0, 0, 0, 0, 0, 0), Float.NaN, Float.NaN).     validate(emptyGraphWithVertices, true, new Result(3, 0, 0, 0, 0, 0, 0, 0), 0.0f, 0.0f). }
false;public;0;6;;@Test public void testWithEmptyGraphWithoutVertices() throws Exception {     Result expectedResult = new Result(0, 0, 0, 0, 0, 0, 0, 0).     validate(emptyGraphWithoutVertices, false, expectedResult, Float.NaN, Float.NaN).     validate(emptyGraphWithoutVertices, true, expectedResult, Float.NaN, Float.NaN). }
false;public;0;5;;@Test public void testWithRMatGraph() throws Exception {     Result expectedResult = new Result(902, 8875, 1567, 1003442, 463, 334, 342, 106953).     validate(directedRMatGraph(10, 16), false, expectedResult, 13.3137472f, 0.0147766f). }
