commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testProgram() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.createCollectionsEnvironment().     Graph<Long, Long, Long> graph = Graph.fromCollection(TestGraphUtils.getLongLongVertices(), TestGraphUtils.getLongLongEdges(), env).mapVertices(new AssignOneMapper()).     Graph<Long, Long, Long> result = graph.runScatterGatherIteration(new MessageFunction(), new UpdateFunction(), 10).     result.getVertices().map(new VertexToTuple2Map<>()).output(new DiscardingOutputFormat<>()).     env.execute(). }
false;public;1;7;;@Override public void sendMessages(Vertex<Long, Long> vertex) {     long superstep = getSuperstepNumber().     Assert.assertEquals(true, vertex.getValue() == superstep).     // send message to keep vertices active     sendMessageToAllNeighbors(vertex.getValue()). }
false;public;2;6;;@Override public void updateVertex(Vertex<Long, Long> vertex, MessageIterator<Long> inMessages) {     long superstep = getSuperstepNumber().     Assert.assertEquals(true, vertex.getValue() == superstep).     setNewVertexValue(vertex.getValue() + 1). }
false;public;1;3;;public Long map(Vertex<Long, Long> value) {     return 1L. }
