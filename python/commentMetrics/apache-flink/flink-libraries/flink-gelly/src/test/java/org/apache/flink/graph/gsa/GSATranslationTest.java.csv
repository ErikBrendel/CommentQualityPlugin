commented;modifiers;parameterAmount;loc;comment;code
false;public;0;60;;@Test public void testTranslation() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> bcGather = env.fromElements(1L).     DataSet<Long> bcSum = env.fromElements(1L).     DataSet<Long> bcApply = env.fromElements(1L).     DataSet<Vertex<Long, Long>> result.     // ------------ construct the test program ------------------     DataSet<Edge<Long, NullValue>> edges = env.fromElements(new Tuple3<>(1L, 2L, NullValue.getInstance())).map(new Tuple3ToEdgeMap<>()).     Graph<Long, Long, NullValue> graph = Graph.fromDataSet(edges, new InitVertices(), env).     GSAConfiguration parameters = new GSAConfiguration().     parameters.registerAggregator(AGGREGATOR_NAME, new LongSumAggregator()).     parameters.setName(ITERATION_NAME).     parameters.setParallelism(ITERATION_parallelism).     parameters.addBroadcastSetForGatherFunction(BC_SET_GATHER_NAME, bcGather).     parameters.addBroadcastSetForSumFunction(BC_SET_SUM_NAME, bcSum).     parameters.addBroadcastSetForApplyFunction(BC_SET_APLLY_NAME, bcApply).     result = graph.runGatherSumApplyIteration(new GatherNeighborIds(), new SelectMinId(), new UpdateComponentId(), NUM_ITERATIONS, parameters).getVertices().     result.output(new DiscardingOutputFormat<>()).     // ------------- validate the java program ----------------     assertTrue(result instanceof DeltaIterationResultSet).     DeltaIterationResultSet<?, ?> resultSet = (DeltaIterationResultSet<?, ?>) result.     DeltaIteration<?, ?> iteration = resultSet.getIterationHead().     // check the basic iteration properties     assertEquals(NUM_ITERATIONS, resultSet.getMaxIterations()).     assertArrayEquals(new int[] { 0 }, resultSet.getKeyPositions()).     assertEquals(ITERATION_parallelism, iteration.getParallelism()).     assertEquals(ITERATION_NAME, iteration.getName()).     assertEquals(AGGREGATOR_NAME, iteration.getAggregators().getAllRegisteredAggregators().iterator().next().getName()).     // validate that the semantic properties are set as they should     TwoInputUdfOperator<?, ?, ?, ?> solutionSetJoin = (TwoInputUdfOperator<?, ?, ?, ?>) resultSet.getNextWorkset().     assertTrue(solutionSetJoin.getSemanticProperties().getForwardingTargetFields(0, 0).contains(0)).     assertTrue(solutionSetJoin.getSemanticProperties().getForwardingTargetFields(1, 0).contains(0)).     SingleInputUdfOperator<?, ?, ?> sumReduce = (SingleInputUdfOperator<?, ?, ?>) solutionSetJoin.getInput1().     SingleInputUdfOperator<?, ?, ?> gatherMap = (SingleInputUdfOperator<?, ?, ?>) sumReduce.getInput().     // validate that the broadcast sets are forwarded     assertEquals(bcGather, gatherMap.getBroadcastSets().get(BC_SET_GATHER_NAME)).     assertEquals(bcSum, sumReduce.getBroadcastSets().get(BC_SET_SUM_NAME)).     assertEquals(bcApply, solutionSetJoin.getBroadcastSets().get(BC_SET_APLLY_NAME)). }
false;public;1;3;;public Long map(Long vertexId) {     return vertexId. }
false;public;1;3;;public Long gather(Neighbor<Long, NullValue> neighbor) {     return neighbor.getNeighborValue(). }
false;public;2;3;;public Long sum(Long newValue, Long currentValue) {     return Math.min(newValue, currentValue). }
false;public;2;5;;public void apply(Long summedValue, Long origValue) {     if (summedValue < origValue) {         setResult(summedValue).     } }
