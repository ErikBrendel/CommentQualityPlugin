commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Test public void testCreateWithCsvFile() throws Exception {     /* 		 * Test with two Csv files one with Vertex Data and one with Edges data 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final String fileContent = "1,1\n" + "2,2\n" + "3,3\n".     final FileInputSplit split = createTempFile(fileContent).     final String fileContent2 = "1,2,ot\n" + "3,2,tt\n" + "3,1,to\n".     final FileInputSplit split2 = createTempFile(fileContent2).     Graph<Long, Long, String> graph = Graph.fromCsvReader(split.getPath().toString(), split2.getPath().toString(), env).types(Long.class, Long.class, String.class).     List<Triplet<Long, Long, String>> result = graph.getTriplets().collect().     expectedResult = "1,2,1,2,ot\n" + "3,2,3,2,tt\n" + "3,1,3,1,to\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;26;;@Test public void testCsvWithNullEdge() throws Exception {     /* 		Test fromCsvReader with edge and vertex path and nullvalue for edge 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final String vertexFileContent = "1,one\n" + "2,two\n" + "3,three\n".     final String edgeFileContent = "1,2\n" + "3,2\n" + "3,1\n".     final FileInputSplit split = createTempFile(vertexFileContent).     final FileInputSplit edgeSplit = createTempFile(edgeFileContent).     Graph<Long, String, NullValue> graph = Graph.fromCsvReader(split.getPath().toString(), edgeSplit.getPath().toString(), env).vertexTypes(Long.class, String.class).     List<Triplet<Long, String, NullValue>> result = graph.getTriplets().collect().     expectedResult = "1,2,one,two,(null)\n" + "3,2,three,two,(null)\n" + "3,1,three,one,(null)\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;19;;@Test public void testCsvWithConstantValueMapper() throws Exception {     /* 		*Test fromCsvReader with edge path and a mapper that assigns a Double constant as value 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final String fileContent = "1,2,ot\n" + "3,2,tt\n" + "3,1,to\n".     final FileInputSplit split = createTempFile(fileContent).     Graph<Long, Double, String> graph = Graph.fromCsvReader(split.getPath().toString(), new AssignDoubleValueMapper(), env).types(Long.class, Double.class, String.class).     List<Triplet<Long, Double, String>> result = graph.getTriplets().collect().     // graph.getTriplets().writeAsCsv(resultPath).     expectedResult = "1,2,0.1,0.1,ot\n" + "3,1,0.1,0.1,to\n" + "3,2,0.1,0.1,tt\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;23;;@Test public void testCreateWithOnlyEdgesCsvFile() throws Exception {     /* 		 * Test with one Csv file one with Edges data. Also tests the configuration method ignoreFistLineEdges() 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final String fileContent2 = "header\n1,2,ot\n" + "3,2,tt\n" + "3,1,to\n".     final FileInputSplit split2 = createTempFile(fileContent2).     Graph<Long, NullValue, String> graph = Graph.fromCsvReader(split2.getPath().toString(), env).ignoreFirstLineEdges().ignoreCommentsVertices("hi").edgeTypes(Long.class, String.class).     List<Triplet<Long, NullValue, String>> result = graph.getTriplets().collect().     expectedResult = "1,2,(null),(null),ot\n" + "3,2,(null),(null),tt\n" + "3,1,(null),(null),to\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;36;;@Test public void testCreateCsvFileDelimiterConfiguration() throws Exception {     /* 		 * Test with an Edge and Vertex csv file. Tests the configuration methods FieldDelimiterEdges and 		 * FieldDelimiterVertices 		 * Also tests the configuration methods LineDelimiterEdges and LineDelimiterVertices 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     final String fileContent = "header\n1.1\n" + "2.2\n" + "3.3\n".     final FileInputSplit split = createTempFile(fileContent).     final String fileContent2 = "header|1:2:ot|" + "3:2:tt|" + "3:1:to|".     final FileInputSplit split2 = createTempFile(fileContent2).     Graph<Long, Long, String> graph = Graph.fromCsvReader(split.getPath().toString(), split2.getPath().toString(), env).ignoreFirstLineEdges().ignoreFirstLineVertices().fieldDelimiterEdges(":").fieldDelimiterVertices(".").lineDelimiterEdges("|").types(Long.class, Long.class, String.class).     List<Triplet<Long, Long, String>> result = graph.getTriplets().collect().     expectedResult = "1,2,1,2,ot\n" + "3,2,3,2,tt\n" + "3,1,3,1,to\n".     compareResultAsTuples(result, expectedResult). }
false;public;1;3;;public Double map(Long value) {     return 0.1d. }
false;private;1;13;;private FileInputSplit createTempFile(String content) throws IOException {     File tempFile = File.createTempFile("test_contents", "tmp").     tempFile.deleteOnExit().     OutputStreamWriter wrt = new OutputStreamWriter(new FileOutputStream(tempFile), Charset.forName("UTF-8")).     wrt.write(content).     wrt.close().     return new FileInputSplit(0, new Path(tempFile.toURI().toString()), 0, tempFile.length(), new String[] { "localhost" }). }
