commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void preSubmit() throws Exception {     resultPath = getTempFilePath("results"). }
false;protected;0;17;;@Override protected void testProgram() throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Long> vertexIds = env.generateSequence(1, NUM_VERTICES).     DataSet<String> edgeString = env.fromElements(ConnectedComponentsData.getRandomOddEvenEdges(NUM_EDGES, NUM_VERTICES, SEED).split("\n")).     DataSet<Edge<Long, NullValue>> edges = edgeString.map(new EdgeParser()).     DataSet<Vertex<Long, Long>> initialVertices = vertexIds.map(new IdAssigner()).     Graph<Long, Long, NullValue> graph = Graph.fromDataSet(initialVertices, edges, env).     DataSet<Vertex<Long, Long>> result = graph.run(new ConnectedComponents<>(100)).     result.writeAsCsv(resultPath, "\n", " ").     env.execute(). }
false;public;1;4;;@Override public Vertex<Long, Long> map(Long value) {     return new Vertex<>(value, value). }
false;protected;0;6;;@Override protected void postSubmit() throws Exception {     for (BufferedReader reader : getResultReader(resultPath)) {         ConnectedComponentsData.checkOddEvenResult(reader).     } }
false;public;1;5;;public Edge<Long, NullValue> map(String value) {     String[] nums = value.split(" ").     return new Edge<>(Long.parseLong(nums[0]), Long.parseLong(nums[1]), NullValue.getInstance()). }
