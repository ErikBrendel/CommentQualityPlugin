commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testGraphMetrics() throws Exception {     long vertexCount = 100.     long edgeCount = 1000.     RandomGenerableFactory<JDKRandomGenerator> rnd = new JDKRandomGeneratorFactory().     Graph<LongValue, NullValue, NullValue> graph = new RMatGraph<>(env, rnd, vertexCount, edgeCount).generate().     assertTrue(vertexCount >= graph.numberOfVertices()).     assertEquals(edgeCount, graph.numberOfEdges()). }
false;public;0;15;;@Test public void testParallelism() throws Exception {     int parallelism = 2.     RandomGenerableFactory<JDKRandomGenerator> rnd = new JDKRandomGeneratorFactory().     Graph<LongValue, NullValue, NullValue> graph = new RMatGraph<>(env, rnd, 100, 1000).setParallelism(parallelism).generate().     graph.getVertices().output(new DiscardingOutputFormat<>()).     graph.getEdges().output(new DiscardingOutputFormat<>()).     TestUtils.verifyParallelism(env, parallelism). }
