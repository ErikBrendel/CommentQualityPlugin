commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void testWithEdgesInputDataset() throws Exception {     /* 		 * Test joinWithEdges with the input DataSet parameter identical 		 * to the edge DataSet 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdges(graph.getEdges().map(new EdgeToTuple3Map<>()), new AddValuesMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,26\n" + "2,3,46\n" + "3,4,68\n" + "3,5,70\n" + "4,5,90\n" + "5,1,102\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testWithLessElements() throws Exception {     /* 		 * Test joinWithEdges with the input DataSet passed as a parameter containing 		 * less elements than the edge DataSet, but of the same type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdges(graph.getEdges().first(3).map(new EdgeToTuple3Map<>()), new AddValuesMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,26\n" + "2,3,46\n" + "3,4,34\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testWithLessElementsDifferentType() throws Exception {     /* 		 * Test joinWithEdges with the input DataSet passed as a parameter containing 		 * less elements than the edge DataSet and of a different type(Boolean) 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdges(graph.getEdges().first(3).map(new BooleanEdgeValueMapper()), new DoubleIfTrueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,26\n" + "2,3,46\n" + "3,4,34\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testWithNoCommonKeys() throws Exception {     /* 		 * Test joinWithEdges with the input DataSet containing different keys than the edge DataSet 		 * - the iterator becomes empty. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdges(TestGraphUtils.getLongLongLongTuple3Data(env), new DoubleValueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,26\n" + "2,3,46\n" + "3,4,68\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;26;;@Test public void testWithCustomType() throws Exception {     /* 	     * Test joinWithEdges with a DataSet containing custom parametrised type input values 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdges(TestGraphUtils.getLongLongCustomTuple3Data(env), new CustomValueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,10\n" + "1,3,20\n" + "2,3,30\n" + "3,4,40\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testWithEdgesOnSource() throws Exception {     /* 		 * Test joinWithEdgesOnSource with the input DataSet parameter identical 		 * to the edge DataSet 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnSource(graph.getEdges().map(new ProjectSourceAndValueMapper()), new AddValuesMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,25\n" + "2,3,46\n" + "3,4,68\n" + "3,5,69\n" + "4,5,90\n" + "5,1,102\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testOnSourceWithLessElements() throws Exception {     /* 		 * Test joinWithEdgesOnSource with the input DataSet passed as a parameter containing 		 * less elements than the edge DataSet, but of the same type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnSource(graph.getEdges().first(3).map(new ProjectSourceAndValueMapper()), new AddValuesMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,25\n" + "2,3,46\n" + "3,4,34\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testOnSourceWithDifferentType() throws Exception {     /* 		 * Test joinWithEdgesOnSource with the input DataSet passed as a parameter containing 		 * less elements than the edge DataSet and of a different type(Boolean) 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnSource(graph.getEdges().first(3).map(new ProjectSourceWithTrueMapper()), new DoubleIfTrueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,26\n" + "2,3,46\n" + "3,4,34\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testOnSourceWithNoCommonKeys() throws Exception {     /* 		 * Test joinWithEdgesOnSource with the input DataSet containing different keys than the edge DataSet 		 * - the iterator becomes empty. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnSource(TestGraphUtils.getLongLongTuple2SourceData(env), new DoubleValueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,20\n" + "1,3,20\n" + "2,3,60\n" + "3,4,80\n" + "3,5,80\n" + "4,5,120\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;26;;@Test public void testOnSourceWithCustom() throws Exception {     /* 	     * Test joinWithEdgesOnSource with a DataSet containing custom parametrised type input values 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnSource(TestGraphUtils.getLongCustomTuple2SourceData(env), new CustomValueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,10\n" + "1,3,10\n" + "2,3,30\n" + "3,4,40\n" + "3,5,40\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testWithEdgesOnTarget() throws Exception {     /* 		 * Test joinWithEdgesOnTarget with the input DataSet parameter identical 		 * to the edge DataSet 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnTarget(graph.getEdges().map(new ProjectTargetAndValueMapper()), new AddValuesMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,26\n" + "2,3,36\n" + "3,4,68\n" + "3,5,70\n" + "4,5,80\n" + "5,1,102\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testWithOnTargetWithLessElements() throws Exception {     /* 		 * Test joinWithEdgesOnTarget with the input DataSet passed as a parameter containing 		 * less elements than the edge DataSet, but of the same type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnTarget(graph.getEdges().first(3).map(new ProjectTargetAndValueMapper()), new AddValuesMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,26\n" + "2,3,36\n" + "3,4,34\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testOnTargetWithDifferentType() throws Exception {     /* 		 * Test joinWithEdgesOnTarget with the input DataSet passed as a parameter containing 		 * less elements than the edge DataSet and of a different type(Boolean) 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnTarget(graph.getEdges().first(3).map(new ProjectTargetWithTrueMapper()), new DoubleIfTrueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,24\n" + "1,3,26\n" + "2,3,46\n" + "3,4,34\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;27;;@Test public void testOnTargetWithNoCommonKeys() throws Exception {     /* 		 * Test joinWithEdgesOnTarget with the input DataSet containing different keys than the edge DataSet 		 * - the iterator becomes empty. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnTarget(TestGraphUtils.getLongLongTuple2TargetData(env), new DoubleValueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,20\n" + "1,3,40\n" + "2,3,40\n" + "3,4,80\n" + "3,5,35\n" + "4,5,45\n" + "5,1,140\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;26;;@Test public void testOnTargetWithCustom() throws Exception {     /* 	     * Test joinWithEdgesOnTarget with a DataSet containing custom parametrised type input values 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithEdgesOnTarget(TestGraphUtils.getLongCustomTuple2TargetData(env), new CustomValueMapper()).     DataSet<Edge<Long, Long>> data = res.getEdges().     List<Edge<Long, Long>> result = data.collect().     expectedResult = "1,2,10\n" + "1,3,20\n" + "2,3,20\n" + "3,4,40\n" + "3,5,35\n" + "4,5,45\n" + "5,1,51\n".     compareResultAsTuples(result, expectedResult). }
false;public;2;3;;public Long edgeJoin(Long edgeValue, Long inputValue) throws Exception {     return edgeValue + inputValue. }
false;public;1;3;;public Tuple3<Long, Long, Boolean> map(Edge<Long, Long> edge) throws Exception {     return new Tuple3<>(edge.getSource(), edge.getTarget(), true). }
false;public;2;7;;public Long edgeJoin(Long edgeValue, Boolean inputValue) {     if (inputValue) {         return edgeValue * 2.     } else {         return edgeValue.     } }
false;public;2;3;;public Long edgeJoin(Long edgeValue, Long inputValue) {     return inputValue * 2. }
false;public;2;3;;public Long edgeJoin(Long edgeValue, DummyCustomParameterizedType<Float> inputValue) {     return (long) inputValue.getIntField(). }
false;public;1;3;;public Tuple2<Long, Long> map(Edge<Long, Long> edge) throws Exception {     return new Tuple2<>(edge.getSource(), edge.getValue()). }
false;public;1;3;;public Tuple2<Long, Boolean> map(Edge<Long, Long> edge) throws Exception {     return new Tuple2<>(edge.getSource(), true). }
false;public;1;3;;public Tuple2<Long, Long> map(Edge<Long, Long> edge) throws Exception {     return new Tuple2<>(edge.getTarget(), edge.getValue()). }
false;public;1;3;;public Tuple2<Long, Boolean> map(Edge<Long, Long> edge) throws Exception {     return new Tuple2<>(edge.getTarget(), true). }
