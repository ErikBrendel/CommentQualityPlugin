commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Edge<Long, NullValue> map(Tuple2<Long, Long> edge) {     return new Edge<>(edge.f0, edge.f1, NullValue.getInstance()). }
false;public;0;68;;@SuppressWarnings("serial") @Test public void testSpargelCompiler() {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(DEFAULT_PARALLELISM).     // compose test program     DataSet<Vertex<Long, Long>> initialVertices = env.fromElements(new Tuple2<>(1L, 1L), new Tuple2<>(2L, 2L)).map(new Tuple2ToVertexMap<>()).     DataSet<Edge<Long, NullValue>> edges = env.fromElements(new Tuple2<>(1L, 2L)).map(new MapFunction<Tuple2<Long, Long>, Edge<Long, NullValue>>() {          public Edge<Long, NullValue> map(Tuple2<Long, Long> edge) {             return new Edge<>(edge.f0, edge.f1, NullValue.getInstance()).         }     }).     Graph<Long, Long, NullValue> graph = Graph.fromDataSet(initialVertices, edges, env).     DataSet<Vertex<Long, Long>> result = graph.runScatterGatherIteration(new ConnectedComponents.CCMessenger<>(BasicTypeInfo.LONG_TYPE_INFO), new ConnectedComponents.CCUpdater<>(), 100).getVertices().     result.output(new DiscardingOutputFormat<>()).     Plan p = env.createProgramPlan("Spargel Connected Components").     OptimizedPlan op = compileNoStats(p).     // check the sink     SinkPlanNode sink = op.getDataSinks().iterator().next().     assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).     assertEquals(DEFAULT_PARALLELISM, sink.getParallelism()).     // check the iteration     WorksetIterationPlanNode iteration = (WorksetIterationPlanNode) sink.getInput().getSource().     assertEquals(DEFAULT_PARALLELISM, iteration.getParallelism()).     // check the solution set join and the delta     PlanNode ssDelta = iteration.getSolutionSetDeltaPlanNode().     // this is only true if the update functions preserves the partitioning     assertTrue(ssDelta instanceof DualInputPlanNode).     DualInputPlanNode ssJoin = (DualInputPlanNode) ssDelta.     assertEquals(DEFAULT_PARALLELISM, ssJoin.getParallelism()).     assertEquals(ShipStrategyType.PARTITION_HASH, ssJoin.getInput1().getShipStrategy()).     assertEquals(new FieldList(0), ssJoin.getInput1().getShipStrategyKeys()).     // check the workset set join     DualInputPlanNode edgeJoin = (DualInputPlanNode) ssJoin.getInput1().getSource().     assertEquals(DEFAULT_PARALLELISM, edgeJoin.getParallelism()).     assertEquals(ShipStrategyType.PARTITION_HASH, edgeJoin.getInput1().getShipStrategy()).     assertEquals(ShipStrategyType.FORWARD, edgeJoin.getInput2().getShipStrategy()).     assertTrue(edgeJoin.getInput1().getTempMode().isCached()).     assertEquals(new FieldList(0), edgeJoin.getInput1().getShipStrategyKeys()).     // check that the initial partitioning is pushed out of the loop     assertEquals(ShipStrategyType.PARTITION_HASH, iteration.getInput1().getShipStrategy()).     assertEquals(ShipStrategyType.PARTITION_HASH, iteration.getInput2().getShipStrategy()).     assertEquals(new FieldList(0), iteration.getInput1().getShipStrategyKeys()).     assertEquals(new FieldList(0), iteration.getInput2().getShipStrategyKeys()).     // check that the initial workset sort is outside the loop     assertEquals(LocalStrategy.SORT, iteration.getInput2().getLocalStrategy()).     assertEquals(new FieldList(0), iteration.getInput2().getLocalStrategyKeys()). }
false;public;1;3;;public Edge<Long, NullValue> map(Tuple2<Long, Long> edge) {     return new Edge<>(edge.f0, edge.f1, NullValue.getInstance()). }
false;public;0;73;;@SuppressWarnings("serial") @Test public void testSpargelCompilerWithBroadcastVariable() {     final String broadcastVariableName = "broadcast variable".     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(DEFAULT_PARALLELISM).     // compose test program     DataSet<Long> bcVar = env.fromElements(1L).     DataSet<Vertex<Long, Long>> initialVertices = env.fromElements(new Tuple2<>(1L, 1L), new Tuple2<>(2L, 2L)).map(new Tuple2ToVertexMap<>()).     DataSet<Edge<Long, NullValue>> edges = env.fromElements(new Tuple2<>(1L, 2L)).map(new MapFunction<Tuple2<Long, Long>, Edge<Long, NullValue>>() {          public Edge<Long, NullValue> map(Tuple2<Long, Long> edge) {             return new Edge<>(edge.f0, edge.f1, NullValue.getInstance()).         }     }).     Graph<Long, Long, NullValue> graph = Graph.fromDataSet(initialVertices, edges, env).     ScatterGatherConfiguration parameters = new ScatterGatherConfiguration().     parameters.addBroadcastSetForScatterFunction(broadcastVariableName, bcVar).     parameters.addBroadcastSetForGatherFunction(broadcastVariableName, bcVar).     DataSet<Vertex<Long, Long>> result = graph.runScatterGatherIteration(new ConnectedComponents.CCMessenger<>(BasicTypeInfo.LONG_TYPE_INFO), new ConnectedComponents.CCUpdater<>(), 100).getVertices().     result.output(new DiscardingOutputFormat<>()).     Plan p = env.createProgramPlan("Spargel Connected Components").     OptimizedPlan op = compileNoStats(p).     // check the sink     SinkPlanNode sink = op.getDataSinks().iterator().next().     assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy()).     assertEquals(DEFAULT_PARALLELISM, sink.getParallelism()).     // check the iteration     WorksetIterationPlanNode iteration = (WorksetIterationPlanNode) sink.getInput().getSource().     assertEquals(DEFAULT_PARALLELISM, iteration.getParallelism()).     // check the solution set join and the delta     PlanNode ssDelta = iteration.getSolutionSetDeltaPlanNode().     // this is only true if the update functions preserves the partitioning     assertTrue(ssDelta instanceof DualInputPlanNode).     DualInputPlanNode ssJoin = (DualInputPlanNode) ssDelta.     assertEquals(DEFAULT_PARALLELISM, ssJoin.getParallelism()).     assertEquals(ShipStrategyType.PARTITION_HASH, ssJoin.getInput1().getShipStrategy()).     assertEquals(new FieldList(0), ssJoin.getInput1().getShipStrategyKeys()).     // check the workset set join     DualInputPlanNode edgeJoin = (DualInputPlanNode) ssJoin.getInput1().getSource().     assertEquals(DEFAULT_PARALLELISM, edgeJoin.getParallelism()).     assertEquals(ShipStrategyType.PARTITION_HASH, edgeJoin.getInput1().getShipStrategy()).     assertEquals(ShipStrategyType.FORWARD, edgeJoin.getInput2().getShipStrategy()).     assertTrue(edgeJoin.getInput1().getTempMode().isCached()).     assertEquals(new FieldList(0), edgeJoin.getInput1().getShipStrategyKeys()).     // check that the initial partitioning is pushed out of the loop     assertEquals(ShipStrategyType.PARTITION_HASH, iteration.getInput1().getShipStrategy()).     assertEquals(ShipStrategyType.PARTITION_HASH, iteration.getInput2().getShipStrategy()).     assertEquals(new FieldList(0), iteration.getInput1().getShipStrategyKeys()).     assertEquals(new FieldList(0), iteration.getInput2().getShipStrategyKeys()). }
