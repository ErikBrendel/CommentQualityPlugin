commented;modifiers;parameterAmount;loc;comment;code
true;private,static;3;9;/**  * Validate a test result.  *  * @param graph input graph  * @param tripletCount result triplet count  * @param triangleCount result triangle count  * @param <T> graph ID type  * @throws Exception on error  */ ;/**  * Validate a test result.  *  * @param graph input graph  * @param tripletCount result triplet count  * @param triangleCount result triangle count  * @param <T> graph ID type  * @throws Exception on error  */ private static <T extends Comparable<T> & CopyableValue<T>> void validate(Graph<T, NullValue, NullValue> graph, long tripletCount, long triangleCount) throws Exception {     Result result = new GlobalClusteringCoefficient<T, NullValue, NullValue>().run(graph).execute().     assertEquals(tripletCount, result.getNumberOfTriplets()).     assertEquals(triangleCount, result.getNumberOfTriangles()). }
false;public;0;4;;@Test public void testWithSimpleGraph() throws Exception {     validate(undirectedSimpleGraph, 13, 6). }
false;public;0;7;;@Test public void testWithCompleteGraph() throws Exception {     long expectedDegree = completeGraphVertexCount - 1.     long expectedCount = completeGraphVertexCount * CombinatoricsUtils.binomialCoefficient((int) expectedDegree, 2).     validate(completeGraph, expectedCount, expectedCount). }
false;public;0;4;;@Test public void testWithEmptyGraphWithVertices() throws Exception {     validate(emptyGraphWithVertices, 0, 0). }
false;public;0;4;;@Test public void testWithEmptyGraphWithoutVertices() throws Exception {     validate(emptyGraphWithoutVertices, 0, 0). }
false;public;0;4;;@Test public void testWithRMatGraph() throws Exception {     validate(undirectedRMatGraph(10, 16), 1003442, 225147). }
