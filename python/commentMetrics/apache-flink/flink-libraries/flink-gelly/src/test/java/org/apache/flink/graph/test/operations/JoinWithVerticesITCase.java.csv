commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testJoinWithVertexSet() throws Exception {     /* 		 * Test joinWithVertices with the input DataSet parameter identical 		 * to the vertex DataSet 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithVertices(graph.getVertices().map(new VertexToTuple2Map<>()), new AddValuesMapper()).     DataSet<Vertex<Long, Long>> data = res.getVertices().     List<Vertex<Long, Long>> result = data.collect().     expectedResult = "1,2\n" + "2,4\n" + "3,6\n" + "4,8\n" + "5,10\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;25;;@Test public void testWithLessElements() throws Exception {     /* 		 * Test joinWithVertices with the input DataSet passed as a parameter containing 		 * less elements than the vertex DataSet, but of the same type 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithVertices(graph.getVertices().first(3).map(new VertexToTuple2Map<>()), new AddValuesMapper()).     DataSet<Vertex<Long, Long>> data = res.getVertices().     List<Vertex<Long, Long>> result = data.collect().     expectedResult = "1,2\n" + "2,4\n" + "3,6\n" + "4,4\n" + "5,5\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;25;;@Test public void testWithDifferentType() throws Exception {     /* 		 * Test joinWithVertices with the input DataSet passed as a parameter containing 		 * less elements than the vertex DataSet and of a different type(Boolean) 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithVertices(graph.getVertices().first(3).map(new ProjectIdWithTrue()), new DoubleIfTrueMapper()).     DataSet<Vertex<Long, Long>> data = res.getVertices().     List<Vertex<Long, Long>> result = data.collect().     expectedResult = "1,2\n" + "2,4\n" + "3,6\n" + "4,4\n" + "5,5\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;25;;@Test public void testWithDifferentKeys() throws Exception {     /* 		 * Test joinWithVertices with an input DataSet containing different keys than the vertex DataSet 		 * - the iterator becomes empty. 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithVertices(TestGraphUtils.getLongLongTuple2Data(env), new ProjectSecondMapper()).     DataSet<Vertex<Long, Long>> data = res.getVertices().     List<Vertex<Long, Long>> result = data.collect().     expectedResult = "1,10\n" + "2,20\n" + "3,30\n" + "4,40\n" + "5,5\n".     compareResultAsTuples(result, expectedResult). }
false;public;0;24;;@Test public void testWithCustomType() throws Exception {     /* 		 * Test joinWithVertices with a DataSet containing custom parametrised type input values 		 */     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeData(env), env).     Graph<Long, Long, Long> res = graph.joinWithVertices(TestGraphUtils.getLongCustomTuple2Data(env), new CustomValueMapper()).     DataSet<Vertex<Long, Long>> data = res.getVertices().     List<Vertex<Long, Long>> result = data.collect().     expectedResult = "1,10\n" + "2,20\n" + "3,30\n" + "4,40\n" + "5,5\n".     compareResultAsTuples(result, expectedResult). }
false;public;2;3;;public Long vertexJoin(Long vertexValue, Long inputValue) {     return vertexValue + inputValue. }
false;public;1;3;;public Tuple2<Long, Boolean> map(Vertex<Long, Long> vertex) throws Exception {     return new Tuple2<>(vertex.getId(), true). }
false;public;2;7;;public Long vertexJoin(Long vertexValue, Boolean inputValue) {     if (inputValue) {         return vertexValue * 2.     } else {         return vertexValue.     } }
false;public;2;3;;public Long vertexJoin(Long vertexValue, Long inputValue) {     return inputValue. }
false;public;2;3;;public Long vertexJoin(Long vertexValue, DummyCustomParameterizedType<Float> inputValue) {     return (long) inputValue.getIntField(). }
