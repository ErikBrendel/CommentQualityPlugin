commented;modifiers;parameterAmount;loc;comment;code
true;public;0;19;/**  * Test outDegrees() with an edge having a srcId that does not exist in the vertex DataSet.  */ ;/**  * Test outDegrees() with an edge having a srcId that does not exist in the vertex DataSet.  */ @Test public void testOutDegreesInvalidEdgeSrcId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(PARALLELISM).     env.getConfig().disableSysoutLogging().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeInvalidSrcData(env), env).     try {         graph.outDegrees().output(new DiscardingOutputFormat<>()).         env.execute().         fail("graph.outDegrees() did not fail.").     } catch (Exception e) {     // We expect the job to fail with an exception     } }
true;public;0;19;/**  * Test inDegrees() with an edge having a trgId that does not exist in the vertex DataSet.  */ ;/**  * Test inDegrees() with an edge having a trgId that does not exist in the vertex DataSet.  */ @Test public void testInDegreesInvalidEdgeTrgId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(PARALLELISM).     env.getConfig().disableSysoutLogging().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeInvalidTrgData(env), env).     try {         graph.inDegrees().output(new DiscardingOutputFormat<>()).         env.execute().         fail("graph.inDegrees() did not fail.").     } catch (Exception e) {     // We expect the job to fail with an exception     } }
true;public;0;19;/**  * Test getDegrees() with an edge having a trgId that does not exist in the vertex DataSet.  */ ;/**  * Test getDegrees() with an edge having a trgId that does not exist in the vertex DataSet.  */ @Test public void testGetDegreesInvalidEdgeTrgId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(PARALLELISM).     env.getConfig().disableSysoutLogging().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeInvalidTrgData(env), env).     try {         graph.getDegrees().output(new DiscardingOutputFormat<>()).         env.execute().         fail("graph.getDegrees() did not fail.").     } catch (Exception e) {     // We expect the job to fail with an exception     } }
true;public;0;19;/**  * Test getDegrees() with an edge having a srcId that does not exist in the vertex DataSet.  */ ;/**  * Test getDegrees() with an edge having a srcId that does not exist in the vertex DataSet.  */ @Test public void testGetDegreesInvalidEdgeSrcId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(PARALLELISM).     env.getConfig().disableSysoutLogging().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeInvalidSrcData(env), env).     try {         graph.getDegrees().output(new DiscardingOutputFormat<>()).         env.execute().         fail("graph.getDegrees() did not fail.").     } catch (Exception e) {     // We expect the job to fail with an exception     } }
true;public;0;20;/**  * Test getDegrees() with an edge having a srcId and a trgId that does not exist in the vertex DataSet.  */ ;/**  * Test getDegrees() with an edge having a srcId and a trgId that does not exist in the vertex DataSet.  */ @Test public void testGetDegreesInvalidEdgeSrcTrgId() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(PARALLELISM).     env.getConfig().disableSysoutLogging().     Graph<Long, Long, Long> graph = Graph.fromDataSet(TestGraphUtils.getLongLongVertexData(env), TestGraphUtils.getLongLongEdgeInvalidSrcTrgData(env), env).     try {         graph.getDegrees().output(new DiscardingOutputFormat<>()).         env.execute().         fail("graph.getDegrees() did not fail.").     } catch (Exception e) {     // We expect the job to fail with an exception     } }
