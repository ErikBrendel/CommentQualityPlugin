commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public K getVertexId0() {     return vertexId0. }
false;public;1;4;;@Override public void setVertexId0(K vertexId0) {     this.vertexId0 = vertexId0. }
false;public;0;4;;@Override public K getVertexId1() {     return vertexId1. }
false;public;1;4;;@Override public void setVertexId1(K vertexId1) {     this.vertexId1 = vertexId1. }
false;public;3;23;;@Override public <T> TranslatableResult<T> translate(TranslateFunction<K, T> translator, TranslatableResult<T> reuse, Collector<TranslatableResult<T>> out) throws Exception {     if (reuse == null) {         reuse = new BasicBinaryResult<>().     }     K vertexId0 = this.getVertexId0().     K vertexId1 = this.getVertexId1().     BinaryResult<T> translatable = (BinaryResult<T>) reuse.     BinaryResult<T> translated = (BinaryResult<T>) this.     translated.setVertexId0(translator.translate(this.getVertexId0(), translatable.getVertexId0())).     translated.setVertexId1(translator.translate(this.getVertexId1(), translatable.getVertexId1())).     out.collect((TranslatableResult<T>) translated).     this.setVertexId0(vertexId0).     this.setVertexId1(vertexId1).     return reuse. }
false;public;0;4;;@Override public String toString() {     return "(" + getVertexId0() + "," + getVertexId1() + ")". }
