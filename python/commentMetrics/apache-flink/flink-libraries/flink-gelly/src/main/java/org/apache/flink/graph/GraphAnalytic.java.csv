commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * This method must be called after the program has executed.  *  1) "run" analytics and algorithms  *  2) call ExecutionEnvironment.execute()  *  3) get analytic results  *  * @return the result  */ ;/**  * This method must be called after the program has executed.  *  1) "run" analytics and algorithms  *  2) call ExecutionEnvironment.execute()  *  3) get analytic results  *  * @return the result  */ T getResult().
true;;0;1;/**  * Execute the program and return the result.  *  * @return the result  * @throws Exception  */ ;/**  * Execute the program and return the result.  *  * @return the result  * @throws Exception  */ T execute() throws Exception.
true;;1;1;/**  * Execute the program and return the result.  *  * @param jobName the name to assign to the job  * @return the result  * @throws Exception  */ ;/**  * Execute the program and return the result.  *  * @param jobName the name to assign to the job  * @return the result  * @throws Exception  */ T execute(String jobName) throws Exception.
true;;1;1;/**  * All {@code GraphAnalytic} processing must be terminated by an  * {@link OutputFormat}. Rather than obtained via accumulators rather than  * returned by a {@link DataSet}.  *  * @param input input graph  * @return this  * @throws Exception  */ ;/**  * All {@code GraphAnalytic} processing must be terminated by an  * {@link OutputFormat}. Rather than obtained via accumulators rather than  * returned by a {@link DataSet}.  *  * @param input input graph  * @return this  * @throws Exception  */ GraphAnalytic<K, VV, EV, T> run(Graph<K, VV, EV> input) throws Exception.
