commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Override public Graph<LongValue, NullValue, NullValue> generate() {     Preconditions.checkState(vertexPairCount > 0).     // Vertices     long vertexCount = 2 * vertexPairCount.     DataSet<Vertex<LongValue, NullValue>> vertices = GraphGeneratorUtils.vertexSequence(env, parallelism, vertexCount).     // Edges     LongValueSequenceIterator iterator = new LongValueSequenceIterator(0, vertexCount - 1).     DataSet<Edge<LongValue, NullValue>> edges = env.fromParallelCollection(iterator, LongValue.class).setParallelism(parallelism).name("Edge iterators").map(new LinkVertexToSingletonNeighbor()).setParallelism(parallelism).name("Complete graph edges").     // Graph     return Graph.fromDataSet(vertices, edges, env). }
false;public;1;14;;@Override public Edge<LongValue, NullValue> map(LongValue value) throws Exception {     long val = value.getValue().     source.setValue(val).     if (val % 2 == 0) {         target.setValue(val + 1).     } else {         target.setValue(val - 1).     }     return edge. }
