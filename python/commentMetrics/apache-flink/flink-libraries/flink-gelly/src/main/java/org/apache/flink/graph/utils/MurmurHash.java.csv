commented;modifiers;parameterAmount;loc;comment;code
true;public;0;5;/**  * Re-initialize the MurmurHash state.  *  * @return this  */ ;/**  * Re-initialize the MurmurHash state.  *  * @return this  */ public MurmurHash reset() {     count = 0.     hash = seed.     return this. }
true;public;1;4;/**  * Process a {@code double} value.  *  * @param input 64-bit input value  * @return this  */ ;/**  * Process a {@code double} value.  *  * @param input 64-bit input value  * @return this  */ public MurmurHash hash(double input) {     hash(Double.doubleToLongBits(input)).     return this. }
true;public;1;4;/**  * Process a {@code float} value.  *  * @param input 32-bit input value  * @return this  */ ;/**  * Process a {@code float} value.  *  * @param input 32-bit input value  * @return this  */ public MurmurHash hash(float input) {     hash(Float.floatToIntBits(input)).     return this. }
true;public;1;13;/**  * Process an {@code integer} value.  *  * @param input 32-bit input value  * @return this  */ ;/**  * Process an {@code integer} value.  *  * @param input 32-bit input value  * @return this  */ public MurmurHash hash(int input) {     count++.     input *= 0xcc9e2d51.     input = Integer.rotateLeft(input, 15).     input *= 0x1b873593.     hash ^= input.     hash = Integer.rotateLeft(hash, 13).     hash = hash * 5 + 0xe6546b64.     return this. }
true;public;1;5;/**  * Process a {@code long} value.  *  * @param input 64-bit input value  * @return this  */ ;/**  * Process a {@code long} value.  *  * @param input 64-bit input value  * @return this  */ public MurmurHash hash(long input) {     hash((int) (input >>> 32)).     hash((int) input).     return this. }
true;public;0;10;/**  * Finalize and return the MurmurHash output.  *  * @return 32-bit hash  */ ;/**  * Finalize and return the MurmurHash output.  *  * @return 32-bit hash  */ public int hash() {     hash ^= 4 * count.     hash ^= hash >>> 16.     hash *= 0x85ebca6b.     hash ^= hash >>> 13.     hash *= 0xc2b2ae35.     hash ^= hash >>> 16.     return hash. }
