commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int hash(ShortValueArray record) {     return record.hashCode(). }
false;public;1;4;;@Override public void setReference(ShortValueArray toCompare) {     toCompare.copyTo(reference). }
false;public;1;4;;@Override public boolean equalToReference(ShortValueArray candidate) {     return candidate.equals(this.reference). }
false;public;1;5;;@Override public int compareToReference(TypeComparator<ShortValueArray> referencedComparator) {     int comp = ((ShortValueArrayComparator) referencedComparator).reference.compareTo(reference).     return ascendingComparison ? comp : -comp. }
false;public;2;5;;@Override public int compare(ShortValueArray first, ShortValueArray second) {     int comp = first.compareTo(second).     return ascendingComparison ? comp : -comp. }
false;public;2;19;;@Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     int firstCount = firstSource.readInt().     int secondCount = secondSource.readInt().     int minCount = Math.min(firstCount, secondCount).     while (minCount-- > 0) {         short firstValue = firstSource.readShort().         short secondValue = secondSource.readShort().         int cmp = Short.compare(firstValue, secondValue).         if (cmp != 0) {             return ascendingComparison ? cmp : -cmp.         }     }     int cmp = Integer.compare(firstCount, secondCount).     return ascendingComparison ? cmp : -cmp. }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return NormalizableKey.class.isAssignableFrom(ShortValueArray.class). }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return reference.getMaxNormalizedKeyLen(). }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyShorts) {     return keyShorts < getNormalizeKeyLen(). }
false;public;4;4;;@Override public void putNormalizedKey(ShortValueArray record, MemorySegment target, int offset, int numShorts) {     record.copyNormalizedKey(target, offset, numShorts). }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return !ascendingComparison. }
false;public;0;4;;@Override public TypeComparator<ShortValueArray> duplicate() {     return new ShortValueArrayComparator(ascendingComparison). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = record.     return 1. }
false;public;0;4;;@Override public TypeComparator<?>[] getFlatComparators() {     return comparators. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // unsupported normalization // -------------------------------------------------------------------------------------------- @Override public boolean supportsSerializationWithKeyNormalization() {     return false. }
false;public;2;4;;@Override public void writeWithKeyNormalization(ShortValueArray record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public ShortValueArray readWithKeyDenormalization(ShortValueArray reuse, DataInputView source) throws IOException {     throw new UnsupportedOperationException(). }
