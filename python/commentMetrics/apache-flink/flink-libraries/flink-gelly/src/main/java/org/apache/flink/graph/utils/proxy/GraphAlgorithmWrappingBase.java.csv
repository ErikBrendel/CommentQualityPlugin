# id;timestamp;commentText;codeText;commentWords;codeWords
GraphAlgorithmWrappingBase -> protected void mergeConfiguration(GraphAlgorithmWrappingBase other);1499777483;Merge the other configuration into this algorithm's after the call to_{@link #canMergeConfigurationWith} has checked that the configurations_can be merged.__@param other the algorithm from which to merge configuration__@see #canMergeConfigurationWith(GraphAlgorithmWrappingBase);protected void mergeConfiguration(GraphAlgorithmWrappingBase other) {_		Preconditions.checkNotNull(other)___		parallelism = (parallelism == PARALLELISM_DEFAULT) ? other.parallelism :_			((other.parallelism == PARALLELISM_DEFAULT) ? parallelism : Math.min(parallelism, other.parallelism))__	};merge,the,other,configuration,into,this,algorithm,s,after,the,call,to,link,can,merge,configuration,with,has,checked,that,the,configurations,can,be,merged,param,other,the,algorithm,from,which,to,merge,configuration,see,can,merge,configuration,with,graph,algorithm,wrapping,base;protected,void,merge,configuration,graph,algorithm,wrapping,base,other,preconditions,check,not,null,other,parallelism,parallelism,other,parallelism,other,parallelism,parallelism,math,min,parallelism,other,parallelism
GraphAlgorithmWrappingBase -> protected void mergeConfiguration(GraphAlgorithmWrappingBase other);1514902843;Merge the other configuration into this algorithm's after the call to_{@link #canMergeConfigurationWith} has checked that the configurations_can be merged.__@param other the algorithm from which to merge configuration__@see #canMergeConfigurationWith(GraphAlgorithmWrappingBase);protected void mergeConfiguration(GraphAlgorithmWrappingBase other) {_		Preconditions.checkNotNull(other)___		parallelism = (parallelism == PARALLELISM_DEFAULT) ? other.parallelism :_			((other.parallelism == PARALLELISM_DEFAULT) ? parallelism : Math.min(parallelism, other.parallelism))__	};merge,the,other,configuration,into,this,algorithm,s,after,the,call,to,link,can,merge,configuration,with,has,checked,that,the,configurations,can,be,merged,param,other,the,algorithm,from,which,to,merge,configuration,see,can,merge,configuration,with,graph,algorithm,wrapping,base;protected,void,merge,configuration,graph,algorithm,wrapping,base,other,preconditions,check,not,null,other,parallelism,parallelism,other,parallelism,other,parallelism,parallelism,math,min,parallelism,other,parallelism
GraphAlgorithmWrappingBase -> public String getAlgorithmName();1499282568;Algorithms are identified by name rather than by class to allow subclassing.__@return name of the algorithm, which may be shared by multiple classes_implementing the same algorithm and generating the same output;public String getAlgorithmName() {_		return this.getClass().getName()__	};algorithms,are,identified,by,name,rather,than,by,class,to,allow,subclassing,return,name,of,the,algorithm,which,may,be,shared,by,multiple,classes,implementing,the,same,algorithm,and,generating,the,same,output;public,string,get,algorithm,name,return,this,get,class,get,name
GraphAlgorithmWrappingBase -> public String getAlgorithmName();1499777483;Algorithms are identified by name rather than by class to allow subclassing.__@return name of the algorithm, which may be shared by multiple classes_implementing the same algorithm and generating the same output;public String getAlgorithmName() {_		return this.getClass().getName()__	};algorithms,are,identified,by,name,rather,than,by,class,to,allow,subclassing,return,name,of,the,algorithm,which,may,be,shared,by,multiple,classes,implementing,the,same,algorithm,and,generating,the,same,output;public,string,get,algorithm,name,return,this,get,class,get,name
GraphAlgorithmWrappingBase -> public String getAlgorithmName();1514902843;Algorithms are identified by name rather than by class to allow subclassing.__@return name of the algorithm, which may be shared by multiple classes_implementing the same algorithm and generating the same output;public String getAlgorithmName() {_		return this.getClass().getName()__	};algorithms,are,identified,by,name,rather,than,by,class,to,allow,subclassing,return,name,of,the,algorithm,which,may,be,shared,by,multiple,classes,implementing,the,same,algorithm,and,generating,the,same,output;public,string,get,algorithm,name,return,this,get,class,get,name
GraphAlgorithmWrappingBase -> protected boolean canMergeConfigurationWith(GraphAlgorithmWrappingBase other);1499777483;First test whether the algorithm configurations can be merged before the_call to {@link #mergeConfiguration}.__@param other the algorithm with which to compare configuration_@return true if and only if configuration can be merged and the_algorithm's output can be reused__@see #mergeConfiguration(GraphAlgorithmWrappingBase);protected boolean canMergeConfigurationWith(GraphAlgorithmWrappingBase other) {_		Preconditions.checkNotNull(other)___		return this.getClass().equals(other.getClass())__	};first,test,whether,the,algorithm,configurations,can,be,merged,before,the,call,to,link,merge,configuration,param,other,the,algorithm,with,which,to,compare,configuration,return,true,if,and,only,if,configuration,can,be,merged,and,the,algorithm,s,output,can,be,reused,see,merge,configuration,graph,algorithm,wrapping,base;protected,boolean,can,merge,configuration,with,graph,algorithm,wrapping,base,other,preconditions,check,not,null,other,return,this,get,class,equals,other,get,class
GraphAlgorithmWrappingBase -> protected boolean canMergeConfigurationWith(GraphAlgorithmWrappingBase other);1514902843;First test whether the algorithm configurations can be merged before the_call to {@link #mergeConfiguration}.__@param other the algorithm with which to compare configuration_@return true if and only if configuration can be merged and the_algorithm's output can be reused__@see #mergeConfiguration(GraphAlgorithmWrappingBase);protected boolean canMergeConfigurationWith(GraphAlgorithmWrappingBase other) {_		Preconditions.checkNotNull(other)___		return this.getClass().equals(other.getClass())__	};first,test,whether,the,algorithm,configurations,can,be,merged,before,the,call,to,link,merge,configuration,param,other,the,algorithm,with,which,to,compare,configuration,return,true,if,and,only,if,configuration,can,be,merged,and,the,algorithm,s,output,can,be,reused,see,merge,configuration,graph,algorithm,wrapping,base;protected,boolean,can,merge,configuration,with,graph,algorithm,wrapping,base,other,preconditions,check,not,null,other,return,this,get,class,equals,other,get,class
GraphAlgorithmWrappingBase -> public GraphAlgorithmWrappingBase<K, VV, EV, R> setParallelism(int parallelism);1499777483;Set the parallelism for this algorithm's operators. This parameter is_necessary because processing a small amount of data with high operator_parallelism is slow and wasteful with memory and buffers.__<p>Operator parallelism should be set to this given value unless_processing asymptotically more data, in which case the default job_parallelism should be inherited.__@param parallelism operator parallelism_@return this;public GraphAlgorithmWrappingBase<K, VV, EV, R> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.parallelism = parallelism___		return this__	};set,the,parallelism,for,this,algorithm,s,operators,this,parameter,is,necessary,because,processing,a,small,amount,of,data,with,high,operator,parallelism,is,slow,and,wasteful,with,memory,and,buffers,p,operator,parallelism,should,be,set,to,this,given,value,unless,processing,asymptotically,more,data,in,which,case,the,default,job,parallelism,should,be,inherited,param,parallelism,operator,parallelism,return,this;public,graph,algorithm,wrapping,base,k,vv,ev,r,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,the,parallelism,must,be,greater,than,zero,this,parallelism,parallelism,return,this
GraphAlgorithmWrappingBase -> public GraphAlgorithmWrappingBase<K, VV, EV, R> setParallelism(int parallelism);1514902843;Set the parallelism for this algorithm's operators. This parameter is_necessary because processing a small amount of data with high operator_parallelism is slow and wasteful with memory and buffers.__<p>Operator parallelism should be set to this given value unless_processing asymptotically more data, in which case the default job_parallelism should be inherited.__@param parallelism operator parallelism_@return this;public GraphAlgorithmWrappingBase<K, VV, EV, R> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT,_				"The parallelism must be at least one, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).")___		this.parallelism = parallelism___		return this__	};set,the,parallelism,for,this,algorithm,s,operators,this,parameter,is,necessary,because,processing,a,small,amount,of,data,with,high,operator,parallelism,is,slow,and,wasteful,with,memory,and,buffers,p,operator,parallelism,should,be,set,to,this,given,value,unless,processing,asymptotically,more,data,in,which,case,the,default,job,parallelism,should,be,inherited,param,parallelism,operator,parallelism,return,this;public,graph,algorithm,wrapping,base,k,vv,ev,r,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,the,parallelism,must,be,at,least,one,or,execution,config,use,system,default,this,parallelism,parallelism,return,this
