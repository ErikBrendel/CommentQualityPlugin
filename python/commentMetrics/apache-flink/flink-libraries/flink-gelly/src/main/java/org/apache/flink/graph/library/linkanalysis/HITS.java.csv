commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;9;;@Override protected void mergeConfiguration(GraphAlgorithmWrappingBase other) {     super.mergeConfiguration(other).     HITS rhs = (HITS) other.     maxIterations = Math.max(maxIterations, rhs.maxIterations).     convergenceThreshold = Math.min(convergenceThreshold, rhs.convergenceThreshold). }
false;public;1;103;;@Override public DataSet<Result<K>> runInternal(Graph<K, VV, EV> input) throws Exception {     DataSet<Tuple2<K, K>> edges = input.getEdges().map(new ExtractEdgeIDs<>()).setParallelism(parallelism).name("Extract edge IDs").     // ID, hub, authority     DataSet<Tuple3<K, DoubleValue, DoubleValue>> initialScores = edges.map(new InitializeScores<>()).setParallelism(parallelism).name("Initial scores").groupBy(0).reduce(new SumScores<>()).setCombineHint(CombineHint.HASH).setParallelism(parallelism).name("Sum").     IterativeDataSet<Tuple3<K, DoubleValue, DoubleValue>> iterative = initialScores.iterate(maxIterations).setParallelism(parallelism).     // ID, hubbiness     DataSet<Tuple2<K, DoubleValue>> hubbiness = iterative.coGroup(edges).where(0).equalTo(1).with(new Hubbiness<>()).setParallelism(parallelism).name("Hub").groupBy(0).reduce(new SumScore<>()).setCombineHint(CombineHint.HASH).setParallelism(parallelism).name("Sum").     // sum-of-hubbiness-squared     DataSet<DoubleValue> hubbinessSumSquared = hubbiness.map(new Square<>()).setParallelism(parallelism).name("Square").reduce(new Sum()).setParallelism(parallelism).name("Sum").     // ID, new authority     DataSet<Tuple2<K, DoubleValue>> authority = hubbiness.coGroup(edges).where(0).equalTo(0).with(new Authority<>()).setParallelism(parallelism).name("Authority").groupBy(0).reduce(new SumScore<>()).setCombineHint(CombineHint.HASH).setParallelism(parallelism).name("Sum").     // sum-of-authority-squared     DataSet<DoubleValue> authoritySumSquared = authority.map(new Square<>()).setParallelism(parallelism).name("Square").reduce(new Sum()).setParallelism(parallelism).name("Sum").     // ID, normalized hubbiness, normalized authority     DataSet<Tuple3<K, DoubleValue, DoubleValue>> scores = hubbiness.fullOuterJoin(authority, JoinHint.REPARTITION_SORT_MERGE).where(0).equalTo(0).with(new JoinAndNormalizeHubAndAuthority<>()).withBroadcastSet(hubbinessSumSquared, HUBBINESS_SUM_SQUARED).withBroadcastSet(authoritySumSquared, AUTHORITY_SUM_SQUARED).setParallelism(parallelism).name("Join scores").     DataSet<Tuple3<K, DoubleValue, DoubleValue>> passThrough.     if (convergenceThreshold < Double.MAX_VALUE) {         passThrough = iterative.fullOuterJoin(scores, JoinHint.REPARTITION_SORT_MERGE).where(0).equalTo(0).with(new ChangeInScores<>()).setParallelism(parallelism).name("Change in scores").         iterative.registerAggregationConvergenceCriterion(CHANGE_IN_SCORES, new DoubleSumAggregator(), new ScoreConvergence(convergenceThreshold)).     } else {         passThrough = scores.     }     return iterative.closeWith(passThrough).map(new TranslateResult<>()).setParallelism(parallelism).name("Map result"). }
false;public;1;7;;@Override public Tuple2<T, T> map(Edge<T, ET> value) throws Exception {     output.f0 = value.f0.     output.f1 = value.f1.     return output. }
false;public;1;5;;@Override public Tuple3<T, DoubleValue, DoubleValue> map(Tuple2<T, T> value) throws Exception {     output.f0 = value.f1.     return output. }
false;public;2;7;;@Override public Tuple3<T, DoubleValue, DoubleValue> reduce(Tuple3<T, DoubleValue, DoubleValue> left, Tuple3<T, DoubleValue, DoubleValue> right) throws Exception {     left.f1.setValue(left.f1.getValue() + right.f1.getValue()).     left.f2.setValue(left.f2.getValue() + right.f2.getValue()).     return left. }
false;public;3;10;;@Override public void coGroup(Iterable<Tuple3<T, DoubleValue, DoubleValue>> vertex, Iterable<Tuple2<T, T>> edges, Collector<Tuple2<T, DoubleValue>> out) throws Exception {     output.f1 = vertex.iterator().next().f2.     for (Tuple2<T, T> edge : edges) {         output.f0 = edge.f0.         out.collect(output).     } }
false;public;3;10;;@Override public void coGroup(Iterable<Tuple2<T, DoubleValue>> vertex, Iterable<Tuple2<T, T>> edges, Collector<Tuple2<T, DoubleValue>> out) throws Exception {     output.f1 = vertex.iterator().next().f1.     for (Tuple2<T, T> edge : edges) {         output.f0 = edge.f1.         out.collect(output).     } }
false;public;1;8;;@Override public DoubleValue map(Tuple2<T, DoubleValue> value) throws Exception {     double val = value.f1.getValue().     output.setValue(val * val).     return output. }
false;public;2;6;;@Override public DoubleValue reduce(DoubleValue first, DoubleValue second) throws Exception {     first.setValue(first.getValue() + second.getValue()).     return first. }
false;public;1;12;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     Collection<DoubleValue> hubbinessSumSquared = getRuntimeContext().getBroadcastVariable(HUBBINESS_SUM_SQUARED).     Iterator<DoubleValue> hubbinessSumSquaredIterator = hubbinessSumSquared.iterator().     this.hubbinessRootSumSquared = hubbinessSumSquaredIterator.hasNext() ? Math.sqrt(hubbinessSumSquaredIterator.next().getValue()) : Double.NaN.     Collection<DoubleValue> authoritySumSquared = getRuntimeContext().getBroadcastVariable(AUTHORITY_SUM_SQUARED).     Iterator<DoubleValue> authoritySumSquaredIterator = authoritySumSquared.iterator().     authorityRootSumSquared = authoritySumSquaredIterator.hasNext() ? Math.sqrt(authoritySumSquaredIterator.next().getValue()) : Double.NaN. }
false;public;2;8;;@Override public Tuple3<T, DoubleValue, DoubleValue> join(Tuple2<T, DoubleValue> hubbiness, Tuple2<T, DoubleValue> authority) throws Exception {     output.f0 = (authority == null) ? hubbiness.f0 : authority.f0.     output.f1.setValue(hubbiness == null ? 0.0 : hubbiness.f1.getValue() / hubbinessRootSumSquared).     output.f2.setValue(authority == null ? 0.0 : authority.f1.getValue() / authorityRootSumSquared).     return output. }
false;public;1;8;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     isInitialSuperstep = (getIterationRuntimeContext().getSuperstepNumber() == 1).     changeInScores = (isInitialSuperstep) ? -1.0 : 0.0. }
false;public;0;8;;@Override public void close() throws Exception {     super.close().     DoubleSumAggregator agg = getIterationRuntimeContext().getIterationAggregator(CHANGE_IN_SCORES).     agg.aggregate(changeInScores). }
false;public;2;10;;@Override public Tuple3<T, DoubleValue, DoubleValue> join(Tuple3<T, DoubleValue, DoubleValue> first, Tuple3<T, DoubleValue, DoubleValue> second) throws Exception {     if (!isInitialSuperstep) {         changeInScores += Math.abs(second.f1.getValue() - first.f1.getValue()).         changeInScores += Math.abs(second.f2.getValue() - first.f2.getValue()).     }     return second. }
false;public;2;5;;@Override public boolean isConverged(int iteration, DoubleValue value) {     double val = value.getValue().     return (0 <= val && val <= convergenceThreshold). }
false;public;1;7;;@Override public Result<T> map(Tuple3<T, DoubleValue, DoubleValue> value) throws Exception {     output.setVertexId0(value.f0).     output.setHubScore(value.f1).     output.setAuthorityScore(value.f2).     return output. }
true;public;0;3;/**  * Get the hub score. Good hubs link to good authorities.  *  * @return the hub score  */ ;/**  * Get the hub score. Good hubs link to good authorities.  *  * @return the hub score  */ public DoubleValue getHubScore() {     return hubScore. }
true;public;1;3;/**  * Set the hub score. Good hubs link to good authorities.  *  * @param hubScore the hub score  */ ;/**  * Set the hub score. Good hubs link to good authorities.  *  * @param hubScore the hub score  */ public void setHubScore(DoubleValue hubScore) {     this.hubScore = hubScore. }
true;public;0;3;/**  * Get the authority score. Good authorities link to good hubs.  *  * @return the authority score  */ ;/**  * Get the authority score. Good authorities link to good hubs.  *  * @return the authority score  */ public DoubleValue getAuthorityScore() {     return authorityScore. }
true;public;1;3;/**  * Set the authority score. Good authorities link to good hubs.  *  * @param authorityScore the authority score  */ ;/**  * Set the authority score. Good authorities link to good hubs.  *  * @param authorityScore the authority score  */ public void setAuthorityScore(DoubleValue authorityScore) {     this.authorityScore = authorityScore. }
false;public;0;7;;@Override public String toString() {     return "(" + getVertexId0() + "," + hubScore + "," + authorityScore + ")". }
false;public;0;6;;@Override public String toPrintableString() {     return "Vertex ID: " + getVertexId0() + ", hub score: " + hubScore + ", authority score: " + authorityScore. }
false;public;0;12;;@Override public int hashCode() {     if (hasher == null) {         hasher = new MurmurHash(HASH_SEED).     }     return hasher.reset().hash(getVertexId0().hashCode()).hash(hubScore.getValue()).hash(authorityScore.getValue()).hash(). }
