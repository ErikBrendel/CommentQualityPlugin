commented;modifiers;parameterAmount;loc;comment;code
true;public;0;14;/**  * Get the boolean state.  *  * @return boolean state  */ ;/**  * Get the boolean state.  *  * @return boolean state  */ public boolean get() {     switch(state) {         case UNSET:             return valueIfUnset.         case FALSE:             return false.         case TRUE:             return true.         case CONFLICTING:             return valueIfConflicting.         default:             throw new RuntimeException("Unknown state").     } }
true;public;1;3;/**  * Set the boolean state.  *  * @param value boolean state  */ ;/**  * Set the boolean state.  *  * @param value boolean state  */ public void set(boolean value) {     this.state = (value ? State.TRUE : State.FALSE). }
true;public;0;3;/**  * Reset to the unset state.  */ ;/**  * Reset to the unset state.  */ public void unset() {     this.state = State.UNSET. }
true;protected;0;3;/**  * Get the actual state.  *  * @return actual state  */ ;/**  * Get the actual state.  *  * @return actual state  */ protected State getState() {     return state. }
true;public;1;6;/**  * The conflicting states are true with false and false with true.  *  * @param other object to test with  * @return whether the objects conflict  */ ;/**  * The conflicting states are true with false and false with true.  *  * @param other object to test with  * @return whether the objects conflict  */ public boolean conflictsWith(OptionalBoolean other) {     return state == State.CONFLICTING || other.state == State.CONFLICTING || (state == State.TRUE && other.state == State.FALSE) || (state == State.FALSE && other.state == State.TRUE). }
true;public;1;11;/**  * State transitions.  * - if the states are the same then no change  * - if either state is unset then change to the other state  * - if the states are conflicting then set to the conflicting state  *  * @param other object from which to merge state  */ ;/**  * State transitions.  * - if the states are the same then no change  * - if either state is unset then change to the other state  * - if the states are conflicting then set to the conflicting state  *  * @param other object from which to merge state  */ public void mergeWith(OptionalBoolean other) {     if (state == other.state) {     // no change in state     } else if (state == State.UNSET) {         state = other.state.     } else if (other.state == State.UNSET) {     // no change in state     } else {         state = State.CONFLICTING.     } }
