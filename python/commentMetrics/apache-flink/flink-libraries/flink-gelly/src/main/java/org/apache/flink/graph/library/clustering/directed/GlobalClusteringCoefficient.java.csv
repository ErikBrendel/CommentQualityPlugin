commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;/* 	 * Implementation notes: 	 * 	 * The requirement that "K extends CopyableValue<K>" can be removed when 	 *   removed from TriangleListing. 	 */ @Override public GlobalClusteringCoefficient<K, VV, EV> run(Graph<K, VV, EV> input) throws Exception {     super.run(input).     triangleCount = new Count<>().     DataSet<TriangleListing.Result<K>> triangles = input.run(new TriangleListing<K, VV, EV>().setSortTriangleVertices(false).setParallelism(parallelism)).     triangleCount.run(triangles).     vertexMetrics = new VertexMetrics<K, VV, EV>().setParallelism(parallelism).     input.run(vertexMetrics).     return this. }
false;public;0;8;;@Override public Result getResult() {     // each triangle must be counted from each of the three vertices     // as each triplet is counted in this manner     long numberOfTriangles = 3 * triangleCount.getResult().     return new Result(vertexMetrics.getResult().getNumberOfTriplets(), numberOfTriangles). }
true;public;0;3;/**  * Get the number of triplets.  *  * @return number of triplets  */ ;/**  * Get the number of triplets.  *  * @return number of triplets  */ public long getNumberOfTriplets() {     return tripletCount. }
true;public;0;3;/**  * Get the number of triangles.  *  * @return number of triangles  */ ;/**  * Get the number of triangles.  *  * @return number of triangles  */ public long getNumberOfTriangles() {     return triangleCount. }
true;public;0;3;/**  * Get the global clustering coefficient score. This is computed as the  * number of closed triplets (triangles) divided by the total number of  * triplets.  *  * <p>A score of {@code Double.NaN} is returned for a graph of isolated vertices  * for which both the triangle count and number of neighbors are zero.  *  * @return global clustering coefficient score  */ ;/**  * Get the global clustering coefficient score. This is computed as the  * number of closed triplets (triangles) divided by the total number of  * triplets.  *  * <p>A score of {@code Double.NaN} is returned for a graph of isolated vertices  * for which both the triangle count and number of neighbors are zero.  *  * @return global clustering coefficient score  */ public double getGlobalClusteringCoefficientScore() {     return (tripletCount == 0) ? Double.NaN : triangleCount / (double) tripletCount. }
false;public;0;4;;@Override public String toString() {     return toPrintableString(). }
false;public;0;6;;@Override public String toPrintableString() {     return "triplet count: " + tripletCount + ", triangle count: " + triangleCount + ", global clustering coefficient: " + getGlobalClusteringCoefficientScore(). }
false;public;0;7;;@Override public int hashCode() {     return new HashCodeBuilder().append(tripletCount).append(triangleCount).hashCode(). }
false;public;1;21;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (obj.getClass() != getClass()) {         return false.     }     Result rhs = (Result) obj.     return new EqualsBuilder().append(tripletCount, rhs.tripletCount).append(triangleCount, rhs.triangleCount).isEquals(). }
