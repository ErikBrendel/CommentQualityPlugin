commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the number of elements stored in the array.  *  * @return the number of elements stored in the array  */ ;/**  * Returns the number of elements stored in the array.  *  * @return the number of elements stored in the array  */ int size().
true;;0;1;/**  * An bounded array fills when the allocated capacity has been fully used.  * An unbounded array will only fill when the underlying data structure has  * reached capacity, for example the ~2^31 element limit for Java arrays.  *  * @return whether the array is full  */ ;/**  * An bounded array fills when the allocated capacity has been fully used.  * An unbounded array will only fill when the underlying data structure has  * reached capacity, for example the ~2^31 element limit for Java arrays.  *  * @return whether the array is full  */ boolean isFull().
true;;1;1;/**  * Appends the value to this array if and only if the array capacity would  * not be exceeded.  *  * @param value the value to add to this array  * @return whether the value was added to the array  */ ;/**  * Appends the value to this array if and only if the array capacity would  * not be exceeded.  *  * @param value the value to add to this array  * @return whether the value was added to the array  */ boolean add(T value).
true;;1;1;/**  * Appends all of the values in the specified array to the end of this  * array. If the combined array would exceed capacity then no values are  * appended.  *  * @param source array containing values to be added to this array  * @return whether the values were added to the array  */ ;/**  * Appends all of the values in the specified array to the end of this  * array. If the combined array would exceed capacity then no values are  * appended.  *  * @param source array containing values to be added to this array  * @return whether the values were added to the array  */ boolean addAll(ValueArray<T> source).
true;;0;1;/**  * Saves the array index, which can be restored by calling {@code reset()}.  *  * <p>This is not serialized and is not part of the contract for  * {@link #equals(Object)}.  */ ;/**  * Saves the array index, which can be restored by calling {@code reset()}.  *  * <p>This is not serialized and is not part of the contract for  * {@link #equals(Object)}.  */ void mark().
true;;0;1;/**  * Restores the array index to when {@code mark()} was last called.  */ ;/**  * Restores the array index to when {@code mark()} was last called.  */ void reset().
true;;0;1;/**  * Resets the array to the empty state. The implementation is *not*  * expected to release the underlying data structure. This allows the array  * to be reused with minimal impact on the garbage collector.  *  * <p>This may reset the {@link #mark()} in order to allow arrays be shrunk.  */ ;/**  * Resets the array to the empty state. The implementation is *not*  * expected to release the underlying data structure. This allows the array  * to be reused with minimal impact on the garbage collector.  *  * <p>This may reset the {@link #mark()} in order to allow arrays be shrunk.  */ void clear().
