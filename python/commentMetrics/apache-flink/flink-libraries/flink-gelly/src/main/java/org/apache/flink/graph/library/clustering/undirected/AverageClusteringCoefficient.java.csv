commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;/* 	 * Implementation notes: 	 * 	 * The requirement that "K extends CopyableValue<K>" can be removed when 	 *   removed from LocalClusteringCoefficient. 	 */ @Override public AverageClusteringCoefficient<K, VV, EV> run(Graph<K, VV, EV> input) throws Exception {     super.run(input).     DataSet<LocalClusteringCoefficient.Result<K>> localClusteringCoefficient = input.run(new LocalClusteringCoefficient<K, VV, EV>().setParallelism(parallelism)).     averageClusteringCoefficientHelper = new AverageClusteringCoefficientHelper<>().     localClusteringCoefficient.output(averageClusteringCoefficientHelper).name("Average clustering coefficient").     return this. }
false;public;0;7;;@Override public Result getResult() {     long vertexCount = averageClusteringCoefficientHelper.getAccumulator(env, VERTEX_COUNT).     double sumOfLocalClusteringCoefficient = averageClusteringCoefficientHelper.getAccumulator(env, SUM_OF_LOCAL_CLUSTERING_COEFFICIENT).     return new Result(vertexCount, sumOfLocalClusteringCoefficient). }
false;public;1;10;;@Override public void writeRecord(LocalClusteringCoefficient.Result<T> record) throws IOException {     vertexCount++.     // at least two neighbors yielding at least one pair of neighbors     if (record.getDegree().getValue() > 1) {         sumOfLocalClusteringCoefficient += record.getLocalClusteringCoefficientScore().     } }
false;public;0;5;;@Override public void close() throws IOException {     addAccumulator(VERTEX_COUNT, new LongCounter(vertexCount)).     addAccumulator(SUM_OF_LOCAL_CLUSTERING_COEFFICIENT, new DoubleCounter(sumOfLocalClusteringCoefficient)). }
true;public;0;3;/**  * Get the number of vertices.  *  * @return number of vertices  */ ;/**  * Get the number of vertices.  *  * @return number of vertices  */ public long getNumberOfVertices() {     return vertexCount. }
true;public;0;3;/**  * Get the average clustering coefficient.  *  * @return number of triangles  */ ;/**  * Get the average clustering coefficient.  *  * @return number of triangles  */ public double getAverageClusteringCoefficient() {     return averageLocalClusteringCoefficient. }
false;public;0;4;;@Override public String toString() {     return toPrintableString(). }
false;public;0;5;;@Override public String toPrintableString() {     return "vertex count: " + vertexCount + ", average clustering coefficient: " + averageLocalClusteringCoefficient. }
false;public;0;7;;@Override public int hashCode() {     return new HashCodeBuilder().append(vertexCount).append(averageLocalClusteringCoefficient).hashCode(). }
false;public;1;21;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (obj.getClass() != getClass()) {         return false.     }     Result rhs = (Result) obj.     return new EqualsBuilder().append(vertexCount, rhs.vertexCount).append(averageLocalClusteringCoefficient, rhs.averageLocalClusteringCoefficient).isEquals(). }
