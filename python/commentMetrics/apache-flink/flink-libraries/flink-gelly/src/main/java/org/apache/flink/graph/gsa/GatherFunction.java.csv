commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Retrieves the number of vertices in the graph.  * @return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}  * option has been set. -1 otherwise.  */ ;/**  * Retrieves the number of vertices in the graph.  * @return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}  * option has been set. -1 otherwise.  */ public long getNumberOfVertices() {     return numberOfVertices. }
false;;1;3;;void setNumberOfVertices(long numberOfVertices) {     this.numberOfVertices = numberOfVertices. }
true;public,abstract;1;1;/**  * This method is invoked once per superstep, for each {@link Neighbor} of each Vertex  * in the beginning of each superstep in a {@link GatherSumApplyIteration}.  * It needs to produce a partial value, which will be combined with other partial value  * in the next phase of the iteration.  *  * @param neighbor the input Neighbor. It provides access to the source Vertex and the Edge objects.  * @return a partial result to be combined in the Sum phase.  */ ;// --------------------------------------------------------------------------------------------- /**  * This method is invoked once per superstep, for each {@link Neighbor} of each Vertex  * in the beginning of each superstep in a {@link GatherSumApplyIteration}.  * It needs to produce a partial value, which will be combined with other partial value  * in the next phase of the iteration.  *  * @param neighbor the input Neighbor. It provides access to the source Vertex and the Edge objects.  * @return a partial result to be combined in the Sum phase.  */ public abstract M gather(Neighbor<VV, EV> neighbor).
true;public;0;1;/**  * This method is executed once per superstep before the vertex update function is invoked for each vertex.  */ ;/**  * This method is executed once per superstep before the vertex update function is invoked for each vertex.  */ public void preSuperstep() { }
true;public;0;1;/**  * This method is executed once per superstep after the vertex update function has been invoked for each vertex.  */ ;/**  * This method is executed once per superstep after the vertex update function has been invoked for each vertex.  */ public void postSuperstep() { }
true;public;0;3;/**  * Gets the number of the superstep, starting at <tt>1</tt>.  *  * @return The number of the current superstep.  */ ;/**  * Gets the number of the superstep, starting at <tt>1</tt>.  *  * @return The number of the current superstep.  */ public int getSuperstepNumber() {     return this.runtimeContext.getSuperstepNumber(). }
true;public;1;3;/**  * Gets the iteration aggregator registered under the given name. The iteration aggregator combines  * all aggregates globally once per superstep and makes them available in the next superstep.  *  * @param name The name of the aggregator.  * @return The aggregator registered under this name, or null, if no aggregator was registered.  */ ;/**  * Gets the iteration aggregator registered under the given name. The iteration aggregator combines  * all aggregates globally once per superstep and makes them available in the next superstep.  *  * @param name The name of the aggregator.  * @return The aggregator registered under this name, or null, if no aggregator was registered.  */ public <T extends Aggregator<?>> T getIterationAggregator(String name) {     return this.runtimeContext.getIterationAggregator(name). }
true;public;1;3;/**  * Get the aggregated value that an aggregator computed in the previous iteration.  *  * @param name The name of the aggregator.  * @return The aggregated value of the previous iteration.  */ ;/**  * Get the aggregated value that an aggregator computed in the previous iteration.  *  * @param name The name of the aggregator.  * @return The aggregated value of the previous iteration.  */ public <T extends Value> T getPreviousIterationAggregate(String name) {     return this.runtimeContext.getPreviousIterationAggregate(name). }
true;public;1;3;/**  * Gets the broadcast data set registered under the given name. Broadcast data sets  * are available on all parallel instances of a function.  *  * @param name The name under which the broadcast set is registered.  * @return The broadcast data set.  */ ;/**  * Gets the broadcast data set registered under the given name. Broadcast data sets  * are available on all parallel instances of a function.  *  * @param name The name under which the broadcast set is registered.  * @return The broadcast data set.  */ public <T> Collection<T> getBroadcastSet(String name) {     return this.runtimeContext.getBroadcastVariable(name). }
false;public;1;3;;public void init(IterationRuntimeContext iterationRuntimeContext) {     this.runtimeContext = iterationRuntimeContext. }
