# id;timestamp;commentText;codeText;commentWords;codeWords
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1444404795;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1452672575;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1461749067;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1464873079;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1470042815;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1475684776;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1489157282;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1490367792;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1495819075;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public void configure(GSAConfiguration parameters);1502111816;Configures this gather-sum-apply iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(GSAConfiguration parameters) {_		this.configuration = parameters__	};configures,this,gather,sum,apply,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,gsaconfiguration,parameters,this,configuration,parameters
GatherSumApplyIteration -> public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1444404795;Creates a new gather-sum-apply iteration operator for graphs__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<K, VV, EV, M>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,final,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,k,vv,ev,m,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1452672575;Creates a new gather-sum-apply iteration operator for graphs__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<K, VV, EV, M>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,final,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,k,vv,ev,m,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1461749067;Creates a new gather-sum-apply iteration operator for graphs__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<K, VV, EV, M>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,final,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,k,vv,ev,m,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1464873079;Creates a new gather-sum-apply iteration operator for graphs__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<K, VV, EV, M>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,final,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,k,vv,ev,m,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1470042815;Creates a new gather-sum-apply iteration operator for graphs__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static final <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<K, VV, EV, M>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,final,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,k,vv,ev,m,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1444404795;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1452672575;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1461749067;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1464873079;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1470042815;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1475684776;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1489157282;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1490367792;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1495819075;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> dataSet);1502111816;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param dataSet The input data set, which in the case of this operator represents the set of_vertices with their initial state.;@Override_	public void setInput(DataSet<Vertex<K, VV>> dataSet) {_		this.vertexDataSet = dataSet__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,data,set,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state;override,public,void,set,input,data,set,vertex,k,vv,data,set,this,vertex,data,set,data,set
GatherSumApplyIteration -> public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1475684776;Creates a new gather-sum-apply iteration operator for graphs__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1489157282;Creates a new gather-sum-apply iteration operator for graphs__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1490367792;Creates a new gather-sum-apply iteration operator for graphs__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1495819075;Creates a new gather-sum-apply iteration operator for graphs.__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M> 		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather, 		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations);1502111816;Creates a new gather-sum-apply iteration operator for graphs.__@param edges The edge DataSet__@param gather The gather function of the GSA iteration_@param sum The sum function of the GSA iteration_@param apply The apply function of the GSA iteration__@param maximumNumberOfIterations The maximum number of iterations executed__@param <K> The type of the vertex key in the graph_@param <VV> The type of the vertex value in the graph_@param <EV> The type of the edge value in the graph_@param <M> The intermediate type used by the gather, sum and apply functions__@return An in stance of the gather-sum-apply graph computation operator.;public static <K, VV, EV, M> GatherSumApplyIteration<K, VV, EV, M>_		withEdges(DataSet<Edge<K, EV>> edges, GatherFunction<VV, EV, M> gather,_		SumFunction<VV, EV, M> sum, ApplyFunction<K, VV, M> apply, int maximumNumberOfIterations) {__		return new GatherSumApplyIteration<>(gather, sum, apply, edges, maximumNumberOfIterations)__	};creates,a,new,gather,sum,apply,iteration,operator,for,graphs,param,edges,the,edge,data,set,param,gather,the,gather,function,of,the,gsa,iteration,param,sum,the,sum,function,of,the,gsa,iteration,param,apply,the,apply,function,of,the,gsa,iteration,param,maximum,number,of,iterations,the,maximum,number,of,iterations,executed,param,k,the,type,of,the,vertex,key,in,the,graph,param,vv,the,type,of,the,vertex,value,in,the,graph,param,ev,the,type,of,the,edge,value,in,the,graph,param,m,the,intermediate,type,used,by,the,gather,sum,and,apply,functions,return,an,in,stance,of,the,gather,sum,apply,graph,computation,operator;public,static,k,vv,ev,m,gather,sum,apply,iteration,k,vv,ev,m,with,edges,data,set,edge,k,ev,edges,gather,function,vv,ev,m,gather,sum,function,vv,ev,m,sum,apply,function,k,vv,m,apply,int,maximum,number,of,iterations,return,new,gather,sum,apply,iteration,gather,sum,apply,edges,maximum,number,of,iterations
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1444404795;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1452672575;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1461749067;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1464873079;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1470042815;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1475684776;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1489157282;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1490367792;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1495819075;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> public GSAConfiguration getIterationConfiguration();1502111816;@return the configuration parameters of this gather-sum-apply iteration;public GSAConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,gather,sum,apply,iteration;public,gsaconfiguration,get,iteration,configuration,return,this,configuration
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1444404795;Computes the results of the gather-sum-apply iteration__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(GatherFunction.class, gather.getClass(), 2, null, null)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<Tuple2<K, M>>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		Graph<K, VV, EV> graph =_				Graph.fromDataSet(vertexDataSet, edgeDataSet, vertexDataSet.getExecutionEnvironment())___		_		_		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				long numberOfVertices = graph.numberOfVertices()__				gather.setNumberOfVertices(numberOfVertices)__				sum.setNumberOfVertices(numberOfVertices)__				apply.setNumberOfVertices(numberOfVertices)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<K, VV, EV, M>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<K, VV, EV, M>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<K, VV, EV, M>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if(this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,function,class,gather,get,class,2,null,null,type,information,tuple2,k,m,inner,type,new,tuple,type,info,tuple2,k,m,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,graph,k,vv,ev,graph,graph,from,data,set,vertex,data,set,edge,data,set,vertex,data,set,get,execution,environment,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,long,number,of,vertices,graph,number,of,vertices,gather,set,number,of,vertices,number,of,vertices,sum,set,number,of,vertices,number,of,vertices,apply,set,number,of,vertices,number,of,vertices,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,k,vv,ev,m,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,k,vv,ev,m,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,k,vv,ev,m,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1452672575;Computes the results of the gather-sum-apply iteration__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<Tuple2<K, M>>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		Graph<K, VV, EV> graph =_				Graph.fromDataSet(vertexDataSet, edgeDataSet, vertexDataSet.getExecutionEnvironment())___		_		_		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				long numberOfVertices = graph.numberOfVertices()__				gather.setNumberOfVertices(numberOfVertices)__				sum.setNumberOfVertices(numberOfVertices)__				apply.setNumberOfVertices(numberOfVertices)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<K, VV, EV, M>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<K, VV, EV, M>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<K, VV, EV, M>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if(this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,tuple2,k,m,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,graph,k,vv,ev,graph,graph,from,data,set,vertex,data,set,edge,data,set,vertex,data,set,get,execution,environment,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,long,number,of,vertices,graph,number,of,vertices,gather,set,number,of,vertices,number,of,vertices,sum,set,number,of,vertices,number,of,vertices,apply,set,number,of,vertices,number,of,vertices,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,k,vv,ev,m,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,k,vv,ev,m,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,k,vv,ev,m,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1461749067;Computes the results of the gather-sum-apply iteration__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<Tuple2<K, M>>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		Graph<K, VV, EV> graph =_				Graph.fromDataSet(vertexDataSet, edgeDataSet, vertexDataSet.getExecutionEnvironment())___		_		_		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				long numberOfVertices = graph.numberOfVertices()__				gather.setNumberOfVertices(numberOfVertices)__				sum.setNumberOfVertices(numberOfVertices)__				apply.setNumberOfVertices(numberOfVertices)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<K, VV, EV, M>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<K, VV, EV, M>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<K, VV, EV, M>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if(this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,tuple2,k,m,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,graph,k,vv,ev,graph,graph,from,data,set,vertex,data,set,edge,data,set,vertex,data,set,get,execution,environment,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,long,number,of,vertices,graph,number,of,vertices,gather,set,number,of,vertices,number,of,vertices,sum,set,number,of,vertices,number,of,vertices,apply,set,number,of,vertices,number,of,vertices,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,k,vv,ev,m,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,k,vv,ev,m,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,k,vv,ev,m,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1464873079;Computes the results of the gather-sum-apply iteration__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<Tuple2<K, M>>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		Graph<K, VV, EV> graph =_				Graph.fromDataSet(vertexDataSet, edgeDataSet, vertexDataSet.getExecutionEnvironment())___		_		__		DataSet<LongValue> numberOfVertices = null__		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				numberOfVertices = GraphUtils.count(this.vertexDataSet)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<K, VV, EV, M>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<K, VV, EV, M>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<K, VV, EV, M>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if(this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				appliedSet = appliedSet.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,tuple2,k,m,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,graph,k,vv,ev,graph,graph,from,data,set,vertex,data,set,edge,data,set,vertex,data,set,get,execution,environment,data,set,long,value,number,of,vertices,null,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,number,of,vertices,graph,utils,count,this,vertex,data,set,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,k,vv,ev,m,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,k,vv,ev,m,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,k,vv,ev,m,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,gather,map,operator,gather,map,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,applied,set,applied,set,with,broadcast,set,number,of,vertices,number,of,vertices,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1470042815;Computes the results of the gather-sum-apply iteration__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<Tuple2<K, M>>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		Graph<K, VV, EV> graph =_				Graph.fromDataSet(vertexDataSet, edgeDataSet, vertexDataSet.getExecutionEnvironment())___		_		__		DataSet<LongValue> numberOfVertices = null__		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				numberOfVertices = GraphUtils.count(this.vertexDataSet)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<K, VV, EV, M>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<K, VV, EV, M>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<K, VV, EV, M>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if(this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				appliedSet = appliedSet.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,tuple2,k,m,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,graph,k,vv,ev,graph,graph,from,data,set,vertex,data,set,edge,data,set,vertex,data,set,get,execution,environment,data,set,long,value,number,of,vertices,null,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,number,of,vertices,graph,utils,count,this,vertex,data,set,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,k,vv,ev,m,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,k,vv,ev,m,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,k,vv,ev,m,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,gather,map,operator,gather,map,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,applied,set,applied,set,with,broadcast,set,number,of,vertices,number,of,vertices,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1475684776;Computes the results of the gather-sum-apply iteration__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		__		DataSet<LongValue> numberOfVertices = null__		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				numberOfVertices = GraphUtils.count(this.vertexDataSet)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if(this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				appliedSet = appliedSet.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,data,set,long,value,number,of,vertices,null,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,number,of,vertices,graph,utils,count,this,vertex,data,set,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,gather,map,operator,gather,map,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,applied,set,applied,set,with,broadcast,set,number,of,vertices,number,of,vertices,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1489157282;Computes the results of the gather-sum-apply iteration__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		__		DataSet<LongValue> numberOfVertices = null__		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				numberOfVertices = GraphUtils.count(this.vertexDataSet)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if(this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				appliedSet = appliedSet.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,data,set,long,value,number,of,vertices,null,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,number,of,vertices,graph,utils,count,this,vertex,data,set,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,gather,map,operator,gather,map,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,applied,set,applied,set,with,broadcast,set,number,of,vertices,number,of,vertices,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1490367792;Computes the results of the gather-sum-apply iteration__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		__		DataSet<LongValue> numberOfVertices = null__		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				numberOfVertices = GraphUtils.count(this.vertexDataSet)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if(this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				appliedSet = appliedSet.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,data,set,long,value,number,of,vertices,null,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,number,of,vertices,graph,utils,count,this,vertex,data,set,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,gather,map,operator,gather,map,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,applied,set,applied,set,with,broadcast,set,number,of,vertices,number,of,vertices,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1495819075;Computes the results of the gather-sum-apply iteration.__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		__		DataSet<LongValue> numberOfVertices = null__		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				numberOfVertices = GraphUtils.count(this.vertexDataSet)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if (this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<K, VV, EV>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<K, VV, EV>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				appliedSet = appliedSet.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,data,set,long,value,number,of,vertices,null,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,number,of,vertices,graph,utils,count,this,vertex,data,set,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,k,vv,ev,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,k,vv,ev,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,gather,map,operator,gather,map,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,applied,set,applied,set,with,broadcast,set,number,of,vertices,number,of,vertices,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
GatherSumApplyIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1502111816;Computes the results of the gather-sum-apply iteration.__@return The resulting DataSet;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (vertexDataSet == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) vertexDataSet.getType()).getTypeAt(0)__		TypeInformation<M> messageType = TypeExtractor.createTypeInfo(gather, GatherFunction.class, gather.getClass(), 2)__		TypeInformation<Tuple2<K, M>> innerType = new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> outputType = vertexDataSet.getType()___		_		__		DataSet<LongValue> numberOfVertices = null__		if (this.configuration != null && this.configuration.isOptNumVertices()) {_			try {_				numberOfVertices = GraphUtils.count(this.vertexDataSet)__			} catch (Exception e) {_				e.printStackTrace()__			}_		}__		_		GatherUdf<K, VV, EV, M> gatherUdf = new GatherUdf<>(gather, innerType)__		SumUdf<K, VV, EV, M> sumUdf = new SumUdf<>(sum, innerType)__		ApplyUdf<K, VV, EV, M> applyUdf = new ApplyUdf<>(apply, outputType)___		final int[] zeroKeyPos = new int[] {0}__		final DeltaIteration<Vertex<K, VV>, Vertex<K, VV>> iteration =_				vertexDataSet.iterateDelta(vertexDataSet, maximumNumberOfIterations, zeroKeyPos)___		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName(_					"Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Gather-sum-apply iteration (" + gather + " | " + sum + " | " + apply + ")")__		}__		_		if (this.configuration != null) {_			direction = this.configuration.getDirection()__		}_		DataSet<Tuple2<K, Neighbor<VV, EV>>> neighbors__		switch(direction) {_			case OUT:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<>())__				break__			case IN:_				neighbors = iteration_				.getWorkset().join(edgeDataSet)_				.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<>())__				break__			case ALL:_				neighbors =  iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<>()).union(iteration_								.getWorkset().join(edgeDataSet)_								.where(0).equalTo(1).with(new ProjectKeyWithNeighborIN<>()))__				break__			default:_				neighbors = iteration_						.getWorkset().join(edgeDataSet)_						.where(0).equalTo(0).with(new ProjectKeyWithNeighborOUT<>())__				break__		}__		_		MapOperator<Tuple2<K, Neighbor<VV, EV>>, Tuple2<K, M>> gatherMapOperator = neighbors.map(gatherUdf)___		_		gatherMapOperator = gatherMapOperator.name("Gather")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getGatherBcastVars()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				gatherMapOperator = gatherMapOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> gatheredSet = gatherMapOperator___		ReduceOperator<Tuple2<K, M>> sumReduceOperator = gatheredSet.groupBy(0).reduce(sumUdf)___		_		sumReduceOperator = sumReduceOperator.name("Sum")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getSumBcastVars()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				sumReduceOperator = sumReduceOperator.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}_		DataSet<Tuple2<K, M>> summedSet = sumReduceOperator___		JoinOperator<?, ?, Vertex<K, VV>> appliedSet = summedSet_				.join(iteration.getSolutionSet())_				.where(0)_				.equalTo(0)_				.with(applyUdf)___		_		appliedSet = appliedSet.name("Apply")___		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getApplyBcastVars()) {_				appliedSet = appliedSet.withBroadcastSet(e.f1, e.f0)__			}_			if (this.configuration.isOptNumVertices()) {_				appliedSet = appliedSet.withBroadcastSet(numberOfVertices, "number of vertices")__			}_		}__		_		appliedSet.withForwardedFieldsFirst("0").withForwardedFieldsSecond("0")___		return iteration.closeWith(appliedSet, appliedSet)__	};computes,the,results,of,the,gather,sum,apply,iteration,return,the,resulting,data,set;override,public,data,set,vertex,k,vv,create,result,if,vertex,data,set,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,vertex,data,set,get,type,get,type,at,0,type,information,m,message,type,type,extractor,create,type,info,gather,gather,function,class,gather,get,class,2,type,information,tuple2,k,m,inner,type,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,output,type,vertex,data,set,get,type,data,set,long,value,number,of,vertices,null,if,this,configuration,null,this,configuration,is,opt,num,vertices,try,number,of,vertices,graph,utils,count,this,vertex,data,set,catch,exception,e,e,print,stack,trace,gather,udf,k,vv,ev,m,gather,udf,new,gather,udf,gather,inner,type,sum,udf,k,vv,ev,m,sum,udf,new,sum,udf,sum,inner,type,apply,udf,k,vv,ev,m,apply,udf,new,apply,udf,apply,output,type,final,int,zero,key,pos,new,int,0,final,delta,iteration,vertex,k,vv,vertex,k,vv,iteration,vertex,data,set,iterate,delta,vertex,data,set,maximum,number,of,iterations,zero,key,pos,if,this,configuration,null,iteration,name,this,configuration,get,name,gather,sum,apply,iteration,gather,sum,apply,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,gather,sum,apply,iteration,gather,sum,apply,if,this,configuration,null,direction,this,configuration,get,direction,data,set,tuple2,k,neighbor,vv,ev,neighbors,switch,direction,case,out,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,break,case,in,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,break,case,all,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,union,iteration,get,workset,join,edge,data,set,where,0,equal,to,1,with,new,project,key,with,neighbor,in,break,default,neighbors,iteration,get,workset,join,edge,data,set,where,0,equal,to,0,with,new,project,key,with,neighbor,out,break,map,operator,tuple2,k,neighbor,vv,ev,tuple2,k,m,gather,map,operator,neighbors,map,gather,udf,gather,map,operator,gather,map,operator,name,gather,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,gather,bcast,vars,gather,map,operator,gather,map,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,gather,map,operator,gather,map,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,gathered,set,gather,map,operator,reduce,operator,tuple2,k,m,sum,reduce,operator,gathered,set,group,by,0,reduce,sum,udf,sum,reduce,operator,sum,reduce,operator,name,sum,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,sum,bcast,vars,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,sum,reduce,operator,sum,reduce,operator,with,broadcast,set,number,of,vertices,number,of,vertices,data,set,tuple2,k,m,summed,set,sum,reduce,operator,join,operator,vertex,k,vv,applied,set,summed,set,join,iteration,get,solution,set,where,0,equal,to,0,with,apply,udf,applied,set,applied,set,name,apply,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,apply,bcast,vars,applied,set,applied,set,with,broadcast,set,e,f1,e,f0,if,this,configuration,is,opt,num,vertices,applied,set,applied,set,with,broadcast,set,number,of,vertices,number,of,vertices,applied,set,with,forwarded,fields,first,0,with,forwarded,fields,second,0,return,iteration,close,with,applied,set,applied,set
