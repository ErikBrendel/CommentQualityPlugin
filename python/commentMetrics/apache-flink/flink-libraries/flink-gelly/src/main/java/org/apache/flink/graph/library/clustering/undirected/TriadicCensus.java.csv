commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;@Override public TriadicCensus<K, VV, EV> run(Graph<K, VV, EV> input) throws Exception {     super.run(input).     triangleCount = new Count<>().     DataSet<TriangleListing.Result<K>> triangles = input.run(new TriangleListing<K, VV, EV>().setSortTriangleVertices(false).setParallelism(parallelism)).     triangleCount.run(triangles).     vertexMetrics = new VertexMetrics<K, VV, EV>().setParallelism(parallelism).     input.run(vertexMetrics).     return this. }
false;public;0;44;;@Override public Result getResult() {     // vertex metrics     BigInteger bigVertexCount = BigInteger.valueOf(vertexMetrics.getResult().getNumberOfVertices()).     BigInteger bigEdgeCount = BigInteger.valueOf(vertexMetrics.getResult().getNumberOfEdges()).     BigInteger bigTripletCount = BigInteger.valueOf(vertexMetrics.getResult().getNumberOfTriplets()).     // triangle count     BigInteger bigTriangleCount = BigInteger.valueOf(triangleCount.getResult()).     BigInteger one = BigInteger.ONE.     BigInteger two = BigInteger.valueOf(2).     BigInteger three = BigInteger.valueOf(3).     BigInteger six = BigInteger.valueOf(6).     // counts as ordered in TriadicCensus.Result     BigInteger[] counts = new BigInteger[4].     // triads with three connecting edges = closed triplet = triangle     counts[3] = bigTriangleCount.     // triads with two connecting edges = open triplet.     // deduct each triplet having been counted three times per triangle     counts[2] = bigTripletCount.subtract(bigTriangleCount.multiply(three)).     // triads with one connecting edge. each edge pairs with `vertex count - 2` vertices     // then deduct twice for each open triplet and three times for each triangle     counts[1] = bigEdgeCount.multiply(bigVertexCount.subtract(two)).subtract(counts[2].multiply(two)).subtract(counts[3].multiply(three)).     // triads with zero connecting edges.     // (vertex count choose 3) minus earlier counts     counts[0] = bigVertexCount.multiply(bigVertexCount.subtract(one)).multiply(bigVertexCount.subtract(two)).divide(six).subtract(counts[1]).subtract(counts[2]).subtract(counts[3]).     return new Result(counts). }
true;public;0;3;/**  * Get the count of "03" triads which have zero connecting vertices.  *  * @return count of "03" triads  */ ;/**  * Get the count of "03" triads which have zero connecting vertices.  *  * @return count of "03" triads  */ public BigInteger getCount03() {     return counts[0]. }
true;public;0;3;/**  * Get the count of "12" triads which have one edge among the vertices.  *  * @return count of "12" triads  */ ;/**  * Get the count of "12" triads which have one edge among the vertices.  *  * @return count of "12" triads  */ public BigInteger getCount12() {     return counts[1]. }
true;public;0;3;/**  * Get the count of "21" triads which have two edges among the vertices  * and form a open triplet.  *  * @return count of "21" triads  */ ;/**  * Get the count of "21" triads which have two edges among the vertices  * and form a open triplet.  *  * @return count of "21" triads  */ public BigInteger getCount21() {     return counts[2]. }
true;public;0;3;/**  * Get the count of "30" triads which have three edges among the vertices  * and form a closed triplet, a triangle.  *  * @return count of "30" triads  */ ;/**  * Get the count of "30" triads which have three edges among the vertices  * and form a closed triplet, a triangle.  *  * @return count of "30" triads  */ public BigInteger getCount30() {     return counts[3]. }
true;public;0;3;/**  * Get the array of counts.  *  * <p>The order of the counts is from least to most connected:  *   03, 12, 21, 30  *  * @return array of counts  */ ;/**  * Get the array of counts.  *  * <p>The order of the counts is from least to most connected:  *   03, 12, 21, 30  *  * @return array of counts  */ public BigInteger[] getCounts() {     return counts. }
false;public;0;4;;@Override public String toString() {     return toPrintableString(). }
false;public;0;9;;@Override public String toPrintableString() {     NumberFormat nf = NumberFormat.getInstance().     return "03: " + nf.format(getCount03()) + ". 12: " + nf.format(getCount12()) + ". 21: " + nf.format(getCount21()) + ". 30: " + nf.format(getCount30()). }
false;public;0;6;;@Override public int hashCode() {     return new HashCodeBuilder().append(counts).hashCode(). }
false;public;1;20;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (obj.getClass() != getClass()) {         return false.     }     Result rhs = (Result) obj.     return new EqualsBuilder().append(counts, rhs.counts).isEquals(). }
