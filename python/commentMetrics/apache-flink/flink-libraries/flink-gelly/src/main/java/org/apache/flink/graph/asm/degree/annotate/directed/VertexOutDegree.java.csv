commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * By default only the edge set is processed for the computation of degree.  * When this flag is set an additional join is performed against the vertex  * set in order to output vertices with an out-degree of zero.  *  * @param includeZeroDegreeVertices whether to output vertices with an  *                                  out-degree of zero  * @return this  */ ;/**  * By default only the edge set is processed for the computation of degree.  * When this flag is set an additional join is performed against the vertex  * set in order to output vertices with an out-degree of zero.  *  * @param includeZeroDegreeVertices whether to output vertices with an  *                                  out-degree of zero  * @return this  */ public VertexOutDegree<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {     this.includeZeroDegreeVertices.set(includeZeroDegreeVertices).     return this. }
false;protected;1;10;;@Override protected boolean canMergeConfigurationWith(GraphAlgorithmWrappingBase other) {     if (!super.canMergeConfigurationWith(other)) {         return false.     }     VertexOutDegree rhs = (VertexOutDegree) other.     return !includeZeroDegreeVertices.conflictsWith(rhs.includeZeroDegreeVertices). }
false;protected;1;8;;@Override protected void mergeConfiguration(GraphAlgorithmWrappingBase other) {     super.mergeConfiguration(other).     VertexOutDegree rhs = (VertexOutDegree) other.     includeZeroDegreeVertices.mergeWith(rhs.includeZeroDegreeVertices). }
false;public;1;30;;@Override public DataSet<Vertex<K, LongValue>> runInternal(Graph<K, VV, EV> input) throws Exception {     // s     DataSet<Vertex<K, LongValue>> sourceIds = input.getEdges().map(new MapEdgeToSourceId<>()).setParallelism(parallelism).name("Edge to source ID").     // s, d(s)     DataSet<Vertex<K, LongValue>> sourceDegree = sourceIds.groupBy(0).reduce(new DegreeCount<>()).setCombineHint(CombineHint.HASH).setParallelism(parallelism).name("Degree count").     if (includeZeroDegreeVertices.get()) {         sourceDegree = input.getVertices().leftOuterJoin(sourceDegree).where(0).equalTo(0).with(new JoinVertexWithVertexDegree<>()).setParallelism(parallelism).name("Zero degree vertices").     }     return sourceDegree. }
