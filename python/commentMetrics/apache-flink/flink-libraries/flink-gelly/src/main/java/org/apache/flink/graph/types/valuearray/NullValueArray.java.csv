commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;// -------------------------------------------------------------------------------------------- @Override public String toString() {     StringBuilder sb = new StringBuilder("[").     for (int idx = 0. idx < this.position. idx++) {         sb.append("âˆ…").         if (idx < position - 1) {             sb.append(",").         }     }     sb.append("]").     return sb.toString(). }
false;public;0;5;;@Override public Iterator<NullValue> iterator() {     iterator.reset().     return iterator. }
false;public;0;4;;@Override public boolean hasNext() {     return pos < position. }
false;public;0;5;;@Override public NullValue next() {     pos++.     return NullValue.getInstance(). }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException("remove"). }
false;public;0;3;;public void reset() {     pos = 0. }
false;public;1;4;;// -------------------------------------------------------------------------------------------- // IOReadableWritable // -------------------------------------------------------------------------------------------- @Override public void write(DataOutputView out) throws IOException {     out.writeInt(position). }
false;public;1;5;;@Override public void read(DataInputView in) throws IOException {     position = in.readInt().     mark = 0. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // NormalizableKey // -------------------------------------------------------------------------------------------- @Override public int getMaxNormalizedKeyLen() {     return hashValue.getMaxNormalizedKeyLen(). }
false;public;3;5;;@Override public void copyNormalizedKey(MemorySegment target, int offset, int len) {     hashValue.setValue(position).     hashValue.copyNormalizedKey(target, offset, len). }
false;public;1;6;;// -------------------------------------------------------------------------------------------- // Comparable // -------------------------------------------------------------------------------------------- @Override public int compareTo(ValueArray<NullValue> o) {     NullValueArray other = (NullValueArray) o.     return Integer.compare(position, other.position). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // Key // -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return position. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof NullValueArray) {         NullValueArray other = (NullValueArray) obj.         return position == other.position.     }     return false. }
false;public;1;4;;// -------------------------------------------------------------------------------------------- // ResettableValue // -------------------------------------------------------------------------------------------- @Override public void setValue(ValueArray<NullValue> value) {     value.copyTo(this). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // CopyableValue // -------------------------------------------------------------------------------------------- @Override public int getBinaryLength() {     return hashValue.getBinaryLength(). }
false;public;1;6;;@Override public void copyTo(ValueArray<NullValue> target) {     NullValueArray other = (NullValueArray) target.     other.position = position. }
false;public;0;8;;@Override public ValueArray<NullValue> copy() {     ValueArray<NullValue> copy = new NullValueArray().     this.copyTo(copy).     return copy. }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.write(source, getBinaryLength()). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // ValueArray // -------------------------------------------------------------------------------------------- @Override public int size() {     return position. }
false;public;0;4;;@Override public boolean isFull() {     return position == Integer.MAX_VALUE. }
false;public;1;10;;@Override public boolean add(NullValue value) {     if (position == Integer.MAX_VALUE) {         return false.     }     position++.     return true. }
false;public;1;14;;@Override public boolean addAll(ValueArray<NullValue> other) {     NullValueArray source = (NullValueArray) other.     long newPosition = position + (long) source.position.     if (newPosition > Integer.MAX_VALUE) {         return false.     }     position = (int) newPosition.     return true. }
false;public;0;4;;@Override public void clear() {     position = 0. }
false;public;0;4;;@Override public void mark() {     mark = position. }
false;public;0;4;;@Override public void reset() {     position = mark. }
