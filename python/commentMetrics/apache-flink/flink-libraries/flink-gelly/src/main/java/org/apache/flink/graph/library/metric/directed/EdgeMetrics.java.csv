commented;modifiers;parameterAmount;loc;comment;code
false;public;1;34;;/* 	 * Implementation notes: 	 * 	 * <p>Use aggregator to replace SumEdgeStats when aggregators are rewritten to use 	 * a hash-combineable hashable-reduce. 	 * 	 * <p>Use distinct to replace ReduceEdgeStats when the combiner can be disabled 	 * with a sorted-reduce forced. 	 */ @Override public EdgeMetrics<K, VV, EV> run(Graph<K, VV, EV> input) throws Exception {     super.run(input).     // s, t, (d(s), d(t))     DataSet<Edge<K, Tuple3<EV, Degrees, Degrees>>> edgeDegreesPair = input.run(new EdgeDegreesPair<K, VV, EV>().setParallelism(parallelism)).     // s, d(s), count of (u, v) where deg(u) < deg(v) or (deg(u) == deg(v) and u < v)     DataSet<Tuple3<K, Degrees, LongValue>> edgeStats = edgeDegreesPair.flatMap(new EdgeStats<>()).setParallelism(parallelism).name("Edge stats").groupBy(0, 1).reduceGroup(new ReduceEdgeStats<>()).setParallelism(parallelism).name("Reduce edge stats").groupBy(0).reduce(new SumEdgeStats<>()).setCombineHint(CombineHint.HASH).setParallelism(parallelism).name("Sum edge stats").     edgeMetricsHelper = new EdgeMetricsHelper<>().     edgeStats.output(edgeMetricsHelper).setParallelism(parallelism).name("Edge metrics").     return this. }
false;public;0;11;;@Override public Result getResult() {     long triangleTripletCount = edgeMetricsHelper.getAccumulator(env, TRIANGLE_TRIPLET_COUNT).     long rectangleTripletCount = edgeMetricsHelper.getAccumulator(env, RECTANGLE_TRIPLET_COUNT).     long maximumTriangleTriplets = edgeMetricsHelper.getAccumulator(env, MAXIMUM_TRIANGLE_TRIPLETS).     long maximumRectangleTriplets = edgeMetricsHelper.getAccumulator(env, MAXIMUM_RECTANGLE_TRIPLETS).     // each edge is counted twice, once from each vertex, so must be halved     return new Result(triangleTripletCount, rectangleTripletCount, maximumTriangleTriplets, maximumRectangleTriplets). }
false;public;2;22;;@Override public void flatMap(Edge<T, Tuple3<ET, Degrees, Degrees>> edge, Collector<Tuple4<T, T, Degrees, LongValue>> out) throws Exception {     Tuple3<ET, Degrees, Degrees> degrees = edge.f2.     long sourceDegree = degrees.f1.getDegree().getValue().     long targetDegree = degrees.f2.getDegree().getValue().     boolean ordered = (sourceDegree < targetDegree || (sourceDegree == targetDegree && edge.f0.compareTo(edge.f1) < 0)).     output.f0 = edge.f0.     output.f1 = edge.f1.     output.f2 = edge.f2.f1.     output.f3 = ordered ? one : zero.     out.collect(output).     output.f0 = edge.f1.     output.f1 = edge.f0.     output.f2 = edge.f2.f2.     output.f3 = ordered ? zero : one.     out.collect(output). }
false;public;2;11;;@Override public void reduce(Iterable<Tuple4<T, T, Degrees, LongValue>> values, Collector<Tuple3<T, Degrees, LongValue>> out) throws Exception {     Tuple4<T, T, Degrees, LongValue> value = values.iterator().next().     output.f0 = value.f0.     output.f1 = value.f2.     output.f2 = value.f3.     out.collect(output). }
false;public;2;6;;@Override public Tuple3<T, Degrees, LongValue> reduce(Tuple3<T, Degrees, LongValue> value1, Tuple3<T, Degrees, LongValue> value2) throws Exception {     value1.f2.setValue(value1.f2.getValue() + value2.f2.getValue()).     return value1. }
false;public;1;2;;@Override public void configure(Configuration parameters) { }
false;public;2;2;;@Override public void open(int taskNumber, int numTasks) throws IOException { }
false;public;1;17;;@Override public void writeRecord(Tuple3<T, Degrees, LongValue> record) throws IOException {     Degrees degrees = record.f1.     long degree = degrees.getDegree().getValue().     long lowDegree = record.f2.getValue().     long highDegree = degree - lowDegree.     long triangleTriplets = lowDegree * (lowDegree - 1) / 2.     long rectangleTriplets = triangleTriplets + lowDegree * highDegree.     triangleTripletCount += triangleTriplets.     rectangleTripletCount += rectangleTriplets.     maximumTriangleTriplets = Math.max(maximumTriangleTriplets, triangleTriplets).     maximumRectangleTriplets = Math.max(maximumRectangleTriplets, rectangleTriplets). }
false;public;0;7;;@Override public void close() throws IOException {     addAccumulator(TRIANGLE_TRIPLET_COUNT, new LongCounter(triangleTripletCount)).     addAccumulator(RECTANGLE_TRIPLET_COUNT, new LongCounter(rectangleTripletCount)).     addAccumulator(MAXIMUM_TRIANGLE_TRIPLETS, new LongMaximum(maximumTriangleTriplets)).     addAccumulator(MAXIMUM_RECTANGLE_TRIPLETS, new LongMaximum(maximumRectangleTriplets)). }
true;public;0;3;/**  * Get the number of triangle triplets.  *  * @return number of triangle triplets  */ ;/**  * Get the number of triangle triplets.  *  * @return number of triangle triplets  */ public long getNumberOfTriangleTriplets() {     return triangleTripletCount. }
true;public;0;3;/**  * Get the number of rectangle triplets.  *  * @return number of rectangle triplets  */ ;/**  * Get the number of rectangle triplets.  *  * @return number of rectangle triplets  */ public long getNumberOfRectangleTriplets() {     return rectangleTripletCount. }
true;public;0;3;/**  * Get the maximum triangle triplets.  *  * @return maximum triangle triplets  */ ;/**  * Get the maximum triangle triplets.  *  * @return maximum triangle triplets  */ public long getMaximumTriangleTriplets() {     return maximumTriangleTriplets. }
true;public;0;3;/**  * Get the maximum rectangle triplets.  *  * @return maximum rectangle triplets  */ ;/**  * Get the maximum rectangle triplets.  *  * @return maximum rectangle triplets  */ public long getMaximumRectangleTriplets() {     return maximumRectangleTriplets. }
false;public;0;4;;@Override public String toString() {     return toPrintableString(). }
false;public;0;9;;@Override public String toPrintableString() {     NumberFormat nf = NumberFormat.getInstance().     return "triangle triplet count: " + nf.format(triangleTripletCount) + ". rectangle triplet count: " + nf.format(rectangleTripletCount) + ". maximum triangle triplets: " + nf.format(maximumTriangleTriplets) + ". maximum rectangle triplets: " + nf.format(maximumRectangleTriplets). }
false;public;0;9;;@Override public int hashCode() {     return new HashCodeBuilder().append(triangleTripletCount).append(rectangleTripletCount).append(maximumTriangleTriplets).append(maximumRectangleTriplets).hashCode(). }
false;public;1;23;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (obj.getClass() != getClass()) {         return false.     }     Result rhs = (Result) obj.     return new EqualsBuilder().append(triangleTripletCount, rhs.triangleTripletCount).append(rectangleTripletCount, rhs.rectangleTripletCount).append(maximumTriangleTriplets, rhs.maximumTriangleTriplets).append(maximumRectangleTriplets, rhs.maximumRectangleTriplets).isEquals(). }
