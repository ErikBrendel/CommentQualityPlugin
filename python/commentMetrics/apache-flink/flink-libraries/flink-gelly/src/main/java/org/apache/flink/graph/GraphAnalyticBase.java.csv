commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public GraphAnalytic<K, VV, EV, T> run(Graph<K, VV, EV> input) throws Exception {     env = input.getContext().     return this. }
true;public;1;8;/**  * Set the parallelism for this analytic's operators. This parameter is  * necessary because processing a small amount of data with high operator  * parallelism is slow and wasteful with memory and buffers.  *  * <p>Operator parallelism should be set to this given value unless  * processing asymptotically more data, in which case the default job  * parallelism should be inherited.  *  * @param parallelism operator parallelism  * @return this  */ ;/**  * Set the parallelism for this analytic's operators. This parameter is  * necessary because processing a small amount of data with high operator  * parallelism is slow and wasteful with memory and buffers.  *  * <p>Operator parallelism should be set to this given value unless  * processing asymptotically more data, in which case the default job  * parallelism should be inherited.  *  * @param parallelism operator parallelism  * @return this  */ public GraphAnalyticBase<K, VV, EV, T> setParallelism(int parallelism) {     Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT, "The parallelism must be at least one, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).").     this.parallelism = parallelism.     return this. }
false;public;0;6;;@Override public T execute() throws Exception {     env.execute().     return getResult(). }
false;public;1;8;;@Override public T execute(String jobName) throws Exception {     Preconditions.checkNotNull(jobName).     env.execute(jobName).     return getResult(). }
