# id;timestamp;commentText;codeText;commentWords;codeWords
AdamicAdar -> Result -> public Result();1467052745;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> Result -> public Result();1467398142;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> Result -> public Result();1473368789;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> Result -> public Result();1473368789;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> Result -> public Result();1488490978;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> Result -> public Result();1489068942;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> Result -> public Result();1490973446;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> Result -> public Result();1492103503;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> Result -> public Result();1495819075;No-args constructor.;public Result() {_			f2 = new FloatValue()__		};no,args,constructor;public,result,f2,new,float,value
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1467052745;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1467398142;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1473368789;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1473368789;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1488490978;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1489068942;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1490973446;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1492103503;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1495819075;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1499282568;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1499777483;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1501079480;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1502111816;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumScore(float score);1505445925;Filter out Adamic-Adar scores less than the given minimum.__@param score minimum score_@return this;public AdamicAdar<K, VV, EV> setMinimumScore(float score) {_		Preconditions.checkArgument(score >= 0, "Minimum score must be non-negative")___		this.minimumScore = score___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,minimum,param,score,minimum,score,return,this;public,adamic,adar,k,vv,ev,set,minimum,score,float,score,preconditions,check,argument,score,0,minimum,score,must,be,non,negative,this,minimum,score,score,return,this
AdamicAdar -> Result -> public void setAdamicAdarScore(FloatValue adamicAdarScore);1499282568;Set the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@param adamicAdarScore the Adamic-Adar score;public void setAdamicAdarScore(FloatValue adamicAdarScore) {_			this.adamicAdarScore = adamicAdarScore__		};set,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,param,adamic,adar,score,the,adamic,adar,score;public,void,set,adamic,adar,score,float,value,adamic,adar,score,this,adamic,adar,score,adamic,adar,score
AdamicAdar -> Result -> public void setAdamicAdarScore(FloatValue adamicAdarScore);1499777483;Set the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@param adamicAdarScore the Adamic-Adar score;public void setAdamicAdarScore(FloatValue adamicAdarScore) {_			this.adamicAdarScore = adamicAdarScore__		};set,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,param,adamic,adar,score,the,adamic,adar,score;public,void,set,adamic,adar,score,float,value,adamic,adar,score,this,adamic,adar,score,adamic,adar,score
AdamicAdar -> Result -> public void setAdamicAdarScore(FloatValue adamicAdarScore);1501079480;Set the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@param adamicAdarScore the Adamic-Adar score;public void setAdamicAdarScore(FloatValue adamicAdarScore) {_			this.adamicAdarScore = adamicAdarScore__		};set,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,param,adamic,adar,score,the,adamic,adar,score;public,void,set,adamic,adar,score,float,value,adamic,adar,score,this,adamic,adar,score,adamic,adar,score
AdamicAdar -> Result -> public void setAdamicAdarScore(FloatValue adamicAdarScore);1502111816;Set the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@param adamicAdarScore the Adamic-Adar score;public void setAdamicAdarScore(FloatValue adamicAdarScore) {_			this.adamicAdarScore = adamicAdarScore__		};set,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,param,adamic,adar,score,the,adamic,adar,score;public,void,set,adamic,adar,score,float,value,adamic,adar,score,this,adamic,adar,score,adamic,adar,score
AdamicAdar -> Result -> public void setAdamicAdarScore(FloatValue adamicAdarScore);1505445925;Set the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@param adamicAdarScore the Adamic-Adar score;public void setAdamicAdarScore(FloatValue adamicAdarScore) {_			this.adamicAdarScore = adamicAdarScore__		};set,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,param,adamic,adar,score,the,adamic,adar,score;public,void,set,adamic,adar,score,float,value,adamic,adar,score,this,adamic,adar,score,adamic,adar,score
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1467052745;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1467398142;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1473368789;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1473368789;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1488490978;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1489068942;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1490973446;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1492103503;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1495819075;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism);1499282568;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public AdamicAdar<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,adamic,adar,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1467052745;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1467398142;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1473368789;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1473368789;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1488490978;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1489068942;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1490973446;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1492103503;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1495819075;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1499282568;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1499777483;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1501079480;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1502111816;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio);1505445925;Filter out Adamic-Adar scores less than the given ratio times the average score.__@param ratio minimum ratio_@return this;public AdamicAdar<K, VV, EV> setMinimumRatio(float ratio) {_		Preconditions.checkArgument(ratio >= 0, "Minimum ratio must be non-negative")___		this.minimumRatio = ratio___		return this__	};filter,out,adamic,adar,scores,less,than,the,given,ratio,times,the,average,score,param,ratio,minimum,ratio,return,this;public,adamic,adar,k,vv,ev,set,minimum,ratio,float,ratio,preconditions,check,argument,ratio,0,minimum,ratio,must,be,non,negative,this,minimum,ratio,ratio,return,this
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1467052745;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1467398142;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1473368789;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1473368789;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1488490978;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1489068942;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1490973446;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1492103503;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1495819075;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return f2__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,f2
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1499282568;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return adamicAdarScore__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,adamic,adar,score
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1499777483;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return adamicAdarScore__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,adamic,adar,score
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1501079480;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return adamicAdarScore__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,adamic,adar,score
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1502111816;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return adamicAdarScore__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,adamic,adar,score
AdamicAdar -> Result -> public FloatValue getAdamicAdarScore();1505445925;Get the Adamic-Adar score, equal to the sum over common neighbors of_the inverse logarithm of degree.__@return Adamic-Adar score;public FloatValue getAdamicAdarScore() {_			return adamicAdarScore__		};get,the,adamic,adar,score,equal,to,the,sum,over,common,neighbors,of,the,inverse,logarithm,of,degree,return,adamic,adar,score;public,float,value,get,adamic,adar,score,return,adamic,adar,score
AdamicAdar -> public AdamicAdar<K, VV, EV> setMirrorResults(boolean mirrorResults);1501079480;By default only one result is output for each pair of vertices. When_mirroring a second result with the vertex order flipped is output for_each pair of vertices.__@param mirrorResults whether output results should be mirrored_@return this;public AdamicAdar<K, VV, EV> setMirrorResults(boolean mirrorResults) {_		this.mirrorResults = mirrorResults___		return this__	};by,default,only,one,result,is,output,for,each,pair,of,vertices,when,mirroring,a,second,result,with,the,vertex,order,flipped,is,output,for,each,pair,of,vertices,param,mirror,results,whether,output,results,should,be,mirrored,return,this;public,adamic,adar,k,vv,ev,set,mirror,results,boolean,mirror,results,this,mirror,results,mirror,results,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMirrorResults(boolean mirrorResults);1502111816;By default only one result is output for each pair of vertices. When_mirroring a second result with the vertex order flipped is output for_each pair of vertices.__@param mirrorResults whether output results should be mirrored_@return this;public AdamicAdar<K, VV, EV> setMirrorResults(boolean mirrorResults) {_		this.mirrorResults = mirrorResults___		return this__	};by,default,only,one,result,is,output,for,each,pair,of,vertices,when,mirroring,a,second,result,with,the,vertex,order,flipped,is,output,for,each,pair,of,vertices,param,mirror,results,whether,output,results,should,be,mirrored,return,this;public,adamic,adar,k,vv,ev,set,mirror,results,boolean,mirror,results,this,mirror,results,mirror,results,return,this
AdamicAdar -> public AdamicAdar<K, VV, EV> setMirrorResults(boolean mirrorResults);1505445925;By default only one result is output for each pair of vertices. When_mirroring a second result with the vertex order flipped is output for_each pair of vertices.__@param mirrorResults whether output results should be mirrored_@return this;public AdamicAdar<K, VV, EV> setMirrorResults(boolean mirrorResults) {_		this.mirrorResults = mirrorResults___		return this__	};by,default,only,one,result,is,output,for,each,pair,of,vertices,when,mirroring,a,second,result,with,the,vertex,order,flipped,is,output,for,each,pair,of,vertices,param,mirror,results,whether,output,results,should,be,mirrored,return,this;public,adamic,adar,k,vv,ev,set,mirror,results,boolean,mirror,results,this,mirror,results,mirror,results,return,this
