commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Retrieves the number of vertices in the graph.  * @return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}  * option has been set. -1 otherwise.  */ ;/**  * Retrieves the number of vertices in the graph.  * @return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}  * option has been set. -1 otherwise.  */ public long getNumberOfVertices() {     return numberOfVertices. }
false;;1;3;;void setNumberOfVertices(long numberOfVertices) {     this.numberOfVertices = numberOfVertices. }
false;;0;3;;boolean isOptDegrees() {     return optDegrees. }
false;;1;3;;void setOptDegrees(boolean optDegrees) {     this.optDegrees = optDegrees. }
true;public,abstract;2;1;/**  * This method is invoked once per vertex per superstep. It receives the current state of the vertex, as well as  * the incoming messages. It may set a new vertex state via {@link #setNewVertexValue(Object)}. If the vertex  * state is changed, it will trigger the sending of messages via the {@link ScatterFunction}.  *  * @param vertex The vertex.  * @param inMessages The incoming messages to this vertex.  *  * @throws Exception The computation may throw exceptions, which causes the superstep to fail.  */ ;// -------------------------------------------------------------------------------------------- // Public API Methods // -------------------------------------------------------------------------------------------- /**  * This method is invoked once per vertex per superstep. It receives the current state of the vertex, as well as  * the incoming messages. It may set a new vertex state via {@link #setNewVertexValue(Object)}. If the vertex  * state is changed, it will trigger the sending of messages via the {@link ScatterFunction}.  *  * @param vertex The vertex.  * @param inMessages The incoming messages to this vertex.  *  * @throws Exception The computation may throw exceptions, which causes the superstep to fail.  */ public abstract void updateVertex(Vertex<K, VV> vertex, MessageIterator<Message> inMessages) throws Exception.
true;public;0;1;/**  * This method is executed once per superstep before the gather function is invoked for each vertex.  *  * @throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.  */ ;/**  * This method is executed once per superstep before the gather function is invoked for each vertex.  *  * @throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.  */ public void preSuperstep() throws Exception { }
true;public;0;1;/**  * This method is executed once per superstep after the gather function has been invoked for each vertex.  *  * @throws Exception Exceptions in the post-superstep phase cause the superstep to fail.  */ ;/**  * This method is executed once per superstep after the gather function has been invoked for each vertex.  *  * @throws Exception Exceptions in the post-superstep phase cause the superstep to fail.  */ public void postSuperstep() throws Exception { }
true;public;1;13;/**  * Sets the new value of this vertex. Setting a new value triggers the sending of outgoing messages from this vertex.  *  * <p>This should be called at most once per updateVertex.  *  * @param newValue The new vertex value.  */ ;/**  * Sets the new value of this vertex. Setting a new value triggers the sending of outgoing messages from this vertex.  *  * <p>This should be called at most once per updateVertex.  *  * @param newValue The new vertex value.  */ public void setNewVertexValue(VV newValue) {     if (setNewVertexValueCalled) {         throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex").     }     setNewVertexValueCalled = true.     if (isOptDegrees()) {         outValWithDegrees.f1.f0 = newValue.         outWithDegrees.collect(outValWithDegrees).     } else {         outVal.setValue(newValue).         out.collect(outVal).     } }
true;public;0;3;/**  * Gets the number of the superstep, starting at <tt>1</tt>.  *  * @return The number of the current superstep.  */ ;/**  * Gets the number of the superstep, starting at <tt>1</tt>.  *  * @return The number of the current superstep.  */ public int getSuperstepNumber() {     return this.runtimeContext.getSuperstepNumber(). }
true;public;1;3;/**  * Gets the iteration aggregator registered under the given name. The iteration aggregator combines  * all aggregates globally once per superstep and makes them available in the next superstep.  *  * @param name The name of the aggregator.  * @return The aggregator registered under this name, or null, if no aggregator was registered.  */ ;/**  * Gets the iteration aggregator registered under the given name. The iteration aggregator combines  * all aggregates globally once per superstep and makes them available in the next superstep.  *  * @param name The name of the aggregator.  * @return The aggregator registered under this name, or null, if no aggregator was registered.  */ public <T extends Aggregator<?>> T getIterationAggregator(String name) {     return this.runtimeContext.getIterationAggregator(name). }
true;public;1;3;/**  * Get the aggregated value that an aggregator computed in the previous iteration.  *  * @param name The name of the aggregator.  * @return The aggregated value of the previous iteration.  */ ;/**  * Get the aggregated value that an aggregator computed in the previous iteration.  *  * @param name The name of the aggregator.  * @return The aggregated value of the previous iteration.  */ public <T extends Value> T getPreviousIterationAggregate(String name) {     return this.runtimeContext.getPreviousIterationAggregate(name). }
true;public;1;3;/**  * Gets the broadcast data set registered under the given name. Broadcast data sets  * are available on all parallel instances of a function. They can be registered via  * {@link org.apache.flink.graph.spargel.ScatterGatherConfiguration#addBroadcastSetForGatherFunction(String, org.apache.flink.api.java.DataSet)}.  *  * @param name The name under which the broadcast set is registered.  * @return The broadcast data set.  */ ;/**  * Gets the broadcast data set registered under the given name. Broadcast data sets  * are available on all parallel instances of a function. They can be registered via  * {@link org.apache.flink.graph.spargel.ScatterGatherConfiguration#addBroadcastSetForGatherFunction(String, org.apache.flink.api.java.DataSet)}.  *  * @param name The name under which the broadcast set is registered.  * @return The broadcast data set.  */ public <T> Collection<T> getBroadcastSet(String name) {     return this.runtimeContext.getBroadcastVariable(name). }
false;;1;3;;void init(IterationRuntimeContext context) {     this.runtimeContext = context. }
false;;2;5;;void setOutput(Vertex<K, VV> outVal, Collector<Vertex<K, VV>> out) {     this.outVal = outVal.     this.out = out.     setNewVertexValueCalled = false. }
false;;2;7;;@SuppressWarnings({ "unchecked", "rawtypes" }) <ValueWithDegree> void setOutputWithDegrees(Vertex<K, ValueWithDegree> outVal, Collector out) {     this.outValWithDegrees = (Vertex<K, Tuple3<VV, Long, Long>>) outVal.     this.outWithDegrees = out.     setNewVertexValueCalled = false. }
true;public;0;3;/**  * Retrieves the vertex in-degree (number of in-coming edges).  * @return The in-degree of this vertex  */ ;/**  * Retrieves the vertex in-degree (number of in-coming edges).  * @return The in-degree of this vertex  */ public long getInDegree() {     return inDegree. }
false;;1;3;;void setInDegree(long inDegree) {     this.inDegree = inDegree. }
true;public;0;3;/**  * Retrieve the vertex out-degree (number of out-going edges).  * @return The out-degree of this vertex  */ ;/**  * Retrieve the vertex out-degree (number of out-going edges).  * @return The out-degree of this vertex  */ public long getOutDegree() {     return outDegree. }
false;;1;3;;void setOutDegree(long outDegree) {     this.outDegree = outDegree. }
true;;2;9;/**  * In order to hide the Tuple3(actualValue, inDegree, OutDegree) vertex value from the user,  * another function will be called from {@link org.apache.flink.graph.spargel.ScatterGatherIteration}.  *  * <p>This function will retrieve the vertex from the vertexState and will set its degrees, afterwards calling  * the regular updateVertex function.  *  * @param vertexState  * @param inMessages  * @throws Exception  */ ;/**  * In order to hide the Tuple3(actualValue, inDegree, OutDegree) vertex value from the user,  * another function will be called from {@link org.apache.flink.graph.spargel.ScatterGatherIteration}.  *  * <p>This function will retrieve the vertex from the vertexState and will set its degrees, afterwards calling  * the regular updateVertex function.  *  * @param vertexState  * @param inMessages  * @throws Exception  */ @SuppressWarnings("unchecked") <VertexWithDegree> void updateVertexFromScatterGatherIteration(Vertex<K, VertexWithDegree> vertexState, MessageIterator<Message> inMessages) throws Exception {     Vertex<K, VV> vertex = new Vertex<>(vertexState.f0, ((Tuple3<VV, Long, Long>) vertexState.getValue()).f0).     updateVertex(vertex, inMessages). }
