commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Sets the name for the iteration. The name is displayed in logs and messages.  *  * @param name The name for the iteration.  */ ;/**  * Sets the name for the iteration. The name is displayed in logs and messages.  *  * @param name The name for the iteration.  */ public void setName(String name) {     this.name = name. }
true;public;1;8;/**  * Gets the name of the iteration.  * @param defaultName  *  * @return The name of the iteration.  */ ;/**  * Gets the name of the iteration.  * @param defaultName  *  * @return The name of the iteration.  */ public String getName(String defaultName) {     if (name != null) {         return name.     } else {         return defaultName.     } }
true;public;1;6;/**  * Sets the parallelism for the iteration.  *  * @param parallelism The parallelism.  */ ;/**  * Sets the parallelism for the iteration.  *  * @param parallelism The parallelism.  */ public void setParallelism(int parallelism) {     Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT, "The parallelism must be at least one, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).").     this.parallelism = parallelism. }
true;public;0;3;/**  * Gets the iteration's parallelism.  *  * @return The iterations parallelism, or -1, if not set.  */ ;/**  * Gets the iteration's parallelism.  *  * @return The iterations parallelism, or -1, if not set.  */ public int getParallelism() {     return parallelism. }
true;public;1;3;/**  * Defines whether the solution set is kept in managed memory (Flink's internal way of keeping object  * in serialized form) or as a simple object map.  * By default, the solution set runs in managed memory.  *  * @param unmanaged True, to keep the solution set in unmanaged memory, false otherwise.  */ ;/**  * Defines whether the solution set is kept in managed memory (Flink's internal way of keeping object  * in serialized form) or as a simple object map.  * By default, the solution set runs in managed memory.  *  * @param unmanaged True, to keep the solution set in unmanaged memory, false otherwise.  */ public void setSolutionSetUnmanagedMemory(boolean unmanaged) {     this.unmanagedSolutionSet = unmanaged. }
true;public;0;3;/**  * Gets whether the solution set is kept in managed memory (Flink's internal way of keeping object  * in serialized form) or as a simple object map.  * By default, the solution set runs in managed memory.  *  * @return True, if the solution set is in unmanaged memory, false otherwise.  */ ;/**  * Gets whether the solution set is kept in managed memory (Flink's internal way of keeping object  * in serialized form) or as a simple object map.  * By default, the solution set runs in managed memory.  *  * @return True, if the solution set is in unmanaged memory, false otherwise.  */ public boolean isSolutionSetUnmanagedMemory() {     return this.unmanagedSolutionSet. }
true;public;0;3;/**  * Gets whether the number of vertices option is set.  * By default, the number of vertices option is not set.  *  * @return True, if the number of vertices option is set, false otherwise.  */ ;/**  * Gets whether the number of vertices option is set.  * By default, the number of vertices option is not set.  *  * @return True, if the number of vertices option is set, false otherwise.  */ public boolean isOptNumVertices() {     return optNumVertices. }
true;public;1;3;/**  * Sets the number of vertices option.  * By default, the number of vertices option is not set.  *  * @param optNumVertices True, to set this option, false otherwise.  */ ;/**  * Sets the number of vertices option.  * By default, the number of vertices option is not set.  *  * @param optNumVertices True, to set this option, false otherwise.  */ public void setOptNumVertices(boolean optNumVertices) {     this.optNumVertices = optNumVertices. }
true;public;2;3;/**  * Registers a new aggregator. Aggregators registered here are available during the execution of the vertex updates  * via {@link GatherFunction#getIterationAggregator(String)} and  * {@link GatherFunction#getPreviousIterationAggregate(String)}.  *  * @param name The name of the aggregator, used to retrieve it and its aggregates during execution.  * @param aggregator The aggregator.  */ ;/**  * Registers a new aggregator. Aggregators registered here are available during the execution of the vertex updates  * via {@link GatherFunction#getIterationAggregator(String)} and  * {@link GatherFunction#getPreviousIterationAggregate(String)}.  *  * @param name The name of the aggregator, used to retrieve it and its aggregates during execution.  * @param aggregator The aggregator.  */ public void registerAggregator(String name, Aggregator<?> aggregator) {     this.aggregators.put(name, aggregator). }
true;public;0;3;/**  * Gets the set of aggregators that are registered for this vertex-centric iteration.  *  * @return a Map of the registered aggregators, where the key is the aggregator name  * and the value is the Aggregator object  */ ;/**  * Gets the set of aggregators that are registered for this vertex-centric iteration.  *  * @return a Map of the registered aggregators, where the key is the aggregator name  * and the value is the Aggregator object  */ public Map<String, Aggregator<?>> getAggregators() {     return this.aggregators. }
