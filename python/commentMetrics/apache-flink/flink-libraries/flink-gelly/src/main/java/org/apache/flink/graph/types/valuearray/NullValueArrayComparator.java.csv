commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int hash(NullValueArray record) {     return record.hashCode(). }
false;public;1;4;;@Override public void setReference(NullValueArray toCompare) {     toCompare.copyTo(reference). }
false;public;1;4;;@Override public boolean equalToReference(NullValueArray candidate) {     return candidate.equals(this.reference). }
false;public;1;5;;@Override public int compareToReference(TypeComparator<NullValueArray> referencedComparator) {     int comp = ((NullValueArrayComparator) referencedComparator).reference.compareTo(reference).     return ascendingComparison ? comp : -comp. }
false;public;2;5;;@Override public int compare(NullValueArray first, NullValueArray second) {     int comp = first.compareTo(second).     return ascendingComparison ? comp : -comp. }
false;public;2;8;;@Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     int firstCount = firstSource.readInt().     int secondCount = secondSource.readInt().     int cmp = Integer.compare(firstCount, secondCount).     return ascendingComparison ? cmp : -cmp. }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return NormalizableKey.class.isAssignableFrom(NullValueArray.class). }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return reference.getMaxNormalizedKeyLen(). }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < getNormalizeKeyLen(). }
false;public;4;4;;@Override public void putNormalizedKey(NullValueArray record, MemorySegment target, int offset, int numBytes) {     record.copyNormalizedKey(target, offset, numBytes). }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return !ascendingComparison. }
false;public;0;4;;@Override public TypeComparator<NullValueArray> duplicate() {     return new NullValueArrayComparator(ascendingComparison). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = record.     return 1. }
false;public;0;4;;@Override public TypeComparator<?>[] getFlatComparators() {     return comparators. }
false;public;0;5;;// -------------------------------------------------------------------------------------------- // key normalization // -------------------------------------------------------------------------------------------- @Override public boolean supportsSerializationWithKeyNormalization() {     // see ComparatorTestBase#testNormalizedKeyReadWriter fixes in FLINK-4705     return false. }
false;public;2;4;;@Override public void writeWithKeyNormalization(NullValueArray record, DataOutputView target) throws IOException {     record.write(target). }
false;public;2;5;;@Override public NullValueArray readWithKeyDenormalization(NullValueArray reuse, DataInputView source) throws IOException {     reuse.read(source).     return reuse. }
