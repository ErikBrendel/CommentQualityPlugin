# id;timestamp;commentText;codeText;commentWords;codeWords
CirculantGraph -> public CirculantGraph addRange(long offset, long length);1494520945;Required configuration for each range of offsets in the graph.__@param offset first offset appointing the vertices' position_@param length number of contiguous offsets in range_@return this;public CirculantGraph addRange(long offset, long length) {_		Preconditions.checkArgument(offset >= MINIMUM_OFFSET,_			"Range offset must be at least " + MINIMUM_OFFSET)__		Preconditions.checkArgument(length <= vertexCount - offset,_			"Range length must not be greater than the vertex count minus the range offset.")___		offsetRanges.add(new OffsetRange(offset, length))___		return this__	};required,configuration,for,each,range,of,offsets,in,the,graph,param,offset,first,offset,appointing,the,vertices,position,param,length,number,of,contiguous,offsets,in,range,return,this;public,circulant,graph,add,range,long,offset,long,length,preconditions,check,argument,offset,range,offset,must,be,at,least,preconditions,check,argument,length,vertex,count,offset,range,length,must,not,be,greater,than,the,vertex,count,minus,the,range,offset,offset,ranges,add,new,offset,range,offset,length,return,this
CirculantGraph -> public CirculantGraph addRange(long offset, long length);1495819075;Required configuration for each range of offsets in the graph.__@param offset first offset appointing the vertices' position_@param length number of contiguous offsets in range_@return this;public CirculantGraph addRange(long offset, long length) {_		Preconditions.checkArgument(offset >= MINIMUM_OFFSET,_			"Range offset must be at least " + MINIMUM_OFFSET)__		Preconditions.checkArgument(length <= vertexCount - offset,_			"Range length must not be greater than the vertex count minus the range offset.")___		offsetRanges.add(new OffsetRange(offset, length))___		return this__	};required,configuration,for,each,range,of,offsets,in,the,graph,param,offset,first,offset,appointing,the,vertices,position,param,length,number,of,contiguous,offsets,in,range,return,this;public,circulant,graph,add,range,long,offset,long,length,preconditions,check,argument,offset,range,offset,must,be,at,least,preconditions,check,argument,length,vertex,count,offset,range,length,must,not,be,greater,than,the,vertex,count,minus,the,range,offset,offset,ranges,add,new,offset,range,offset,length,return,this
CirculantGraph -> public CirculantGraph addRange(long offset, long length);1505445925;Required configuration for each range of offsets in the graph.__@param offset first offset appointing the vertices' position_@param length number of contiguous offsets in range_@return this;public CirculantGraph addRange(long offset, long length) {_		Preconditions.checkArgument(offset >= MINIMUM_OFFSET,_			"Range offset must be at least " + MINIMUM_OFFSET)__		Preconditions.checkArgument(length <= vertexCount - offset,_			"Range length must not be greater than the vertex count minus the range offset.")___		offsetRanges.add(new OffsetRange(offset, length))___		return this__	};required,configuration,for,each,range,of,offsets,in,the,graph,param,offset,first,offset,appointing,the,vertices,position,param,length,number,of,contiguous,offsets,in,range,return,this;public,circulant,graph,add,range,long,offset,long,length,preconditions,check,argument,offset,range,offset,must,be,at,least,preconditions,check,argument,length,vertex,count,offset,range,length,must,not,be,greater,than,the,vertex,count,minus,the,range,offset,offset,ranges,add,new,offset,range,offset,length,return,this
CirculantGraph -> OffsetRange -> public OffsetRange(long offset, long length);1494520945;Construct a range with the given offset and length.__@param offset the range offset_@param length the range length;public OffsetRange(long offset, long length) {_			this.offset = offset__			this.length = length__		};construct,a,range,with,the,given,offset,and,length,param,offset,the,range,offset,param,length,the,range,length;public,offset,range,long,offset,long,length,this,offset,offset,this,length,length
CirculantGraph -> OffsetRange -> public OffsetRange(long offset, long length);1495819075;Construct a range with the given offset and length.__@param offset the range offset_@param length the range length;public OffsetRange(long offset, long length) {_			this.offset = offset__			this.length = length__		};construct,a,range,with,the,given,offset,and,length,param,offset,the,range,offset,param,length,the,range,length;public,offset,range,long,offset,long,length,this,offset,offset,this,length,length
CirculantGraph -> OffsetRange -> public OffsetRange(long offset, long length);1505445925;Construct a range with the given offset and length.__@param offset the range offset_@param length the range length;public OffsetRange(long offset, long length) {_			this.offset = offset__			this.length = length__		};construct,a,range,with,the,given,offset,and,length,param,offset,the,range,offset,param,length,the,range,length;public,offset,range,long,offset,long,length,this,offset,offset,this,length,length
CirculantGraph -> OffsetRange -> public long getLength();1494520945;Get the range length__@return the length;public long getLength() {_			return length__		};get,the,range,length,return,the,length;public,long,get,length,return,length
CirculantGraph -> OffsetRange -> public long getLength();1495819075;Get the range length.__@return the length;public long getLength() {_			return length__		};get,the,range,length,return,the,length;public,long,get,length,return,length
CirculantGraph -> OffsetRange -> public long getLength();1505445925;Get the range length.__@return the length;public long getLength() {_			return length__		};get,the,range,length,return,the,length;public,long,get,length,return,length
CirculantGraph -> OffsetRange -> public boolean overlaps(OffsetRange other);1494520945;Return true if and only if the other range and this range share a_common offset ID.__@param other other range_@return whether ranges are overlapping;public boolean overlaps(OffsetRange other) {_			boolean overlapping = false___			long lastOffset = getLastOffset()__			long otherLastOffset = other.getLastOffset()___			_			overlapping |= (offset <= other.offset && other.offset <= lastOffset)__			overlapping |= (offset <= otherLastOffset && otherLastOffset <= lastOffset)___			_			overlapping |= (other.offset <= offset && offset <= otherLastOffset)__			overlapping |= (other.offset <= lastOffset && lastOffset <= otherLastOffset)___			return overlapping__		};return,true,if,and,only,if,the,other,range,and,this,range,share,a,common,offset,id,param,other,other,range,return,whether,ranges,are,overlapping;public,boolean,overlaps,offset,range,other,boolean,overlapping,false,long,last,offset,get,last,offset,long,other,last,offset,other,get,last,offset,overlapping,offset,other,offset,other,offset,last,offset,overlapping,offset,other,last,offset,other,last,offset,last,offset,overlapping,other,offset,offset,offset,other,last,offset,overlapping,other,offset,last,offset,last,offset,other,last,offset,return,overlapping
CirculantGraph -> OffsetRange -> public boolean overlaps(OffsetRange other);1495819075;Return true if and only if the other range and this range share a_common offset ID.__@param other other range_@return whether ranges are overlapping;public boolean overlaps(OffsetRange other) {_			boolean overlapping = false___			long lastOffset = getLastOffset()__			long otherLastOffset = other.getLastOffset()___			_			overlapping |= (offset <= other.offset && other.offset <= lastOffset)__			overlapping |= (offset <= otherLastOffset && otherLastOffset <= lastOffset)___			_			overlapping |= (other.offset <= offset && offset <= otherLastOffset)__			overlapping |= (other.offset <= lastOffset && lastOffset <= otherLastOffset)___			return overlapping__		};return,true,if,and,only,if,the,other,range,and,this,range,share,a,common,offset,id,param,other,other,range,return,whether,ranges,are,overlapping;public,boolean,overlaps,offset,range,other,boolean,overlapping,false,long,last,offset,get,last,offset,long,other,last,offset,other,get,last,offset,overlapping,offset,other,offset,other,offset,last,offset,overlapping,offset,other,last,offset,other,last,offset,last,offset,overlapping,other,offset,offset,offset,other,last,offset,overlapping,other,offset,last,offset,last,offset,other,last,offset,return,overlapping
CirculantGraph -> OffsetRange -> public boolean overlaps(OffsetRange other);1505445925;Return true if and only if the other range and this range share a_common offset ID.__@param other other range_@return whether ranges are overlapping;public boolean overlaps(OffsetRange other) {_			boolean overlapping = false___			long lastOffset = getLastOffset()__			long otherLastOffset = other.getLastOffset()___			_			overlapping |= (offset <= other.offset && other.offset <= lastOffset)__			overlapping |= (offset <= otherLastOffset && otherLastOffset <= lastOffset)___			_			overlapping |= (other.offset <= offset && offset <= otherLastOffset)__			overlapping |= (other.offset <= lastOffset && lastOffset <= otherLastOffset)___			return overlapping__		};return,true,if,and,only,if,the,other,range,and,this,range,share,a,common,offset,id,param,other,other,range,return,whether,ranges,are,overlapping;public,boolean,overlaps,offset,range,other,boolean,overlapping,false,long,last,offset,get,last,offset,long,other,last,offset,other,get,last,offset,overlapping,offset,other,offset,other,offset,last,offset,overlapping,offset,other,last,offset,other,last,offset,last,offset,overlapping,other,offset,offset,offset,other,last,offset,overlapping,other,offset,last,offset,last,offset,other,last,offset,return,overlapping
CirculantGraph -> OffsetRange -> public long getLastOffset();1494520945;Get the offset of the last index in the range__@return last offset;public long getLastOffset() {_			return offset + length - 1__		};get,the,offset,of,the,last,index,in,the,range,return,last,offset;public,long,get,last,offset,return,offset,length,1
CirculantGraph -> OffsetRange -> public long getLastOffset();1495819075;Get the offset of the last index in the range.__@return last offset;public long getLastOffset() {_			return offset + length - 1__		};get,the,offset,of,the,last,index,in,the,range,return,last,offset;public,long,get,last,offset,return,offset,length,1
CirculantGraph -> OffsetRange -> public long getLastOffset();1505445925;Get the offset of the last index in the range.__@return last offset;public long getLastOffset() {_			return offset + length - 1__		};get,the,offset,of,the,last,index,in,the,range,return,last,offset;public,long,get,last,offset,return,offset,length,1
CirculantGraph -> public CirculantGraph(ExecutionEnvironment env, long vertexCount);1494520945;An oriented {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> is connected to vertex v<sub>(i+j)%n</sub> for each_configured offset {@code j}.__@param env the Flink execution environment_@param vertexCount number of vertices;public CirculantGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,oriented,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,is,connected,to,vertex,v,sub,i,j,n,sub,for,each,configured,offset,code,j,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,circulant,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
CirculantGraph -> public CirculantGraph(ExecutionEnvironment env, long vertexCount);1495819075;An oriented {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> is connected to vertex v<sub>(i+j)%n</sub> for each_configured offset {@code j}.__@param env the Flink execution environment_@param vertexCount number of vertices;public CirculantGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,oriented,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,is,connected,to,vertex,v,sub,i,j,n,sub,for,each,configured,offset,code,j,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,circulant,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
CirculantGraph -> public CirculantGraph(ExecutionEnvironment env, long vertexCount);1505445925;An oriented {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> is connected to vertex v<sub>(i+j)%n</sub> for each_configured offset {@code j}.__@param env the Flink execution environment_@param vertexCount number of vertices;public CirculantGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,oriented,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,is,connected,to,vertex,v,sub,i,j,n,sub,for,each,configured,offset,code,j,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,circulant,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
CirculantGraph -> OffsetRange -> public long getOffset();1494520945;Get the range offset__@return the offset;public long getOffset() {_			return offset__		};get,the,range,offset,return,the,offset;public,long,get,offset,return,offset
CirculantGraph -> OffsetRange -> public long getOffset();1495819075;Get the range offset.__@return the offset;public long getOffset() {_			return offset__		};get,the,range,offset,return,the,offset;public,long,get,offset,return,offset
CirculantGraph -> OffsetRange -> public long getOffset();1505445925;Get the range offset.__@return the offset;public long getOffset() {_			return offset__		};get,the,range,offset,return,the,offset;public,long,get,offset,return,offset
