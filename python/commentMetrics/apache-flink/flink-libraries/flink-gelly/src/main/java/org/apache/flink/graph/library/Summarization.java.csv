commented;modifiers;parameterAmount;loc;comment;code
false;public;1;40;;@Override public Graph<K, VertexValue<VV>, EdgeValue<EV>> run(Graph<K, VV, EV> input) throws Exception {     // -------------------------     // build super vertices     // -------------------------     // group vertices by value and create vertex group items     DataSet<VertexGroupItem<K, VV>> vertexGroupItems = input.getVertices().groupBy(1).reduceGroup(new VertexGroupReducer<>()).     // create super vertices     DataSet<Vertex<K, VertexValue<VV>>> summarizedVertices = vertexGroupItems.filter(new VertexGroupItemToSummarizedVertexFilter<>()).map(new VertexGroupItemToSummarizedVertexMapper<>()).     // -------------------------     // build super edges     // -------------------------     // create mapping between vertices and their representative     DataSet<VertexWithRepresentative<K>> vertexToRepresentativeMap = vertexGroupItems.filter(new VertexGroupItemToRepresentativeFilter<>()).map(new VertexGroupItemToVertexWithRepresentativeMapper<>()).     // join edges with vertex representatives and update source and target identifiers     DataSet<Edge<K, EV>> edgesForGrouping = input.getEdges().join(vertexToRepresentativeMap).where(// source vertex id     0).equalTo(// vertex id     0).with(new SourceVertexJoinFunction<>()).join(vertexToRepresentativeMap).where(// target vertex id     1).equalTo(// vertex id     0).with(new TargetVertexJoinFunction<>()).     // create super edges     DataSet<Edge<K, EdgeValue<EV>>> summarizedEdges = edgesForGrouping.groupBy(0, 1, // group by source id (0), target id (1) and edge value (2)     2).reduceGroup(new EdgeGroupReducer<>()).     return Graph.fromDataSet(summarizedVertices, summarizedEdges, input.getContext()). }
false;public;0;3;;public VV getVertexGroupValue() {     return f0. }
false;public;1;3;;public void setVertexGroupValue(VV vertexGroupValue) {     f0 = vertexGroupValue. }
false;public;0;3;;public Long getVertexGroupCount() {     return f1. }
false;public;1;3;;public void setVertexGroupCount(Long vertexGroupCount) {     f1 = vertexGroupCount. }
false;public;0;3;;public EV getEdgeGroupValue() {     return f0. }
false;public;1;3;;public void setEdgeGroupValue(EV edgeGroupValue) {     f0 = edgeGroupValue. }
false;public;0;3;;public Long getEdgeGroupCount() {     return f1. }
false;public;1;3;;public void setEdgeGroupCount(Long edgeGroupCount) {     f1 = edgeGroupCount. }
false;public;0;3;;public K getVertexId() {     return f0. }
false;public;1;3;;public void setVertexId(K vertexId) {     f0 = vertexId. }
false;public;0;3;;public K getGroupRepresentativeId() {     return f1. }
false;public;1;3;;public void setGroupRepresentativeId(K groupRepresentativeId) {     f1 = groupRepresentativeId. }
false;public;0;3;;public VGV getVertexGroupValue() {     return f2.isLeft() ? f2.left() : null. }
false;public;1;7;;public void setVertexGroupValue(VGV vertexGroupValue) {     if (vertexGroupValue == null) {         f2 = nullValue.     } else {         f2 = new Either.Left<>(vertexGroupValue).     } }
false;public;0;3;;public Long getVertexGroupCount() {     return f3. }
false;public;1;3;;public void setVertexGroupCount(Long vertexGroupCount) {     f3 = vertexGroupCount. }
true;public;0;6;/**  * Resets the fields to initial values. This is necessary if the tuples are reused and not all fields were modified.  */ ;/**  * Resets the fields to initial values. This is necessary if the tuples are reused and not all fields were modified.  */ public void reset() {     f0 = null.     f1 = null.     f2 = nullValue.     f3 = 0L. }
false;public;1;3;;public void setVertexId(K vertexId) {     f0 = vertexId. }
false;public;0;3;;public K getGroupRepresentativeId() {     return f1. }
false;public;1;3;;public void setGroupRepresentativeId(K groupRepresentativeId) {     f1 = groupRepresentativeId. }
false;public;1;5;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     this.reuseVertexGroupItem = new VertexGroupItem<>(). }
false;public;2;25;;@Override public void reduce(Iterable<Vertex<K, VV>> values, Collector<VertexGroupItem<K, VV>> out) throws Exception {     K vertexGroupRepresentativeID = null.     long vertexGroupCount = 0L.     VV vertexGroupValue = null.     boolean isFirstElement = true.     for (Vertex<K, VV> vertex : values) {         if (isFirstElement) {             // take final group representative vertex id from first tuple             vertexGroupRepresentativeID = vertex.getId().             vertexGroupValue = vertex.getValue().             isFirstElement = false.         }         // no need to set group value for those tuples         reuseVertexGroupItem.setVertexId(vertex.getId()).         reuseVertexGroupItem.setGroupRepresentativeId(vertexGroupRepresentativeID).         out.collect(reuseVertexGroupItem).         vertexGroupCount++.     }     createGroupRepresentativeTuple(vertexGroupRepresentativeID, vertexGroupValue, vertexGroupCount).     out.collect(reuseVertexGroupItem).     reuseVertexGroupItem.reset(). }
true;private;3;5;/**  * Creates one tuple representing the whole group. This tuple is later used to create a summarized vertex for each  * group.  *  * @param vertexGroupRepresentativeId group representative vertex identifier  * @param vertexGroupValue  		  group property value  * @param vertexGroupCount            total group count  */ ;/**  * Creates one tuple representing the whole group. This tuple is later used to create a summarized vertex for each  * group.  *  * @param vertexGroupRepresentativeId group representative vertex identifier  * @param vertexGroupValue  		  group property value  * @param vertexGroupCount            total group count  */ private void createGroupRepresentativeTuple(K vertexGroupRepresentativeId, VV vertexGroupValue, Long vertexGroupCount) {     reuseVertexGroupItem.setVertexId(vertexGroupRepresentativeId).     reuseVertexGroupItem.setVertexGroupValue(vertexGroupValue).     reuseVertexGroupItem.setVertexGroupCount(vertexGroupCount). }
false;public;2;24;;@Override public void reduce(Iterable<Edge<K, EV>> values, Collector<Edge<K, EdgeValue<EV>>> out) throws Exception {     K sourceVertexId = null.     K targetVertexId = null.     EV edgeGroupValue = null.     Long edgeGroupCount = 0L.     boolean isFirstElement = true.     for (Edge<K, EV> edge : values) {         if (isFirstElement) {             sourceVertexId = edge.getSource().             targetVertexId = edge.getTarget().             edgeGroupValue = edge.getValue().             isFirstElement = false.         }         edgeGroupCount++.     }     reuseEdgeValue.setEdgeGroupValue(edgeGroupValue).     reuseEdgeValue.setEdgeGroupCount(edgeGroupCount).     reuseEdge.setSource(sourceVertexId).     reuseEdge.setTarget(targetVertexId).     reuseEdge.setValue(reuseEdgeValue).     out.collect(reuseEdge). }
false;public;1;4;;@Override public boolean filter(VertexGroupItem<K, VV> vertexGroupItem) throws Exception {     return !vertexGroupItem.getVertexGroupCount().equals(0L). }
false;public;1;4;;@Override public boolean filter(VertexGroupItem<K, VV> vertexGroupItem) throws Exception {     return vertexGroupItem.getVertexGroupCount().equals(0L). }
false;public;1;7;;@Override public Vertex<K, VertexValue<VV>> map(VertexGroupItem<K, VV> value) throws Exception {     K vertexId = value.getVertexId().     reuseSummarizedVertexValue.setVertexGroupValue(value.getVertexGroupValue()).     reuseSummarizedVertexValue.setVertexGroupCount(value.getVertexGroupCount()).     return new Vertex<>(vertexId, reuseSummarizedVertexValue). }
false;public;1;6;;@Override public VertexWithRepresentative<K> map(VertexGroupItem<K, VV> vertexGroupItem) throws Exception {     reuseVertexWithRepresentative.setVertexId(vertexGroupItem.getVertexId()).     reuseVertexWithRepresentative.setGroupRepresentativeId(vertexGroupItem.getGroupRepresentativeId()).     return reuseVertexWithRepresentative. }
false;public;2;7;;@Override public Edge<K, EV> join(Edge<K, EV> edge, VertexWithRepresentative<K> vertex) throws Exception {     reuseEdge.setSource(vertex.getGroupRepresentativeId()).     reuseEdge.setTarget(edge.getTarget()).     reuseEdge.setValue(edge.getValue()).     return reuseEdge. }
false;public;2;5;;@Override public Edge<K, EV> join(Edge<K, EV> edge, VertexWithRepresentative<K> vertexRepresentative) throws Exception {     edge.setTarget(vertexRepresentative.getGroupRepresentativeId()).     return edge. }
