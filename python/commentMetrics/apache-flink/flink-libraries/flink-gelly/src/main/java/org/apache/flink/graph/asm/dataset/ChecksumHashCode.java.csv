commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public ChecksumHashCode<T> run(DataSet<T> input) throws Exception {     super.run(input).     checksumHashCodeHelper = new ChecksumHashCodeHelper<>().     input.output(checksumHashCodeHelper).name("ChecksumHashCode").     return this. }
false;public;0;4;;@Override public Checksum getResult() {     return checksumHashCodeHelper.getAccumulator(env, CHECKSUM). }
false;public;1;6;;@Override public void writeRecord(U record) throws IOException {     count++.     // convert 32-bit integer to non-negative long     checksum += record.hashCode() & 0xffffffffL. }
false;public;0;4;;@Override public void close() throws IOException {     addAccumulator(CHECKSUM, new Checksum(count, checksum)). }
true;public;0;3;/**  * Get the number of elements.  *  * @return number of elements  */ ;/**  * Get the number of elements.  *  * @return number of elements  */ public long getCount() {     return count. }
true;public;0;3;/**  * Get the checksum over the hash() of elements.  *  * @return checksum  */ ;/**  * Get the checksum over the hash() of elements.  *  * @return checksum  */ public long getChecksum() {     return checksum. }
false;public;0;4;;@Override public String toString() {     return String.format("ChecksumHashCode 0x%016x, count %d", this.checksum, this.count). }
false;public;0;7;;@Override public int hashCode() {     return new HashCodeBuilder().append(count).append(checksum).hashCode(). }
false;public;1;21;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (obj.getClass() != getClass()) {         return false.     }     Checksum rhs = (Checksum) obj.     return new EqualsBuilder().append(count, rhs.count).append(checksum, rhs.checksum).isEquals(). }
false;public;1;5;;// Methods implementing SimpleAccumulator @Override public void add(Checksum value) {     count += value.count.     checksum += value.checksum. }
false;public;0;4;;@Override public Checksum getLocalValue() {     return this. }
false;public;0;5;;@Override public void resetLocal() {     count = 0.     checksum = 0. }
false;public;1;4;;@Override public void merge(Accumulator<Checksum, Checksum> other) {     add(other.getLocalValue()). }
false;public;0;4;;@Override public Accumulator<Checksum, Checksum> clone() {     return new Checksum(count, checksum). }
