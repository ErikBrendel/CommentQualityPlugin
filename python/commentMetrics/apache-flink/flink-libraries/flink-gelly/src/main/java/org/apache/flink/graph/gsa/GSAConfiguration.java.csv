commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Adds a data set as a broadcast set to the gather function.  *  * @param name The name under which the broadcast data is available in the gather function.  * @param data The data set to be broadcast.  */ ;/**  * Adds a data set as a broadcast set to the gather function.  *  * @param name The name under which the broadcast data is available in the gather function.  * @param data The data set to be broadcast.  */ public void addBroadcastSetForGatherFunction(String name, DataSet<?> data) {     this.bcVarsGather.add(new Tuple2<>(name, data)). }
true;public;2;3;/**  * Adds a data set as a broadcast set to the sum function.  *  * @param name The name under which the broadcast data is available in the sum function.  * @param data The data set to be broadcast.  */ ;/**  * Adds a data set as a broadcast set to the sum function.  *  * @param name The name under which the broadcast data is available in the sum function.  * @param data The data set to be broadcast.  */ public void addBroadcastSetForSumFunction(String name, DataSet<?> data) {     this.bcVarsSum.add(new Tuple2<>(name, data)). }
true;public;2;3;/**  * Adds a data set as a broadcast set to the apply function.  *  * @param name The name under which the broadcast data is available in the apply function.  * @param data The data set to be broadcast.  */ ;/**  * Adds a data set as a broadcast set to the apply function.  *  * @param name The name under which the broadcast data is available in the apply function.  * @param data The data set to be broadcast.  */ public void addBroadcastSetForApplyFunction(String name, DataSet<?> data) {     this.bcVarsApply.add(new Tuple2<>(name, data)). }
true;public;0;3;/**  * Get the broadcast variables of the GatherFunction.  *  * @return a List of Tuple2, where the first field is the broadcast variable name  * and the second field is the broadcast DataSet.  */ ;/**  * Get the broadcast variables of the GatherFunction.  *  * @return a List of Tuple2, where the first field is the broadcast variable name  * and the second field is the broadcast DataSet.  */ public List<Tuple2<String, DataSet<?>>> getGatherBcastVars() {     return this.bcVarsGather. }
true;public;0;3;/**  * Get the broadcast variables of the SumFunction.  *  * @return a List of Tuple2, where the first field is the broadcast variable name  * and the second field is the broadcast DataSet.  */ ;/**  * Get the broadcast variables of the SumFunction.  *  * @return a List of Tuple2, where the first field is the broadcast variable name  * and the second field is the broadcast DataSet.  */ public List<Tuple2<String, DataSet<?>>> getSumBcastVars() {     return this.bcVarsSum. }
true;public;0;3;/**  * Get the broadcast variables of the ApplyFunction.  *  * @return a List of Tuple2, where the first field is the broadcast variable name  * and the second field is the broadcast DataSet.  */ ;/**  * Get the broadcast variables of the ApplyFunction.  *  * @return a List of Tuple2, where the first field is the broadcast variable name  * and the second field is the broadcast DataSet.  */ public List<Tuple2<String, DataSet<?>>> getApplyBcastVars() {     return this.bcVarsApply. }
true;public;0;3;/**  * Gets the direction from which the neighbors are to be selected  * By default the neighbors who are target of the edges are selected.  *  * @return an EdgeDirection, which can be either IN, OUT or ALL.  */ ;/**  * Gets the direction from which the neighbors are to be selected  * By default the neighbors who are target of the edges are selected.  *  * @return an EdgeDirection, which can be either IN, OUT or ALL.  */ public EdgeDirection getDirection() {     return direction. }
true;public;1;3;/**  * Sets the direction in which neighbors are to be selected  * By default the neighbors who are target of the edges are selected.  *  * @param direction - IN, OUT or ALL  */ ;/**  * Sets the direction in which neighbors are to be selected  * By default the neighbors who are target of the edges are selected.  *  * @param direction - IN, OUT or ALL  */ public void setDirection(EdgeDirection direction) {     this.direction = direction. }
