# id;timestamp;commentText;codeText;commentWords;codeWords
InvalidVertexIdsValidator -> @Override 	public boolean validate(Graph<K, VV, EV> graph) throws Exception;1444404795;Checks that the edge set input contains valid vertex Ids, i.e. that they_also exist in the vertex input set.__@return a boolean stating whether a graph is valid_with respect to its vertex ids.;@Override_	public boolean validate(Graph<K, VV, EV> graph) throws Exception {_		DataSet<Tuple1<K>> edgeIds = graph.getEdges()_				.flatMap(new MapEdgeIds<K, EV>()).distinct()__		DataSet<K> invalidIds = graph.getVertices().coGroup(edgeIds).where(0)_				.equalTo(0).with(new GroupInvalidIds<K, VV>()).first(1)___		return invalidIds.map(new KToTupleMap<K>()).count() == 0__	};checks,that,the,edge,set,input,contains,valid,vertex,ids,i,e,that,they,also,exist,in,the,vertex,input,set,return,a,boolean,stating,whether,a,graph,is,valid,with,respect,to,its,vertex,ids;override,public,boolean,validate,graph,k,vv,ev,graph,throws,exception,data,set,tuple1,k,edge,ids,graph,get,edges,flat,map,new,map,edge,ids,k,ev,distinct,data,set,k,invalid,ids,graph,get,vertices,co,group,edge,ids,where,0,equal,to,0,with,new,group,invalid,ids,k,vv,first,1,return,invalid,ids,map,new,kto,tuple,map,k,count,0
InvalidVertexIdsValidator -> @Override 	public boolean validate(Graph<K, VV, EV> graph) throws Exception;1475684776;Checks that the edge set input contains valid vertex Ids, i.e. that they_also exist in the vertex input set.__@return a boolean stating whether a graph is valid_with respect to its vertex ids.;@Override_	public boolean validate(Graph<K, VV, EV> graph) throws Exception {_		DataSet<Tuple1<K>> edgeIds = graph.getEdges()_				.flatMap(new MapEdgeIds<K, EV>()).distinct()__		DataSet<K> invalidIds = graph.getVertices().coGroup(edgeIds).where(0)_				.equalTo(0).with(new GroupInvalidIds<K, VV>()).first(1)___		return invalidIds.map(new KToTupleMap<K>()).count() == 0__	};checks,that,the,edge,set,input,contains,valid,vertex,ids,i,e,that,they,also,exist,in,the,vertex,input,set,return,a,boolean,stating,whether,a,graph,is,valid,with,respect,to,its,vertex,ids;override,public,boolean,validate,graph,k,vv,ev,graph,throws,exception,data,set,tuple1,k,edge,ids,graph,get,edges,flat,map,new,map,edge,ids,k,ev,distinct,data,set,k,invalid,ids,graph,get,vertices,co,group,edge,ids,where,0,equal,to,0,with,new,group,invalid,ids,k,vv,first,1,return,invalid,ids,map,new,kto,tuple,map,k,count,0
InvalidVertexIdsValidator -> @Override 	public boolean validate(Graph<K, VV, EV> graph) throws Exception;1495819075;Checks that the edge set input contains valid vertex Ids, i.e. that they_also exist in the vertex input set.__@return a boolean stating whether a graph is valid_with respect to its vertex ids.;@Override_	public boolean validate(Graph<K, VV, EV> graph) throws Exception {_		DataSet<Tuple1<K>> edgeIds = graph.getEdges()_				.flatMap(new MapEdgeIds<K, EV>()).distinct()__		DataSet<K> invalidIds = graph.getVertices().coGroup(edgeIds).where(0)_				.equalTo(0).with(new GroupInvalidIds<K, VV>()).first(1)___		return invalidIds.map(new KToTupleMap<K>()).count() == 0__	};checks,that,the,edge,set,input,contains,valid,vertex,ids,i,e,that,they,also,exist,in,the,vertex,input,set,return,a,boolean,stating,whether,a,graph,is,valid,with,respect,to,its,vertex,ids;override,public,boolean,validate,graph,k,vv,ev,graph,throws,exception,data,set,tuple1,k,edge,ids,graph,get,edges,flat,map,new,map,edge,ids,k,ev,distinct,data,set,k,invalid,ids,graph,get,vertices,co,group,edge,ids,where,0,equal,to,0,with,new,group,invalid,ids,k,vv,first,1,return,invalid,ids,map,new,kto,tuple,map,k,count,0
InvalidVertexIdsValidator -> @Override 	public boolean validate(Graph<K, VV, EV> graph) throws Exception;1502111816;Checks that the edge set input contains valid vertex Ids, i.e. that they_also exist in the vertex input set.__@return a boolean stating whether a graph is valid_with respect to its vertex ids.;@Override_	public boolean validate(Graph<K, VV, EV> graph) throws Exception {_		DataSet<Tuple1<K>> edgeIds = graph.getEdges()_				.flatMap(new MapEdgeIds<>()).distinct()__		DataSet<K> invalidIds = graph.getVertices().coGroup(edgeIds).where(0)_				.equalTo(0).with(new GroupInvalidIds<>()).first(1)___		return invalidIds.map(new KToTupleMap<>()).count() == 0__	};checks,that,the,edge,set,input,contains,valid,vertex,ids,i,e,that,they,also,exist,in,the,vertex,input,set,return,a,boolean,stating,whether,a,graph,is,valid,with,respect,to,its,vertex,ids;override,public,boolean,validate,graph,k,vv,ev,graph,throws,exception,data,set,tuple1,k,edge,ids,graph,get,edges,flat,map,new,map,edge,ids,distinct,data,set,k,invalid,ids,graph,get,vertices,co,group,edge,ids,where,0,equal,to,0,with,new,group,invalid,ids,first,1,return,invalid,ids,map,new,kto,tuple,map,count,0
