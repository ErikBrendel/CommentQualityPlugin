commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Checks that the edge set input contains valid vertex Ids, i.e. that they  * also exist in the vertex input set.  *  * @return a boolean stating whether a graph is valid  *         with respect to its vertex ids.  */ ;/**  * Checks that the edge set input contains valid vertex Ids, i.e. that they  * also exist in the vertex input set.  *  * @return a boolean stating whether a graph is valid  *         with respect to its vertex ids.  */ @Override public boolean validate(Graph<K, VV, EV> graph) throws Exception {     DataSet<Tuple1<K>> edgeIds = graph.getEdges().flatMap(new MapEdgeIds<>()).distinct().     DataSet<K> invalidIds = graph.getVertices().coGroup(edgeIds).where(0).equalTo(0).with(new GroupInvalidIds<>()).first(1).     return invalidIds.map(new KToTupleMap<>()).count() == 0. }
false;public;2;4;;public void flatMap(Edge<K, EV> edge, Collector<Tuple1<K>> out) {     out.collect(new Tuple1<>(edge.f0)).     out.collect(new Tuple1<>(edge.f1)). }
false;public;3;7;;public void coGroup(Iterable<Vertex<K, VV>> vertexId, Iterable<Tuple1<K>> edgeId, Collector<K> out) {     if (!(vertexId.iterator().hasNext())) {         // found an id that doesn't exist in the vertex set         out.collect(edgeId.iterator().next().f0).     } }
false;public;1;3;;public Tuple1<K> map(K key) throws Exception {     return new Tuple1<>(key). }
