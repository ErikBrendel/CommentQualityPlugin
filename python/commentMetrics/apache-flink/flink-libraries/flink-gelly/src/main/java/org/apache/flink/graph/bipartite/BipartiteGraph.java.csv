# id;timestamp;commentText;codeText;commentWords;codeWords
BipartiteGraph -> public DataSet<BipartiteEdge<KT, KB, EV>> getEdges();1481309930;Get dataset with graph edges.__@return dataset with graph edges;public DataSet<BipartiteEdge<KT, KB, EV>> getEdges() {_		return edges__	};get,dataset,with,graph,edges,return,dataset,with,graph,edges;public,data,set,bipartite,edge,kt,kb,ev,get,edges,return,edges
BipartiteGraph -> public DataSet<BipartiteEdge<KT, KB, EV>> getEdges();1495819075;Get dataset with graph edges.__@return dataset with graph edges;public DataSet<BipartiteEdge<KT, KB, EV>> getEdges() {_		return edges__	};get,dataset,with,graph,edges,return,dataset,with,graph,edges;public,data,set,bipartite,edge,kt,kb,ev,get,edges,return,edges
BipartiteGraph -> public DataSet<BipartiteEdge<KT, KB, EV>> getEdges();1502111816;Get dataset with graph edges.__@return dataset with graph edges;public DataSet<BipartiteEdge<KT, KB, EV>> getEdges() {_		return edges__	};get,dataset,with,graph,edges,return,dataset,with,graph,edges;public,data,set,bipartite,edge,kt,kb,ev,get,edges,return,edges
BipartiteGraph -> public DataSet<BipartiteEdge<KT, KB, EV>> getEdges();1508481109;Get dataset with graph edges.__@return dataset with graph edges;public DataSet<BipartiteEdge<KT, KB, EV>> getEdges() {_		return edges__	};get,dataset,with,graph,edges,return,dataset,with,graph,edges;public,data,set,bipartite,edge,kt,kb,ev,get,edges,return,edges
BipartiteGraph -> public Graph<KT, VVT, Tuple2<EV, EV>> projectionTopSimple();1481309930;Convert a bipartite graph into an undirected graph that contains only top vertices. An edge between two vertices_in the new graph will exist only if the original bipartite graph contains a bottom vertex they are both_connected to.__The simple projection performs a single join and returns edges containing the bipartite edge values.__Note: KT must override .equals(). This requirement may be removed in a future release.__@return simple top projection of the bipartite graph;public Graph<KT, VVT, Tuple2<EV, EV>> projectionTopSimple() {_		DataSet<Edge<KT, Tuple2<EV, EV>>> newEdges = edges.join(edges)_			.where(1)_			.equalTo(1)_			.with(new ProjectionTopSimple<KT, KB, EV>())_				.name("Simple top projection")___		return Graph.fromDataSet(topVertices, newEdges, context)__	};convert,a,bipartite,graph,into,an,undirected,graph,that,contains,only,top,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,a,bottom,vertex,they,are,both,connected,to,the,simple,projection,performs,a,single,join,and,returns,edges,containing,the,bipartite,edge,values,note,kt,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,simple,top,projection,of,the,bipartite,graph;public,graph,kt,vvt,tuple2,ev,ev,projection,top,simple,data,set,edge,kt,tuple2,ev,ev,new,edges,edges,join,edges,where,1,equal,to,1,with,new,projection,top,simple,kt,kb,ev,name,simple,top,projection,return,graph,from,data,set,top,vertices,new,edges,context
BipartiteGraph -> public Graph<KT, VVT, Tuple2<EV, EV>> projectionTopSimple();1495819075;Convert a bipartite graph into an undirected graph that contains only top vertices. An edge between two vertices_in the new graph will exist only if the original bipartite graph contains a bottom vertex they are both_connected to.__<p>The simple projection performs a single join and returns edges containing the bipartite edge values.__<p>Note: KT must override .equals(). This requirement may be removed in a future release.__@return simple top projection of the bipartite graph;public Graph<KT, VVT, Tuple2<EV, EV>> projectionTopSimple() {_		DataSet<Edge<KT, Tuple2<EV, EV>>> newEdges = edges.join(edges)_			.where(1)_			.equalTo(1)_			.with(new ProjectionTopSimple<KT, KB, EV>())_				.name("Simple top projection")___		return Graph.fromDataSet(topVertices, newEdges, context)__	};convert,a,bipartite,graph,into,an,undirected,graph,that,contains,only,top,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,a,bottom,vertex,they,are,both,connected,to,p,the,simple,projection,performs,a,single,join,and,returns,edges,containing,the,bipartite,edge,values,p,note,kt,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,simple,top,projection,of,the,bipartite,graph;public,graph,kt,vvt,tuple2,ev,ev,projection,top,simple,data,set,edge,kt,tuple2,ev,ev,new,edges,edges,join,edges,where,1,equal,to,1,with,new,projection,top,simple,kt,kb,ev,name,simple,top,projection,return,graph,from,data,set,top,vertices,new,edges,context
BipartiteGraph -> public Graph<KT, VVT, Tuple2<EV, EV>> projectionTopSimple();1502111816;Convert a bipartite graph into an undirected graph that contains only top vertices. An edge between two vertices_in the new graph will exist only if the original bipartite graph contains a bottom vertex they are both_connected to.__<p>The simple projection performs a single join and returns edges containing the bipartite edge values.__<p>Note: KT must override .equals(). This requirement may be removed in a future release.__@return simple top projection of the bipartite graph;public Graph<KT, VVT, Tuple2<EV, EV>> projectionTopSimple() {_		DataSet<Edge<KT, Tuple2<EV, EV>>> newEdges = edges.join(edges)_			.where(1)_			.equalTo(1)_			.with(new ProjectionTopSimple<>())_				.name("Simple top projection")___		return Graph.fromDataSet(topVertices, newEdges, context)__	};convert,a,bipartite,graph,into,an,undirected,graph,that,contains,only,top,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,a,bottom,vertex,they,are,both,connected,to,p,the,simple,projection,performs,a,single,join,and,returns,edges,containing,the,bipartite,edge,values,p,note,kt,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,simple,top,projection,of,the,bipartite,graph;public,graph,kt,vvt,tuple2,ev,ev,projection,top,simple,data,set,edge,kt,tuple2,ev,ev,new,edges,edges,join,edges,where,1,equal,to,1,with,new,projection,top,simple,name,simple,top,projection,return,graph,from,data,set,top,vertices,new,edges,context
BipartiteGraph -> public Graph<KT, VVT, Tuple2<EV, EV>> projectionTopSimple();1508481109;Convert a bipartite graph into an undirected graph that contains only top vertices. An edge between two vertices_in the new graph will exist only if the original bipartite graph contains a bottom vertex they are both_connected to.__<p>The simple projection performs a single join and returns edges containing the bipartite edge values.__<p>Note: KT must override .equals(). This requirement may be removed in a future release.__@return simple top projection of the bipartite graph;public Graph<KT, VVT, Tuple2<EV, EV>> projectionTopSimple() {_		DataSet<Edge<KT, Tuple2<EV, EV>>> newEdges = edges.join(edges)_			.where(1)_			.equalTo(1)_			.with(new ProjectionTopSimple<>())_				.name("Simple top projection")___		return Graph.fromDataSet(topVertices, newEdges, context)__	};convert,a,bipartite,graph,into,an,undirected,graph,that,contains,only,top,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,a,bottom,vertex,they,are,both,connected,to,p,the,simple,projection,performs,a,single,join,and,returns,edges,containing,the,bipartite,edge,values,p,note,kt,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,simple,top,projection,of,the,bipartite,graph;public,graph,kt,vvt,tuple2,ev,ev,projection,top,simple,data,set,edge,kt,tuple2,ev,ev,new,edges,edges,join,edges,where,1,equal,to,1,with,new,projection,top,simple,name,simple,top,projection,return,graph,from,data,set,top,vertices,new,edges,context
BipartiteGraph -> public static <KT, KB, VVT, VVB, EV> BipartiteGraph<KT, KB, VVT, VVB, EV> fromDataSet( 			DataSet<Vertex<KT, VVT>> topVertices, 			DataSet<Vertex<KB, VVB>> bottomVertices, 			DataSet<BipartiteEdge<KT, KB, EV>> edges, 			ExecutionEnvironment context);1481309930;Create bipartite graph from datasets.__@param topVertices dataset of top vertices in the graph_@param bottomVertices dataset of bottom vertices in the graph_@param edges dataset of edges between vertices_@param context Flink execution context_@return new bipartite graph created from provided datasets;public static <KT, KB, VVT, VVB, EV> BipartiteGraph<KT, KB, VVT, VVB, EV> fromDataSet(_			DataSet<Vertex<KT, VVT>> topVertices,_			DataSet<Vertex<KB, VVB>> bottomVertices,_			DataSet<BipartiteEdge<KT, KB, EV>> edges,_			ExecutionEnvironment context) {_		return new BipartiteGraph<>(topVertices, bottomVertices, edges, context)__	};create,bipartite,graph,from,datasets,param,top,vertices,dataset,of,top,vertices,in,the,graph,param,bottom,vertices,dataset,of,bottom,vertices,in,the,graph,param,edges,dataset,of,edges,between,vertices,param,context,flink,execution,context,return,new,bipartite,graph,created,from,provided,datasets;public,static,kt,kb,vvt,vvb,ev,bipartite,graph,kt,kb,vvt,vvb,ev,from,data,set,data,set,vertex,kt,vvt,top,vertices,data,set,vertex,kb,vvb,bottom,vertices,data,set,bipartite,edge,kt,kb,ev,edges,execution,environment,context,return,new,bipartite,graph,top,vertices,bottom,vertices,edges,context
BipartiteGraph -> public static <KT, KB, VVT, VVB, EV> BipartiteGraph<KT, KB, VVT, VVB, EV> fromDataSet( 			DataSet<Vertex<KT, VVT>> topVertices, 			DataSet<Vertex<KB, VVB>> bottomVertices, 			DataSet<BipartiteEdge<KT, KB, EV>> edges, 			ExecutionEnvironment context);1495819075;Create bipartite graph from datasets.__@param topVertices dataset of top vertices in the graph_@param bottomVertices dataset of bottom vertices in the graph_@param edges dataset of edges between vertices_@param context Flink execution context_@return new bipartite graph created from provided datasets;public static <KT, KB, VVT, VVB, EV> BipartiteGraph<KT, KB, VVT, VVB, EV> fromDataSet(_			DataSet<Vertex<KT, VVT>> topVertices,_			DataSet<Vertex<KB, VVB>> bottomVertices,_			DataSet<BipartiteEdge<KT, KB, EV>> edges,_			ExecutionEnvironment context) {_		return new BipartiteGraph<>(topVertices, bottomVertices, edges, context)__	};create,bipartite,graph,from,datasets,param,top,vertices,dataset,of,top,vertices,in,the,graph,param,bottom,vertices,dataset,of,bottom,vertices,in,the,graph,param,edges,dataset,of,edges,between,vertices,param,context,flink,execution,context,return,new,bipartite,graph,created,from,provided,datasets;public,static,kt,kb,vvt,vvb,ev,bipartite,graph,kt,kb,vvt,vvb,ev,from,data,set,data,set,vertex,kt,vvt,top,vertices,data,set,vertex,kb,vvb,bottom,vertices,data,set,bipartite,edge,kt,kb,ev,edges,execution,environment,context,return,new,bipartite,graph,top,vertices,bottom,vertices,edges,context
BipartiteGraph -> public static <KT, KB, VVT, VVB, EV> BipartiteGraph<KT, KB, VVT, VVB, EV> fromDataSet( 			DataSet<Vertex<KT, VVT>> topVertices, 			DataSet<Vertex<KB, VVB>> bottomVertices, 			DataSet<BipartiteEdge<KT, KB, EV>> edges, 			ExecutionEnvironment context);1502111816;Create bipartite graph from datasets.__@param topVertices dataset of top vertices in the graph_@param bottomVertices dataset of bottom vertices in the graph_@param edges dataset of edges between vertices_@param context Flink execution context_@return new bipartite graph created from provided datasets;public static <KT, KB, VVT, VVB, EV> BipartiteGraph<KT, KB, VVT, VVB, EV> fromDataSet(_			DataSet<Vertex<KT, VVT>> topVertices,_			DataSet<Vertex<KB, VVB>> bottomVertices,_			DataSet<BipartiteEdge<KT, KB, EV>> edges,_			ExecutionEnvironment context) {_		return new BipartiteGraph<>(topVertices, bottomVertices, edges, context)__	};create,bipartite,graph,from,datasets,param,top,vertices,dataset,of,top,vertices,in,the,graph,param,bottom,vertices,dataset,of,bottom,vertices,in,the,graph,param,edges,dataset,of,edges,between,vertices,param,context,flink,execution,context,return,new,bipartite,graph,created,from,provided,datasets;public,static,kt,kb,vvt,vvb,ev,bipartite,graph,kt,kb,vvt,vvb,ev,from,data,set,data,set,vertex,kt,vvt,top,vertices,data,set,vertex,kb,vvb,bottom,vertices,data,set,bipartite,edge,kt,kb,ev,edges,execution,environment,context,return,new,bipartite,graph,top,vertices,bottom,vertices,edges,context
BipartiteGraph -> public static <KT, KB, VVT, VVB, EV> BipartiteGraph<KT, KB, VVT, VVB, EV> fromDataSet( 			DataSet<Vertex<KT, VVT>> topVertices, 			DataSet<Vertex<KB, VVB>> bottomVertices, 			DataSet<BipartiteEdge<KT, KB, EV>> edges, 			ExecutionEnvironment context);1508481109;Create bipartite graph from datasets.__@param topVertices dataset of top vertices in the graph_@param bottomVertices dataset of bottom vertices in the graph_@param edges dataset of edges between vertices_@param context Flink execution context_@return new bipartite graph created from provided datasets;public static <KT, KB, VVT, VVB, EV> BipartiteGraph<KT, KB, VVT, VVB, EV> fromDataSet(_			DataSet<Vertex<KT, VVT>> topVertices,_			DataSet<Vertex<KB, VVB>> bottomVertices,_			DataSet<BipartiteEdge<KT, KB, EV>> edges,_			ExecutionEnvironment context) {_		return new BipartiteGraph<>(topVertices, bottomVertices, edges, context)__	};create,bipartite,graph,from,datasets,param,top,vertices,dataset,of,top,vertices,in,the,graph,param,bottom,vertices,dataset,of,bottom,vertices,in,the,graph,param,edges,dataset,of,edges,between,vertices,param,context,flink,execution,context,return,new,bipartite,graph,created,from,provided,datasets;public,static,kt,kb,vvt,vvb,ev,bipartite,graph,kt,kb,vvt,vvb,ev,from,data,set,data,set,vertex,kt,vvt,top,vertices,data,set,vertex,kb,vvb,bottom,vertices,data,set,bipartite,edge,kt,kb,ev,edges,execution,environment,context,return,new,bipartite,graph,top,vertices,bottom,vertices,edges,context
BipartiteGraph -> public Graph<KB, VVB, Tuple2<EV, EV>> projectionBottomSimple();1481309930;Convert a bipartite graph into an undirected graph that contains only bottom vertices. An edge between two_vertices in the new graph will exist only if the original bipartite graph contains a top vertex they are both_connected to.__The simple projection performs a single join and returns edges containing the bipartite edge values.__Note: KB must override .equals(). This requirement may be removed in a future release.__@return simple bottom projection of the bipartite graph;public Graph<KB, VVB, Tuple2<EV, EV>> projectionBottomSimple() {_		DataSet<Edge<KB, Tuple2<EV, EV>>> newEdges =  edges.join(edges)_			.where(0)_			.equalTo(0)_			.with(new ProjectionBottomSimple<KT, KB, EV>())_			.name("Simple bottom projection")___		return Graph.fromDataSet(bottomVertices, newEdges, context)__	};convert,a,bipartite,graph,into,an,undirected,graph,that,contains,only,bottom,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,a,top,vertex,they,are,both,connected,to,the,simple,projection,performs,a,single,join,and,returns,edges,containing,the,bipartite,edge,values,note,kb,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,simple,bottom,projection,of,the,bipartite,graph;public,graph,kb,vvb,tuple2,ev,ev,projection,bottom,simple,data,set,edge,kb,tuple2,ev,ev,new,edges,edges,join,edges,where,0,equal,to,0,with,new,projection,bottom,simple,kt,kb,ev,name,simple,bottom,projection,return,graph,from,data,set,bottom,vertices,new,edges,context
BipartiteGraph -> public Graph<KB, VVB, Tuple2<EV, EV>> projectionBottomSimple();1495819075;Convert a bipartite graph into an undirected graph that contains only bottom vertices. An edge between two_vertices in the new graph will exist only if the original bipartite graph contains a top vertex they are both_connected to.__<p>The simple projection performs a single join and returns edges containing the bipartite edge values.__<p>Note: KB must override .equals(). This requirement may be removed in a future release.__@return simple bottom projection of the bipartite graph;public Graph<KB, VVB, Tuple2<EV, EV>> projectionBottomSimple() {_		DataSet<Edge<KB, Tuple2<EV, EV>>> newEdges =  edges.join(edges)_			.where(0)_			.equalTo(0)_			.with(new ProjectionBottomSimple<KT, KB, EV>())_			.name("Simple bottom projection")___		return Graph.fromDataSet(bottomVertices, newEdges, context)__	};convert,a,bipartite,graph,into,an,undirected,graph,that,contains,only,bottom,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,a,top,vertex,they,are,both,connected,to,p,the,simple,projection,performs,a,single,join,and,returns,edges,containing,the,bipartite,edge,values,p,note,kb,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,simple,bottom,projection,of,the,bipartite,graph;public,graph,kb,vvb,tuple2,ev,ev,projection,bottom,simple,data,set,edge,kb,tuple2,ev,ev,new,edges,edges,join,edges,where,0,equal,to,0,with,new,projection,bottom,simple,kt,kb,ev,name,simple,bottom,projection,return,graph,from,data,set,bottom,vertices,new,edges,context
BipartiteGraph -> public Graph<KB, VVB, Tuple2<EV, EV>> projectionBottomSimple();1502111816;Convert a bipartite graph into an undirected graph that contains only bottom vertices. An edge between two_vertices in the new graph will exist only if the original bipartite graph contains a top vertex they are both_connected to.__<p>The simple projection performs a single join and returns edges containing the bipartite edge values.__<p>Note: KB must override .equals(). This requirement may be removed in a future release.__@return simple bottom projection of the bipartite graph;public Graph<KB, VVB, Tuple2<EV, EV>> projectionBottomSimple() {_		DataSet<Edge<KB, Tuple2<EV, EV>>> newEdges =  edges.join(edges)_			.where(0)_			.equalTo(0)_			.with(new ProjectionBottomSimple<>())_			.name("Simple bottom projection")___		return Graph.fromDataSet(bottomVertices, newEdges, context)__	};convert,a,bipartite,graph,into,an,undirected,graph,that,contains,only,bottom,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,a,top,vertex,they,are,both,connected,to,p,the,simple,projection,performs,a,single,join,and,returns,edges,containing,the,bipartite,edge,values,p,note,kb,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,simple,bottom,projection,of,the,bipartite,graph;public,graph,kb,vvb,tuple2,ev,ev,projection,bottom,simple,data,set,edge,kb,tuple2,ev,ev,new,edges,edges,join,edges,where,0,equal,to,0,with,new,projection,bottom,simple,name,simple,bottom,projection,return,graph,from,data,set,bottom,vertices,new,edges,context
BipartiteGraph -> public Graph<KB, VVB, Tuple2<EV, EV>> projectionBottomSimple();1508481109;Convert a bipartite graph into an undirected graph that contains only bottom vertices. An edge between two_vertices in the new graph will exist only if the original bipartite graph contains a top vertex they are both_connected to.__<p>The simple projection performs a single join and returns edges containing the bipartite edge values.__<p>Note: KB must override .equals(). This requirement may be removed in a future release.__@return simple bottom projection of the bipartite graph;public Graph<KB, VVB, Tuple2<EV, EV>> projectionBottomSimple() {_		DataSet<Edge<KB, Tuple2<EV, EV>>> newEdges =  edges.join(edges)_			.where(0)_			.equalTo(0)_			.with(new ProjectionBottomSimple<>())_			.name("Simple bottom projection")___		return Graph.fromDataSet(bottomVertices, newEdges, context)__	};convert,a,bipartite,graph,into,an,undirected,graph,that,contains,only,bottom,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,a,top,vertex,they,are,both,connected,to,p,the,simple,projection,performs,a,single,join,and,returns,edges,containing,the,bipartite,edge,values,p,note,kb,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,simple,bottom,projection,of,the,bipartite,graph;public,graph,kb,vvb,tuple2,ev,ev,projection,bottom,simple,data,set,edge,kb,tuple2,ev,ev,new,edges,edges,join,edges,where,0,equal,to,0,with,new,projection,bottom,simple,name,simple,bottom,projection,return,graph,from,data,set,bottom,vertices,new,edges,context
BipartiteGraph -> public DataSet<Vertex<KB, VVB>> getBottomVertices();1481309930;Get dataset with bottom vertices.__@return dataset with bottom vertices;public DataSet<Vertex<KB, VVB>> getBottomVertices() {_		return bottomVertices__	};get,dataset,with,bottom,vertices,return,dataset,with,bottom,vertices;public,data,set,vertex,kb,vvb,get,bottom,vertices,return,bottom,vertices
BipartiteGraph -> public DataSet<Vertex<KB, VVB>> getBottomVertices();1495819075;Get dataset with bottom vertices.__@return dataset with bottom vertices;public DataSet<Vertex<KB, VVB>> getBottomVertices() {_		return bottomVertices__	};get,dataset,with,bottom,vertices,return,dataset,with,bottom,vertices;public,data,set,vertex,kb,vvb,get,bottom,vertices,return,bottom,vertices
BipartiteGraph -> public DataSet<Vertex<KB, VVB>> getBottomVertices();1502111816;Get dataset with bottom vertices.__@return dataset with bottom vertices;public DataSet<Vertex<KB, VVB>> getBottomVertices() {_		return bottomVertices__	};get,dataset,with,bottom,vertices,return,dataset,with,bottom,vertices;public,data,set,vertex,kb,vvb,get,bottom,vertices,return,bottom,vertices
BipartiteGraph -> public DataSet<Vertex<KB, VVB>> getBottomVertices();1508481109;Get dataset with bottom vertices.__@return dataset with bottom vertices;public DataSet<Vertex<KB, VVB>> getBottomVertices() {_		return bottomVertices__	};get,dataset,with,bottom,vertices,return,dataset,with,bottom,vertices;public,data,set,vertex,kb,vvb,get,bottom,vertices,return,bottom,vertices
BipartiteGraph -> public Graph<KB, VVB, Projection<KT, VVT, VVB, EV>> projectionBottomFull();1481309930;Convert a bipartite graph into a graph that contains only bottom vertices. An edge between two vertices in the_new graph will exist only if the original bipartite graph contains at least one top vertex they both connect to.__The full projection performs three joins and returns edges containing the the connecting vertex ID and value,_both bottom vertex values, and both bipartite edge values.__Note: KB must override .equals(). This requirement may be removed in a future release.__@return full bottom projection of the bipartite graph;public Graph<KB, VVB, Projection<KT, VVT, VVB, EV>> projectionBottomFull() {_		DataSet<Tuple5<KT, KB, EV, VVT, VVB>> edgesWithVertices	= joinEdgeWithVertices()___		DataSet<Edge<KB, Projection<KT, VVT, VVB, EV>>> newEdges = edgesWithVertices.join(edgesWithVertices)_			.where(0)_			.equalTo(0)_			.with(new ProjectionBottomFull<KT, KB, EV, VVT, VVB>())_				.name("Full bottom projection")___		return Graph.fromDataSet(bottomVertices, newEdges, context)__	};convert,a,bipartite,graph,into,a,graph,that,contains,only,bottom,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,at,least,one,top,vertex,they,both,connect,to,the,full,projection,performs,three,joins,and,returns,edges,containing,the,the,connecting,vertex,id,and,value,both,bottom,vertex,values,and,both,bipartite,edge,values,note,kb,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,full,bottom,projection,of,the,bipartite,graph;public,graph,kb,vvb,projection,kt,vvt,vvb,ev,projection,bottom,full,data,set,tuple5,kt,kb,ev,vvt,vvb,edges,with,vertices,join,edge,with,vertices,data,set,edge,kb,projection,kt,vvt,vvb,ev,new,edges,edges,with,vertices,join,edges,with,vertices,where,0,equal,to,0,with,new,projection,bottom,full,kt,kb,ev,vvt,vvb,name,full,bottom,projection,return,graph,from,data,set,bottom,vertices,new,edges,context
BipartiteGraph -> public Graph<KB, VVB, Projection<KT, VVT, VVB, EV>> projectionBottomFull();1495819075;Convert a bipartite graph into a graph that contains only bottom vertices. An edge between two vertices in the_new graph will exist only if the original bipartite graph contains at least one top vertex they both connect to.__<p>The full projection performs three joins and returns edges containing the the connecting vertex ID and value,_both bottom vertex values, and both bipartite edge values.__<p>Note: KB must override .equals(). This requirement may be removed in a future release.__@return full bottom projection of the bipartite graph;public Graph<KB, VVB, Projection<KT, VVT, VVB, EV>> projectionBottomFull() {_		DataSet<Tuple5<KT, KB, EV, VVT, VVB>> edgesWithVertices	= joinEdgeWithVertices()___		DataSet<Edge<KB, Projection<KT, VVT, VVB, EV>>> newEdges = edgesWithVertices.join(edgesWithVertices)_			.where(0)_			.equalTo(0)_			.with(new ProjectionBottomFull<KT, KB, EV, VVT, VVB>())_				.name("Full bottom projection")___		return Graph.fromDataSet(bottomVertices, newEdges, context)__	};convert,a,bipartite,graph,into,a,graph,that,contains,only,bottom,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,at,least,one,top,vertex,they,both,connect,to,p,the,full,projection,performs,three,joins,and,returns,edges,containing,the,the,connecting,vertex,id,and,value,both,bottom,vertex,values,and,both,bipartite,edge,values,p,note,kb,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,full,bottom,projection,of,the,bipartite,graph;public,graph,kb,vvb,projection,kt,vvt,vvb,ev,projection,bottom,full,data,set,tuple5,kt,kb,ev,vvt,vvb,edges,with,vertices,join,edge,with,vertices,data,set,edge,kb,projection,kt,vvt,vvb,ev,new,edges,edges,with,vertices,join,edges,with,vertices,where,0,equal,to,0,with,new,projection,bottom,full,kt,kb,ev,vvt,vvb,name,full,bottom,projection,return,graph,from,data,set,bottom,vertices,new,edges,context
BipartiteGraph -> public Graph<KB, VVB, Projection<KT, VVT, VVB, EV>> projectionBottomFull();1502111816;Convert a bipartite graph into a graph that contains only bottom vertices. An edge between two vertices in the_new graph will exist only if the original bipartite graph contains at least one top vertex they both connect to.__<p>The full projection performs three joins and returns edges containing the the connecting vertex ID and value,_both bottom vertex values, and both bipartite edge values.__<p>Note: KB must override .equals(). This requirement may be removed in a future release.__@return full bottom projection of the bipartite graph;public Graph<KB, VVB, Projection<KT, VVT, VVB, EV>> projectionBottomFull() {_		DataSet<Tuple5<KT, KB, EV, VVT, VVB>> edgesWithVertices	= joinEdgeWithVertices()___		DataSet<Edge<KB, Projection<KT, VVT, VVB, EV>>> newEdges = edgesWithVertices.join(edgesWithVertices)_			.where(0)_			.equalTo(0)_			.with(new ProjectionBottomFull<>())_				.name("Full bottom projection")___		return Graph.fromDataSet(bottomVertices, newEdges, context)__	};convert,a,bipartite,graph,into,a,graph,that,contains,only,bottom,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,at,least,one,top,vertex,they,both,connect,to,p,the,full,projection,performs,three,joins,and,returns,edges,containing,the,the,connecting,vertex,id,and,value,both,bottom,vertex,values,and,both,bipartite,edge,values,p,note,kb,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,full,bottom,projection,of,the,bipartite,graph;public,graph,kb,vvb,projection,kt,vvt,vvb,ev,projection,bottom,full,data,set,tuple5,kt,kb,ev,vvt,vvb,edges,with,vertices,join,edge,with,vertices,data,set,edge,kb,projection,kt,vvt,vvb,ev,new,edges,edges,with,vertices,join,edges,with,vertices,where,0,equal,to,0,with,new,projection,bottom,full,name,full,bottom,projection,return,graph,from,data,set,bottom,vertices,new,edges,context
BipartiteGraph -> public Graph<KB, VVB, Projection<KT, VVT, VVB, EV>> projectionBottomFull();1508481109;Convert a bipartite graph into a graph that contains only bottom vertices. An edge between two vertices in the_new graph will exist only if the original bipartite graph contains at least one top vertex they both connect to.__<p>The full projection performs three joins and returns edges containing the connecting vertex ID and value,_both bottom vertex values, and both bipartite edge values.__<p>Note: KB must override .equals(). This requirement may be removed in a future release.__@return full bottom projection of the bipartite graph;public Graph<KB, VVB, Projection<KT, VVT, VVB, EV>> projectionBottomFull() {_		DataSet<Tuple5<KT, KB, EV, VVT, VVB>> edgesWithVertices	= joinEdgeWithVertices()___		DataSet<Edge<KB, Projection<KT, VVT, VVB, EV>>> newEdges = edgesWithVertices.join(edgesWithVertices)_			.where(0)_			.equalTo(0)_			.with(new ProjectionBottomFull<>())_				.name("Full bottom projection")___		return Graph.fromDataSet(bottomVertices, newEdges, context)__	};convert,a,bipartite,graph,into,a,graph,that,contains,only,bottom,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,at,least,one,top,vertex,they,both,connect,to,p,the,full,projection,performs,three,joins,and,returns,edges,containing,the,connecting,vertex,id,and,value,both,bottom,vertex,values,and,both,bipartite,edge,values,p,note,kb,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,full,bottom,projection,of,the,bipartite,graph;public,graph,kb,vvb,projection,kt,vvt,vvb,ev,projection,bottom,full,data,set,tuple5,kt,kb,ev,vvt,vvb,edges,with,vertices,join,edge,with,vertices,data,set,edge,kb,projection,kt,vvt,vvb,ev,new,edges,edges,with,vertices,join,edges,with,vertices,where,0,equal,to,0,with,new,projection,bottom,full,name,full,bottom,projection,return,graph,from,data,set,bottom,vertices,new,edges,context
BipartiteGraph -> public DataSet<Vertex<KT, VVT>> getTopVertices();1481309930;Get dataset with top vertices.__@return dataset with top vertices;public DataSet<Vertex<KT, VVT>> getTopVertices() {_		return topVertices__	};get,dataset,with,top,vertices,return,dataset,with,top,vertices;public,data,set,vertex,kt,vvt,get,top,vertices,return,top,vertices
BipartiteGraph -> public DataSet<Vertex<KT, VVT>> getTopVertices();1495819075;Get dataset with top vertices.__@return dataset with top vertices;public DataSet<Vertex<KT, VVT>> getTopVertices() {_		return topVertices__	};get,dataset,with,top,vertices,return,dataset,with,top,vertices;public,data,set,vertex,kt,vvt,get,top,vertices,return,top,vertices
BipartiteGraph -> public DataSet<Vertex<KT, VVT>> getTopVertices();1502111816;Get dataset with top vertices.__@return dataset with top vertices;public DataSet<Vertex<KT, VVT>> getTopVertices() {_		return topVertices__	};get,dataset,with,top,vertices,return,dataset,with,top,vertices;public,data,set,vertex,kt,vvt,get,top,vertices,return,top,vertices
BipartiteGraph -> public DataSet<Vertex<KT, VVT>> getTopVertices();1508481109;Get dataset with top vertices.__@return dataset with top vertices;public DataSet<Vertex<KT, VVT>> getTopVertices() {_		return topVertices__	};get,dataset,with,top,vertices,return,dataset,with,top,vertices;public,data,set,vertex,kt,vvt,get,top,vertices,return,top,vertices
BipartiteGraph -> public Graph<KT, VVT, Projection<KB, VVB, VVT, EV>> projectionTopFull();1481309930;Convert a bipartite graph into a graph that contains only top vertices. An edge between two vertices in the new_graph will exist only if the original bipartite graph contains at least one bottom vertex they both connect to.__The full projection performs three joins and returns edges containing the the connecting vertex ID and value,_both top vertex values, and both bipartite edge values.__Note: KT must override .equals(). This requirement may be removed in a future release.__@return full top projection of the bipartite graph;public Graph<KT, VVT, Projection<KB, VVB, VVT, EV>> projectionTopFull() {_		DataSet<Tuple5<KT, KB, EV, VVT, VVB>> edgesWithVertices	= joinEdgeWithVertices()___		DataSet<Edge<KT, Projection<KB, VVB, VVT, EV>>> newEdges = edgesWithVertices.join(edgesWithVertices)_			.where(1)_			.equalTo(1)_			.with(new ProjectionTopFull<KT, KB, EV, VVT, VVB>())_				.name("Full top projection")___		return Graph.fromDataSet(topVertices, newEdges, context)__	};convert,a,bipartite,graph,into,a,graph,that,contains,only,top,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,at,least,one,bottom,vertex,they,both,connect,to,the,full,projection,performs,three,joins,and,returns,edges,containing,the,the,connecting,vertex,id,and,value,both,top,vertex,values,and,both,bipartite,edge,values,note,kt,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,full,top,projection,of,the,bipartite,graph;public,graph,kt,vvt,projection,kb,vvb,vvt,ev,projection,top,full,data,set,tuple5,kt,kb,ev,vvt,vvb,edges,with,vertices,join,edge,with,vertices,data,set,edge,kt,projection,kb,vvb,vvt,ev,new,edges,edges,with,vertices,join,edges,with,vertices,where,1,equal,to,1,with,new,projection,top,full,kt,kb,ev,vvt,vvb,name,full,top,projection,return,graph,from,data,set,top,vertices,new,edges,context
BipartiteGraph -> public Graph<KT, VVT, Projection<KB, VVB, VVT, EV>> projectionTopFull();1495819075;Convert a bipartite graph into a graph that contains only top vertices. An edge between two vertices in the new_graph will exist only if the original bipartite graph contains at least one bottom vertex they both connect to.__<p>The full projection performs three joins and returns edges containing the the connecting vertex ID and value,_both top vertex values, and both bipartite edge values.__<p>Note: KT must override .equals(). This requirement may be removed in a future release.__@return full top projection of the bipartite graph;public Graph<KT, VVT, Projection<KB, VVB, VVT, EV>> projectionTopFull() {_		DataSet<Tuple5<KT, KB, EV, VVT, VVB>> edgesWithVertices	= joinEdgeWithVertices()___		DataSet<Edge<KT, Projection<KB, VVB, VVT, EV>>> newEdges = edgesWithVertices.join(edgesWithVertices)_			.where(1)_			.equalTo(1)_			.with(new ProjectionTopFull<KT, KB, EV, VVT, VVB>())_				.name("Full top projection")___		return Graph.fromDataSet(topVertices, newEdges, context)__	};convert,a,bipartite,graph,into,a,graph,that,contains,only,top,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,at,least,one,bottom,vertex,they,both,connect,to,p,the,full,projection,performs,three,joins,and,returns,edges,containing,the,the,connecting,vertex,id,and,value,both,top,vertex,values,and,both,bipartite,edge,values,p,note,kt,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,full,top,projection,of,the,bipartite,graph;public,graph,kt,vvt,projection,kb,vvb,vvt,ev,projection,top,full,data,set,tuple5,kt,kb,ev,vvt,vvb,edges,with,vertices,join,edge,with,vertices,data,set,edge,kt,projection,kb,vvb,vvt,ev,new,edges,edges,with,vertices,join,edges,with,vertices,where,1,equal,to,1,with,new,projection,top,full,kt,kb,ev,vvt,vvb,name,full,top,projection,return,graph,from,data,set,top,vertices,new,edges,context
BipartiteGraph -> public Graph<KT, VVT, Projection<KB, VVB, VVT, EV>> projectionTopFull();1502111816;Convert a bipartite graph into a graph that contains only top vertices. An edge between two vertices in the new_graph will exist only if the original bipartite graph contains at least one bottom vertex they both connect to.__<p>The full projection performs three joins and returns edges containing the the connecting vertex ID and value,_both top vertex values, and both bipartite edge values.__<p>Note: KT must override .equals(). This requirement may be removed in a future release.__@return full top projection of the bipartite graph;public Graph<KT, VVT, Projection<KB, VVB, VVT, EV>> projectionTopFull() {_		DataSet<Tuple5<KT, KB, EV, VVT, VVB>> edgesWithVertices	= joinEdgeWithVertices()___		DataSet<Edge<KT, Projection<KB, VVB, VVT, EV>>> newEdges = edgesWithVertices.join(edgesWithVertices)_			.where(1)_			.equalTo(1)_			.with(new ProjectionTopFull<>())_				.name("Full top projection")___		return Graph.fromDataSet(topVertices, newEdges, context)__	};convert,a,bipartite,graph,into,a,graph,that,contains,only,top,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,at,least,one,bottom,vertex,they,both,connect,to,p,the,full,projection,performs,three,joins,and,returns,edges,containing,the,the,connecting,vertex,id,and,value,both,top,vertex,values,and,both,bipartite,edge,values,p,note,kt,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,full,top,projection,of,the,bipartite,graph;public,graph,kt,vvt,projection,kb,vvb,vvt,ev,projection,top,full,data,set,tuple5,kt,kb,ev,vvt,vvb,edges,with,vertices,join,edge,with,vertices,data,set,edge,kt,projection,kb,vvb,vvt,ev,new,edges,edges,with,vertices,join,edges,with,vertices,where,1,equal,to,1,with,new,projection,top,full,name,full,top,projection,return,graph,from,data,set,top,vertices,new,edges,context
BipartiteGraph -> public Graph<KT, VVT, Projection<KB, VVB, VVT, EV>> projectionTopFull();1508481109;Convert a bipartite graph into a graph that contains only top vertices. An edge between two vertices in the new_graph will exist only if the original bipartite graph contains at least one bottom vertex they both connect to.__<p>The full projection performs three joins and returns edges containing the connecting vertex ID and value,_both top vertex values, and both bipartite edge values.__<p>Note: KT must override .equals(). This requirement may be removed in a future release.__@return full top projection of the bipartite graph;public Graph<KT, VVT, Projection<KB, VVB, VVT, EV>> projectionTopFull() {_		DataSet<Tuple5<KT, KB, EV, VVT, VVB>> edgesWithVertices	= joinEdgeWithVertices()___		DataSet<Edge<KT, Projection<KB, VVB, VVT, EV>>> newEdges = edgesWithVertices.join(edgesWithVertices)_			.where(1)_			.equalTo(1)_			.with(new ProjectionTopFull<>())_				.name("Full top projection")___		return Graph.fromDataSet(topVertices, newEdges, context)__	};convert,a,bipartite,graph,into,a,graph,that,contains,only,top,vertices,an,edge,between,two,vertices,in,the,new,graph,will,exist,only,if,the,original,bipartite,graph,contains,at,least,one,bottom,vertex,they,both,connect,to,p,the,full,projection,performs,three,joins,and,returns,edges,containing,the,connecting,vertex,id,and,value,both,top,vertex,values,and,both,bipartite,edge,values,p,note,kt,must,override,equals,this,requirement,may,be,removed,in,a,future,release,return,full,top,projection,of,the,bipartite,graph;public,graph,kt,vvt,projection,kb,vvb,vvt,ev,projection,top,full,data,set,tuple5,kt,kb,ev,vvt,vvb,edges,with,vertices,join,edge,with,vertices,data,set,edge,kt,projection,kb,vvb,vvt,ev,new,edges,edges,with,vertices,join,edges,with,vertices,where,1,equal,to,1,with,new,projection,top,full,name,full,top,projection,return,graph,from,data,set,top,vertices,new,edges,context
