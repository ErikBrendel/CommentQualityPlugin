commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * By default only the edge set is processed for the computation of degree.  * When this flag is set an additional join is performed against the vertex  * set in order to output vertices with a degree of zero.  *  * @param includeZeroDegreeVertices whether to output vertices with a  *                                  degree of zero  * @return this  */ ;/**  * By default only the edge set is processed for the computation of degree.  * When this flag is set an additional join is performed against the vertex  * set in order to output vertices with a degree of zero.  *  * @param includeZeroDegreeVertices whether to output vertices with a  *                                  degree of zero  * @return this  */ public VertexDegree<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {     this.includeZeroDegreeVertices.set(includeZeroDegreeVertices).     return this. }
true;public;1;5;/**  * The degree can be counted from either the edge source or target IDs.  * By default the source IDs are counted. Reducing on target IDs may  * optimize the algorithm if the input edge list is sorted by target ID.  *  * @param reduceOnTargetId set to {@code true} if the input edge list  *                         is sorted by target ID  * @return this  */ ;/**  * The degree can be counted from either the edge source or target IDs.  * By default the source IDs are counted. Reducing on target IDs may  * optimize the algorithm if the input edge list is sorted by target ID.  *  * @param reduceOnTargetId set to {@code true} if the input edge list  *                         is sorted by target ID  * @return this  */ public VertexDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {     this.reduceOnTargetId.set(reduceOnTargetId).     return this. }
false;protected;1;10;;@Override protected boolean canMergeConfigurationWith(GraphAlgorithmWrappingBase other) {     if (!super.canMergeConfigurationWith(other)) {         return false.     }     VertexDegree rhs = (VertexDegree) other.     return !includeZeroDegreeVertices.conflictsWith(rhs.includeZeroDegreeVertices). }
false;protected;1;9;;@Override protected void mergeConfiguration(GraphAlgorithmWrappingBase other) {     super.mergeConfiguration(other).     VertexDegree rhs = (VertexDegree) other.     includeZeroDegreeVertices.mergeWith(rhs.includeZeroDegreeVertices).     reduceOnTargetId.mergeWith(rhs.reduceOnTargetId). }
false;public;1;34;;@Override public DataSet<Vertex<K, LongValue>> runInternal(Graph<K, VV, EV> input) throws Exception {     MapFunction<Edge<K, EV>, Vertex<K, LongValue>> mapEdgeToId = reduceOnTargetId.get() ? new MapEdgeToTargetId<>() : new MapEdgeToSourceId<>().     // v     DataSet<Vertex<K, LongValue>> vertexIds = input.getEdges().map(mapEdgeToId).setParallelism(parallelism).name("Edge to vertex ID").     // v, deg(v)     DataSet<Vertex<K, LongValue>> degree = vertexIds.groupBy(0).reduce(new DegreeCount<>()).setCombineHint(CombineHint.HASH).setParallelism(parallelism).name("Degree count").     if (includeZeroDegreeVertices.get()) {         degree = input.getVertices().leftOuterJoin(degree).where(0).equalTo(0).with(new JoinVertexWithVertexDegree<>()).setParallelism(parallelism).name("Zero degree vertices").     }     return degree. }
