commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public FloatValueArray createInstance() {     return new FloatValueArray(). }
false;public;1;4;;@Override public FloatValueArray copy(FloatValueArray from) {     return copy(from, new FloatValueArray()). }
false;public;2;5;;@Override public FloatValueArray copy(FloatValueArray from, FloatValueArray reuse) {     reuse.setValue(from).     return reuse. }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;4;;@Override public void serialize(FloatValueArray record, DataOutputView target) throws IOException {     record.write(target). }
false;public;1;4;;@Override public FloatValueArray deserialize(DataInputView source) throws IOException {     return deserialize(new FloatValueArray(), source). }
false;public;2;5;;@Override public FloatValueArray deserialize(FloatValueArray reuse, DataInputView source) throws IOException {     reuse.read(source).     return reuse. }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     FloatValueArray.copyInternal(source, target). }
false;public;0;4;;// ----------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<FloatValueArray> snapshotConfiguration() {     return new FloatValueArraySerializerSnapshot(). }
