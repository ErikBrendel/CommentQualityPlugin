commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * This method is called per vertex and can iterate over all of its neighbors  * with the specified direction.  *  * <p>If called with {@link EdgeDirection#OUT} the group will contain  * the out-edges and neighboring vertices of the grouping vertex.  * If called with {@link EdgeDirection#IN} the group will contain  * the in-edges and neighboring vertices of the grouping vertex.  * If called with {@link EdgeDirection#ALL} the group will contain  * all edges and neighboring vertices of the grouping vertex.  *  * <p>The method can emit any number of output elements, including none.  *  * @param neighbors the neighbors of the grouping vertex.  * The first filed of each Tuple3 is the ID of the grouping vertex.  * The second field is the neighboring edge, and the third field is the neighboring vertex.  * @param out the collector to emit results to  * @throws Exception  */ ;/**  * This method is called per vertex and can iterate over all of its neighbors  * with the specified direction.  *  * <p>If called with {@link EdgeDirection#OUT} the group will contain  * the out-edges and neighboring vertices of the grouping vertex.  * If called with {@link EdgeDirection#IN} the group will contain  * the in-edges and neighboring vertices of the grouping vertex.  * If called with {@link EdgeDirection#ALL} the group will contain  * all edges and neighboring vertices of the grouping vertex.  *  * <p>The method can emit any number of output elements, including none.  *  * @param neighbors the neighbors of the grouping vertex.  * The first filed of each Tuple3 is the ID of the grouping vertex.  * The second field is the neighboring edge, and the third field is the neighboring vertex.  * @param out the collector to emit results to  * @throws Exception  */ void iterateNeighbors(Iterable<Tuple3<K, Edge<K, EV>, Vertex<K, VV>>> neighbors, Collector<O> out) throws Exception.
