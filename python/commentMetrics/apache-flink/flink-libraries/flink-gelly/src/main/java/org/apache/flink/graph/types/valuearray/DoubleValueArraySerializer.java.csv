commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public DoubleValueArray createInstance() {     return new DoubleValueArray(). }
false;public;1;4;;@Override public DoubleValueArray copy(DoubleValueArray from) {     return copy(from, new DoubleValueArray()). }
false;public;2;5;;@Override public DoubleValueArray copy(DoubleValueArray from, DoubleValueArray reuse) {     reuse.setValue(from).     return reuse. }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;4;;@Override public void serialize(DoubleValueArray record, DataOutputView target) throws IOException {     record.write(target). }
false;public;1;4;;@Override public DoubleValueArray deserialize(DataInputView source) throws IOException {     return deserialize(new DoubleValueArray(), source). }
false;public;2;5;;@Override public DoubleValueArray deserialize(DoubleValueArray reuse, DataInputView source) throws IOException {     reuse.read(source).     return reuse. }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     DoubleValueArray.copyInternal(source, target). }
false;public;0;4;;// ----------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<DoubleValueArray> snapshotConfiguration() {     return new DoubleValueArraySerializerSnapshot(). }
