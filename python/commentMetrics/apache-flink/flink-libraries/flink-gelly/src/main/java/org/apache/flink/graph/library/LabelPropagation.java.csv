commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public DataSet<Vertex<K, VV>> run(Graph<K, VV, EV> input) {     TypeInformation<VV> valueType = ((TupleTypeInfo<?>) input.getVertices().getType()).getTypeAt(1).     // iteratively adopt the most frequent label among the neighbors of each vertex     return input.mapEdges(new MapTo<>(NullValue.getInstance())).runScatterGatherIteration(new SendNewLabelToNeighbors<>(valueType), new UpdateVertexLabel<>(), maxIterations).getVertices(). }
false;public;1;3;;public void sendMessages(Vertex<K, VV> vertex) {     sendMessageToAllNeighbors(vertex.getValue()). }
false;public;0;4;;@Override public TypeInformation<VV> getProducedType() {     return typeInformation. }
false;public;2;30;;public void updateVertex(Vertex<K, VV> vertex, MessageIterator<VV> inMessages) {     Map<VV, Long> labelsWithFrequencies = new HashMap<>().     long maxFrequency = 1.     VV mostFrequentLabel = vertex.getValue().     // store the labels with their frequencies     for (VV msg : inMessages) {         if (labelsWithFrequencies.containsKey(msg)) {             long currentFreq = labelsWithFrequencies.get(msg).             labelsWithFrequencies.put(msg, currentFreq + 1).         } else {             labelsWithFrequencies.put(msg, 1L).         }     }     // same frequency, the node adopts the label with the highest value     for (Entry<VV, Long> entry : labelsWithFrequencies.entrySet()) {         if (entry.getValue() == maxFrequency) {             // check the label value to break ties             if (entry.getKey().compareTo(mostFrequentLabel) > 0) {                 mostFrequentLabel = entry.getKey().             }         } else if (entry.getValue() > maxFrequency) {             maxFrequency = entry.getValue().             mostFrequentLabel = entry.getKey().         }     }     setNewVertexValue(mostFrequentLabel). }
