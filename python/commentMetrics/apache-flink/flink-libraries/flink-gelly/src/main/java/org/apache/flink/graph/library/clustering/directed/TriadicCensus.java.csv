commented;modifiers;parameterAmount;loc;comment;code
false;public;1;23;;@Override public TriadicCensus<K, VV, EV> run(Graph<K, VV, EV> input) throws Exception {     super.run(input).     triangleListingHelper = new TriangleListingHelper<>().     input.run(new TriangleListing<K, VV, EV>().setParallelism(parallelism)).output(triangleListingHelper).name("Triangle counts").     vertexDegreesHelper = new VertexDegreesHelper<>().     input.run(new VertexDegrees<K, VV, EV>().setParallelism(parallelism)).output(vertexDegreesHelper).name("Edge and triplet counts").     return this. }
false;public;0;104;;@Override public Result getResult() {     BigInteger one = BigInteger.ONE.     BigInteger two = BigInteger.valueOf(2).     BigInteger three = BigInteger.valueOf(3).     BigInteger six = BigInteger.valueOf(6).     BigInteger vertexCount = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "vc")).     BigInteger unidirectionalEdgeCount = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "uec") / 2).     BigInteger bidirectionalEdgeCount = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "bec") / 2).     BigInteger triplet021dCount = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "021d")).     BigInteger triplet021uCount = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "021u")).     BigInteger triplet021cCount = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "021c")).     BigInteger triplet111dCount = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "111d")).     BigInteger triplet111uCount = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "111u")).     BigInteger triplet201Count = BigInteger.valueOf(vertexDegreesHelper.<Long>getAccumulator(env, "201")).     // triads with three connecting edges = closed triplet = triangle     BigInteger triangle030tCount = BigInteger.valueOf(triangleListingHelper.<Long>getAccumulator(env, "030t")).     BigInteger triangle030cCount = BigInteger.valueOf(triangleListingHelper.<Long>getAccumulator(env, "030c")).     BigInteger triangle120dCount = BigInteger.valueOf(triangleListingHelper.<Long>getAccumulator(env, "120d")).     BigInteger triangle120uCount = BigInteger.valueOf(triangleListingHelper.<Long>getAccumulator(env, "120u")).     BigInteger triangle120cCount = BigInteger.valueOf(triangleListingHelper.<Long>getAccumulator(env, "120c")).     BigInteger triangle210Count = BigInteger.valueOf(triangleListingHelper.<Long>getAccumulator(env, "210")).     BigInteger triangle300Count = BigInteger.valueOf(triangleListingHelper.<Long>getAccumulator(env, "300")).     // triads with two connecting edges = open triplet.     // each triangle deducts the count of three triplets     triplet201Count = triplet201Count.subtract(triangle300Count.multiply(three)).     triplet201Count = triplet201Count.subtract(triangle210Count).     triplet111dCount = triplet111dCount.subtract(triangle210Count).     triplet111uCount = triplet111uCount.subtract(triangle210Count).     triplet111dCount = triplet111dCount.subtract(triangle120cCount).     triplet111uCount = triplet111uCount.subtract(triangle120cCount).     triplet021cCount = triplet021cCount.subtract(triangle120cCount).     triplet111uCount = triplet111uCount.subtract(triangle120uCount.multiply(two)).     triplet021uCount = triplet021uCount.subtract(triangle120uCount).     triplet111dCount = triplet111dCount.subtract(triangle120dCount.multiply(two)).     triplet021dCount = triplet021dCount.subtract(triangle120dCount).     triplet021cCount = triplet021cCount.subtract(triangle030cCount.multiply(three)).     triplet021cCount = triplet021cCount.subtract(triangle030tCount).     triplet021uCount = triplet021uCount.subtract(triangle030tCount).     triplet021dCount = triplet021dCount.subtract(triangle030tCount).     // triads with one connecting edge. each edge pairs with `vertex count - 2` vertices.     // each triangle deducts from three and each open triplet from two edges     BigInteger edge102 = bidirectionalEdgeCount.multiply(vertexCount.subtract(two)).subtract(triplet111dCount).subtract(triplet111uCount).subtract(triplet201Count.multiply(two)).subtract(triangle120dCount).subtract(triangle120uCount).subtract(triangle120cCount).subtract(triangle210Count.multiply(two)).subtract(triangle300Count.multiply(three)).     BigInteger edge012 = unidirectionalEdgeCount.multiply(vertexCount.subtract(two)).subtract(triplet021dCount.multiply(two)).subtract(triplet021uCount.multiply(two)).subtract(triplet021cCount.multiply(two)).subtract(triplet111dCount).subtract(triplet111uCount).subtract(triangle030tCount.multiply(three)).subtract(triangle030cCount.multiply(three)).subtract(triangle120dCount.multiply(two)).subtract(triangle120uCount.multiply(two)).subtract(triangle120cCount.multiply(two)).subtract(triangle210Count).     // triads with zero connecting edges.     // (vertex count choose 3) minus earlier counts     BigInteger triad003 = vertexCount.multiply(vertexCount.subtract(one)).multiply(vertexCount.subtract(two)).divide(six).subtract(edge012).subtract(edge102).subtract(triplet021dCount).subtract(triplet021uCount).subtract(triplet021cCount).subtract(triplet111dCount).subtract(triplet111uCount).subtract(triangle030tCount).subtract(triangle030cCount).subtract(triplet201Count).subtract(triangle120dCount).subtract(triangle120uCount).subtract(triangle120cCount).subtract(triangle210Count).subtract(triangle300Count).     return new Result(triad003, edge012, edge102, triplet021dCount, triplet021uCount, triplet021cCount, triplet111dCount, triplet111uCount, triangle030tCount, triangle030cCount, triplet201Count, triangle120dCount, triangle120uCount, triangle120cCount, triangle210Count, triangle300Count). }
false;public;1;4;;@Override public void writeRecord(TriangleListing.Result<T> record) throws IOException {     triangleCount[record.getBitmask().getValue()]++. }
false;public;0;51;;@Override public void close() throws IOException {     // see table from Batagelj and Mrvar, "A subquadratic triad census algorithm for large     // sparse networks with small maximum degree" (this Flink algorithm does not use their     // algorithm as we do not assume a small maximum degree)     int[] typeTable = new int[] { 1, 2, 2, 3, 2, 4, 6, 8, 2, 6, 5, 7, 3, 8, 7, 11, 2, 6, 4, 8, 5, 9, 9, 13, 6, 10, 9, 14, 7, 14, 12, 15, 2, 5, 6, 7, 6, 9, 10, 14, 4, 9, 9, 12, 8, 13, 14, 15, 3, 7, 8, 11, 7, 12, 14, 15, 8, 14, 13, 15, 11, 15, 15, 16 }.     long triangle030tCount = 0.     long triangle030cCount = 0.     long triangle120dCount = 0.     long triangle120uCount = 0.     long triangle120cCount = 0.     long triangle210Count = 0.     long triangle300tCount = 0.     for (int i = 0. i < typeTable.length. i++) {         if (typeTable[i] == 9) {             triangle030tCount += triangleCount[i].         } else if (typeTable[i] == 10) {             triangle030cCount += triangleCount[i].         } else if (typeTable[i] == 12) {             triangle120dCount += triangleCount[i].         } else if (typeTable[i] == 13) {             triangle120uCount += triangleCount[i].         } else if (typeTable[i] == 14) {             triangle120cCount += triangleCount[i].         } else if (typeTable[i] == 15) {             triangle210Count += triangleCount[i].         } else if (typeTable[i] == 16) {             triangle300tCount += triangleCount[i].         } else {             assert triangleCount[i] == 0.         }     }     addAccumulator("030t", new LongCounter(triangle030tCount)).     addAccumulator("030c", new LongCounter(triangle030cCount)).     addAccumulator("120d", new LongCounter(triangle120dCount)).     addAccumulator("120u", new LongCounter(triangle120uCount)).     addAccumulator("120c", new LongCounter(triangle120cCount)).     addAccumulator("210", new LongCounter(triangle210Count)).     addAccumulator("300", new LongCounter(triangle300tCount)). }
false;public;1;21;;@Override public void writeRecord(Vertex<T, Degrees> record) throws IOException {     long degree = record.f1.getDegree().getValue().     long outDegree = record.f1.getOutDegree().getValue().     long inDegree = record.f1.getInDegree().getValue().     long unidirectionalEdgesAsSource = degree - inDegree.     long unidirectionalEdgesAsTarget = degree - outDegree.     long bidirectionalEdges = inDegree + outDegree - degree.     vertexCount++.     unidirectionalEdgeCount += unidirectionalEdgesAsSource + unidirectionalEdgesAsTarget.     bidirectionalEdgeCount += bidirectionalEdges.     triplet021dCount += unidirectionalEdgesAsSource * (unidirectionalEdgesAsSource - 1) / 2.     triplet021uCount += unidirectionalEdgesAsTarget * (unidirectionalEdgesAsTarget - 1) / 2.     triplet021cCount += unidirectionalEdgesAsSource * unidirectionalEdgesAsTarget.     triplet111dCount += unidirectionalEdgesAsTarget * bidirectionalEdges.     triplet111uCount += unidirectionalEdgesAsSource * bidirectionalEdges.     triplet201Count += bidirectionalEdges * (bidirectionalEdges - 1) / 2. }
false;public;0;12;;@Override public void close() throws IOException {     addAccumulator("vc", new LongCounter(vertexCount)).     addAccumulator("uec", new LongCounter(unidirectionalEdgeCount)).     addAccumulator("bec", new LongCounter(bidirectionalEdgeCount)).     addAccumulator("021d", new LongCounter(triplet021dCount)).     addAccumulator("021u", new LongCounter(triplet021uCount)).     addAccumulator("021c", new LongCounter(triplet021cCount)).     addAccumulator("111d", new LongCounter(triplet111dCount)).     addAccumulator("111u", new LongCounter(triplet111uCount)).     addAccumulator("201", new LongCounter(triplet201Count)). }
true;public;0;3;/**  * Get the count of "003" triads which have zero connecting vertices.  *  * @return count of "003" triads  */ ;/**  * Get the count of "003" triads which have zero connecting vertices.  *  * @return count of "003" triads  */ public BigInteger getCount003() {     return counts[0]. }
true;public;0;3;/**  * Get the count of "012" triads which have one unidirectional edge among the vertices.  *  * @return count of "012" triads  */ ;/**  * Get the count of "012" triads which have one unidirectional edge among the vertices.  *  * @return count of "012" triads  */ public BigInteger getCount012() {     return counts[1]. }
true;public;0;3;/**  * Get the count of "102" triads which have one bidirectional edge among the vertices.  *  * @return count of "102" triads  */ ;/**  * Get the count of "102" triads which have one bidirectional edge among the vertices.  *  * @return count of "102" triads  */ public BigInteger getCount102() {     return counts[2]. }
true;public;0;3;/**  * Get the count of "021d" triads which have two unidirectional edges among the vertices,  * forming an open triplet. both edges source the center vertex.  *  * @return count of "021d" triads  */ ;/**  * Get the count of "021d" triads which have two unidirectional edges among the vertices,  * forming an open triplet. both edges source the center vertex.  *  * @return count of "021d" triads  */ public BigInteger getCount021d() {     return counts[3]. }
true;public;0;3;/**  * Get the count of "021u" triads which have two unidirectional edges among the vertices,  * forming an open triplet. both edges target the center vertex.  *  * @return count of "021u" triads  */ ;/**  * Get the count of "021u" triads which have two unidirectional edges among the vertices,  * forming an open triplet. both edges target the center vertex.  *  * @return count of "021u" triads  */ public BigInteger getCount021u() {     return counts[4]. }
true;public;0;3;/**  * Get the count of "021c" triads which have two unidirectional edges among the vertices,  * forming an open triplet. one edge sources and one edge targets the center vertex.  *  * @return count of "021c" triads  */ ;/**  * Get the count of "021c" triads which have two unidirectional edges among the vertices,  * forming an open triplet. one edge sources and one edge targets the center vertex.  *  * @return count of "021c" triads  */ public BigInteger getCount021c() {     return counts[5]. }
true;public;0;3;/**  * Get the count of "111d" triads which have one unidirectional and one bidirectional edge  * among the vertices, forming an open triplet. the unidirectional edge targets the center vertex.  *  * @return count of "111d" triads  */ ;/**  * Get the count of "111d" triads which have one unidirectional and one bidirectional edge  * among the vertices, forming an open triplet. the unidirectional edge targets the center vertex.  *  * @return count of "111d" triads  */ public BigInteger getCount111d() {     return counts[6]. }
true;public;0;3;/**  * Get the count of "111u" triads which have one unidirectional and one bidirectional edge  * among the vertices, forming an open triplet. the unidirectional edge sources the center vertex.  *  * @return count of "111u" triads  */ ;/**  * Get the count of "111u" triads which have one unidirectional and one bidirectional edge  * among the vertices, forming an open triplet. the unidirectional edge sources the center vertex.  *  * @return count of "111u" triads  */ public BigInteger getCount111u() {     return counts[7]. }
true;public;0;3;/**  * Get the count of "030t" triads which have three unidirectional edges among the vertices,  * forming a closed triplet, a triangle. two of the unidirectional edges source/target the  * same vertex.  *  * @return count of "030t" triads  */ ;/**  * Get the count of "030t" triads which have three unidirectional edges among the vertices,  * forming a closed triplet, a triangle. two of the unidirectional edges source/target the  * same vertex.  *  * @return count of "030t" triads  */ public BigInteger getCount030t() {     return counts[8]. }
true;public;0;3;/**  * Get the count of "030c" triads which have three unidirectional edges among the vertices,  * forming a closed triplet, a triangle. the three unidirectional edges both source and target  * different vertices.  *  * @return count of "030c" triads  */ ;/**  * Get the count of "030c" triads which have three unidirectional edges among the vertices,  * forming a closed triplet, a triangle. the three unidirectional edges both source and target  * different vertices.  *  * @return count of "030c" triads  */ public BigInteger getCount030c() {     return counts[9]. }
true;public;0;3;/**  * Get the count of "201" triads which have two unidirectional edges among the vertices,  * forming an open triplet.  *  * @return count of "201" triads  */ ;/**  * Get the count of "201" triads which have two unidirectional edges among the vertices,  * forming an open triplet.  *  * @return count of "201" triads  */ public BigInteger getCount201() {     return counts[10]. }
true;public;0;3;/**  * Get the count of "120d" triads which have two unidirectional edges and one bidirectional edge  * among the vertices, forming a closed triplet, a triangle. both unidirectional edges source  * the same vertex.  *  * @return count of "120d" triads  */ ;/**  * Get the count of "120d" triads which have two unidirectional edges and one bidirectional edge  * among the vertices, forming a closed triplet, a triangle. both unidirectional edges source  * the same vertex.  *  * @return count of "120d" triads  */ public BigInteger getCount120d() {     return counts[11]. }
true;public;0;3;/**  * Get the count of "120u" triads which have two unidirectional and one bidirectional edges  * among the vertices, forming a closed triplet, a triangle. both unidirectional edges target  * the same vertex.  *  * @return count of "120u" triads  */ ;/**  * Get the count of "120u" triads which have two unidirectional and one bidirectional edges  * among the vertices, forming a closed triplet, a triangle. both unidirectional edges target  * the same vertex.  *  * @return count of "120u" triads  */ public BigInteger getCount120u() {     return counts[12]. }
true;public;0;3;/**  * Get the count of "120c" triads which have two unidirectional edges and one bidirectional edge  * among the vertices, forming a closed triplet, a triangle. one vertex is sourced by and targeted  * by the unidirectional edges.  *  * @return count of "120c" triads  */ ;/**  * Get the count of "120c" triads which have two unidirectional edges and one bidirectional edge  * among the vertices, forming a closed triplet, a triangle. one vertex is sourced by and targeted  * by the unidirectional edges.  *  * @return count of "120c" triads  */ public BigInteger getCount120c() {     return counts[13]. }
true;public;0;3;/**  * Get the count of "210" triads which have one unidirectional edge and two bidirectional edges  * among the vertices, forming a closed triplet, a triangle.  *  * @return count of "210" triads  */ ;/**  * Get the count of "210" triads which have one unidirectional edge and two bidirectional edges  * among the vertices, forming a closed triplet, a triangle.  *  * @return count of "210" triads  */ public BigInteger getCount210() {     return counts[14]. }
true;public;0;3;/**  * Get the count of "300" triads which have three bidirectional edges among the vertices,  * forming a closed triplet, a triangle.  *  * @return count of "300" triads  */ ;/**  * Get the count of "300" triads which have three bidirectional edges among the vertices,  * forming a closed triplet, a triangle.  *  * @return count of "300" triads  */ public BigInteger getCount300() {     return counts[15]. }
true;public;0;3;/**  * Get the array of counts.  *  * <p>The order of the counts is from least to most connected:  *   003, 012, 102, 021d, 021u, 021c, 111d, 111u,  *   030t, 030c, 201, 120d, 120u, 120c, 210, 300  *  * @return array of counts  */ ;/**  * Get the array of counts.  *  * <p>The order of the counts is from least to most connected:  *   003, 012, 102, 021d, 021u, 021c, 111d, 111u,  *   030t, 030c, 201, 120d, 120u, 120c, 210, 300  *  * @return array of counts  */ public BigInteger[] getCounts() {     return counts. }
false;public;0;4;;@Override public String toString() {     return toPrintableString(). }
false;public;0;21;;@Override public String toPrintableString() {     NumberFormat nf = NumberFormat.getInstance().     return "003: " + nf.format(getCount003()) + ". 012: " + nf.format(getCount012()) + ". 102: " + nf.format(getCount102()) + ". 021d: " + nf.format(getCount021d()) + ". 021u: " + nf.format(getCount021u()) + ". 021c: " + nf.format(getCount021c()) + ". 111d: " + nf.format(getCount111d()) + ". 111u: " + nf.format(getCount111u()) + ". 030t: " + nf.format(getCount030t()) + ". 030c: " + nf.format(getCount030c()) + ". 201: " + nf.format(getCount201()) + ". 120d: " + nf.format(getCount120d()) + ". 120u: " + nf.format(getCount120u()) + ". 120c: " + nf.format(getCount120c()) + ". 210: " + nf.format(getCount210()) + ". 300: " + nf.format(getCount300()). }
false;public;0;6;;@Override public int hashCode() {     return new HashCodeBuilder().append(counts).hashCode(). }
false;public;1;20;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (obj.getClass() != getClass()) {         return false.     }     Result rhs = (Result) obj.     return new EqualsBuilder().append(counts, rhs.counts).isEquals(). }
