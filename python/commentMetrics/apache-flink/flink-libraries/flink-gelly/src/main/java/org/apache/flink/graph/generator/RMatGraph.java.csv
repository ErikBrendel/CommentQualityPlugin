# id;timestamp;commentText;codeText;commentWords;codeWords
RMatGraph -> public RMatGraph<T> setConstants(float A, float B, float C);1460571929;The parameters for recursively subdividing the adjacency matrix.__Setting A = B = C = 0.25 emulates the Erdős–Rényi model.__Graph500 uses A = 0.57, B = C = 0.19.__@param A likelihood of source bit = 0, target bit = 0_@param B likelihood of source bit = 0, target bit = 1_@param C likelihood of source bit = 1, target bit = 0_@return this;public RMatGraph<T> setConstants(float A, float B, float C) {_		if (A < 0.0f || B < 0.0f || C < 0.0f || A + B + C > 1.0f) {_			throw new RuntimeException("RMat parameters A, B, and C must be non-negative and sum to less than or equal to one")__		}__		this.A = A__		this.B = B__		this.C = C___		return this__	};the,parameters,for,recursively,subdividing,the,adjacency,matrix,setting,a,b,c,0,25,emulates,the,model,graph500,uses,a,0,57,b,c,0,19,param,a,likelihood,of,source,bit,0,target,bit,0,param,b,likelihood,of,source,bit,0,target,bit,1,param,c,likelihood,of,source,bit,1,target,bit,0,return,this;public,rmat,graph,t,set,constants,float,a,float,b,float,c,if,a,0,0f,b,0,0f,c,0,0f,a,b,c,1,0f,throw,new,runtime,exception,rmat,parameters,a,b,and,c,must,be,non,negative,and,sum,to,less,than,or,equal,to,one,this,a,a,this,b,b,this,c,c,return,this
RMatGraph -> public RMatGraph<T> setConstants(float A, float B, float C);1465304606;The parameters for recursively subdividing the adjacency matrix.__Setting A = B = C = 0.25 emulates the Erdős–Rényi model.__Graph500 uses A = 0.57, B = C = 0.19.__@param A likelihood of source bit = 0, target bit = 0_@param B likelihood of source bit = 0, target bit = 1_@param C likelihood of source bit = 1, target bit = 0_@return this;public RMatGraph<T> setConstants(float A, float B, float C) {_		if (A < 0.0f || B < 0.0f || C < 0.0f || A + B + C > 1.0f) {_			throw new RuntimeException("RMat parameters A, B, and C must be non-negative and sum to less than or equal to one")__		}__		this.A = A__		this.B = B__		this.C = C___		return this__	};the,parameters,for,recursively,subdividing,the,adjacency,matrix,setting,a,b,c,0,25,emulates,the,model,graph500,uses,a,0,57,b,c,0,19,param,a,likelihood,of,source,bit,0,target,bit,0,param,b,likelihood,of,source,bit,0,target,bit,1,param,c,likelihood,of,source,bit,1,target,bit,0,return,this;public,rmat,graph,t,set,constants,float,a,float,b,float,c,if,a,0,0f,b,0,0f,c,0,0f,a,b,c,1,0f,throw,new,runtime,exception,rmat,parameters,a,b,and,c,must,be,non,negative,and,sum,to,less,than,or,equal,to,one,this,a,a,this,b,b,this,c,c,return,this
RMatGraph -> public RMatGraph<T> setConstants(float A, float B, float C);1484685504;The parameters for recursively subdividing the adjacency matrix.__Setting A = B = C = 0.25 emulates the Erdős–Rényi model.__Graph500 uses A = 0.57, B = C = 0.19.__@param A likelihood of source bit = 0, target bit = 0_@param B likelihood of source bit = 0, target bit = 1_@param C likelihood of source bit = 1, target bit = 0_@return this;public RMatGraph<T> setConstants(float A, float B, float C) {_		if (A < 0.0f || B < 0.0f || C < 0.0f || A + B + C > 1.0f) {_			throw new RuntimeException("RMat parameters A, B, and C must be non-negative and sum to less than or equal to one")__		}__		this.A = A__		this.B = B__		this.C = C___		return this__	};the,parameters,for,recursively,subdividing,the,adjacency,matrix,setting,a,b,c,0,25,emulates,the,model,graph500,uses,a,0,57,b,c,0,19,param,a,likelihood,of,source,bit,0,target,bit,0,param,b,likelihood,of,source,bit,0,target,bit,1,param,c,likelihood,of,source,bit,1,target,bit,0,return,this;public,rmat,graph,t,set,constants,float,a,float,b,float,c,if,a,0,0f,b,0,0f,c,0,0f,a,b,c,1,0f,throw,new,runtime,exception,rmat,parameters,a,b,and,c,must,be,non,negative,and,sum,to,less,than,or,equal,to,one,this,a,a,this,b,b,this,c,c,return,this
RMatGraph -> public RMatGraph<T> setConstants(float A, float B, float C);1489068942;The parameters for recursively subdividing the adjacency matrix.__Setting A = B = C = 0.25 emulates the Erdős–Rényi model.__Graph500 uses A = 0.57, B = C = 0.19.__@param A likelihood of source bit = 0, target bit = 0_@param B likelihood of source bit = 0, target bit = 1_@param C likelihood of source bit = 1, target bit = 0_@return this;public RMatGraph<T> setConstants(float A, float B, float C) {_		Preconditions.checkArgument(A >= 0.0f && B >= 0.0f && C >= 0.0f && A + B + C <= 1.0f,_			"RMat parameters A, B, and C must be non-negative and sum to less than or equal to one")___		this.A = A__		this.B = B__		this.C = C___		return this__	};the,parameters,for,recursively,subdividing,the,adjacency,matrix,setting,a,b,c,0,25,emulates,the,model,graph500,uses,a,0,57,b,c,0,19,param,a,likelihood,of,source,bit,0,target,bit,0,param,b,likelihood,of,source,bit,0,target,bit,1,param,c,likelihood,of,source,bit,1,target,bit,0,return,this;public,rmat,graph,t,set,constants,float,a,float,b,float,c,preconditions,check,argument,a,0,0f,b,0,0f,c,0,0f,a,b,c,1,0f,rmat,parameters,a,b,and,c,must,be,non,negative,and,sum,to,less,than,or,equal,to,one,this,a,a,this,b,b,this,c,c,return,this
RMatGraph -> public RMatGraph<T> setConstants(float A, float B, float C);1493649310;The parameters for recursively subdividing the adjacency matrix.__Setting A = B = C = 0.25 emulates the Erdős–Rényi model.__Graph500 uses A = 0.57, B = C = 0.19.__@param A likelihood of source bit = 0, target bit = 0_@param B likelihood of source bit = 0, target bit = 1_@param C likelihood of source bit = 1, target bit = 0_@return this;public RMatGraph<T> setConstants(float A, float B, float C) {_		Preconditions.checkArgument(A >= 0.0f && B >= 0.0f && C >= 0.0f && A + B + C <= 1.0f,_			"RMat parameters A, B, and C must be non-negative and sum to less than or equal to one")___		this.A = A__		this.B = B__		this.C = C___		return this__	};the,parameters,for,recursively,subdividing,the,adjacency,matrix,setting,a,b,c,0,25,emulates,the,model,graph500,uses,a,0,57,b,c,0,19,param,a,likelihood,of,source,bit,0,target,bit,0,param,b,likelihood,of,source,bit,0,target,bit,1,param,c,likelihood,of,source,bit,1,target,bit,0,return,this;public,rmat,graph,t,set,constants,float,a,float,b,float,c,preconditions,check,argument,a,0,0f,b,0,0f,c,0,0f,a,b,c,1,0f,rmat,parameters,a,b,and,c,must,be,non,negative,and,sum,to,less,than,or,equal,to,one,this,a,a,this,b,b,this,c,c,return,this
RMatGraph -> public RMatGraph<T> setConstants(float A, float B, float C);1494520945;The parameters for recursively subdividing the adjacency matrix.__Setting A = B = C = 0.25 emulates the Erdős–Rényi model.__Graph500 uses A = 0.57, B = C = 0.19.__@param A likelihood of source bit = 0, target bit = 0_@param B likelihood of source bit = 0, target bit = 1_@param C likelihood of source bit = 1, target bit = 0_@return this;public RMatGraph<T> setConstants(float A, float B, float C) {_		Preconditions.checkArgument(A >= 0.0f && B >= 0.0f && C >= 0.0f && A + B + C <= 1.0f,_			"RMat parameters A, B, and C must be non-negative and sum to less than or equal to one")___		this.A = A__		this.B = B__		this.C = C___		return this__	};the,parameters,for,recursively,subdividing,the,adjacency,matrix,setting,a,b,c,0,25,emulates,the,model,graph500,uses,a,0,57,b,c,0,19,param,a,likelihood,of,source,bit,0,target,bit,0,param,b,likelihood,of,source,bit,0,target,bit,1,param,c,likelihood,of,source,bit,1,target,bit,0,return,this;public,rmat,graph,t,set,constants,float,a,float,b,float,c,preconditions,check,argument,a,0,0f,b,0,0f,c,0,0f,a,b,c,1,0f,rmat,parameters,a,b,and,c,must,be,non,negative,and,sum,to,less,than,or,equal,to,one,this,a,a,this,b,b,this,c,c,return,this
RMatGraph -> public RMatGraph<T> setConstants(float a, float b, float c);1495819075;The parameters for recursively subdividing the adjacency matrix.__<p>Setting A = B = C = 0.25 emulates the Erdős–Rényi model.__<p>Graph500 uses A = 0.57, B = C = 0.19.__@param a likelihood of source bit = 0, target bit = 0_@param b likelihood of source bit = 0, target bit = 1_@param c likelihood of source bit = 1, target bit = 0_@return this;public RMatGraph<T> setConstants(float a, float b, float c) {_		Preconditions.checkArgument(a >= 0.0f && b >= 0.0f && c >= 0.0f && a + b + c <= 1.0f,_			"RMat parameters A, B, and C must be non-negative and sum to less than or equal to one")___		this.a = a__		this.b = b__		this.c = c___		return this__	};the,parameters,for,recursively,subdividing,the,adjacency,matrix,p,setting,a,b,c,0,25,emulates,the,model,p,graph500,uses,a,0,57,b,c,0,19,param,a,likelihood,of,source,bit,0,target,bit,0,param,b,likelihood,of,source,bit,0,target,bit,1,param,c,likelihood,of,source,bit,1,target,bit,0,return,this;public,rmat,graph,t,set,constants,float,a,float,b,float,c,preconditions,check,argument,a,0,0f,b,0,0f,c,0,0f,a,b,c,1,0f,rmat,parameters,a,b,and,c,must,be,non,negative,and,sum,to,less,than,or,equal,to,one,this,a,a,this,b,b,this,c,c,return,this
RMatGraph -> public RMatGraph<T> setConstants(float a, float b, float c);1502111816;The parameters for recursively subdividing the adjacency matrix.__<p>Setting A = B = C = 0.25 emulates the Erdős–Rényi model.__<p>Graph500 uses A = 0.57, B = C = 0.19.__@param a likelihood of source bit = 0, target bit = 0_@param b likelihood of source bit = 0, target bit = 1_@param c likelihood of source bit = 1, target bit = 0_@return this;public RMatGraph<T> setConstants(float a, float b, float c) {_		Preconditions.checkArgument(a >= 0.0f && b >= 0.0f && c >= 0.0f && a + b + c <= 1.0f,_			"RMat parameters A, B, and C must be non-negative and sum to less than or equal to one")___		this.a = a__		this.b = b__		this.c = c___		return this__	};the,parameters,for,recursively,subdividing,the,adjacency,matrix,p,setting,a,b,c,0,25,emulates,the,model,p,graph500,uses,a,0,57,b,c,0,19,param,a,likelihood,of,source,bit,0,target,bit,0,param,b,likelihood,of,source,bit,0,target,bit,1,param,c,likelihood,of,source,bit,1,target,bit,0,return,this;public,rmat,graph,t,set,constants,float,a,float,b,float,c,preconditions,check,argument,a,0,0f,b,0,0f,c,0,0f,a,b,c,1,0f,rmat,parameters,a,b,and,c,must,be,non,negative,and,sum,to,less,than,or,equal,to,one,this,a,a,this,b,b,this,c,c,return,this
RMatGraph -> public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount);1460571929;Generate a directed or undirected power-law {@link Graph} using the_Recursive Matrix (R-Mat) model.__@param env the Flink execution environment_@param randomGeneratorFactory source of randomness_@param vertexCount number of vertices_@param edgeCount number of edges;public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount) {_		if (vertexCount <= 0) {_			throw new IllegalArgumentException("Vertex count must be greater than zero")__		}__		if (edgeCount <= 0) {_			throw new IllegalArgumentException("Edge count must be greater than zero")__		}__		this.env = env__		this.randomGenerableFactory = randomGeneratorFactory__		this.vertexCount = vertexCount__		this.edgeCount = edgeCount__	};generate,a,directed,or,undirected,power,law,link,graph,using,the,recursive,matrix,r,mat,model,param,env,the,flink,execution,environment,param,random,generator,factory,source,of,randomness,param,vertex,count,number,of,vertices,param,edge,count,number,of,edges;public,rmat,graph,execution,environment,env,random,generable,factory,t,random,generator,factory,long,vertex,count,long,edge,count,if,vertex,count,0,throw,new,illegal,argument,exception,vertex,count,must,be,greater,than,zero,if,edge,count,0,throw,new,illegal,argument,exception,edge,count,must,be,greater,than,zero,this,env,env,this,random,generable,factory,random,generator,factory,this,vertex,count,vertex,count,this,edge,count,edge,count
RMatGraph -> public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount);1465304606;Generate a directed or undirected power-law {@link Graph} using the_Recursive Matrix (R-Mat) model.__@param env the Flink execution environment_@param randomGeneratorFactory source of randomness_@param vertexCount number of vertices_@param edgeCount number of edges;public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount) {_		if (vertexCount <= 0) {_			throw new IllegalArgumentException("Vertex count must be greater than zero")__		}__		if (edgeCount <= 0) {_			throw new IllegalArgumentException("Edge count must be greater than zero")__		}__		this.env = env__		this.randomGenerableFactory = randomGeneratorFactory__		this.vertexCount = vertexCount__		this.edgeCount = edgeCount__	};generate,a,directed,or,undirected,power,law,link,graph,using,the,recursive,matrix,r,mat,model,param,env,the,flink,execution,environment,param,random,generator,factory,source,of,randomness,param,vertex,count,number,of,vertices,param,edge,count,number,of,edges;public,rmat,graph,execution,environment,env,random,generable,factory,t,random,generator,factory,long,vertex,count,long,edge,count,if,vertex,count,0,throw,new,illegal,argument,exception,vertex,count,must,be,greater,than,zero,if,edge,count,0,throw,new,illegal,argument,exception,edge,count,must,be,greater,than,zero,this,env,env,this,random,generable,factory,random,generator,factory,this,vertex,count,vertex,count,this,edge,count,edge,count
RMatGraph -> public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount);1484685504;Generate a directed or undirected power-law {@link Graph} using the_Recursive Matrix (R-Mat) model.__@param env the Flink execution environment_@param randomGeneratorFactory source of randomness_@param vertexCount number of vertices_@param edgeCount number of edges;public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount) {_		if (vertexCount <= 0) {_			throw new IllegalArgumentException("Vertex count must be greater than zero")__		}__		if (edgeCount <= 0) {_			throw new IllegalArgumentException("Edge count must be greater than zero")__		}__		this.env = env__		this.randomGenerableFactory = randomGeneratorFactory__		this.vertexCount = vertexCount__		this.edgeCount = edgeCount__	};generate,a,directed,or,undirected,power,law,link,graph,using,the,recursive,matrix,r,mat,model,param,env,the,flink,execution,environment,param,random,generator,factory,source,of,randomness,param,vertex,count,number,of,vertices,param,edge,count,number,of,edges;public,rmat,graph,execution,environment,env,random,generable,factory,t,random,generator,factory,long,vertex,count,long,edge,count,if,vertex,count,0,throw,new,illegal,argument,exception,vertex,count,must,be,greater,than,zero,if,edge,count,0,throw,new,illegal,argument,exception,edge,count,must,be,greater,than,zero,this,env,env,this,random,generable,factory,random,generator,factory,this,vertex,count,vertex,count,this,edge,count,edge,count
RMatGraph -> public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount);1489068942;Generate a directed or undirected power-law {@link Graph} using the_Recursive Matrix (R-Mat) model.__@param env the Flink execution environment_@param randomGeneratorFactory source of randomness_@param vertexCount number of vertices_@param edgeCount number of edges;public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		Preconditions.checkArgument(edgeCount >= MINIMUM_EDGE_COUNT,_			"Edge count must be at least " + MINIMUM_EDGE_COUNT)___		this.env = env__		this.randomGenerableFactory = randomGeneratorFactory__		this.vertexCount = vertexCount__		this.edgeCount = edgeCount__	};generate,a,directed,or,undirected,power,law,link,graph,using,the,recursive,matrix,r,mat,model,param,env,the,flink,execution,environment,param,random,generator,factory,source,of,randomness,param,vertex,count,number,of,vertices,param,edge,count,number,of,edges;public,rmat,graph,execution,environment,env,random,generable,factory,t,random,generator,factory,long,vertex,count,long,edge,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,preconditions,check,argument,edge,count,edge,count,must,be,at,least,this,env,env,this,random,generable,factory,random,generator,factory,this,vertex,count,vertex,count,this,edge,count,edge,count
RMatGraph -> public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount);1493649310;Generate a directed or undirected power-law {@link Graph} using the_Recursive Matrix (R-Mat) model.__@param env the Flink execution environment_@param randomGeneratorFactory source of randomness_@param vertexCount number of vertices_@param edgeCount number of edges;public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		Preconditions.checkArgument(edgeCount >= MINIMUM_EDGE_COUNT,_			"Edge count must be at least " + MINIMUM_EDGE_COUNT)___		this.env = env__		this.randomGenerableFactory = randomGeneratorFactory__		this.vertexCount = vertexCount__		this.edgeCount = edgeCount__	};generate,a,directed,or,undirected,power,law,link,graph,using,the,recursive,matrix,r,mat,model,param,env,the,flink,execution,environment,param,random,generator,factory,source,of,randomness,param,vertex,count,number,of,vertices,param,edge,count,number,of,edges;public,rmat,graph,execution,environment,env,random,generable,factory,t,random,generator,factory,long,vertex,count,long,edge,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,preconditions,check,argument,edge,count,edge,count,must,be,at,least,this,env,env,this,random,generable,factory,random,generator,factory,this,vertex,count,vertex,count,this,edge,count,edge,count
RMatGraph -> public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount);1494520945;A directed power-law multi{@link Graph graph} generated using the_stochastic Recursive Matrix (R-Mat) model.__@param env the Flink execution environment_@param randomGeneratorFactory source of randomness_@param vertexCount number of vertices_@param edgeCount number of edges;public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		Preconditions.checkArgument(edgeCount >= MINIMUM_EDGE_COUNT,_			"Edge count must be at least " + MINIMUM_EDGE_COUNT)___		this.env = env__		this.randomGenerableFactory = randomGeneratorFactory__		this.vertexCount = vertexCount__		this.edgeCount = edgeCount__	};a,directed,power,law,multi,link,graph,graph,generated,using,the,stochastic,recursive,matrix,r,mat,model,param,env,the,flink,execution,environment,param,random,generator,factory,source,of,randomness,param,vertex,count,number,of,vertices,param,edge,count,number,of,edges;public,rmat,graph,execution,environment,env,random,generable,factory,t,random,generator,factory,long,vertex,count,long,edge,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,preconditions,check,argument,edge,count,edge,count,must,be,at,least,this,env,env,this,random,generable,factory,random,generator,factory,this,vertex,count,vertex,count,this,edge,count,edge,count
RMatGraph -> public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount);1495819075;A directed power-law multi{@link Graph graph} generated using the_stochastic Recursive Matrix (R-Mat) model.__@param env the Flink execution environment_@param randomGeneratorFactory source of randomness_@param vertexCount number of vertices_@param edgeCount number of edges;public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		Preconditions.checkArgument(edgeCount >= MINIMUM_EDGE_COUNT,_			"Edge count must be at least " + MINIMUM_EDGE_COUNT)___		this.env = env__		this.randomGenerableFactory = randomGeneratorFactory__		this.vertexCount = vertexCount__		this.edgeCount = edgeCount__	};a,directed,power,law,multi,link,graph,graph,generated,using,the,stochastic,recursive,matrix,r,mat,model,param,env,the,flink,execution,environment,param,random,generator,factory,source,of,randomness,param,vertex,count,number,of,vertices,param,edge,count,number,of,edges;public,rmat,graph,execution,environment,env,random,generable,factory,t,random,generator,factory,long,vertex,count,long,edge,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,preconditions,check,argument,edge,count,edge,count,must,be,at,least,this,env,env,this,random,generable,factory,random,generator,factory,this,vertex,count,vertex,count,this,edge,count,edge,count
RMatGraph -> public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount);1502111816;A directed power-law multi{@link Graph graph} generated using the_stochastic Recursive Matrix (R-Mat) model.__@param env the Flink execution environment_@param randomGeneratorFactory source of randomness_@param vertexCount number of vertices_@param edgeCount number of edges;public RMatGraph(ExecutionEnvironment env, RandomGenerableFactory<T> randomGeneratorFactory, long vertexCount, long edgeCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		Preconditions.checkArgument(edgeCount >= MINIMUM_EDGE_COUNT,_			"Edge count must be at least " + MINIMUM_EDGE_COUNT)___		this.env = env__		this.randomGenerableFactory = randomGeneratorFactory__		this.vertexCount = vertexCount__		this.edgeCount = edgeCount__	};a,directed,power,law,multi,link,graph,graph,generated,using,the,stochastic,recursive,matrix,r,mat,model,param,env,the,flink,execution,environment,param,random,generator,factory,source,of,randomness,param,vertex,count,number,of,vertices,param,edge,count,number,of,edges;public,rmat,graph,execution,environment,env,random,generable,factory,t,random,generator,factory,long,vertex,count,long,edge,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,preconditions,check,argument,edge,count,edge,count,must,be,at,least,this,env,env,this,random,generable,factory,random,generator,factory,this,vertex,count,vertex,count,this,edge,count,edge,count
RMatGraph -> public RMatGraph<T> setNoise(boolean noiseEnabled, float noise);1460571929;Enable and configure noise. Each edge is generated independently, but_when noise is enabled the parameters A, B, and C are randomly increased_or decreased, then normalized, by a fraction of the noise factor during_the computation of each bit.__@param noiseEnabled whether to enable noise perturbation_@param noise strength of noise perturbation_@return this;public RMatGraph<T> setNoise(boolean noiseEnabled, float noise) {_		if (noise < 0.0f || noise > 2.0f) {_			throw new RuntimeException("RMat parameter noise must be non-negative and less than or equal to 2.0")__		}__		this.noiseEnabled = noiseEnabled__		this.noise = noise___		return this__	};enable,and,configure,noise,each,edge,is,generated,independently,but,when,noise,is,enabled,the,parameters,a,b,and,c,are,randomly,increased,or,decreased,then,normalized,by,a,fraction,of,the,noise,factor,during,the,computation,of,each,bit,param,noise,enabled,whether,to,enable,noise,perturbation,param,noise,strength,of,noise,perturbation,return,this;public,rmat,graph,t,set,noise,boolean,noise,enabled,float,noise,if,noise,0,0f,noise,2,0f,throw,new,runtime,exception,rmat,parameter,noise,must,be,non,negative,and,less,than,or,equal,to,2,0,this,noise,enabled,noise,enabled,this,noise,noise,return,this
RMatGraph -> public RMatGraph<T> setNoise(boolean noiseEnabled, float noise);1465304606;Enable and configure noise. Each edge is generated independently, but_when noise is enabled the parameters A, B, and C are randomly increased_or decreased, then normalized, by a fraction of the noise factor during_the computation of each bit.__@param noiseEnabled whether to enable noise perturbation_@param noise strength of noise perturbation_@return this;public RMatGraph<T> setNoise(boolean noiseEnabled, float noise) {_		if (noise < 0.0f || noise > 2.0f) {_			throw new RuntimeException("RMat parameter noise must be non-negative and less than or equal to 2.0")__		}__		this.noiseEnabled = noiseEnabled__		this.noise = noise___		return this__	};enable,and,configure,noise,each,edge,is,generated,independently,but,when,noise,is,enabled,the,parameters,a,b,and,c,are,randomly,increased,or,decreased,then,normalized,by,a,fraction,of,the,noise,factor,during,the,computation,of,each,bit,param,noise,enabled,whether,to,enable,noise,perturbation,param,noise,strength,of,noise,perturbation,return,this;public,rmat,graph,t,set,noise,boolean,noise,enabled,float,noise,if,noise,0,0f,noise,2,0f,throw,new,runtime,exception,rmat,parameter,noise,must,be,non,negative,and,less,than,or,equal,to,2,0,this,noise,enabled,noise,enabled,this,noise,noise,return,this
RMatGraph -> public RMatGraph<T> setNoise(boolean noiseEnabled, float noise);1484685504;Enable and configure noise. Each edge is generated independently, but_when noise is enabled the parameters A, B, and C are randomly increased_or decreased, then normalized, by a fraction of the noise factor during_the computation of each bit.__@param noiseEnabled whether to enable noise perturbation_@param noise strength of noise perturbation_@return this;public RMatGraph<T> setNoise(boolean noiseEnabled, float noise) {_		if (noise < 0.0f || noise > 2.0f) {_			throw new RuntimeException("RMat parameter noise must be non-negative and less than or equal to 2.0")__		}__		this.noiseEnabled = noiseEnabled__		this.noise = noise___		return this__	};enable,and,configure,noise,each,edge,is,generated,independently,but,when,noise,is,enabled,the,parameters,a,b,and,c,are,randomly,increased,or,decreased,then,normalized,by,a,fraction,of,the,noise,factor,during,the,computation,of,each,bit,param,noise,enabled,whether,to,enable,noise,perturbation,param,noise,strength,of,noise,perturbation,return,this;public,rmat,graph,t,set,noise,boolean,noise,enabled,float,noise,if,noise,0,0f,noise,2,0f,throw,new,runtime,exception,rmat,parameter,noise,must,be,non,negative,and,less,than,or,equal,to,2,0,this,noise,enabled,noise,enabled,this,noise,noise,return,this
RMatGraph -> public RMatGraph<T> setNoise(boolean noiseEnabled, float noise);1489068942;Enable and configure noise. Each edge is generated independently, but_when noise is enabled the parameters A, B, and C are randomly increased_or decreased, then normalized, by a fraction of the noise factor during_the computation of each bit.__@param noiseEnabled whether to enable noise perturbation_@param noise strength of noise perturbation_@return this;public RMatGraph<T> setNoise(boolean noiseEnabled, float noise) {_		Preconditions.checkArgument(noise >= 0.0f && noise <= 2.0f,_			"RMat parameter noise must be non-negative and less than or equal to 2.0")___		this.noiseEnabled = noiseEnabled__		this.noise = noise___		return this__	};enable,and,configure,noise,each,edge,is,generated,independently,but,when,noise,is,enabled,the,parameters,a,b,and,c,are,randomly,increased,or,decreased,then,normalized,by,a,fraction,of,the,noise,factor,during,the,computation,of,each,bit,param,noise,enabled,whether,to,enable,noise,perturbation,param,noise,strength,of,noise,perturbation,return,this;public,rmat,graph,t,set,noise,boolean,noise,enabled,float,noise,preconditions,check,argument,noise,0,0f,noise,2,0f,rmat,parameter,noise,must,be,non,negative,and,less,than,or,equal,to,2,0,this,noise,enabled,noise,enabled,this,noise,noise,return,this
RMatGraph -> public RMatGraph<T> setNoise(boolean noiseEnabled, float noise);1493649310;Enable and configure noise. Each edge is generated independently, but_when noise is enabled the parameters A, B, and C are randomly increased_or decreased, then normalized, by a fraction of the noise factor during_the computation of each bit.__@param noiseEnabled whether to enable noise perturbation_@param noise strength of noise perturbation_@return this;public RMatGraph<T> setNoise(boolean noiseEnabled, float noise) {_		Preconditions.checkArgument(noise >= 0.0f && noise <= 2.0f,_			"RMat parameter noise must be non-negative and less than or equal to 2.0")___		this.noiseEnabled = noiseEnabled__		this.noise = noise___		return this__	};enable,and,configure,noise,each,edge,is,generated,independently,but,when,noise,is,enabled,the,parameters,a,b,and,c,are,randomly,increased,or,decreased,then,normalized,by,a,fraction,of,the,noise,factor,during,the,computation,of,each,bit,param,noise,enabled,whether,to,enable,noise,perturbation,param,noise,strength,of,noise,perturbation,return,this;public,rmat,graph,t,set,noise,boolean,noise,enabled,float,noise,preconditions,check,argument,noise,0,0f,noise,2,0f,rmat,parameter,noise,must,be,non,negative,and,less,than,or,equal,to,2,0,this,noise,enabled,noise,enabled,this,noise,noise,return,this
RMatGraph -> public RMatGraph<T> setNoise(boolean noiseEnabled, float noise);1494520945;Enable and configure noise. Each edge is generated independently, but_when noise is enabled the parameters A, B, and C are randomly increased_or decreased, then normalized, by a fraction of the noise factor during_the computation of each bit.__@param noiseEnabled whether to enable noise perturbation_@param noise strength of noise perturbation_@return this;public RMatGraph<T> setNoise(boolean noiseEnabled, float noise) {_		Preconditions.checkArgument(noise >= 0.0f && noise <= 2.0f,_			"RMat parameter noise must be non-negative and less than or equal to 2.0")___		this.noiseEnabled = noiseEnabled__		this.noise = noise___		return this__	};enable,and,configure,noise,each,edge,is,generated,independently,but,when,noise,is,enabled,the,parameters,a,b,and,c,are,randomly,increased,or,decreased,then,normalized,by,a,fraction,of,the,noise,factor,during,the,computation,of,each,bit,param,noise,enabled,whether,to,enable,noise,perturbation,param,noise,strength,of,noise,perturbation,return,this;public,rmat,graph,t,set,noise,boolean,noise,enabled,float,noise,preconditions,check,argument,noise,0,0f,noise,2,0f,rmat,parameter,noise,must,be,non,negative,and,less,than,or,equal,to,2,0,this,noise,enabled,noise,enabled,this,noise,noise,return,this
RMatGraph -> public RMatGraph<T> setNoise(boolean noiseEnabled, float noise);1495819075;Enable and configure noise. Each edge is generated independently, but_when noise is enabled the parameters A, B, and C are randomly increased_or decreased, then normalized, by a fraction of the noise factor during_the computation of each bit.__@param noiseEnabled whether to enable noise perturbation_@param noise strength of noise perturbation_@return this;public RMatGraph<T> setNoise(boolean noiseEnabled, float noise) {_		Preconditions.checkArgument(noise >= 0.0f && noise <= 2.0f,_			"RMat parameter noise must be non-negative and less than or equal to 2.0")___		this.noiseEnabled = noiseEnabled__		this.noise = noise___		return this__	};enable,and,configure,noise,each,edge,is,generated,independently,but,when,noise,is,enabled,the,parameters,a,b,and,c,are,randomly,increased,or,decreased,then,normalized,by,a,fraction,of,the,noise,factor,during,the,computation,of,each,bit,param,noise,enabled,whether,to,enable,noise,perturbation,param,noise,strength,of,noise,perturbation,return,this;public,rmat,graph,t,set,noise,boolean,noise,enabled,float,noise,preconditions,check,argument,noise,0,0f,noise,2,0f,rmat,parameter,noise,must,be,non,negative,and,less,than,or,equal,to,2,0,this,noise,enabled,noise,enabled,this,noise,noise,return,this
RMatGraph -> public RMatGraph<T> setNoise(boolean noiseEnabled, float noise);1502111816;Enable and configure noise. Each edge is generated independently, but_when noise is enabled the parameters A, B, and C are randomly increased_or decreased, then normalized, by a fraction of the noise factor during_the computation of each bit.__@param noiseEnabled whether to enable noise perturbation_@param noise strength of noise perturbation_@return this;public RMatGraph<T> setNoise(boolean noiseEnabled, float noise) {_		Preconditions.checkArgument(noise >= 0.0f && noise <= 2.0f,_			"RMat parameter noise must be non-negative and less than or equal to 2.0")___		this.noiseEnabled = noiseEnabled__		this.noise = noise___		return this__	};enable,and,configure,noise,each,edge,is,generated,independently,but,when,noise,is,enabled,the,parameters,a,b,and,c,are,randomly,increased,or,decreased,then,normalized,by,a,fraction,of,the,noise,factor,during,the,computation,of,each,bit,param,noise,enabled,whether,to,enable,noise,perturbation,param,noise,strength,of,noise,perturbation,return,this;public,rmat,graph,t,set,noise,boolean,noise,enabled,float,noise,preconditions,check,argument,noise,0,0f,noise,2,0f,rmat,parameter,noise,must,be,non,negative,and,less,than,or,equal,to,2,0,this,noise,enabled,noise,enabled,this,noise,noise,return,this
