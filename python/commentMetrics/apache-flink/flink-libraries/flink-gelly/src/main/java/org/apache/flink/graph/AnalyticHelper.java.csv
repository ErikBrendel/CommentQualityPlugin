commented;modifiers;parameterAmount;loc;comment;code
false;public;1;2;;@Override public void configure(Configuration parameters) { }
false;public;2;2;;@Override public void open(int taskNumber, int numTasks) throws IOException { }
true;public;2;3;/**  * Adds an accumulator by prepending the given name with a random string.  *  * @param name The name of the accumulator  * @param accumulator The accumulator  * @param <V> Type of values that are added to the accumulator  * @param <A> Type of the accumulator result as it will be reported to the client  */ ;/**  * Adds an accumulator by prepending the given name with a random string.  *  * @param name The name of the accumulator  * @param accumulator The accumulator  * @param <V> Type of values that are added to the accumulator  * @param <A> Type of the accumulator result as it will be reported to the client  */ public <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator) {     getRuntimeContext().addAccumulator(id + SEPARATOR + name, accumulator). }
true;public;2;7;/**  * Gets the accumulator with the given name. Returns {@code null}, if no accumulator with  * that name was produced.  *  * @param accumulatorName The name of the accumulator  * @param <A> The generic type of the accumulator value  * @return The value of the accumulator with the given name  */ ;/**  * Gets the accumulator with the given name. Returns {@code null}, if no accumulator with  * that name was produced.  *  * @param accumulatorName The name of the accumulator  * @param <A> The generic type of the accumulator value  * @return The value of the accumulator with the given name  */ public <A> A getAccumulator(ExecutionEnvironment env, String accumulatorName) {     JobExecutionResult result = env.getLastJobExecutionResult().     Preconditions.checkNotNull(result, "No result found for job, was execute() called before getting the result?").     return result.getAccumulatorResult(id + SEPARATOR + accumulatorName). }
