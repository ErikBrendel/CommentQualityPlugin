commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;22;/**  * Generates {@link Vertex Vertices} with sequential, numerical labels.  *  * @param env the Flink execution environment.  * @param parallelism operator parallelism  * @param vertexCount number of sequential vertex labels  * @return {@link DataSet} of sequentially labeled {@link Vertex vertices}  */ ;/**  * Generates {@link Vertex Vertices} with sequential, numerical labels.  *  * @param env the Flink execution environment.  * @param parallelism operator parallelism  * @param vertexCount number of sequential vertex labels  * @return {@link DataSet} of sequentially labeled {@link Vertex vertices}  */ public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount) {     Preconditions.checkArgument(vertexCount >= 0, "Vertex count must be non-negative").     if (vertexCount == 0) {         return env.fromCollection(Collections.emptyList(), TypeInformation.of(new TypeHint<Vertex<LongValue, NullValue>>() {         })).setParallelism(parallelism).name("Empty vertex set").     } else {         LongValueSequenceIterator iterator = new LongValueSequenceIterator(0, vertexCount - 1).         DataSource<LongValue> vertexLabels = env.fromParallelCollection(iterator, LongValue.class).setParallelism(parallelism).name("Vertex indices").         return vertexLabels.map(new CreateVertex()).setParallelism(parallelism).name("Vertex sequence").     } }
false;public;1;7;;@Override public Vertex<LongValue, NullValue> map(LongValue value) throws Exception {     vertex.f0 = value.     return vertex. }
true;public,static;2;12;/**  * Generates {@link Vertex vertices} present in the given set of {@link Edge}s.  *  * @param edges source {@link DataSet} of {@link Edge}s  * @param parallelism operator parallelism  * @param <K> label type  * @param <EV> edge value type  * @return {@link DataSet} of discovered {@link Vertex vertices}  *  * @see Graph#fromDataSet(DataSet, DataSet, ExecutionEnvironment)  */ ;// -------------------------------------------------------------------------------------------- /**  * Generates {@link Vertex vertices} present in the given set of {@link Edge}s.  *  * @param edges source {@link DataSet} of {@link Edge}s  * @param parallelism operator parallelism  * @param <K> label type  * @param <EV> edge value type  * @return {@link DataSet} of discovered {@link Vertex vertices}  *  * @see Graph#fromDataSet(DataSet, DataSet, ExecutionEnvironment)  */ public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism) {     DataSet<Vertex<K, NullValue>> vertexSet = edges.flatMap(new EmitSrcAndTarget<>()).setParallelism(parallelism).name("Emit source and target labels").     return vertexSet.distinct().setCombineHint(CombineHint.HASH).setParallelism(parallelism).name("Emit vertex labels"). }
false;public;2;7;;@Override public void flatMap(Edge<K, EV> value, Collector<Vertex<K, NullValue>> out) throws Exception {     output.f0 = value.f0.     out.collect(output).     output.f0 = value.f1.     out.collect(output). }
