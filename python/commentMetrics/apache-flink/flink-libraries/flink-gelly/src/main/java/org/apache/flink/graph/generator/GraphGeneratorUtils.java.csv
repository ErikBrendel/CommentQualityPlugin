# id;timestamp;commentText;codeText;commentWords;codeWords
GraphGeneratorUtils -> public static DataSet<Vertex<LongValue,NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount);1460571929;Generates {@link Vertex Vertices} with sequential, numerical labels.__@param env the Flink execution environment._@param parallelism operator parallelism_@param vertexCount number of sequential vertex labels_@return {@link DataSet} of sequentially labeled {@link Vertex Vertices};public static DataSet<Vertex<LongValue,NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount) {_		LongValueSequenceIterator iterator = new LongValueSequenceIterator(0, vertexCount-1)___		DataSource<LongValue> vertexLabels = env_			.fromParallelCollection(iterator, LongValue.class)_				.setParallelism(parallelism)_				.name("Vertex iterators")___		DataSet<Vertex<LongValue,NullValue>> vertexSequence = vertexLabels_			.map(new CreateVertex())_				.setParallelism(parallelism)_				.name("Vertex sequence")___		return vertexSequence__	};generates,link,vertex,vertices,with,sequential,numerical,labels,param,env,the,flink,execution,environment,param,parallelism,operator,parallelism,param,vertex,count,number,of,sequential,vertex,labels,return,link,data,set,of,sequentially,labeled,link,vertex,vertices;public,static,data,set,vertex,long,value,null,value,vertex,sequence,execution,environment,env,int,parallelism,long,vertex,count,long,value,sequence,iterator,iterator,new,long,value,sequence,iterator,0,vertex,count,1,data,source,long,value,vertex,labels,env,from,parallel,collection,iterator,long,value,class,set,parallelism,parallelism,name,vertex,iterators,data,set,vertex,long,value,null,value,vertex,sequence,vertex,labels,map,new,create,vertex,set,parallelism,parallelism,name,vertex,sequence,return,vertex,sequence
GraphGeneratorUtils -> public static DataSet<Vertex<LongValue,NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount);1469210839;Generates {@link Vertex Vertices} with sequential, numerical labels.__@param env the Flink execution environment._@param parallelism operator parallelism_@param vertexCount number of sequential vertex labels_@return {@link DataSet} of sequentially labeled {@link Vertex Vertices};public static DataSet<Vertex<LongValue,NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount) {_		LongValueSequenceIterator iterator = new LongValueSequenceIterator(0, vertexCount-1)___		DataSource<LongValue> vertexLabels = env_			.fromParallelCollection(iterator, LongValue.class)_				.setParallelism(parallelism)_				.name("Vertex iterators")___		return vertexLabels_			.map(new CreateVertex())_				.setParallelism(parallelism)_				.name("Vertex sequence")__	};generates,link,vertex,vertices,with,sequential,numerical,labels,param,env,the,flink,execution,environment,param,parallelism,operator,parallelism,param,vertex,count,number,of,sequential,vertex,labels,return,link,data,set,of,sequentially,labeled,link,vertex,vertices;public,static,data,set,vertex,long,value,null,value,vertex,sequence,execution,environment,env,int,parallelism,long,vertex,count,long,value,sequence,iterator,iterator,new,long,value,sequence,iterator,0,vertex,count,1,data,source,long,value,vertex,labels,env,from,parallel,collection,iterator,long,value,class,set,parallelism,parallelism,name,vertex,iterators,return,vertex,labels,map,new,create,vertex,set,parallelism,parallelism,name,vertex,sequence
GraphGeneratorUtils -> public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism);1484685504;Generates {@link Vertex Vertices} present in the given set of {@link Edge}s.__@param edges source {@link DataSet} of {@link Edge}s_@param parallelism operator parallelism_@param <K> label type_@param <EV> edge value type_@return {@link DataSet} of discovered {@link Vertex Vertices}__@see Graph#fromDataSet(DataSet, DataSet, ExecutionEnvironment);public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism) {_		DataSet<Vertex<K, NullValue>> vertexSet = edges_			.flatMap(new EmitSrcAndTarget<K, EV>())_				.setParallelism(parallelism)_				.name("Emit source and target labels")___		return vertexSet_			.distinct()_				.setParallelism(parallelism)_				.name("Emit vertex labels")__	};generates,link,vertex,vertices,present,in,the,given,set,of,link,edge,s,param,edges,source,link,data,set,of,link,edge,s,param,parallelism,operator,parallelism,param,k,label,type,param,ev,edge,value,type,return,link,data,set,of,discovered,link,vertex,vertices,see,graph,from,data,set,data,set,data,set,execution,environment;public,static,k,ev,data,set,vertex,k,null,value,vertex,set,data,set,edge,k,ev,edges,int,parallelism,data,set,vertex,k,null,value,vertex,set,edges,flat,map,new,emit,src,and,target,k,ev,set,parallelism,parallelism,name,emit,source,and,target,labels,return,vertex,set,distinct,set,parallelism,parallelism,name,emit,vertex,labels
GraphGeneratorUtils -> public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism);1495819075;Generates {@link Vertex Vertices} present in the given set of {@link Edge}s.__@param edges source {@link DataSet} of {@link Edge}s_@param parallelism operator parallelism_@param <K> label type_@param <EV> edge value type_@return {@link DataSet} of discovered {@link Vertex Vertices}__@see Graph#fromDataSet(DataSet, DataSet, ExecutionEnvironment);public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism) {_		DataSet<Vertex<K, NullValue>> vertexSet = edges_			.flatMap(new EmitSrcAndTarget<K, EV>())_				.setParallelism(parallelism)_				.name("Emit source and target labels")___		return vertexSet_			.distinct()_				.setParallelism(parallelism)_				.name("Emit vertex labels")__	};generates,link,vertex,vertices,present,in,the,given,set,of,link,edge,s,param,edges,source,link,data,set,of,link,edge,s,param,parallelism,operator,parallelism,param,k,label,type,param,ev,edge,value,type,return,link,data,set,of,discovered,link,vertex,vertices,see,graph,from,data,set,data,set,data,set,execution,environment;public,static,k,ev,data,set,vertex,k,null,value,vertex,set,data,set,edge,k,ev,edges,int,parallelism,data,set,vertex,k,null,value,vertex,set,edges,flat,map,new,emit,src,and,target,k,ev,set,parallelism,parallelism,name,emit,source,and,target,labels,return,vertex,set,distinct,set,parallelism,parallelism,name,emit,vertex,labels
GraphGeneratorUtils -> public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism);1502111816;Generates {@link Vertex Vertices} present in the given set of {@link Edge}s.__@param edges source {@link DataSet} of {@link Edge}s_@param parallelism operator parallelism_@param <K> label type_@param <EV> edge value type_@return {@link DataSet} of discovered {@link Vertex Vertices}__@see Graph#fromDataSet(DataSet, DataSet, ExecutionEnvironment);public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism) {_		DataSet<Vertex<K, NullValue>> vertexSet = edges_			.flatMap(new EmitSrcAndTarget<>())_				.setParallelism(parallelism)_				.name("Emit source and target labels")___		return vertexSet_			.distinct()_				.setParallelism(parallelism)_				.name("Emit vertex labels")__	};generates,link,vertex,vertices,present,in,the,given,set,of,link,edge,s,param,edges,source,link,data,set,of,link,edge,s,param,parallelism,operator,parallelism,param,k,label,type,param,ev,edge,value,type,return,link,data,set,of,discovered,link,vertex,vertices,see,graph,from,data,set,data,set,data,set,execution,environment;public,static,k,ev,data,set,vertex,k,null,value,vertex,set,data,set,edge,k,ev,edges,int,parallelism,data,set,vertex,k,null,value,vertex,set,edges,flat,map,new,emit,src,and,target,set,parallelism,parallelism,name,emit,source,and,target,labels,return,vertex,set,distinct,set,parallelism,parallelism,name,emit,vertex,labels
GraphGeneratorUtils -> public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism);1505445925;Generates {@link Vertex vertices} present in the given set of {@link Edge}s.__@param edges source {@link DataSet} of {@link Edge}s_@param parallelism operator parallelism_@param <K> label type_@param <EV> edge value type_@return {@link DataSet} of discovered {@link Vertex vertices}__@see Graph#fromDataSet(DataSet, DataSet, ExecutionEnvironment);public static <K, EV> DataSet<Vertex<K, NullValue>> vertexSet(DataSet<Edge<K, EV>> edges, int parallelism) {_		DataSet<Vertex<K, NullValue>> vertexSet = edges_			.flatMap(new EmitSrcAndTarget<>())_				.setParallelism(parallelism)_				.name("Emit source and target labels")___		return vertexSet_			.distinct()_			.setCombineHint(CombineHint.HASH)_				.setParallelism(parallelism)_				.name("Emit vertex labels")__	};generates,link,vertex,vertices,present,in,the,given,set,of,link,edge,s,param,edges,source,link,data,set,of,link,edge,s,param,parallelism,operator,parallelism,param,k,label,type,param,ev,edge,value,type,return,link,data,set,of,discovered,link,vertex,vertices,see,graph,from,data,set,data,set,data,set,execution,environment;public,static,k,ev,data,set,vertex,k,null,value,vertex,set,data,set,edge,k,ev,edges,int,parallelism,data,set,vertex,k,null,value,vertex,set,edges,flat,map,new,emit,src,and,target,set,parallelism,parallelism,name,emit,source,and,target,labels,return,vertex,set,distinct,set,combine,hint,combine,hint,hash,set,parallelism,parallelism,name,emit,vertex,labels
GraphGeneratorUtils -> public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount);1484685504;Generates {@link Vertex Vertices} with sequential, numerical labels.__@param env the Flink execution environment._@param parallelism operator parallelism_@param vertexCount number of sequential vertex labels_@return {@link DataSet} of sequentially labeled {@link Vertex Vertices};public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount) {_		LongValueSequenceIterator iterator = new LongValueSequenceIterator(0, vertexCount-1)___		DataSource<LongValue> vertexLabels = env_			.fromParallelCollection(iterator, LongValue.class)_				.setParallelism(parallelism)_				.name("Vertex iterators")___		return vertexLabels_			.map(new CreateVertex())_				.setParallelism(parallelism)_				.name("Vertex sequence")__	};generates,link,vertex,vertices,with,sequential,numerical,labels,param,env,the,flink,execution,environment,param,parallelism,operator,parallelism,param,vertex,count,number,of,sequential,vertex,labels,return,link,data,set,of,sequentially,labeled,link,vertex,vertices;public,static,data,set,vertex,long,value,null,value,vertex,sequence,execution,environment,env,int,parallelism,long,vertex,count,long,value,sequence,iterator,iterator,new,long,value,sequence,iterator,0,vertex,count,1,data,source,long,value,vertex,labels,env,from,parallel,collection,iterator,long,value,class,set,parallelism,parallelism,name,vertex,iterators,return,vertex,labels,map,new,create,vertex,set,parallelism,parallelism,name,vertex,sequence
GraphGeneratorUtils -> public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount);1495819075;Generates {@link Vertex Vertices} with sequential, numerical labels.__@param env the Flink execution environment._@param parallelism operator parallelism_@param vertexCount number of sequential vertex labels_@return {@link DataSet} of sequentially labeled {@link Vertex Vertices};public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount) {_		LongValueSequenceIterator iterator = new LongValueSequenceIterator(0, vertexCount - 1)___		DataSource<LongValue> vertexLabels = env_			.fromParallelCollection(iterator, LongValue.class)_				.setParallelism(parallelism)_				.name("Vertex iterators")___		return vertexLabels_			.map(new CreateVertex())_				.setParallelism(parallelism)_				.name("Vertex sequence")__	};generates,link,vertex,vertices,with,sequential,numerical,labels,param,env,the,flink,execution,environment,param,parallelism,operator,parallelism,param,vertex,count,number,of,sequential,vertex,labels,return,link,data,set,of,sequentially,labeled,link,vertex,vertices;public,static,data,set,vertex,long,value,null,value,vertex,sequence,execution,environment,env,int,parallelism,long,vertex,count,long,value,sequence,iterator,iterator,new,long,value,sequence,iterator,0,vertex,count,1,data,source,long,value,vertex,labels,env,from,parallel,collection,iterator,long,value,class,set,parallelism,parallelism,name,vertex,iterators,return,vertex,labels,map,new,create,vertex,set,parallelism,parallelism,name,vertex,sequence
GraphGeneratorUtils -> public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount);1502111816;Generates {@link Vertex Vertices} with sequential, numerical labels.__@param env the Flink execution environment._@param parallelism operator parallelism_@param vertexCount number of sequential vertex labels_@return {@link DataSet} of sequentially labeled {@link Vertex Vertices};public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount) {_		LongValueSequenceIterator iterator = new LongValueSequenceIterator(0, vertexCount - 1)___		DataSource<LongValue> vertexLabels = env_			.fromParallelCollection(iterator, LongValue.class)_				.setParallelism(parallelism)_				.name("Vertex iterators")___		return vertexLabels_			.map(new CreateVertex())_				.setParallelism(parallelism)_				.name("Vertex sequence")__	};generates,link,vertex,vertices,with,sequential,numerical,labels,param,env,the,flink,execution,environment,param,parallelism,operator,parallelism,param,vertex,count,number,of,sequential,vertex,labels,return,link,data,set,of,sequentially,labeled,link,vertex,vertices;public,static,data,set,vertex,long,value,null,value,vertex,sequence,execution,environment,env,int,parallelism,long,vertex,count,long,value,sequence,iterator,iterator,new,long,value,sequence,iterator,0,vertex,count,1,data,source,long,value,vertex,labels,env,from,parallel,collection,iterator,long,value,class,set,parallelism,parallelism,name,vertex,iterators,return,vertex,labels,map,new,create,vertex,set,parallelism,parallelism,name,vertex,sequence
GraphGeneratorUtils -> public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount);1505445925;Generates {@link Vertex Vertices} with sequential, numerical labels.__@param env the Flink execution environment._@param parallelism operator parallelism_@param vertexCount number of sequential vertex labels_@return {@link DataSet} of sequentially labeled {@link Vertex vertices};public static DataSet<Vertex<LongValue, NullValue>> vertexSequence(ExecutionEnvironment env, int parallelism, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= 0, "Vertex count must be non-negative")___		if (vertexCount == 0) {_			return env_				.fromCollection(Collections.emptyList(), TypeInformation.of(new TypeHint<Vertex<LongValue, NullValue>>(){}))_					.setParallelism(parallelism)_					.name("Empty vertex set")__		} else {_			LongValueSequenceIterator iterator = new LongValueSequenceIterator(0, vertexCount - 1)___			DataSource<LongValue> vertexLabels = env_				.fromParallelCollection(iterator, LongValue.class)_					.setParallelism(parallelism)_					.name("Vertex indices")___			return vertexLabels_				.map(new CreateVertex())_					.setParallelism(parallelism)_					.name("Vertex sequence")__		}_	};generates,link,vertex,vertices,with,sequential,numerical,labels,param,env,the,flink,execution,environment,param,parallelism,operator,parallelism,param,vertex,count,number,of,sequential,vertex,labels,return,link,data,set,of,sequentially,labeled,link,vertex,vertices;public,static,data,set,vertex,long,value,null,value,vertex,sequence,execution,environment,env,int,parallelism,long,vertex,count,preconditions,check,argument,vertex,count,0,vertex,count,must,be,non,negative,if,vertex,count,0,return,env,from,collection,collections,empty,list,type,information,of,new,type,hint,vertex,long,value,null,value,set,parallelism,parallelism,name,empty,vertex,set,else,long,value,sequence,iterator,iterator,new,long,value,sequence,iterator,0,vertex,count,1,data,source,long,value,vertex,labels,env,from,parallel,collection,iterator,long,value,class,set,parallelism,parallelism,name,vertex,indices,return,vertex,labels,map,new,create,vertex,set,parallelism,parallelism,name,vertex,sequence
GraphGeneratorUtils -> public static <K,EV> DataSet<Vertex<K,NullValue>> vertexSet(DataSet<Edge<K,EV>> edges, int parallelism);1460571929;Generates {@link Vertex Vertices} present in the given set of {@link Edge}s.__@param edges source {@link DataSet} of {@link Edge}s_@param parallelism operator parallelism_@param <K> label type_@param <EV> edge value type_@return {@link DataSet} of discovered {@link Vertex Vertices}__@see {@link Graph#fromDataSet(DataSet, DataSet, ExecutionEnvironment)};public static <K,EV> DataSet<Vertex<K,NullValue>> vertexSet(DataSet<Edge<K,EV>> edges, int parallelism) {_		DataSet<Vertex<K,NullValue>> vertexSet = edges_			.flatMap(new EmitSrcAndTarget<K, EV>())_				.setParallelism(parallelism)_				.name("Emit source and target labels")___		DataSet<Vertex<K,NullValue>> distinctVertexSet = vertexSet_			.distinct()_				.setParallelism(parallelism)_				.name("Emit vertex labels")___		return distinctVertexSet__	};generates,link,vertex,vertices,present,in,the,given,set,of,link,edge,s,param,edges,source,link,data,set,of,link,edge,s,param,parallelism,operator,parallelism,param,k,label,type,param,ev,edge,value,type,return,link,data,set,of,discovered,link,vertex,vertices,see,link,graph,from,data,set,data,set,data,set,execution,environment;public,static,k,ev,data,set,vertex,k,null,value,vertex,set,data,set,edge,k,ev,edges,int,parallelism,data,set,vertex,k,null,value,vertex,set,edges,flat,map,new,emit,src,and,target,k,ev,set,parallelism,parallelism,name,emit,source,and,target,labels,data,set,vertex,k,null,value,distinct,vertex,set,vertex,set,distinct,set,parallelism,parallelism,name,emit,vertex,labels,return,distinct,vertex,set
GraphGeneratorUtils -> public static <K,EV> DataSet<Vertex<K,NullValue>> vertexSet(DataSet<Edge<K,EV>> edges, int parallelism);1469210839;Generates {@link Vertex Vertices} present in the given set of {@link Edge}s.__@param edges source {@link DataSet} of {@link Edge}s_@param parallelism operator parallelism_@param <K> label type_@param <EV> edge value type_@return {@link DataSet} of discovered {@link Vertex Vertices}__@see Graph#fromDataSet(DataSet, DataSet, ExecutionEnvironment);public static <K,EV> DataSet<Vertex<K,NullValue>> vertexSet(DataSet<Edge<K,EV>> edges, int parallelism) {_		DataSet<Vertex<K,NullValue>> vertexSet = edges_			.flatMap(new EmitSrcAndTarget<K, EV>())_				.setParallelism(parallelism)_				.name("Emit source and target labels")___		return vertexSet_			.distinct()_				.setParallelism(parallelism)_				.name("Emit vertex labels")__	};generates,link,vertex,vertices,present,in,the,given,set,of,link,edge,s,param,edges,source,link,data,set,of,link,edge,s,param,parallelism,operator,parallelism,param,k,label,type,param,ev,edge,value,type,return,link,data,set,of,discovered,link,vertex,vertices,see,graph,from,data,set,data,set,data,set,execution,environment;public,static,k,ev,data,set,vertex,k,null,value,vertex,set,data,set,edge,k,ev,edges,int,parallelism,data,set,vertex,k,null,value,vertex,set,edges,flat,map,new,emit,src,and,target,k,ev,set,parallelism,parallelism,name,emit,source,and,target,labels,return,vertex,set,distinct,set,parallelism,parallelism,name,emit,vertex,labels
