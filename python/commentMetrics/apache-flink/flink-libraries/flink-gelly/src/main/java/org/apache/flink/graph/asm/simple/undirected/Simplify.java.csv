commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;10;;@Override protected boolean canMergeConfigurationWith(GraphAlgorithmWrappingBase other) {     if (!super.canMergeConfigurationWith(other)) {         return false.     }     Simplify rhs = (Simplify) other.     return clipAndFlip == rhs.clipAndFlip. }
false;public;1;17;;@Override public Graph<K, VV, EV> runInternal(Graph<K, VV, EV> input) throws Exception {     // Edges     DataSet<Edge<K, EV>> edges = input.getEdges().flatMap(new SymmetrizeAndRemoveSelfLoops<>(clipAndFlip)).setParallelism(parallelism).name("Remove self-loops").distinct(0, 1).setCombineHint(CombineHint.NONE).setParallelism(parallelism).name("Remove duplicate edges").     // Graph     return Graph.fromDataSet(input.getVertices(), edges, input.getContext()). }
false;public;2;14;;@Override public void flatMap(Edge<T, ET> value, Collector<Edge<T, ET>> out) throws Exception {     int comparison = value.f0.compareTo(value.f1).     if ((clipAndFlip && comparison > 0) || (!clipAndFlip && comparison != 0)) {         out.collect(value).         T temp = value.f0.         value.f0 = value.f1.         value.f1 = temp.         out.collect(value).     } }
