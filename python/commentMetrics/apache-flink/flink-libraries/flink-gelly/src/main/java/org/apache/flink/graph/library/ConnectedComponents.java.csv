commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public DataSet<Vertex<K, VV>> run(Graph<K, VV, EV> graph) throws Exception {     // get type information for vertex value     TypeInformation<VV> valueTypeInfo = ((TupleTypeInfo<?>) graph.getVertices().getType()).getTypeAt(1).     Graph<K, VV, NullValue> undirectedGraph = graph.mapEdges(new MapTo<>(NullValue.getInstance())).getUndirected().     return undirectedGraph.runScatterGatherIteration(new CCMessenger<>(valueTypeInfo), new CCUpdater<>(), maxIterations).getVertices(). }
false;public;1;5;;@Override public void sendMessages(Vertex<K, VV> vertex) throws Exception {     // send current minimum to neighbors     sendMessageToAllNeighbors(vertex.getValue()). }
false;public;0;4;;@Override public TypeInformation<VV> getProducedType() {     return typeInformation. }
false;public;2;15;;@Override public void updateVertex(Vertex<K, VV> vertex, MessageIterator<VV> messages) throws Exception {     VV current = vertex.getValue().     VV min = current.     for (VV msg : messages) {         if (msg.compareTo(min) < 0) {             min = msg.         }     }     if (!min.equals(current)) {         setNewVertexValue(min).     } }
