commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;9;/**  * Creates a set of vertices with attached {@link String} values.  *  * @param env execution environment  * @return vertex data set with string values  */ ;/**  * Creates a set of vertices with attached {@link String} values.  *  * @param env execution environment  * @return vertex data set with string values  */ public static DataSet<Vertex<Long, String>> getVertices(ExecutionEnvironment env) {     List<Vertex<Long, String>> vertices = new ArrayList<>(INPUT_VERTICES.length).     for (String vertex : INPUT_VERTICES) {         String[] tokens = vertex.split(".").         vertices.add(new Vertex<>(Long.parseLong(tokens[0]), tokens[1])).     }     return env.fromCollection(vertices). }
true;public,static;1;9;/**  * Creates a set of edges with attached {@link String} values.  *  * @param env execution environment  * @return edge data set with string values  */ ;/**  * Creates a set of edges with attached {@link String} values.  *  * @param env execution environment  * @return edge data set with string values  */ public static DataSet<Edge<Long, String>> getEdges(ExecutionEnvironment env) {     List<Edge<Long, String>> edges = new ArrayList<>(INPUT_EDGES.length).     for (String edge : INPUT_EDGES) {         String[] tokens = edge.split(".").         edges.add(new Edge<>(Long.parseLong(tokens[0]), Long.parseLong(tokens[1]), tokens[2])).     }     return env.fromCollection(edges). }
