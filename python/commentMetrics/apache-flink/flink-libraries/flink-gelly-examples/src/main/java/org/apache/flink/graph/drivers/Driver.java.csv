commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * A one-line description, presented in the algorithm listing.  *  * @return short description  */ ;/**  * A one-line description, presented in the algorithm listing.  *  * @return short description  */ String getShortDescription().
true;;0;1;/**  * A multi-line description, presented in the algorithm usage.  *  * @return long description  */ ;/**  * A multi-line description, presented in the algorithm usage.  *  * @return long description  */ String getLongDescription().
true;;1;1;/**  * "Run" algorithms and analytics on the input graph. The execution plan  * is not finalized here but in the output methods.  *  * <p>Drivers are first configured, next planned, and finally the chosen  * output method is called.  *  * <p>A {@code null} value should be returned when the {@link Driver} does  * not execute a {@link GraphAlgorithm} but only executes a  * {@link GraphAnalytic}.  *  * @param graph input graph  * @throws Exception on error  */ ;/**  * "Run" algorithms and analytics on the input graph. The execution plan  * is not finalized here but in the output methods.  *  * <p>Drivers are first configured, next planned, and finally the chosen  * output method is called.  *  * <p>A {@code null} value should be returned when the {@link Driver} does  * not execute a {@link GraphAlgorithm} but only executes a  * {@link GraphAnalytic}.  *  * @param graph input graph  * @throws Exception on error  */ DataSet plan(Graph<K, VV, EV> graph) throws Exception.
true;;1;1;/**  * Analytic results are summaries so are always printed to the console  * irrespective of the chosen {@code Output}.  *  * @param out output stream for printing results  */ ;/**  * Analytic results are summaries so are always printed to the console  * irrespective of the chosen {@code Output}.  *  * @param out output stream for printing results  */ void printAnalytics(PrintStream out).
