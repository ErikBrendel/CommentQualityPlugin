commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getUsage() {     return "[--simplify <directed | undirected [--clip_and_flip]>] ". }
false;public;0;4;;@Override public boolean isHidden() {     return false. }
false;public;1;20;;@Override public void configure(ParameterTool parameterTool) {     String ordering = parameterTool.get("simplify").     if (ordering == null) {         value = Ordering.NONE.     } else {         switch(ordering.toLowerCase()) {             case "directed":                 value = Ordering.DIRECTED.                 break.             case "undirected":                 value = parameterTool.has("clip_and_flip") ? Ordering.UNDIRECTED_CLIP_AND_FLIP : Ordering.UNDIRECTED.                 break.             default:                 throw new ProgramParametrizationException("Expected 'directed' or 'undirected' ordering but received '" + ordering + "'").         }     } }
false;public;0;4;;@Override public Ordering getValue() {     return value. }
true;public;2;22;/**  * Simplify the given graph based on the configured value.  *  * @param graph input graph  * @param <T> graph key type  * @return output graph  * @throws Exception on error  */ ;/**  * Simplify the given graph based on the configured value.  *  * @param graph input graph  * @param <T> graph key type  * @return output graph  * @throws Exception on error  */ public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph, int parallelism) throws Exception {     switch(value) {         case DIRECTED:             graph = graph.run(new org.apache.flink.graph.asm.simple.directed.Simplify<T, NullValue, NullValue>().setParallelism(parallelism)).             break.         case UNDIRECTED:             graph = graph.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<T, NullValue, NullValue>(false).setParallelism(parallelism)).             break.         case UNDIRECTED_CLIP_AND_FLIP:             graph = graph.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<T, NullValue, NullValue>(true).setParallelism(parallelism)).             break.     }     return graph. }
false;public;0;12;;public String getShortString() {     switch(value) {         case DIRECTED:             return "d".         case UNDIRECTED:             return "u".         case UNDIRECTED_CLIP_AND_FLIP:             return "É”".         default:             return "".     } }
