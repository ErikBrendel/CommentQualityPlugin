# id;timestamp;commentText;codeText;commentWords;codeWords
Simplify -> public Simplify(ParameterizedBase owner);1490973365;Add this parameter to the list of parameters stored by owner.__@param owner the {@link Parameterized} using this {@link Parameter};public Simplify(ParameterizedBase owner) {_		owner.addParameter(this)__	};add,this,parameter,to,the,list,of,parameters,stored,by,owner,param,owner,the,link,parameterized,using,this,link,parameter;public,simplify,parameterized,base,owner,owner,add,parameter,this
Simplify -> public Simplify(ParameterizedBase owner);1495819075;Add this parameter to the list of parameters stored by owner.__@param owner the {@link Parameterized} using this {@link Parameter};public Simplify(ParameterizedBase owner) {_		owner.addParameter(this)__	};add,this,parameter,to,the,list,of,parameters,stored,by,owner,param,owner,the,link,parameterized,using,this,link,parameter;public,simplify,parameterized,base,owner,owner,add,parameter,this
Simplify -> public Simplify(ParameterizedBase owner);1498733142;Add this parameter to the list of parameters stored by owner.__@param owner the {@link Parameterized} using this {@link Parameter};public Simplify(ParameterizedBase owner) {_		owner.addParameter(this)__	};add,this,parameter,to,the,list,of,parameters,stored,by,owner,param,owner,the,link,parameterized,using,this,link,parameter;public,simplify,parameterized,base,owner,owner,add,parameter,this
Simplify -> public Simplify(ParameterizedBase owner);1502111816;Add this parameter to the list of parameters stored by owner.__@param owner the {@link Parameterized} using this {@link Parameter};public Simplify(ParameterizedBase owner) {_		owner.addParameter(this)__	};add,this,parameter,to,the,list,of,parameters,stored,by,owner,param,owner,the,link,parameterized,using,this,link,parameter;public,simplify,parameterized,base,owner,owner,add,parameter,this
Simplify -> public Simplify(ParameterizedBase owner);1505445931;Add this parameter to the list of parameters stored by owner.__@param owner the {@link Parameterized} using this {@link Parameter};public Simplify(ParameterizedBase owner) {_		owner.addParameter(this)__	};add,this,parameter,to,the,list,of,parameters,stored,by,owner,param,owner,the,link,parameterized,using,this,link,parameter;public,simplify,parameterized,base,owner,owner,add,parameter,this
Simplify -> public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph) 			throws Exception;1490973365;Simplify the given graph based on the configured value.__@param graph input graph_@param <T> graph key type_@return output graph_@throws Exception on error;public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph)_			throws Exception {__		switch (value) {_			case DIRECTED:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.directed.Simplify<T, NullValue, NullValue>())__				break__			case UNDIRECTED:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<T, NullValue, NullValue>(false))__				break__			case UNDIRECTED_CLIP_AND_FLIP:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<T, NullValue, NullValue>(true))__				break__		}__		return graph__	};simplify,the,given,graph,based,on,the,configured,value,param,graph,input,graph,param,t,graph,key,type,return,output,graph,throws,exception,on,error;public,t,extends,comparable,t,graph,t,null,value,null,value,simplify,graph,t,null,value,null,value,graph,throws,exception,switch,value,case,directed,graph,graph,run,new,org,apache,flink,graph,asm,simple,directed,simplify,t,null,value,null,value,break,case,undirected,graph,graph,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,t,null,value,null,value,false,break,case,graph,graph,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,t,null,value,null,value,true,break,return,graph
Simplify -> public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph) 			throws Exception;1495819075;Simplify the given graph based on the configured value.__@param graph input graph_@param <T> graph key type_@return output graph_@throws Exception on error;public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph)_			throws Exception {__		switch (value) {_			case DIRECTED:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.directed.Simplify<T, NullValue, NullValue>())__				break__			case UNDIRECTED:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<T, NullValue, NullValue>(false))__				break__			case UNDIRECTED_CLIP_AND_FLIP:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<T, NullValue, NullValue>(true))__				break__		}__		return graph__	};simplify,the,given,graph,based,on,the,configured,value,param,graph,input,graph,param,t,graph,key,type,return,output,graph,throws,exception,on,error;public,t,extends,comparable,t,graph,t,null,value,null,value,simplify,graph,t,null,value,null,value,graph,throws,exception,switch,value,case,directed,graph,graph,run,new,org,apache,flink,graph,asm,simple,directed,simplify,t,null,value,null,value,break,case,undirected,graph,graph,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,t,null,value,null,value,false,break,case,graph,graph,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,t,null,value,null,value,true,break,return,graph
Simplify -> public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph) 			throws Exception;1498733142;Simplify the given graph based on the configured value.__@param graph input graph_@param <T> graph key type_@return output graph_@throws Exception on error;public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph)_			throws Exception {__		switch (value) {_			case DIRECTED:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.directed.Simplify<T, NullValue, NullValue>())__				break__			case UNDIRECTED:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<T, NullValue, NullValue>(false))__				break__			case UNDIRECTED_CLIP_AND_FLIP:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<T, NullValue, NullValue>(true))__				break__		}__		return graph__	};simplify,the,given,graph,based,on,the,configured,value,param,graph,input,graph,param,t,graph,key,type,return,output,graph,throws,exception,on,error;public,t,extends,comparable,t,graph,t,null,value,null,value,simplify,graph,t,null,value,null,value,graph,throws,exception,switch,value,case,directed,graph,graph,run,new,org,apache,flink,graph,asm,simple,directed,simplify,t,null,value,null,value,break,case,undirected,graph,graph,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,t,null,value,null,value,false,break,case,graph,graph,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,t,null,value,null,value,true,break,return,graph
Simplify -> public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph) 			throws Exception;1502111816;Simplify the given graph based on the configured value.__@param graph input graph_@param <T> graph key type_@return output graph_@throws Exception on error;public <T extends Comparable<T>> Graph<T, NullValue, NullValue> simplify(Graph<T, NullValue, NullValue> graph)_			throws Exception {__		switch (value) {_			case DIRECTED:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.directed.Simplify<>())__				break__			case UNDIRECTED:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<>(false))__				break__			case UNDIRECTED_CLIP_AND_FLIP:_				graph = graph_					.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<>(true))__				break__		}__		return graph__	};simplify,the,given,graph,based,on,the,configured,value,param,graph,input,graph,param,t,graph,key,type,return,output,graph,throws,exception,on,error;public,t,extends,comparable,t,graph,t,null,value,null,value,simplify,graph,t,null,value,null,value,graph,throws,exception,switch,value,case,directed,graph,graph,run,new,org,apache,flink,graph,asm,simple,directed,simplify,break,case,undirected,graph,graph,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,false,break,case,graph,graph,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,true,break,return,graph
