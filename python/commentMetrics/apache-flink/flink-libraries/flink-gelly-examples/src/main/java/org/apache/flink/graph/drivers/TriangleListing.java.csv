commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getShortDescription() {     return "list triangles". }
false;public;0;10;;@Override public String getLongDescription() {     return WordUtils.wrap(new StrBuilder().appendln("List all triangles graph.").appendNewLine().append("The algorithm result contains three vertex IDs. For the directed algorithm " + "the result contains an additional bitmask indicating the presence of the six " + "potential connecting edges.").toString(), 80). }
false;public;1;39;;@Override public DataSet plan(Graph<K, VV, EV> graph) throws Exception {     int parallelism = this.parallelism.getValue().intValue().     switch(order.getValue()) {         case DIRECTED:             if (computeTriadicCensus.getValue()) {                 triadicCensus = graph.run(new org.apache.flink.graph.library.clustering.directed.TriadicCensus<K, VV, EV>().setParallelism(parallelism)).             }             @SuppressWarnings("unchecked")             DataSet<PrintableResult> directedResult = (DataSet<PrintableResult>) (DataSet<?>) graph.run(new org.apache.flink.graph.library.clustering.directed.TriangleListing<K, VV, EV>().setPermuteResults(permuteResults.getValue()).setSortTriangleVertices(sortTriangleVertices.getValue()).setParallelism(parallelism)).             return directedResult.         case UNDIRECTED:             if (computeTriadicCensus.getValue()) {                 triadicCensus = graph.run(new org.apache.flink.graph.library.clustering.undirected.TriadicCensus<K, VV, EV>().setParallelism(parallelism)).             }             @SuppressWarnings("unchecked")             DataSet<PrintableResult> undirectedResult = (DataSet<PrintableResult>) (DataSet<?>) graph.run(new org.apache.flink.graph.library.clustering.undirected.TriangleListing<K, VV, EV>().setPermuteResults(permuteResults.getValue()).setSortTriangleVertices(sortTriangleVertices.getValue()).setParallelism(parallelism)).             return undirectedResult.         default:             throw new RuntimeException("Unknown order: " + order).     } }
false;public;1;7;;@Override public void printAnalytics(PrintStream out) {     if (computeTriadicCensus.getValue()) {         out.print("Triadic census:\n  ").         out.println(triadicCensus.getResult().toPrintableString().replace(".", "\n ")).     } }
