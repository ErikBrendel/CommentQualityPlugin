commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * An informal usage string. Parameter names are prefixed with "--".  *  * <p>Optional parameters are enclosed by "[" and "]".  *  * <p>Generic values are represented by all-caps with specific values enclosed  * by "&lt." and "&gt.".  *  * @return command-line usage string  */ ;/**  * An informal usage string. Parameter names are prefixed with "--".  *  * <p>Optional parameters are enclosed by "[" and "]".  *  * <p>Generic values are represented by all-caps with specific values enclosed  * by "&lt." and "&gt.".  *  * @return command-line usage string  */ String getUsage().
true;;0;1;/**  * A hidden parameter is parsed from the command-line configuration but is  * not printed in the usage string. This can be used for power-user options  * not displayed to the general user.  *  * @return whether this parameter should be hidden from standard usage  */ ;/**  * A hidden parameter is parsed from the command-line configuration but is  * not printed in the usage string. This can be used for power-user options  * not displayed to the general user.  *  * @return whether this parameter should be hidden from standard usage  */ boolean isHidden().
true;;1;1;/**  * Read and parse the parameter value from command-line arguments.  *  * @param parameterTool parameter parser  */ ;/**  * Read and parse the parameter value from command-line arguments.  *  * @param parameterTool parameter parser  */ void configure(ParameterTool parameterTool).
true;;0;1;/**  * Get the parameter value.  *  * @return parameter value  */ ;/**  * Get the parameter value.  *  * @return parameter value  */ T getValue().
