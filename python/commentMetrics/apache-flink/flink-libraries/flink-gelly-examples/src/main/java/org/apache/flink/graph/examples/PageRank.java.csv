commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public DataSet<Vertex<K, Double>> run(Graph<K, Double, Double> network) throws Exception {     DataSet<Tuple2<K, LongValue>> vertexOutDegrees = network.outDegrees().     Graph<K, Double, Double> networkWithWeights = network.joinWithEdgesOnSource(vertexOutDegrees, new InitWeights()).     ScatterGatherConfiguration parameters = new ScatterGatherConfiguration().     parameters.setOptNumVertices(true).     return networkWithWeights.runScatterGatherIteration(new RankMessenger<>(), new VertexRankUpdater<>(beta), maxIterations, parameters).getVertices(). }
false;public;1;11;;@Override public void sendMessages(Vertex<K, Double> vertex) {     if (getSuperstepNumber() == 1) {         // initialize vertex ranks         vertex.setValue(1.0 / this.getNumberOfVertices()).     }     for (Edge<K, Double> edge : getEdges()) {         sendMessageTo(edge.getTarget(), vertex.getValue() * edge.getValue()).     } }
false;public;2;11;;@Override public void updateVertex(Vertex<K, Double> vertex, MessageIterator<Double> inMessages) {     double rankSum = 0.0.     for (double msg : inMessages) {         rankSum += msg.     }     // apply the dampening factor / random jump     double newRank = (beta * rankSum) + (1 - beta) / this.getNumberOfVertices().     setNewVertexValue(newRank). }
false;public;2;3;;public Double edgeJoin(Double edgeValue, LongValue inputValue) {     return edgeValue / (double) inputValue.getValue(). }
