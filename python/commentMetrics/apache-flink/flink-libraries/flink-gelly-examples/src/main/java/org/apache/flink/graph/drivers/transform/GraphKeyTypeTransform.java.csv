commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getIdentity() {     return type.toString(). }
false;public;1;97;;@Override public Graph<?, VV, EV> transformInput(Graph<LongValue, VV, EV> input) throws Exception {     // Long.MAX_VALUE is much larger than the number of atoms in the Earth     // and considered sufficient though representing 63 instead of 64 bits     long maxVertexCount = Long.MAX_VALUE.     TranslateFunction<LongValue, ?> translator = null.     switch(type.getValue()) {         case BYTE:             maxVertexCount = LongValueToUnsignedByteValue.MAX_VERTEX_COUNT.             translator = new LongValueToUnsignedByteValue().             break.         case NATIVE_BYTE:             maxVertexCount = LongValueToUnsignedByte.MAX_VERTEX_COUNT.             translator = new LongValueToUnsignedByte().             break.         case SHORT:             maxVertexCount = LongValueToUnsignedShortValue.MAX_VERTEX_COUNT.             translator = new LongValueToUnsignedShortValue().             break.         case NATIVE_SHORT:             maxVertexCount = LongValueToUnsignedShort.MAX_VERTEX_COUNT.             translator = new LongValueToUnsignedShort().             break.         case CHAR:             maxVertexCount = LongValueToCharValue.MAX_VERTEX_COUNT.             translator = new LongValueToCharValue().             break.         case NATIVE_CHAR:             maxVertexCount = LongValueToChar.MAX_VERTEX_COUNT.             translator = new LongValueToChar().             break.         case INTEGER:             maxVertexCount = LongValueToUnsignedIntValue.MAX_VERTEX_COUNT.             translator = new LongValueToUnsignedIntValue().             break.         case NATIVE_INTEGER:             maxVertexCount = LongValueToUnsignedInt.MAX_VERTEX_COUNT.             translator = new LongValueToUnsignedInt().             break.         case LONG:             break.         case NATIVE_LONG:             translator = new LongValueToLong().             break.         case FLOAT:             maxVertexCount = LongValueToUnsignedFloatValue.MAX_VERTEX_COUNT.             translator = new LongValueToUnsignedFloatValue().             break.         case NATIVE_FLOAT:             maxVertexCount = LongValueToUnsignedFloat.MAX_VERTEX_COUNT.             translator = new LongValueToUnsignedFloat().             break.         case DOUBLE:             translator = new LongValueToDoubleValue().             break.         case NATIVE_DOUBLE:             translator = new LongValueToDouble().             break.         case STRING:             translator = new LongValueToStringValue().             break.         case NATIVE_STRING:             translator = new LongValueToString().             break.         default:             throw new ProgramParametrizationException("Unknown type '" + type.getValue() + "'").     }     if (vertexCount > maxVertexCount) {         throw new ProgramParametrizationException("Vertex count '" + vertexCount + "' must be no greater than " + maxVertexCount + " for type '" + type.getValue() + "'.").     }     if (translator == null) {         return input.     } else {         return (Graph<?, VV, EV>) input.run(new TranslateGraphIds(translator)).     } }
false;public;0;4;;@Override public Type[] getActualTypeArguments() {     return new Type[] { LongValueWithProperHashCode.class }. }
false;public;0;4;;@Override public Type getRawType() {     return result.getType().getTypeClass(). }
false;public;0;4;;@Override public Type getOwnerType() {     return null. }
false;public;1;110;;@Override public DataSet<TranslatableResult<?>> transformResult(final DataSet<TranslatableResult<?>> result) throws Exception {     if (disableTypeReversal.getValue()) {         return result.     }     // the minimum vertex count is used for signed types for which results     // must be translated to a wider type when overflowing to negative     // values in order to preserve consistent checksums     long minVertexCount = 0.     TranslateFunction<?, LongValueWithProperHashCode> translator = null.     switch(type.getValue()) {         case BYTE:             minVertexCount = UnsignedByteValueToLongValueWithProperHashCode.MIN_VERTEX_COUNT.             translator = new UnsignedByteValueToLongValueWithProperHashCode().             break.         case NATIVE_BYTE:             minVertexCount = UnsignedByteToLongValueWithProperHashCode.MIN_VERTEX_COUNT.             translator = new UnsignedByteToLongValueWithProperHashCode().             break.         case SHORT:             minVertexCount = UnsignedShortValueToLongValueWithProperHashCode.MIN_VERTEX_COUNT.             translator = new UnsignedShortValueToLongValueWithProperHashCode().             break.         case NATIVE_SHORT:             minVertexCount = UnsignedShortToLongValueWithProperHashCode.MIN_VERTEX_COUNT.             translator = new UnsignedShortToLongValueWithProperHashCode().             break.         case CHAR:             break.         case NATIVE_CHAR:             break.         case INTEGER:             minVertexCount = UnsignedIntValueToLongValueWithProperHashCode.MIN_VERTEX_COUNT.             translator = new UnsignedIntValueToLongValueWithProperHashCode().             break.         case NATIVE_INTEGER:             minVertexCount = UnsignedIntToLongValueWithProperHashCode.MIN_VERTEX_COUNT.             translator = new UnsignedIntToLongValueWithProperHashCode().             break.         case LONG:             translator = new LongValueToLongValueWithProperHashCode().             break.         case NATIVE_LONG:             break.         case FLOAT:             translator = new UnsignedFloatValueToLongValueWithProperHashCode().             break.         case NATIVE_FLOAT:             translator = new UnsignedFloatToLongValueWithProperHashCode().             break.         case DOUBLE:             translator = new DoubleValueToLongValueWithProperHashCode().             break.         case NATIVE_DOUBLE:             translator = new DoubleToLongValueWithProperHashCode().             break.         case STRING:             translator = new StringValueToLongValueWithProperHashCode().             break.         case NATIVE_STRING:             translator = new StringToLongValueWithProperHashCode().             break.         default:             throw new ProgramParametrizationException("Unknown type '" + type.getValue() + "'").     }     if (translator == null || vertexCount < minVertexCount) {         return result.     }     TypeInformation<?> typeInfo = TypeExtractor.createTypeInfo(new ParameterizedType() {          @Override         public Type[] getActualTypeArguments() {             return new Type[] { LongValueWithProperHashCode.class }.         }          @Override         public Type getRawType() {             return result.getType().getTypeClass().         }          @Override         public Type getOwnerType() {             return null.         }     }).     return result.flatMap(new TranslateResultIDs(translator)).returns(typeInfo).name("Translate results IDs"). }
false;public;2;16;;@Override public ByteValue translate(LongValue value, ByteValue reuse) throws Exception {     if (reuse == null) {         reuse = new ByteValue().     }     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to byte.").     }     reuse.setValue((byte) (l & (MAX_VERTEX_COUNT - 1))).     return reuse. }
false;public;2;11;;@Override public Byte translate(LongValue value, Byte reuse) throws Exception {     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to byte.").     }     return (byte) (l & (MAX_VERTEX_COUNT - 1)). }
false;public;2;16;;@Override public ShortValue translate(LongValue value, ShortValue reuse) throws Exception {     if (reuse == null) {         reuse = new ShortValue().     }     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to short.").     }     reuse.setValue((short) (l & (MAX_VERTEX_COUNT - 1))).     return reuse. }
false;public;2;11;;@Override public Short translate(LongValue value, Short reuse) throws Exception {     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to short.").     }     return (short) (l & (MAX_VERTEX_COUNT - 1)). }
false;public;2;16;;@Override public CharValue translate(LongValue value, CharValue reuse) throws Exception {     if (reuse == null) {         reuse = new CharValue().     }     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to char.").     }     reuse.setValue((char) (l & (MAX_VERTEX_COUNT - 1))).     return reuse. }
false;public;2;11;;@Override public Character translate(LongValue value, Character reuse) throws Exception {     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to char.").     }     return (char) (l & (MAX_VERTEX_COUNT - 1)). }
false;public;2;11;;@Override public Integer translate(LongValue value, Integer reuse) throws Exception {     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to integer.").     }     return (int) (l & (MAX_VERTEX_COUNT - 1)). }
false;public;2;5;;@Override public Long translate(LongValue value, Long reuse) throws Exception {     return value.getValue(). }
false;public;2;16;;@Override public FloatValue translate(LongValue value, FloatValue reuse) throws Exception {     if (reuse == null) {         reuse = new FloatValue().     }     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to float.").     }     reuse.setValue(Float.intBitsToFloat((int) (l & (MAX_VERTEX_COUNT - 1)))).     return reuse. }
false;public;2;11;;@Override public Float translate(LongValue value, Float reuse) throws Exception {     long l = value.getValue().     if (l < 0 || l >= MAX_VERTEX_COUNT) {         throw new IllegalArgumentException("Cannot cast long value " + value + " to float.").     }     return Float.intBitsToFloat((int) (l & (MAX_VERTEX_COUNT - 1))). }
false;public;2;10;;@Override public DoubleValue translate(LongValue value, DoubleValue reuse) throws Exception {     if (reuse == null) {         reuse = new DoubleValue().     }     reuse.setValue(Double.longBitsToDouble(value.getValue())).     return reuse. }
false;public;2;5;;@Override public Double translate(LongValue value, Double reuse) throws Exception {     return Double.longBitsToDouble(value.getValue()). }
false;public;2;5;;@Override public String translate(LongValue value, String reuse) throws Exception {     return Long.toString(value.getValue()). }
false;public;2;5;;@Override public void flatMap(TranslatableResult<T> value, Collector<TranslatableResult<U>> out) throws Exception {     reuse = value.translate(translator, reuse, out). }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(ByteValue value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(value.getValue() & 0xff).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(Byte value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(value & 0xff).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(ShortValue value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(value.getValue() & 0xffff).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(Short value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(value & 0xffff).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(IntValue value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(0xffffffffL & (long) value.getValue()).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(Integer value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(0xffffffffL & (long) value).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(LongValue value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(value.getValue()).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(FloatValue value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(0xffffffffL & Float.floatToRawIntBits(value.getValue())).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(Float value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(0xffffffffL & Float.floatToRawIntBits(value)).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(DoubleValue value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(Double.doubleToRawLongBits(value.getValue())).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(Double value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(Double.doubleToRawLongBits(value)).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(StringValue value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(Long.parseLong(value.getValue())).     return reuse. }
false;public;2;10;;@Override public LongValueWithProperHashCode translate(String value, LongValueWithProperHashCode reuse) throws Exception {     if (reuse == null) {         reuse = new LongValueWithProperHashCode().     }     reuse.setValue(Long.valueOf(value)).     return reuse. }
