commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public String getUsage() {     return "--" + PREFIX + "0 size:wrap_endpoints [--" + PREFIX + " size:wrap_endpoints [--" + PREFIX + " ...]] " + super.getUsage(). }
false;public;1;21;;@Override public void configure(ParameterTool parameterTool) throws ProgramParametrizationException {     super.configure(parameterTool).     // add dimensions as ordered by dimension ID (dim0, dim1, dim2, ...)     Map<Integer, String> dimensionMap = new TreeMap<>().     // first parse all dimensions into a sorted map     for (String key : parameterTool.toMap().keySet()) {         if (key.startsWith(PREFIX)) {             int dimensionId = Integer.parseInt(key.substring(PREFIX.length())).             dimensionMap.put(dimensionId, parameterTool.get(key)).         }     }     // then store dimensions in order     for (String field : dimensionMap.values()) {         dimensions.add(new Dimension(field)).     } }
false;public;0;4;;@Override public String getIdentity() {     return getName() + " (" + dimensions + ")". }
false;protected;0;14;;@Override protected long vertexCount() {     BigInteger vertexCount = BigInteger.ONE.     for (Dimension dimension : dimensions) {         vertexCount = vertexCount.multiply(BigInteger.valueOf(dimension.size)).     }     if (vertexCount.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {         throw new ProgramParametrizationException("Number of vertices in grid graph '" + vertexCount + "' is greater than Long.MAX_VALUE.").     }     return vertexCount.longValue(). }
false;public;1;12;;@Override public Graph<LongValue, NullValue, NullValue> create(ExecutionEnvironment env) {     org.apache.flink.graph.generator.GridGraph graph = new org.apache.flink.graph.generator.GridGraph(env).     for (Dimension dimension : dimensions) {         graph.addDimension(dimension.size, dimension.wrapEndpoints).     }     return graph.setParallelism(parallelism.getValue().intValue()).generate(). }
false;public;0;4;;@Override public String toString() {     return Long.toString(size) + (wrapEndpoints ? "+" : "âŠž"). }
