commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Adds a parameter to the list. Parameter order is preserved when printing  * the command-line usage string.  *  * @param parameter to add to the list of parameters  */ ;/**  * Adds a parameter to the list. Parameter order is preserved when printing  * the command-line usage string.  *  * @param parameter to add to the list of parameters  */ public void addParameter(Parameter<?> parameter) {     parameters.add(parameter). }
false;public;0;4;;@Override public String getName() {     return this.getClass().getSimpleName(). }
false;public;0;15;;@Override public String getUsage() {     StrBuilder strBuilder = new StrBuilder().     // print parameters as ordered list     for (Parameter<?> parameter : parameters) {         if (!parameter.isHidden()) {             strBuilder.append(parameter.getUsage()).append(" ").         }     }     return strBuilder.toString(). }
false;public;1;6;;@Override public void configure(ParameterTool parameterTool) throws ProgramParametrizationException {     for (Parameter<?> parameter : parameters) {         parameter.configure(parameterTool).     } }
