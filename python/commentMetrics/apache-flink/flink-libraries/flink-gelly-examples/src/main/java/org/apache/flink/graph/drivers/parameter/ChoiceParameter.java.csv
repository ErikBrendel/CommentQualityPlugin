commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public ChoiceParameter setDefaultValue(String defaultValue) {     super.setDefaultValue(defaultValue).     choices.add(defaultValue).     return this. }
true;public;1;4;/**  * Add additional choices. This function can be called multiple times.  *  * @param choices additional choices  * @return this  */ ;/**  * Add additional choices. This function can be called multiple times.  *  * @param choices additional choices  * @return this  */ public ChoiceParameter addChoices(String... choices) {     Collections.addAll(this.choices, choices).     return this. }
true;public;1;4;/**  * Add additional hidden choices. This function can be called multiple  * times. These choices will not be printed in the usage string.  *  * @param hiddenChoices additional hidden choices  * @return this  */ ;/**  * Add additional hidden choices. This function can be called multiple  * times. These choices will not be printed in the usage string.  *  * @param hiddenChoices additional hidden choices  * @return this  */ public ChoiceParameter addHiddenChoices(String... hiddenChoices) {     Collections.addAll(this.hiddenChoices, hiddenChoices).     return this. }
false;public;0;12;;@Override public String getUsage() {     String option = new StrBuilder().append("--").append(name).append(" <").append(StringUtils.join(choices, " | ")).append(">").toString().     return hasDefaultValue ? "[" + option + "]" : option. }
false;public;1;33;;@Override public void configure(ParameterTool parameterTool) {     Preconditions.checkArgument(choices.size() > 0, "No choices provided").     String selected = parameterTool.get(name).     if (selected == null) {         if (hasDefaultValue) {             value = defaultValue.             return.         } else {             throw new ProgramParametrizationException("Must select a choice for option '" + name + "': '[" + StringUtils.join(choices, ", ") + "]'").         }     }     for (String choice : choices) {         if (choice.equals(selected)) {             this.value = selected.             return.         }     }     for (String choice : hiddenChoices) {         if (choice.equals(selected)) {             this.value = selected.             return.         }     }     throw new ProgramParametrizationException("Selection '" + selected + "' for option '" + name + "' is not in choices '[" + StringUtils.join(choices, ", ") + "]'"). }
false;public;0;4;;@Override public String toString() {     return this.value. }
