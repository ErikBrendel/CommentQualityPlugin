commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public Tuple3<Long, Long, Double> map(Triplet<Long, Point, Double> triplet) throws Exception {     Vertex<Long, Point> srcVertex = triplet.getSrcVertex().     Vertex<Long, Point> trgVertex = triplet.getTrgVertex().     return new Tuple3<>(srcVertex.getId(), trgVertex.getId(), srcVertex.getValue().euclideanDistance(trgVertex.getValue())). }
false;public;2;3;;public Double edgeJoin(Double edgeValue, Double inputValue) {     return inputValue. }
false;public,static;1;52;;public static void main(String[] args) throws Exception {     if (!parseParameters(args)) {         return.     }     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Vertex<Long, Point>> vertices = getVerticesDataSet(env).     DataSet<Edge<Long, Double>> edges = getEdgesDataSet(env).     Graph<Long, Point, Double> graph = Graph.fromDataSet(vertices, edges, env).     // the edge value will be the Euclidean distance between its src and trg vertex     DataSet<Tuple3<Long, Long, Double>> edgesWithEuclideanWeight = graph.getTriplets().map(new MapFunction<Triplet<Long, Point, Double>, Tuple3<Long, Long, Double>>() {          @Override         public Tuple3<Long, Long, Double> map(Triplet<Long, Point, Double> triplet) throws Exception {             Vertex<Long, Point> srcVertex = triplet.getSrcVertex().             Vertex<Long, Point> trgVertex = triplet.getTrgVertex().             return new Tuple3<>(srcVertex.getId(), trgVertex.getId(), srcVertex.getValue().euclideanDistance(trgVertex.getValue())).         }     }).     Graph<Long, Point, Double> resultedGraph = graph.joinWithEdges(edgesWithEuclideanWeight, new EdgeJoinFunction<Double, Double>() {          public Double edgeJoin(Double edgeValue, Double inputValue) {             return inputValue.         }     }).     // retrieve the edges from the final result     DataSet<Edge<Long, Double>> result = resultedGraph.getEdges().     // emit result     if (fileOutput) {         result.writeAsCsv(outputPath, "\n", ",").         // since file sinks are lazy, we trigger the execution explicitly         env.execute("Euclidean Graph Weighing Example").     } else {         result.print().     } }
false;public;0;5;;@Override public String getDescription() {     return "Weighing a graph by computing the Euclidean distance " + "between its vertices". }
false;public;1;3;;public double euclideanDistance(Point other) {     return Math.sqrt((x - other.x) * (x - other.x) + (y - other.y) * (y - other.y)). }
false;public;0;4;;@Override public String toString() {     return x + " " + y. }
false;private,static;1;19;;private static boolean parseParameters(String[] args) {     if (args.length > 0) {         if (args.length == 3) {             fileOutput = true.             verticesInputPath = args[0].             edgesInputPath = args[1].             outputPath = args[2].         } else {             System.out.println("Executing Euclidean Graph Weighing example with default parameters and built-in default data.").             System.out.println("Provide parameters to read input data from files.").             System.out.println("See the documentation for the correct format of input files.").             System.err.println("Usage: EuclideanGraphWeighing <input vertices path> <input edges path>" + " <output path>").             return false.         }     }     return true. }
false;public;1;4;;@Override public Vertex<Long, Point> map(Tuple3<Long, Double, Double> value) throws Exception {     return new Vertex<>(value.f0, new Point(value.f1, value.f2)). }
false;private,static;1;16;;private static DataSet<Vertex<Long, Point>> getVerticesDataSet(ExecutionEnvironment env) {     if (fileOutput) {         return env.readCsvFile(verticesInputPath).lineDelimiter("\n").types(Long.class, Double.class, Double.class).map(new MapFunction<Tuple3<Long, Double, Double>, Vertex<Long, Point>>() {              @Override             public Vertex<Long, Point> map(Tuple3<Long, Double, Double> value) throws Exception {                 return new Vertex<>(value.f0, new Point(value.f1, value.f2)).             }         }).     } else {         return EuclideanGraphData.getDefaultVertexDataSet(env).     } }
false;public;1;4;;@Override public Edge<Long, Double> map(Tuple2<Long, Long> tuple2) throws Exception {     return new Edge<>(tuple2.f0, tuple2.f1, 0.0). }
false;private,static;1;16;;private static DataSet<Edge<Long, Double>> getEdgesDataSet(ExecutionEnvironment env) {     if (fileOutput) {         return env.readCsvFile(edgesInputPath).lineDelimiter("\n").types(Long.class, Long.class).map(new MapFunction<Tuple2<Long, Long>, Edge<Long, Double>>() {              @Override             public Edge<Long, Double> map(Tuple2<Long, Long> tuple2) throws Exception {                 return new Edge<>(tuple2.f0, tuple2.f1, 0.0).             }         }).     } else {         return EuclideanGraphData.getDefaultEdgeDataSet(env).     } }
