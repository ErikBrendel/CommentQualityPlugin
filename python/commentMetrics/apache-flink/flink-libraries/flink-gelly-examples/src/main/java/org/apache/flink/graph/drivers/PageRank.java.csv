commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getShortDescription() {     return "score vertices by the number and quality of incoming links". }
false;public;0;10;;@Override public String getLongDescription() {     return new StrBuilder().appendln("PageRank computes a per-vertex score which is the sum of PageRank scores " + "transmitted over in-edges. Each vertex's score is divided evenly among " + "out-edges. High-scoring vertices are linked to by other high-scoring vertices.").appendNewLine().append("The result contains the vertex ID and PageRank score.").toString(). }
false;public;1;10;;@Override public DataSet plan(Graph<K, VV, EV> graph) throws Exception {     return graph.run(new org.apache.flink.graph.library.linkanalysis.PageRank<K, VV, EV>(dampingFactor.getValue(), iterationConvergence.getValue().iterations, iterationConvergence.getValue().convergenceThreshold).setIncludeZeroDegreeVertices(includeZeroDegreeVertices.getValue()).setParallelism(parallelism.getValue().intValue())). }
