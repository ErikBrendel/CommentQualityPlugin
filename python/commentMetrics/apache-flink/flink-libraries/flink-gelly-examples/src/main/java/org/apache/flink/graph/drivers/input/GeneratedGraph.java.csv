# id;timestamp;commentText;codeText;commentWords;codeWords
GeneratedGraph -> protected String getTypeName();1493649310;Get the name of the type.__@return name of the type;protected String getTypeName() {_		return WordUtils.capitalize(type.getValue())__	};get,the,name,of,the,type,return,name,of,the,type;protected,string,get,type,name,return,word,utils,capitalize,type,get,value
GeneratedGraph -> protected String getTypeName();1495819075;Get the name of the type.__@return name of the type;protected String getTypeName() {_		return WordUtils.capitalize(type.getValue())__	};get,the,name,of,the,type,return,name,of,the,type;protected,string,get,type,name,return,word,utils,capitalize,type,get,value
GeneratedGraph -> protected String getTypeName();1498733142;Get the name of the type.__@return name of the type;protected String getTypeName() {_		return WordUtils.capitalize(type.getValue())__	};get,the,name,of,the,type,return,name,of,the,type;protected,string,get,type,name,return,word,utils,capitalize,type,get,value
GeneratedGraph -> protected String getTypeName();1499777483;Get the name of the type.__@return name of the type;protected String getTypeName() {_		return WordUtils.capitalize(type.getValue())__	};get,the,name,of,the,type,return,name,of,the,type;protected,string,get,type,name,return,word,utils,capitalize,type,get,value
GeneratedGraph -> protected abstract Graph<K, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception_;1493649310;Generate the graph as configured.__@param env Flink execution environment_@return generated graph_@throws Exception on error;protected abstract Graph<K, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception_;generate,the,graph,as,configured,param,env,flink,execution,environment,return,generated,graph,throws,exception,on,error;protected,abstract,graph,k,null,value,null,value,generate,execution,environment,env,throws,exception
GeneratedGraph -> protected abstract Graph<K, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception_;1495819075;Generate the graph as configured.__@param env Flink execution environment_@return generated graph_@throws Exception on error;protected abstract Graph<K, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception_;generate,the,graph,as,configured,param,env,flink,execution,environment,return,generated,graph,throws,exception,on,error;protected,abstract,graph,k,null,value,null,value,generate,execution,environment,env,throws,exception
GeneratedGraph -> protected abstract Graph<K, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception_;1498733142;Generate the graph as configured.__@param env Flink execution environment_@return generated graph_@throws Exception on error;protected abstract Graph<K, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception_;generate,the,graph,as,configured,param,env,flink,execution,environment,return,generated,graph,throws,exception,on,error;protected,abstract,graph,k,null,value,null,value,generate,execution,environment,env,throws,exception
GeneratedGraph -> protected abstract Graph<K, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception_;1499777483;Generate the graph as configured.__@param env Flink execution environment_@return generated graph_@throws Exception on error;protected abstract Graph<K, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception_;generate,the,graph,as,configured,param,env,flink,execution,environment,return,generated,graph,throws,exception,on,error;protected,abstract,graph,k,null,value,null,value,generate,execution,environment,env,throws,exception
GeneratedGraph -> protected abstract long vertexCount()_;1493649310;The vertex count is verified to be no greater than the capacity of the_selected data type. All vertices must be counted even if skipped or_unused when generating graph edges.__@return number of vertices configured for the graph;protected abstract long vertexCount()_;the,vertex,count,is,verified,to,be,no,greater,than,the,capacity,of,the,selected,data,type,all,vertices,must,be,counted,even,if,skipped,or,unused,when,generating,graph,edges,return,number,of,vertices,configured,for,the,graph;protected,abstract,long,vertex,count
GeneratedGraph -> protected abstract long vertexCount()_;1495819075;The vertex count is verified to be no greater than the capacity of the_selected data type. All vertices must be counted even if skipped or_unused when generating graph edges.__@return number of vertices configured for the graph;protected abstract long vertexCount()_;the,vertex,count,is,verified,to,be,no,greater,than,the,capacity,of,the,selected,data,type,all,vertices,must,be,counted,even,if,skipped,or,unused,when,generating,graph,edges,return,number,of,vertices,configured,for,the,graph;protected,abstract,long,vertex,count
GeneratedGraph -> protected abstract long vertexCount()_;1498733142;The vertex count is verified to be no greater than the capacity of the_selected data type. All vertices must be counted even if skipped or_unused when generating graph edges.__@return number of vertices configured for the graph;protected abstract long vertexCount()_;the,vertex,count,is,verified,to,be,no,greater,than,the,capacity,of,the,selected,data,type,all,vertices,must,be,counted,even,if,skipped,or,unused,when,generating,graph,edges,return,number,of,vertices,configured,for,the,graph;protected,abstract,long,vertex,count
GeneratedGraph -> protected abstract long vertexCount()_;1499777483;The vertex count is verified to be no greater than the capacity of the_selected data type. All vertices must be counted even if skipped or_unused when generating graph edges.__@return number of vertices configured for the graph;protected abstract long vertexCount()_;the,vertex,count,is,verified,to,be,no,greater,than,the,capacity,of,the,selected,data,type,all,vertices,must,be,counted,even,if,skipped,or,unused,when,generating,graph,edges,return,number,of,vertices,configured,for,the,graph;protected,abstract,long,vertex,count
GeneratedGraph -> protected abstract long vertexCount()_;1501079480;The vertex count is verified to be no greater than the capacity of the_selected data type. All vertices must be counted even if skipped or_unused when generating graph edges.__@return number of vertices configured for the graph;protected abstract long vertexCount()_;the,vertex,count,is,verified,to,be,no,greater,than,the,capacity,of,the,selected,data,type,all,vertices,must,be,counted,even,if,skipped,or,unused,when,generating,graph,edges,return,number,of,vertices,configured,for,the,graph;protected,abstract,long,vertex,count
GeneratedGraph -> protected abstract long vertexCount()_;1505445931;The vertex count is verified to be no greater than the capacity of the_selected data type. All vertices must be counted even if skipped or_unused when generating graph edges.__@return number of vertices configured for the graph;protected abstract long vertexCount()_;the,vertex,count,is,verified,to,be,no,greater,than,the,capacity,of,the,selected,data,type,all,vertices,must,be,counted,even,if,skipped,or,unused,when,generating,graph,edges,return,number,of,vertices,configured,for,the,graph;protected,abstract,long,vertex,count
