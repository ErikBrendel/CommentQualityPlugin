commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getShortDescription() {     return "measure the connectedness of vertex neighborhoods". }
false;public;0;13;;@Override public String getLongDescription() {     return WordUtils.wrap(new StrBuilder().appendln("The local clustering coefficient measures the connectedness of each " + "vertex's neighborhood. The global clustering coefficient measures the " + "connected of the graph. The average clustering coefficient is the mean local " + "clustering coefficient. Each score ranges from 0.0 (no edges between vertex " + "neighbors) to 1.0 (neighborhood or graph is a clique).").appendNewLine().append("The algorithm result contains the vertex ID, degree, and number of edges " + "connecting neighbors.").toString(), 80). }
false;public;1;39;;@Override public DataSet plan(Graph<K, VV, EV> graph) throws Exception {     int parallelism = this.parallelism.getValue().intValue().     switch(order.getValue()) {         case DIRECTED:             globalClusteringCoefficient = graph.run(new org.apache.flink.graph.library.clustering.directed.GlobalClusteringCoefficient<K, VV, EV>().setParallelism(parallelism)).             averageClusteringCoefficient = graph.run(new org.apache.flink.graph.library.clustering.directed.AverageClusteringCoefficient<K, VV, EV>().setParallelism(parallelism)).             @SuppressWarnings("unchecked")             DataSet<PrintableResult> directedResult = (DataSet<PrintableResult>) (DataSet<?>) graph.run(new org.apache.flink.graph.library.clustering.directed.LocalClusteringCoefficient<K, VV, EV>().setParallelism(parallelism)).             return directedResult.         case UNDIRECTED:             globalClusteringCoefficient = graph.run(new org.apache.flink.graph.library.clustering.undirected.GlobalClusteringCoefficient<K, VV, EV>().setParallelism(parallelism)).             averageClusteringCoefficient = graph.run(new org.apache.flink.graph.library.clustering.undirected.AverageClusteringCoefficient<K, VV, EV>().setParallelism(parallelism)).             @SuppressWarnings("unchecked")             DataSet<PrintableResult> undirectedResult = (DataSet<PrintableResult>) (DataSet<?>) graph.run(new org.apache.flink.graph.library.clustering.undirected.LocalClusteringCoefficient<K, VV, EV>().setParallelism(parallelism)).             return undirectedResult.         default:             throw new RuntimeException("Unknown order: " + order).     } }
false;public;1;5;;@Override public void printAnalytics(PrintStream out) {     out.println(globalClusteringCoefficient.getResult().toPrintableString()).     out.println(averageClusteringCoefficient.getResult().toPrintableString()). }
