commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public String getUsage() {     return "--" + PREFIX + "0 offset:length [--" + PREFIX + "1 offset:length [--" + PREFIX + "2 ...]] " + super.getUsage(). }
false;public;1;40;;@Override public void configure(ParameterTool parameterTool) throws ProgramParametrizationException {     super.configure(parameterTool).     // add offset ranges as ordered by offset ID (range0, range1, range2, ...)     Map<Integer, String> offsetRangeMap = new TreeMap<>().     // first parse all offset ranges into a sorted map     for (String key : parameterTool.toMap().keySet()) {         if (key.startsWith(PREFIX)) {             int offsetId = Integer.parseInt(key.substring(PREFIX.length())).             offsetRangeMap.put(offsetId, parameterTool.get(key)).         }     }     // then store offset ranges in order     for (String field : offsetRangeMap.values()) {         ProgramParametrizationException exception = new ProgramParametrizationException("Circulant offset range" + " must use a colon to separate the integer offset and integer length:" + field + "'").         if (!field.contains(":")) {             throw exception.         }         String[] parts = field.split(":").         if (parts.length != 2) {             throw exception.         }         try {             long offset = Long.parseLong(parts[0]).             long length = Long.parseLong(parts[1]).             offsetRanges.add(new OffsetRange(offset, length)).         } catch (NumberFormatException ex) {             throw exception.         }     } }
false;public;0;4;;@Override public String getIdentity() {     return getName() + " (" + offsetRanges + ")". }
false;protected;0;4;;@Override protected long vertexCount() {     return vertexCount.getValue(). }
false;public;1;13;;@Override public Graph<LongValue, NullValue, NullValue> create(ExecutionEnvironment env) {     org.apache.flink.graph.generator.CirculantGraph graph = new org.apache.flink.graph.generator.CirculantGraph(env, vertexCount.getValue()).     for (OffsetRange offsetRange : offsetRanges) {         graph.addRange(offsetRange.getOffset(), offsetRange.getLength()).     }     return graph.setParallelism(parallelism.getValue().intValue()).generate(). }
