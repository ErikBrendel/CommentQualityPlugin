commented;modifiers;parameterAmount;loc;comment;code
true;public;1;25;/**  * Set the default value.  *  * @param defaultValue the default value  * @return this  */ ;/**  * Set the default value.  *  * @param defaultValue the default value  * @return this  */ public DoubleParameter setDefaultValue(double defaultValue) {     super.setDefaultValue(defaultValue).     if (hasMinimumValue) {         if (minimumValueInclusive) {             Util.checkParameter(defaultValue >= minimumValue, "Default value (" + defaultValue + ") must be greater than or equal to minimum (" + minimumValue + ")").         } else {             Util.checkParameter(defaultValue > minimumValue, "Default value (" + defaultValue + ") must be greater than minimum (" + minimumValue + ")").         }     }     if (hasMaximumValue) {         if (maximumValueInclusive) {             Util.checkParameter(defaultValue <= maximumValue, "Default value (" + defaultValue + ") must be less than or equal to maximum (" + maximumValue + ")").         } else {             Util.checkParameter(defaultValue < maximumValue, "Default value (" + defaultValue + ") must be less than maximum (" + maximumValue + ")").         }     }     return this. }
true;public;2;25;/**  * Set the minimum value. The minimum value is an acceptable value if and  * only if inclusive is set to true.  *  * @param minimumValue the minimum value  * @param inclusive whether the minimum value is a valid value  * @return this  */ ;/**  * Set the minimum value. The minimum value is an acceptable value if and  * only if inclusive is set to true.  *  * @param minimumValue the minimum value  * @param inclusive whether the minimum value is a valid value  * @return this  */ public DoubleParameter setMinimumValue(double minimumValue, boolean inclusive) {     if (hasDefaultValue) {         if (inclusive) {             Util.checkParameter(minimumValue <= defaultValue, "Minimum value (" + minimumValue + ") must be less than or equal to default (" + defaultValue + ")").         } else {             Util.checkParameter(minimumValue < defaultValue, "Minimum value (" + minimumValue + ") must be less than default (" + defaultValue + ")").         }     } else if (hasMaximumValue) {         if (inclusive && maximumValueInclusive) {             Util.checkParameter(minimumValue <= maximumValue, "Minimum value (" + minimumValue + ") must be less than or equal to maximum (" + maximumValue + ")").         } else {             Util.checkParameter(minimumValue < maximumValue, "Minimum value (" + minimumValue + ") must be less than maximum (" + maximumValue + ")").         }     }     this.hasMinimumValue = true.     this.minimumValue = minimumValue.     this.minimumValueInclusive = inclusive.     return this. }
true;public;2;25;/**  * Set the maximum value. The maximum value is an acceptable value if and  * only if inclusive is set to true.  *  * @param maximumValue the maximum value  * @param inclusive whether the maximum value is a valid value  * @return this  */ ;/**  * Set the maximum value. The maximum value is an acceptable value if and  * only if inclusive is set to true.  *  * @param maximumValue the maximum value  * @param inclusive whether the maximum value is a valid value  * @return this  */ public DoubleParameter setMaximumValue(double maximumValue, boolean inclusive) {     if (hasDefaultValue) {         if (inclusive) {             Util.checkParameter(maximumValue >= defaultValue, "Maximum value (" + maximumValue + ") must be greater than or equal to default (" + defaultValue + ")").         } else {             Util.checkParameter(maximumValue > defaultValue, "Maximum value (" + maximumValue + ") must be greater than default (" + defaultValue + ")").         }     } else if (hasMinimumValue) {         if (inclusive && minimumValueInclusive) {             Util.checkParameter(maximumValue >= minimumValue, "Maximum value (" + maximumValue + ") must be greater than or equal to minimum (" + minimumValue + ")").         } else {             Util.checkParameter(maximumValue > minimumValue, "Maximum value (" + maximumValue + ") must be greater than minimum (" + minimumValue + ")").         }     }     this.hasMaximumValue = true.     this.maximumValue = maximumValue.     this.maximumValueInclusive = inclusive.     return this. }
false;public;1;24;;@Override public void configure(ParameterTool parameterTool) {     value = hasDefaultValue ? parameterTool.getDouble(name, defaultValue) : parameterTool.getDouble(name).     if (hasMinimumValue) {         if (minimumValueInclusive) {             Util.checkParameter(value >= minimumValue, name + " must be greater than or equal to " + minimumValue).         } else {             Util.checkParameter(value > minimumValue, name + " must be greater than " + minimumValue).         }     }     if (hasMaximumValue) {         if (maximumValueInclusive) {             Util.checkParameter(value <= maximumValue, name + " must be less than or equal to " + maximumValue).         } else {             Util.checkParameter(value < maximumValue, name + " must be less than " + maximumValue).         }     } }
false;public;0;4;;@Override public String toString() {     return Double.toString(value). }
