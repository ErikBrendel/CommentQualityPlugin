commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Set the default value.  *  * <p>The default may set to any value and is not restricted by setting the  * minimum or maximum values.  *  * @param defaultValue the default value.  * @return this  */ ;/**  * Set the default value.  *  * <p>The default may set to any value and is not restricted by setting the  * minimum or maximum values.  *  * @param defaultValue the default value.  * @return this  */ public LongParameter setDefaultValue(long defaultValue) {     super.setDefaultValue(defaultValue).     return this. }
true;public;1;11;/**  * Set the minimum value.  *  * <p>If a maximum value has been set then the minimum value must not be  * greater than the maximum value.  *  * @param minimumValue the minimum value  * @return this  */ ;/**  * Set the minimum value.  *  * <p>If a maximum value has been set then the minimum value must not be  * greater than the maximum value.  *  * @param minimumValue the minimum value  * @return this  */ public LongParameter setMinimumValue(long minimumValue) {     if (hasMaximumValue) {         Util.checkParameter(minimumValue <= maximumValue, "Minimum value (" + minimumValue + ") must be less than or equal to maximum (" + maximumValue + ")").     }     this.hasMinimumValue = true.     this.minimumValue = minimumValue.     return this. }
true;public;1;11;/**  * Set the maximum value.  *  * <p>If a minimum value has been set then the maximum value must not be  * less than the minimum value.  *  * @param maximumValue the maximum value  * @return this  */ ;/**  * Set the maximum value.  *  * <p>If a minimum value has been set then the maximum value must not be  * less than the minimum value.  *  * @param maximumValue the maximum value  * @return this  */ public LongParameter setMaximumValue(long maximumValue) {     if (hasMinimumValue) {         Util.checkParameter(maximumValue >= minimumValue, "Maximum value (" + maximumValue + ") must be greater than or equal to minimum (" + minimumValue + ")").     }     this.hasMaximumValue = true.     this.maximumValue = maximumValue.     return this. }
false;public;1;19;;@Override public void configure(ParameterTool parameterTool) {     if (hasDefaultValue && !parameterTool.has(name)) {         // skip checks for min and max when using default value         value = defaultValue.     } else {         value = parameterTool.getLong(name).         if (hasMinimumValue) {             Util.checkParameter(value >= minimumValue, name + " must be greater than or equal to " + minimumValue).         }         if (hasMaximumValue) {             Util.checkParameter(value <= maximumValue, name + " must be less than or equal to " + maximumValue).         }     } }
false;public;0;4;;@Override public String toString() {     return Long.toString(value). }
