commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     super.setup().     parameter = new DoubleParameter(owner, "test"). }
false;public;0;9;;// Test configuration @Test public void testDefaultValueBelowMinimum() {     parameter.setMinimumValue(1.0, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Default value (0.0) must be greater than minimum (1.0)").     parameter.setDefaultValue(0.0). }
false;public;0;7;;@Test public void testDefaultValueBetweenMinAndMax() {     parameter.setMinimumValue(-1.0, false).     parameter.setMaximumValue(1.0, false).     parameter.setDefaultValue(0). }
false;public;0;9;;@Test public void testDefaultValueAboveMaximum() {     parameter.setMaximumValue(-1.0, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Default value (0.0) must be less than maximum (-1.0)").     parameter.setDefaultValue(0). }
false;public;0;9;;@Test public void testMinimumValueAboveMaximum() {     parameter.setMaximumValue(0.0, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Minimum value (1.0) must be less than maximum (0.0)").     parameter.setMinimumValue(1.0, false). }
false;public;0;9;;@Test public void testMinimumValueAboveDefault() {     parameter.setDefaultValue(0).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Minimum value (1.0) must be less than default (0.0)").     parameter.setMinimumValue(1.0, false). }
false;public;0;9;;@Test public void testMaximumValueBelowMinimum() {     parameter.setMinimumValue(0.0, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Maximum value (-1.0) must be greater than minimum (0.0)").     parameter.setMaximumValue(-1.0, false). }
false;public;0;9;;@Test public void testMaximumValueBelowDefault() {     parameter.setDefaultValue(0).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Maximum value (-1.0) must be greater than default (0.0)").     parameter.setMaximumValue(-1.0, false). }
false;public;0;5;;@Test public void testEqualMinimumAndMaximumInclusive() {     parameter.setMinimumValue(0.0, true).     parameter.setMaximumValue(0.0, true). }
false;public;0;9;;@Test public void testMinimumEqualsMaximumExclusive() {     parameter.setMaximumValue(0.0, true).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Minimum value (0.0) must be less than maximum (0.0)").     parameter.setMinimumValue(0.0, false). }
false;public;0;9;;@Test public void testMaximumEqualsMinimumExclusive() {     parameter.setMinimumValue(0.0, true).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Maximum value (0.0) must be greater than minimum (0.0)").     parameter.setMaximumValue(0.0, false). }
false;public;0;8;;// With default @Test public void testWithDefaultWithParameter() {     parameter.setDefaultValue(43.21).     Assert.assertEquals("[--test TEST]", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "12.34" })).     Assert.assertEquals(new Double(12.34), parameter.getValue()). }
false;public;0;8;;@Test public void testWithDefaultWithoutParameter() {     parameter.setDefaultValue(43.21).     Assert.assertEquals("[--test TEST]", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] {})).     Assert.assertEquals(new Double(43.21), parameter.getValue()). }
false;public;0;7;;// Without default @Test public void testWithoutDefaultWithParameter() {     Assert.assertEquals("--test TEST", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "12.34" })).     Assert.assertEquals(new Double(12.34), parameter.getValue()). }
false;public;0;9;;@Test public void testWithoutDefaultWithoutParameter() {     Assert.assertEquals("--test TEST", parameter.getUsage()).     expectedException.expect(RuntimeException.class).     expectedException.expectMessage("No data for required key 'test'").     parameter.configure(ParameterTool.fromArgs(new String[] {})). }
false;public;0;6;;// Min @Test public void testMinInRange() {     parameter.setMinimumValue(0, false).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "1" })).     Assert.assertEquals(new Double(1), parameter.getValue()). }
false;public;0;6;;@Test public void testMinAtRangeInclusive() {     parameter.setMinimumValue(0, true).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "0" })).     Assert.assertEquals(new Double(0), parameter.getValue()). }
false;public;0;9;;@Test public void testMinAtRangeExclusive() {     parameter.setMinimumValue(0, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be greater than 0.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "0" })). }
false;public;0;9;;@Test public void testMinOutOfRange() {     parameter.setMinimumValue(0, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be greater than 0.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-1" })). }
false;public;0;9;;@Test public void testMinOutOfRangeExclusive() {     parameter.setMinimumValue(0, true).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be greater than or equal to 0.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-1" })). }
false;public;0;6;;// Max @Test public void testMaxInRange() {     parameter.setMaximumValue(0, false).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-1" })).     Assert.assertEquals(new Double(-1), parameter.getValue()). }
false;public;0;6;;@Test public void testMaxAtRangeInclusive() {     parameter.setMaximumValue(0, true).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "0" })).     Assert.assertEquals(new Double(0), parameter.getValue()). }
false;public;0;9;;@Test public void testMaxAtRangeExclusive() {     parameter.setMaximumValue(0, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be less than 0.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "0" })). }
false;public;0;9;;@Test public void testMaxOutOfRange() {     parameter.setMaximumValue(0, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be less than 0.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "1" })). }
false;public;0;9;;@Test public void testMaxOutOfRangeExclusive() {     parameter.setMaximumValue(0, true).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be less than or equal to 0.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "1" })). }
false;public;0;10;;// Min and max @Test public void testMinAndMaxBelowRange() {     parameter.setMinimumValue(-1, false).     parameter.setMaximumValue(1, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be greater than -1.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-2" })). }
false;public;0;10;;@Test public void testMinAndMaxAtRangeMinimumExclusive() {     parameter.setMinimumValue(-1, false).     parameter.setMaximumValue(1, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be greater than -1.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-1" })). }
false;public;0;7;;@Test public void testMinAndMaxAtRangeMinimumInclusive() {     parameter.setMinimumValue(-1, true).     parameter.setMaximumValue(1, true).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-1" })).     Assert.assertEquals(new Double(-1), parameter.getValue()). }
false;public;0;7;;@Test public void testMinAndMaxInRange() {     parameter.setMinimumValue(-1, false).     parameter.setMaximumValue(1, false).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "0" })).     Assert.assertEquals(new Double(0), parameter.getValue()). }
false;public;0;7;;@Test public void testMinAndMaxAtRangeMaximumInclusive() {     parameter.setMinimumValue(-1, true).     parameter.setMaximumValue(1, true).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "1" })).     Assert.assertEquals(new Double(1), parameter.getValue()). }
false;public;0;10;;@Test public void testMinAndMaxAtRangeMaximumExclusive() {     parameter.setMinimumValue(-1, false).     parameter.setMaximumValue(1, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be less than 1.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "1" })). }
false;public;0;10;;@Test public void testMinAndMaxAboveRange() {     parameter.setMinimumValue(-1, false).     parameter.setMaximumValue(1, false).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be less than 1.0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "2" })). }
