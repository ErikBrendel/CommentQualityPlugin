commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testPageRankWithThreeIterations() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Double, Double> inputGraph = Graph.fromDataSet(PageRankData.getDefaultEdgeDataSet(env), new InitMapper(), env).     List<Vertex<Long, Double>> result = inputGraph.run(new PageRank<>(0.85, 3)).collect().     compareWithDelta(result, 0.01). }
false;public;0;12;;@Test public void testGSAPageRankWithThreeIterations() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Double, Double> inputGraph = Graph.fromDataSet(PageRankData.getDefaultEdgeDataSet(env), new InitMapper(), env).     List<Vertex<Long, Double>> result = inputGraph.run(new GSAPageRank<>(0.85, 3)).collect().     compareWithDelta(result, 0.01). }
false;public;0;12;;@Test public void testPageRankWithThreeIterationsAndNumOfVertices() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Double, Double> inputGraph = Graph.fromDataSet(PageRankData.getDefaultEdgeDataSet(env), new InitMapper(), env).     List<Vertex<Long, Double>> result = inputGraph.run(new PageRank<>(0.85, 3)).collect().     compareWithDelta(result, 0.01). }
false;public;0;12;;@Test public void testGSAPageRankWithThreeIterationsAndNumOfVertices() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Double, Double> inputGraph = Graph.fromDataSet(PageRankData.getDefaultEdgeDataSet(env), new InitMapper(), env).     List<Vertex<Long, Double>> result = inputGraph.run(new GSAPageRank<>(0.85, 3)).collect().     compareWithDelta(result, 0.01). }
false;private;2;26;;private void compareWithDelta(List<Vertex<Long, Double>> result, double delta) {     String resultString = "".     for (Vertex<Long, Double> v : result) {         resultString += v.f0.toString() + "," + v.f1.toString() + "\n".     }     String expectedResult = PageRankData.RANKS_AFTER_3_ITERATIONS.     String[] expected = expectedResult.isEmpty() ? new String[0] : expectedResult.split("\n").     String[] resultArray = resultString.isEmpty() ? new String[0] : resultString.split("\n").     Arrays.sort(expected).     Arrays.sort(resultArray).     for (int i = 0. i < expected.length. i++) {         String[] expectedFields = expected[i].split(",").         String[] resultFields = resultArray[i].split(",").         double expectedPayLoad = Double.parseDouble(expectedFields[1]).         double resultPayLoad = Double.parseDouble(resultFields[1]).         Assert.assertTrue("Values differ by more than the permissible delta", Math.abs(expectedPayLoad - resultPayLoad) < delta).     } }
false;public;1;3;;public Double map(Long value) {     return 1.0. }
