commented;modifiers;parameterAmount;loc;comment;code
false;private;3;8;;private String[] parameters(int scale, String output, String... additionalParameters) {     String[] parameters = new String[] { "--algorithm", "AdamicAdar", "--mirror_results", "--input", "RMatGraph", "--scale", Integer.toString(scale), "--type", idType, "--simplify", "undirected", "--output", output }.     return ArrayUtils.addAll(parameters, additionalParameters). }
false;public;0;9;;@Test public void testLongDescription() throws Exception {     String expected = regexSubstring(new AdamicAdar().getLongDescription()).     expectedOutputFromException(new String[] { "--algorithm", "AdamicAdar" }, expected, ProgramParametrizationException.class). }
false;public;0;7;;@Test public void testPrintWithRMatGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedCount(parameters(8, "print"), 39276). }
false;public;0;7;;@Test public void testParallelism() throws Exception {     TestUtils.verifyParallelism(parameters(8, "print"), "FlatMap \\(Mirror results\\)", "GroupReduce \\(Compute scores\\)", "GroupReduce \\(Generate group pairs\\)"). }
