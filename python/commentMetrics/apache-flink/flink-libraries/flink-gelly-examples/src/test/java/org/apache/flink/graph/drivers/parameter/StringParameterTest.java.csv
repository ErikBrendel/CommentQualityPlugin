commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     super.setup().     parameter = new StringParameter(owner, "test"). }
false;public;0;8;;@Test public void testWithDefaultWithParameter() {     parameter.setDefaultValue("Flink").     Assert.assertEquals("[--test TEST]", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "Gelly" })).     Assert.assertEquals("Gelly", parameter.getValue()). }
false;public;0;8;;@Test public void testWithDefaultWithoutParameter() {     parameter.setDefaultValue("Flink").     Assert.assertEquals("[--test TEST]", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] {})).     Assert.assertEquals("Flink", parameter.getValue()). }
false;public;0;7;;@Test public void testWithoutDefaultWithParameter() {     Assert.assertEquals("--test TEST", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "Gelly" })).     Assert.assertEquals("Gelly", parameter.getValue()). }
false;public;0;9;;@Test public void testWithoutDefaultWithoutParameter() {     Assert.assertEquals("--test TEST", parameter.getUsage()).     expectedException.expect(RuntimeException.class).     expectedException.expectMessage("No data for required key 'test'").     parameter.configure(ParameterTool.fromArgs(new String[] {})). }
