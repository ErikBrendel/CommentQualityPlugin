commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testSingleIteration() throws Exception {     /* 		 * Test one iteration of label propagation example with a simple graph 		 */     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, NullValue> inputGraph = Graph.fromDataSet(LabelPropagationData.getDefaultVertexSet(env), LabelPropagationData.getDefaultEdgeDataSet(env), env).     List<Vertex<Long, Long>> result = inputGraph.run(new LabelPropagation<>(1)).collect().     expectedResult = LabelPropagationData.LABELS_AFTER_1_ITERATION.     compareResultAsTuples(result, expectedResult). }
false;public;0;18;;@Test public void testTieBreaker() throws Exception {     /* 		 * Test the label propagation example where a tie must be broken 		 */     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, NullValue> inputGraph = Graph.fromDataSet(LabelPropagationData.getTieVertexSet(env), LabelPropagationData.getTieEdgeDataSet(env), env).     List<Vertex<Long, Long>> result = inputGraph.run(new LabelPropagation<>(1)).collect().     expectedResult = LabelPropagationData.LABELS_WITH_TIE.     compareResultAsTuples(result, expectedResult). }
