commented;modifiers;parameterAmount;loc;comment;code
false;private;3;8;;private String[] parameters(String input, String output, String... additionalParameters) {     String[] parameters = new String[] { "--algorithm", "EdgeList", "--input", input, "--type", idType, "--output", output }.     return ArrayUtils.addAll(parameters, additionalParameters). }
false;public;0;9;;@Test public void testLongDescription() throws Exception {     String expected = regexSubstring(new EdgeList().getLongDescription()).     expectedOutputFromException(new String[] { "--algorithm", "EdgeList" }, expected, ProgramParametrizationException.class). }
false;private;1;3;;// CirculantGraph private String[] getCirculantGraphParameters(String output) {     return parameters("CirculantGraph", output, "--vertex_count", "42", "--range0", "13:4"). }
false;public;0;4;;@Test public void testHashWithCirculantGraph() throws Exception {     expectedChecksum(getCirculantGraphParameters("hash"), 168, 0x000000000001ae80). }
false;public;0;7;;@Test public void testPrintWithCirculantGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getCirculantGraphParameters("print"), new Checksum(168, 0x0000004bdcc52cbcL)). }
false;public;0;4;;@Test public void testParallelismWithCirculantGraph() throws Exception {     TestUtils.verifyParallelism(getCirculantGraphParameters("print")). }
false;private;1;3;;// CompleteGraph private String[] getCompleteGraphParameters(String output) {     return parameters("CompleteGraph", output, "--vertex_count", "42"). }
false;public;0;4;;@Test public void testHashWithCompleteGraph() throws Exception {     expectedChecksum(getCompleteGraphParameters("hash"), 1722, 0x0000000000113ca0L). }
false;public;0;7;;@Test public void testPrintWithCompleteGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getCompleteGraphParameters("print"), new Checksum(1722, 0x0000031109a0c398L)). }
false;public;0;4;;@Test public void testParallelismWithCompleteGraph() throws Exception {     TestUtils.verifyParallelism(getCompleteGraphParameters("print")). }
false;private;1;3;;// CycleGraph private String[] getCycleGraphParameters(String output) {     return parameters("CycleGraph", output, "--vertex_count", "42"). }
false;public;0;4;;@Test public void testHashWithCycleGraph() throws Exception {     expectedChecksum(getCycleGraphParameters("hash"), 84, 0x000000000000d740L). }
false;public;0;7;;@Test public void testPrintWithCycleGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getCycleGraphParameters("print"), new Checksum(84, 0x000000272a136fcaL)). }
false;public;0;4;;@Test public void testParallelismWithCycleGraph() throws Exception {     TestUtils.verifyParallelism(getCycleGraphParameters("print")). }
false;private;1;3;;// EchoGraph private String[] getEchoGraphParameters(String output) {     return parameters("EchoGraph", output, "--vertex_count", "42", "--vertex_degree", "13"). }
false;public;0;4;;@Test public void testHashWithEchoGraph() throws Exception {     expectedChecksum(getEchoGraphParameters("hash"), 546, 0x0000000000057720L). }
false;public;0;7;;@Test public void testPrintWithEchoGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getEchoGraphParameters("print"), new Checksum(546, 0x000000f7190b8fcaL)). }
false;public;0;4;;@Test public void testParallelismWithEchoGraph() throws Exception {     TestUtils.verifyParallelism(getEchoGraphParameters("print")). }
false;private;1;3;;// EmptyGraph private String[] getEmptyGraphParameters(String output) {     return parameters("EmptyGraph", output, "--vertex_count", "42"). }
false;public;0;4;;@Test public void testHashWithEmptyGraph() throws Exception {     expectedChecksum(getEmptyGraphParameters("hash"), 0, 0x0000000000000000L). }
false;public;0;4;;@Test public void testPrintWithEmptyGraph() throws Exception {     expectedOutputChecksum(getEmptyGraphParameters("print"), new Checksum(0, 0x0000000000000000L)). }
false;public;0;4;;@Test public void testParallelismWithEmptyGraph() throws Exception {     TestUtils.verifyParallelism(getEmptyGraphParameters("print")). }
false;private;1;3;;// GridGraph private String[] getGridGraphParameters(String output) {     return parameters("GridGraph", output, "--dim0", "2:true", "--dim1", "3:false", "--dim2", "5:true"). }
false;public;0;4;;@Test public void testHashWithGridGraph() throws Exception {     expectedChecksum(getGridGraphParameters("hash"), 130, 0x000000000000eba0L). }
false;public;0;7;;@Test public void testPrintWithGridGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getGridGraphParameters("print"), new Checksum(130, 0x00000033237d24eeL)). }
false;public;0;4;;@Test public void testParallelismWithGridGraph() throws Exception {     TestUtils.verifyParallelism(getGridGraphParameters("print")). }
false;private;1;3;;// HypercubeGraph private String[] getHypercubeGraphParameters(String output) {     return parameters("HypercubeGraph", output, "--dimensions", "7"). }
false;public;0;4;;@Test public void testHashWithHypercubeGraph() throws Exception {     expectedChecksum(getHypercubeGraphParameters("hash"), 896, 0x00000000001bc800L). }
false;public;0;7;;@Test public void testPrintWithHypercubeGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getHypercubeGraphParameters("print"), new Checksum(896, 0x000001f243ee33b2L)). }
false;public;0;4;;@Test public void testParallelismWithHypercubeGraph() throws Exception {     TestUtils.verifyParallelism(getHypercubeGraphParameters("print")). }
false;private;1;3;;// PathGraph private String[] getPathGraphParameters(String output) {     return parameters("PathGraph", output, "--vertex_count", "42"). }
false;public;0;4;;@Test public void testHashWithPathGraph() throws Exception {     expectedChecksum(getPathGraphParameters("hash"), 82, 0x000000000000d220L). }
false;public;0;7;;@Test public void testPrintWithPathGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getPathGraphParameters("print"), new Checksum(82, 0x000000269be2d4c2L)). }
false;public;0;4;;@Test public void testParallelismWithPathGraph() throws Exception {     TestUtils.verifyParallelism(getPathGraphParameters("print")). }
false;private;2;7;;// RMatGraph private String[] getRMatGraphParameters(String output, String simplify) {     if (simplify == null) {         return parameters("RMatGraph", output, "--scale", "7").     } else {         return parameters("RMatGraph", output, "--scale", "7", "--simplify", simplify).     } }
false;public;0;4;;@Test public void testHashWithRMatGraph() throws Exception {     expectedChecksum(getRMatGraphParameters("hash", null), 2048, 0x00000000001ee529). }
false;public;0;7;;@Test public void testPrintWithRMatGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getRMatGraphParameters("print", null), new Checksum(2048, 0x000002f737939f05L)). }
false;public;0;4;;@Test public void testParallelismWithRMatGraph() throws Exception {     TestUtils.verifyParallelism(getRMatGraphParameters("print", null)). }
false;public;0;4;;@Test public void testHashWithDirectedRMatGraph() throws Exception {     expectedChecksum(getRMatGraphParameters("hash", "directed"), 1168, 0x00000000001579bdL). }
false;public;0;7;;@Test public void testPrintWithDirectedRMatGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getRMatGraphParameters("print", "directed"), new Checksum(1168, 0x0000020e35b0f35dL)). }
false;public;0;4;;@Test public void testParallelismWithDirectedRMatGraph() throws Exception {     TestUtils.verifyParallelism(getRMatGraphParameters("print", "directed")). }
false;public;0;4;;@Test public void testHashWithUndirectedRMatGraph() throws Exception {     expectedChecksum(getRMatGraphParameters("hash", "undirected"), 1854, 0x0000000000242920L). }
false;public;0;7;;@Test public void testPrintWithUndirectedRMatGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getRMatGraphParameters("print", "undirected"), new Checksum(1854, 0x0000036fe5802162L)). }
false;public;0;4;;@Test public void testParallelismWithUndirectedRMatGraph() throws Exception {     TestUtils.verifyParallelism(getRMatGraphParameters("print", "undirected")). }
false;private;1;3;;// SingletonEdgeGraph private String[] getSingletonEdgeGraphParameters(String output) {     return parameters("SingletonEdgeGraph", output, "--vertex_pair_count", "42"). }
false;public;0;4;;@Test public void testHashWithSingletonEdgeGraph() throws Exception {     expectedChecksum(getSingletonEdgeGraphParameters("hash"), 84, 0x000000000001b3c0L). }
false;public;0;7;;@Test public void testPrintWithSingletonEdgeGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getSingletonEdgeGraphParameters("print"), new Checksum(84, 0x0000002e59e10d9aL)). }
false;public;0;4;;@Test public void testParallelismWithSingletonEdgeGraph() throws Exception {     TestUtils.verifyParallelism(getSingletonEdgeGraphParameters("print")). }
false;private;1;3;;// StarGraph private String[] getStarGraphParameters(String output) {     return parameters("StarGraph", output, "--vertex_count", "42"). }
false;public;0;4;;@Test public void testHashWithStarGraph() throws Exception {     expectedChecksum(getStarGraphParameters("hash"), 82, 0x0000000000006ba0L). }
false;public;0;7;;@Test public void testPrintWithStarGraph() throws Exception {     // skip 'char' since it is not printed as a number     Assume.assumeFalse(idType.equals("char") || idType.equals("nativeChar")).     expectedOutputChecksum(getStarGraphParameters("print"), new Checksum(82, 0x00000011ec3faee8L)). }
false;public;0;4;;@Test public void testParallelismWithStarGraph() throws Exception {     TestUtils.verifyParallelism(getStarGraphParameters("print")). }
