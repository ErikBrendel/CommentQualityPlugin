commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testSingleIteration() throws Exception {     /* 		 * Test one iteration of the Simple Community Detection Example 		 */     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Double> inputGraph = Graph.fromDataSet(CommunityDetectionData.getSimpleEdgeDataSet(env), new InitLabels(), env).     List<Vertex<Long, Long>> result = inputGraph.run(new CommunityDetection<>(1, CommunityDetectionData.DELTA)).getVertices().collect().     expected = CommunityDetectionData.COMMUNITIES_SINGLE_ITERATION.     compareResultAsTuples(result, expected). }
false;public;0;14;;@Test public void testTieBreaker() throws Exception {     /* 		 * Test one iteration of the Simple Community Detection Example where a tie must be broken 		 */     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     Graph<Long, Long, Double> inputGraph = Graph.fromDataSet(CommunityDetectionData.getTieEdgeDataSet(env), new InitLabels(), env).     List<Vertex<Long, Long>> result = inputGraph.run(new CommunityDetection<>(1, CommunityDetectionData.DELTA)).getVertices().collect().     expected = CommunityDetectionData.COMMUNITIES_WITH_TIE.     compareResultAsTuples(result, expected). }
false;public;1;3;;public Long map(Long id) {     return id. }
