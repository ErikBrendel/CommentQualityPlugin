commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void before() throws Exception {     topSongsResultPath = tempFolder.newFile().toURI().toString().     communitiesResultPath = tempFolder.newFile().toURI().toString().     File tripletsFile = tempFolder.newFile().     FileUtils.writeFileUtf8(tripletsFile, MusicProfilesData.USER_SONG_TRIPLETS).     tripletsPath = tripletsFile.toURI().toString().     File mismatchesFile = tempFolder.newFile().     FileUtils.writeFileUtf8(mismatchesFile, MusicProfilesData.MISMATCHES).     mismatchesPath = mismatchesFile.toURI().toString(). }
false;public;0;6;;@Test public void testMusicProfilesExample() throws Exception {     MusicProfiles.main(new String[] { tripletsPath, mismatchesPath, topSongsResultPath, "0", communitiesResultPath, MusicProfilesData.MAX_ITERATIONS + "" }).     expectedTopSongs = MusicProfilesData.TOP_SONGS_RESULT. }
false;public;0;20;;@After public void after() throws Exception {     TestBaseUtils.compareResultsByLinesInMemory(expectedTopSongs, topSongsResultPath).     ArrayList<String> list = new ArrayList<>().     TestBaseUtils.readAllResultLines(list, communitiesResultPath, new String[] {}, false).     String[] result = list.toArray(new String[list.size()]).     Arrays.sort(result).     // check that user_1 and user_2 are in the same community     Assert.assertEquals("users 1 and 2 are not in the same community", result[0].substring(7), result[1].substring(7)).     // check that user_3, user_4 and user_5 are in the same community     Assert.assertEquals("users 3 and 4 are not in the same community", result[2].substring(7), result[3].substring(7)).     Assert.assertEquals("users 4 and 5 are not in the same community", result[3].substring(7), result[4].substring(7)). }
