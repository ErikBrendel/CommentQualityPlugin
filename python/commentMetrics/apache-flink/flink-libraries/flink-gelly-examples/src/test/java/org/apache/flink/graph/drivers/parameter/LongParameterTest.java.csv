commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     super.setup().     parameter = new LongParameter(owner, "test"). }
false;public;0;9;;// Test configuration @Test public void testMinimumValueAboveMaximum() {     parameter.setMaximumValue(0).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Minimum value (1) must be less than or equal to maximum (0)").     parameter.setMinimumValue(1). }
false;public;0;9;;@Test public void testMaximumValueBelowMinimum() {     parameter.setMinimumValue(0).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("Maximum value (-1) must be greater than or equal to minimum (0)").     parameter.setMaximumValue(-1). }
false;public;0;8;;// With default @Test public void testWithDefaultWithParameter() {     parameter.setDefaultValue(42).     Assert.assertEquals("[--test TEST]", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "54" })).     Assert.assertEquals(new Long(54), parameter.getValue()). }
false;public;0;8;;@Test public void testWithDefaultWithoutParameter() {     parameter.setDefaultValue(13).     Assert.assertEquals("[--test TEST]", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] {})).     Assert.assertEquals(new Long(13), parameter.getValue()). }
false;public;0;7;;// Without default @Test public void testWithoutDefaultWithParameter() {     Assert.assertEquals("--test TEST", parameter.getUsage()).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "42" })).     Assert.assertEquals(new Long(42), parameter.getValue()). }
false;public;0;9;;@Test public void testWithoutDefaultWithoutParameter() {     Assert.assertEquals("--test TEST", parameter.getUsage()).     expectedException.expect(RuntimeException.class).     expectedException.expectMessage("No data for required key 'test'").     parameter.configure(ParameterTool.fromArgs(new String[] {})). }
false;public;0;6;;// Min @Test public void testMinInRange() {     parameter.setMinimumValue(0).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "1" })).     Assert.assertEquals(new Long(1), parameter.getValue()). }
false;public;0;9;;@Test public void testMinOutOfRange() {     parameter.setMinimumValue(0).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be greater than or equal to 0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-1" })). }
false;public;0;6;;// Max @Test public void testMaxInRange() {     parameter.setMaximumValue(0).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-1" })).     Assert.assertEquals(new Long(-1), parameter.getValue()). }
false;public;0;9;;@Test public void testMaxOutOfRange() {     parameter.setMaximumValue(0).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be less than or equal to 0").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "1" })). }
false;public;0;10;;// Min and max @Test public void testMinAndMaxBelowRange() {     parameter.setMinimumValue(-1).     parameter.setMaximumValue(1).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be greater than or equal to -1").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "-2" })). }
false;public;0;7;;@Test public void testMinAndMaxInRange() {     parameter.setMinimumValue(-1).     parameter.setMaximumValue(1).     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "0" })).     Assert.assertEquals(new Long(0), parameter.getValue()). }
false;public;0;10;;@Test public void testMinAndMaxAboveRange() {     parameter.setMinimumValue(-1).     parameter.setMaximumValue(1).     expectedException.expect(ProgramParametrizationException.class).     expectedException.expectMessage("test must be less than or equal to 1").     parameter.configure(ParameterTool.fromArgs(new String[] { "--test", "2" })). }
