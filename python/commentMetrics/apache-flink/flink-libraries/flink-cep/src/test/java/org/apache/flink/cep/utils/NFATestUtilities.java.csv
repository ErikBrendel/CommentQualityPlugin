commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;7;;@Deprecated public static List<List<Event>> feedNFA(List<StreamRecord<Event>> inputEvents, NFA<Event> nfa) throws Exception {     NFATestHarness nfaTestHarness = NFATestHarness.forNFA(nfa).build().     return nfaTestHarness.feedRecords(inputEvents). }
false;public,static;2;15;;public static void compareMaps(List<List<Event>> actual, List<List<Event>> expected) {     Assert.assertEquals(expected.size(), actual.size()).     for (List<Event> p : actual) {         Collections.sort(p, new EventComparator()).     }     for (List<Event> p : expected) {         Collections.sort(p, new EventComparator()).     }     Collections.sort(actual, new ListEventComparator()).     Collections.sort(expected, new ListEventComparator()).     Assert.assertArrayEquals(expected.toArray(), actual.toArray()). }
false;public;2;16;;@Override public int compare(List<Event> o1, List<Event> o2) {     int sizeComp = Integer.compare(o1.size(), o2.size()).     if (sizeComp == 0) {         EventComparator comp = new EventComparator().         for (int i = 0. i < o1.size(). i++) {             int eventComp = comp.compare(o1.get(i), o2.get(i)).             if (eventComp != 0) {                 return eventComp.             }         }         return 0.     } else {         return sizeComp.     } }
false;public;2;15;;@Override public int compare(Event o1, Event o2) {     int nameComp = o1.getName().compareTo(o2.getName()).     int priceComp = Double.compare(o1.getPrice(), o2.getPrice()).     int idComp = Integer.compare(o1.getId(), o2.getId()).     if (nameComp == 0) {         if (priceComp == 0) {             return idComp.         } else {             return priceComp.         }     } else {         return nameComp.     } }
