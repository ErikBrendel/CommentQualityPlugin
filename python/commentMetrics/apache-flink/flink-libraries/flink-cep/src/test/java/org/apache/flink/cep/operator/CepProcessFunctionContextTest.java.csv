commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testTimestampPassingInEventTime() throws Exception {     try (OneInputStreamOperatorTestHarness<Event, String> harness = getCepTestHarness(createCepOperator(extractTimestampAndNames(1), new NFAForwardingFactory(), EVENT_TIME))) {         harness.open().         // events out of order to test if internal sorting does not mess up the timestamps         harness.processElement(event().withName("A").withTimestamp(5).asStreamRecord()).         harness.processElement(event().withName("B").withTimestamp(3).asStreamRecord()).         harness.processWatermark(6).         assertOutput(harness.getOutput()).nextElementEquals("3:B").nextElementEquals("5:A").watermarkEquals(6L).hasNoMoreElements().     } }
false;public;0;23;;@Test public void testTimestampPassingInProcessingTime() throws Exception {     try (OneInputStreamOperatorTestHarness<Event, String> harness = getCepTestHarness(createCepOperator(extractTimestampAndNames(1), new NFAForwardingFactory(), PROCESSING_TIME))) {         harness.open().         harness.setProcessingTime(1).         harness.processElement(event().withName("A").withTimestamp(5).asStreamRecord()).         harness.setProcessingTime(2).         harness.processElement(event().withName("B").withTimestamp(3).asStreamRecord()).         harness.setProcessingTime(3).         assertOutput(harness.getOutput()).nextElementEquals("1:A").nextElementEquals("2:B").hasNoMoreElements().     } }
false;public;0;22;;@Test public void testCurrentProcessingTimeInProcessingTime() throws Exception {     try (OneInputStreamOperatorTestHarness<Event, String> harness = getCepTestHarness(createCepOperator(extractCurrentProcessingTimeAndNames(1), new NFAForwardingFactory(), PROCESSING_TIME))) {         harness.open().         harness.setProcessingTime(15).         harness.processElement(event().withName("A").asStreamRecord()).         harness.setProcessingTime(35).         harness.processElement(event().withName("B").asStreamRecord()).         assertOutput(harness.getOutput()).nextElementEquals("15:A").nextElementEquals("35:B").hasNoMoreElements().     } }
false;public;0;22;;@Test public void testCurrentProcessingTimeInEventTime() throws Exception {     try (OneInputStreamOperatorTestHarness<Event, String> harness = getCepTestHarness(createCepOperator(extractCurrentProcessingTimeAndNames(1), new NFAForwardingFactory(), EVENT_TIME))) {         harness.open().         harness.setProcessingTime(10).         harness.processElement(event().withName("A").withTimestamp(5).asStreamRecord()).         harness.setProcessingTime(100).         harness.processWatermark(6).         assertOutput(harness.getOutput()).nextElementEquals("100:A").watermarkEquals(6).hasNoMoreElements().     } }
false;public;0;30;;@Test public void testTimestampPassingForTimedOutInEventTime() throws Exception {     OutputTag<String> timedOut = new OutputTag<String>("timedOut") {     }.     try (OneInputStreamOperatorTestHarness<Event, String> harness = getCepTestHarness(createCepOperator(extractTimestampAndNames(2, timedOut), new NFATimingOutFactory(), EVENT_TIME))) {         harness.open().         // events out of order to test if internal sorting does not mess up the timestamps         harness.processElement(event().withName("A").withTimestamp(5).asStreamRecord()).         harness.processElement(event().withName("C").withTimestamp(20).asStreamRecord()).         harness.processElement(event().withName("B").withTimestamp(3).asStreamRecord()).         harness.processWatermark(22).         assertOutput(harness.getOutput()).nextElementEquals("5:B:A").watermarkEquals(22).hasNoMoreElements().         assertOutput(harness.getSideOutput(timedOut)).nextElementEquals("15:A").hasNoMoreElements().     } }
false;public;0;29;;@Test public void testTimestampPassingForTimedOutInProcessingTime() throws Exception {     OutputTag<String> timedOut = new OutputTag<String>("timedOut") {     }.     try (OneInputStreamOperatorTestHarness<Event, String> harness = getCepTestHarness(createCepOperator(extractTimestampAndNames(2, timedOut), new NFATimingOutFactory(), PROCESSING_TIME))) {         harness.open().         harness.setProcessingTime(3).         harness.processElement(event().withName("A").withTimestamp(3).asStreamRecord()).         harness.setProcessingTime(5).         harness.processElement(event().withName("C").withTimestamp(5).asStreamRecord()).         harness.setProcessingTime(20).         harness.processElement(event().withName("B").withTimestamp(20).asStreamRecord()).         assertOutput(harness.getOutput()).nextElementEquals("5:A:C").hasNoMoreElements().         assertOutput(harness.getSideOutput(timedOut)).nextElementEquals("15:C").hasNoMoreElements().     } }
false;public;0;31;;@Test public void testCurrentProcessingTimeForTimedOutInEventTime() throws Exception {     OutputTag<String> sideOutputTag = new OutputTag<String>("timedOut") {     }.     try (OneInputStreamOperatorTestHarness<Event, String> harness = getCepTestHarness(createCepOperator(extractCurrentProcessingTimeAndNames(2, sideOutputTag), new NFATimingOutFactory(), EVENT_TIME))) {         harness.open().         // events out of order to test if internal sorting does not mess up the timestamps         harness.processElement(event().withName("A").withTimestamp(5).asStreamRecord()).         harness.processElement(event().withName("B").withTimestamp(20).asStreamRecord()).         harness.processElement(event().withName("C").withTimestamp(3).asStreamRecord()).         harness.setProcessingTime(100).         harness.processWatermark(22).         assertOutput(harness.getOutput()).nextElementEquals("100:C:A").watermarkEquals(22).hasNoMoreElements().         assertOutput(harness.getSideOutput(sideOutputTag)).nextElementEquals("100:A").hasNoMoreElements().     } }
false;public;0;30;;@Test public void testCurrentProcessingTimeForTimedOutInProcessingTime() throws Exception {     OutputTag<String> sideOutputTag = new OutputTag<String>("timedOut") {     }.     try (OneInputStreamOperatorTestHarness<Event, String> harness = getCepTestHarness(createCepOperator(extractCurrentProcessingTimeAndNames(2, sideOutputTag), new NFATimingOutFactory(), PROCESSING_TIME))) {         harness.open().         harness.setProcessingTime(3).         harness.processElement(event().withName("A").asStreamRecord()).         harness.setProcessingTime(5).         harness.processElement(event().withName("B").asStreamRecord()).         harness.setProcessingTime(20).         harness.processElement(event().withName("C").asStreamRecord()).         assertOutput(harness.getOutput()).nextElementEquals("5:A:B").hasNoMoreElements().         // right now we time out only on next event in processing time, therefore the 20         assertOutput(harness.getSideOutput(sideOutputTag)).nextElementEquals("20:B").hasNoMoreElements().     } }
false;private;3;13;;/* TEST UTILS */ private <T> CepOperator<Event, Integer, T> createCepOperator(PatternProcessFunction<Event, T> processFunction, NFACompiler.NFAFactory<Event> nfaFactory, boolean isProcessingTime) throws Exception {     return new CepOperator<>(Event.createTypeSerializer(), isProcessingTime, nfaFactory, null, null, processFunction, null). }
true;private,static;1;4;/**  * Creates a {@link PatternProcessFunction} that as a result will produce Strings as follows:  * <pre>[timestamp]:[Event.getName]...</pre> The Event.getName will occur stateNumber times. If the match does not  * contain n-th pattern it will replace this position with "null".  *  * @param stateNumber number of states in the pattern  * @return created PatternProcessFunction  */ ;/**  * Creates a {@link PatternProcessFunction} that as a result will produce Strings as follows:  * <pre>[timestamp]:[Event.getName]...</pre> The Event.getName will occur stateNumber times. If the match does not  * contain n-th pattern it will replace this position with "null".  *  * @param stateNumber number of states in the pattern  * @return created PatternProcessFunction  */ private static PatternProcessFunction<Event, String> extractTimestampAndNames(int stateNumber) {     return new AccessContextWithNames(stateNumber, context -> String.valueOf(context.timestamp())). }
true;private,static;2;7;/**  * Creates a {@link PatternProcessFunction} that as a result will produce Strings as follows:  * <pre>[timestamp]:[Event.getName]...</pre> The Event.getName will occur stateNumber times. If the match does not  * contain n-th pattern it will replace this position with "null".  *  * <p>This function will also apply the same logic for timed out partial matches and emit those results into  * side output described with given output tag.  *  * @param stateNumber number of states in the pattern  * @param timedOutTag output tag where to emit timed out partial matches  * @return created PatternProcessFunction  */ ;/**  * Creates a {@link PatternProcessFunction} that as a result will produce Strings as follows:  * <pre>[timestamp]:[Event.getName]...</pre> The Event.getName will occur stateNumber times. If the match does not  * contain n-th pattern it will replace this position with "null".  *  * <p>This function will also apply the same logic for timed out partial matches and emit those results into  * side output described with given output tag.  *  * @param stateNumber number of states in the pattern  * @param timedOutTag output tag where to emit timed out partial matches  * @return created PatternProcessFunction  */ private static PatternProcessFunction<Event, String> extractTimestampAndNames(int stateNumber, OutputTag<String> timedOutTag) {     return new AccessContextWithNamesWithTimedOut(stateNumber, timedOutTag, context -> String.valueOf(context.timestamp())). }
true;private,static;1;3;/**  * Creates a {@link PatternProcessFunction} that as a result will produce Strings as follows:  * <pre>[currentProcessingTime]:[Event.getName]...</pre> The Event.getName will occur stateNumber times.  * If the match does not contain n-th pattern it will replace this position with "null".  *  * @param stateNumber number of states in the pattern  * @return created PatternProcessFunction  */ ;/**  * Creates a {@link PatternProcessFunction} that as a result will produce Strings as follows:  * <pre>[currentProcessingTime]:[Event.getName]...</pre> The Event.getName will occur stateNumber times.  * If the match does not contain n-th pattern it will replace this position with "null".  *  * @param stateNumber number of states in the pattern  * @return created PatternProcessFunction  */ private static PatternProcessFunction<Event, String> extractCurrentProcessingTimeAndNames(int stateNumber) {     return new AccessContextWithNames(stateNumber, context -> String.valueOf(context.currentProcessingTime())). }
true;private,static;2;7;/**  * Creates a {@link PatternProcessFunction} that as a result will produce Strings as follows:  * <pre>[currentProcessingTime]:[Event.getName]...</pre> The Event.getName will occur stateNumber times.  * If the match does not contain n-th pattern it will replace this position with "null".  *  * <p>This function will also apply the same logic for timed out partial matches and emit those results into  * side output described with given output tag.  *  * @param stateNumber number of states in the pattern  * @param timedOutTag output tag where to emit timed out partial matches  * @return created PatternProcessFunction  */ ;/**  * Creates a {@link PatternProcessFunction} that as a result will produce Strings as follows:  * <pre>[currentProcessingTime]:[Event.getName]...</pre> The Event.getName will occur stateNumber times.  * If the match does not contain n-th pattern it will replace this position with "null".  *  * <p>This function will also apply the same logic for timed out partial matches and emit those results into  * side output described with given output tag.  *  * @param stateNumber number of states in the pattern  * @param timedOutTag output tag where to emit timed out partial matches  * @return created PatternProcessFunction  */ private static PatternProcessFunction<Event, String> extractCurrentProcessingTimeAndNames(int stateNumber, OutputTag<String> timedOutTag) {     return new AccessContextWithNamesWithTimedOut(stateNumber, timedOutTag, context -> String.valueOf(context.currentProcessingTime())). }
false;public;3;4;;@Override public void processMatch(Map<String, List<Event>> match, Context ctx, Collector<String> out) throws Exception {     out.collect(extractResult(match, ctx)). }
false;;2;10;;String extractResult(Map<String, List<Event>> match, Context ctx) {     StringBuilder stringBuilder = new StringBuilder(contextAccessor.apply(ctx)).     for (int i = 1. i <= stateCount. i++) {         List<Event> events = match.get("" + i).         if (events != null) {             stringBuilder.append(":").append(events.get(0).getName()).         }     }     return stringBuilder.toString(). }
false;public;2;4;;@Override public void processTimedOutMatch(Map<String, List<Event>> match, Context ctx) throws Exception {     ctx.output(outputTag, extractResult(match, ctx)). }
false;public;0;7;;@Override public NFA<Event> createNFA() {     Pattern<Event, ?> pattern = Pattern.begin("1").     return NFACompiler.compileFactory(pattern, false).createNFA(). }
false;public;0;7;;@Override public NFA<Event> createNFA() {     Pattern<Event, ?> pattern = Pattern.<Event>begin("1").next("2").within(Time.milliseconds(10)).     return NFACompiler.compileFactory(pattern, true).createNFA(). }
