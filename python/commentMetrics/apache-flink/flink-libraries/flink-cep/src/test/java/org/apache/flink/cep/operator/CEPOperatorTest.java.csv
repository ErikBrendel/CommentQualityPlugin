# id;timestamp;commentText;codeText;commentWords;codeWords
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1478783881;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}__		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true)),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1487931040;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}__		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true)),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1488305067;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}__		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true)),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1489660607;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true)),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1489764761;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1490638274;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1490951810;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				null,_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,null,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495024651;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				null,_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,null,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495024652;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495024653;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495024653;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495024654;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495203813;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495529314;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495791189;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495791264;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String,List<Event>>,Long>,Map<String,List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1495961498;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1498764573;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1501661862;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1502175365;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true,_				null),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,null,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1502726910;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				true,_				null),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>> streamRecord =_					(StreamRecord<Either<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>> left =_			(Either.Left<Tuple2<Map<String, List<Event>>, Long>, Map<String, List<Event>>>) streamRecord.getValue()___			Tuple2<Map<String, List<Event>>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,list,event,long,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,null,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,list,event,long,map,string,list,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,stream,record,stream,record,either,tuple2,map,string,list,event,long,map,string,list,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,left,either,left,tuple2,map,string,list,event,long,map,string,list,event,stream,record,get,value,tuple2,map,string,list,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1503470129;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timeouted =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timeouted") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					IntSerializer.INSTANCE,_					new NFAFactory(true),_					true,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timeouted_				), new KeySelector<Event, Integer>() {_				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timeouted)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timeouted,new,output,tag,tuple2,map,string,list,event,long,timeouted,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,null,new,pattern,select,function,event,map,string,list,event,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timeouted,new,key,selector,event,integer,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timeouted,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1503555538;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					IntSerializer.INSTANCE,_					new NFAFactory(true),_					true,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				), new KeySelector<Event, Integer>() {_				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,true,null,new,pattern,select,function,event,map,string,list,event,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,new,key,selector,event,integer,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1504268438;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				), new KeySelector<Event, Integer>() {_				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,new,key,selector,event,integer,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1505664703;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				), new KeySelector<Event, Integer>() {_				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,new,key,selector,event,integer,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1507895398;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						private static final long serialVersionUID = -5768297287711394420L___						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						private static final long serialVersionUID = 2843329425823093249L___						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,private,static,final,long,serial,version,uid,5768297287711394420l,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,private,static,final,long,serial,version,uid,2843329425823093249l,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1519567828;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						private static final long serialVersionUID = -5768297287711394420L___						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						private static final long serialVersionUID = 2843329425823093249L___						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,private,static,final,long,serial,version,uid,5768297287711394420l,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,private,static,final,long,serial,version,uid,2843329425823093249l,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1528123188;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						private static final long serialVersionUID = -5768297287711394420L___						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						private static final long serialVersionUID = 2843329425823093249L___						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				, null), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,private,static,final,long,serial,version,uid,5768297287711394420l,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,private,static,final,long,serial,version,uid,2843329425823093249l,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,null,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1528181155;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						private static final long serialVersionUID = -5768297287711394420L___						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						private static final long serialVersionUID = 2843329425823093249L___						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				, null), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,private,static,final,long,serial,version,uid,5768297287711394420l,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,private,static,final,long,serial,version,uid,2843329425823093249l,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,null,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1528894798;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						private static final long serialVersionUID = -5768297287711394420L___						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						private static final long serialVersionUID = 2843329425823093249L___						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				, null), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,private,static,final,long,serial,version,uid,5768297287711394420l,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,private,static,final,long,serial,version,uid,2843329425823093249l,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,null,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1528894799;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						private static final long serialVersionUID = -5768297287711394420L___						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						private static final long serialVersionUID = 2843329425823093249L___						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				, null), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,private,static,final,long,serial,version,uid,5768297287711394420l,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,private,static,final,long,serial,version,uid,2843329425823093249l,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,null,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1538998760;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new SelectTimeoutCepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new PatternSelectFunction<Event, Map<String, List<Event>>>() {_						private static final long serialVersionUID = -5768297287711394420L___						@Override_						public Map<String, List<Event>> select(Map<String, List<Event>> pattern) throws Exception {_							return pattern__						}_					},_					new PatternTimeoutFunction<Event, Tuple2<Map<String, List<Event>>, Long>>() {_						private static final long serialVersionUID = 2843329425823093249L___						@Override_						public Tuple2<Map<String, List<Event>>, Long> timeout(_							Map<String, List<Event>> pattern,_							long timeoutTimestamp) throws Exception {_							return Tuple2.of(pattern, timeoutTimestamp)__						}_					},_					timedOut_				, null), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,select,timeout,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,pattern,select,function,event,map,string,list,event,private,static,final,long,serial,version,uid,5768297287711394420l,override,public,map,string,list,event,select,map,string,list,event,pattern,throws,exception,return,pattern,new,pattern,timeout,function,event,tuple2,map,string,list,event,long,private,static,final,long,serial,version,uid,2843329425823093249l,override,public,tuple2,map,string,list,event,long,timeout,map,string,list,event,pattern,long,timeout,timestamp,throws,exception,return,tuple2,of,pattern,timeout,timestamp,timed,out,null,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1546179377;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new CepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new TimedOutProcessFunction(timedOut),_					null), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,timed,out,process,function,timed,out,null,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1547021580;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, List<Event>> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", Collections.<Event>singletonList(startEvent))___		final OutputTag<Tuple2<Map<String, List<Event>>, Long>> timedOut =_			new OutputTag<Tuple2<Map<String, List<Event>>, Long>>("timedOut") {}__		final KeyedOneInputStreamOperatorTestHarness<Integer, Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				new CepOperator<>(_					Event.createTypeSerializer(),_					false,_					new NFAFactory(true),_					null,_					null,_					new TimedOutProcessFunction(timedOut),_					null), new KeySelector<Event, Integer>() {_				private static final long serialVersionUID = 7219185117566268366L___				@Override_				public Integer getKey(Event value) throws Exception {_					return value.getId()__				}_			}, BasicTypeInfo.INT_TYPE_INFO)___		try {_			String rocksDbPath = tempFolder.newFolder().getAbsolutePath()__			RocksDBStateBackend rocksDBStateBackend = new RocksDBStateBackend(new MemoryStateBackend())__			rocksDBStateBackend.setDbStoragePath(rocksDbPath)___			harness.setStateBackend(rocksDBStateBackend)__			harness.setup(_				new KryoSerializer<>(_					(Class<Map<String, List<Event>>>) (Object) Map.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()__			Queue<StreamRecord<Tuple2<Map<String, List<Event>>, Long>>> sideOutput = harness.getSideOutput(timedOut)___			assertEquals(2L, result.size())__			assertEquals(1L, sideOutput.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Tuple2<Map<String, List<Event>>, Long> leftResult = sideOutput.poll().getValue()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,list,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,collections,event,singleton,list,start,event,final,output,tag,tuple2,map,string,list,event,long,timed,out,new,output,tag,tuple2,map,string,list,event,long,timed,out,final,keyed,one,input,stream,operator,test,harness,integer,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,cep,operator,event,create,type,serializer,false,new,nfafactory,true,null,null,new,timed,out,process,function,timed,out,null,new,key,selector,event,integer,private,static,final,long,serial,version,uid,7219185117566268366l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,basic,type,info,try,string,rocks,db,path,temp,folder,new,folder,get,absolute,path,rocks,dbstate,backend,rocks,dbstate,backend,new,rocks,dbstate,backend,new,memory,state,backend,rocks,dbstate,backend,set,db,storage,path,rocks,db,path,harness,set,state,backend,rocks,dbstate,backend,harness,setup,new,kryo,serializer,class,map,string,list,event,object,map,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,queue,stream,record,tuple2,map,string,list,event,long,side,output,harness,get,side,output,timed,out,assert,equals,2l,result,size,assert,equals,1l,side,output,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,tuple2,map,string,list,event,long,left,result,side,output,poll,get,value,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1493382517;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	@SuppressWarnings("unchecked")_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				null,_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,suppress,warnings,unchecked,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,null,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
CEPOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testKeyedAdvancingTimeWithoutElements() throws Exception;1493821466;Tests that the internal time of a CEP operator advances only given watermarks. See FLINK-5033;@Test_	@SuppressWarnings("unchecked")_	public void testKeyedAdvancingTimeWithoutElements() throws Exception {_		final KeySelector<Event, Integer> keySelector = new TestKeySelector()___		final Event startEvent = new Event(42, "start", 1.0)__		final long watermarkTimestamp1 = 5L__		final long watermarkTimestamp2 = 13L___		final Map<String, Event> expectedSequence = new HashMap<>(2)__		expectedSequence.put("start", startEvent)___		OneInputStreamOperatorTestHarness<Event, Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> harness = new KeyedOneInputStreamOperatorTestHarness<>(_			new TimeoutKeyedCEPPatternOperator<>(_				Event.createTypeSerializer(),_				false,_				keySelector,_				IntSerializer.INSTANCE,_				new NFAFactory(true),_				null,_				true),_			keySelector,_			BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup(_				new KryoSerializer<>(_					(Class<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>>) (Object) Either.class,_					new ExecutionConfig()))__			harness.open()___			harness.processElement(new StreamRecord<>(startEvent, 3L))__			harness.processWatermark(new Watermark(watermarkTimestamp1))__			harness.processWatermark(new Watermark(watermarkTimestamp2))___			Queue<Object> result = harness.getOutput()___			assertEquals(3L, result.size())___			Object watermark1 = result.poll()___			assertTrue(watermark1 instanceof Watermark)___			assertEquals(watermarkTimestamp1, ((Watermark) watermark1).getTimestamp())___			Object resultObject = result.poll()___			assertTrue(resultObject instanceof StreamRecord)___			StreamRecord<Either<Tuple2<Map<String, Event>, Long>, Map<String, Event>>> streamRecord = (StreamRecord<Either<Tuple2<Map<String,Event>,Long>,Map<String,Event>>>) resultObject___			assertTrue(streamRecord.getValue() instanceof Either.Left)___			Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>> left = (Either.Left<Tuple2<Map<String, Event>, Long>, Map<String, Event>>) streamRecord.getValue()___			Tuple2<Map<String, Event>, Long> leftResult = left.left()___			assertEquals(watermarkTimestamp2, (long) leftResult.f1)__			assertEquals(expectedSequence, leftResult.f0)___			Object watermark2 = result.poll()___			assertTrue(watermark2 instanceof Watermark)___			assertEquals(watermarkTimestamp2, ((Watermark) watermark2).getTimestamp())__		} finally {_			harness.close()__		}_	};tests,that,the,internal,time,of,a,cep,operator,advances,only,given,watermarks,see,flink,5033;test,suppress,warnings,unchecked,public,void,test,keyed,advancing,time,without,elements,throws,exception,final,key,selector,event,integer,key,selector,new,test,key,selector,final,event,start,event,new,event,42,start,1,0,final,long,watermark,timestamp1,5l,final,long,watermark,timestamp2,13l,final,map,string,event,expected,sequence,new,hash,map,2,expected,sequence,put,start,start,event,one,input,stream,operator,test,harness,event,either,tuple2,map,string,event,long,map,string,event,harness,new,keyed,one,input,stream,operator,test,harness,new,timeout,keyed,ceppattern,operator,event,create,type,serializer,false,key,selector,int,serializer,instance,new,nfafactory,true,null,true,key,selector,basic,type,info,try,harness,setup,new,kryo,serializer,class,either,tuple2,map,string,event,long,map,string,event,object,either,class,new,execution,config,harness,open,harness,process,element,new,stream,record,start,event,3l,harness,process,watermark,new,watermark,watermark,timestamp1,harness,process,watermark,new,watermark,watermark,timestamp2,queue,object,result,harness,get,output,assert,equals,3l,result,size,object,watermark1,result,poll,assert,true,watermark1,instanceof,watermark,assert,equals,watermark,timestamp1,watermark,watermark1,get,timestamp,object,result,object,result,poll,assert,true,result,object,instanceof,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,stream,record,stream,record,either,tuple2,map,string,event,long,map,string,event,result,object,assert,true,stream,record,get,value,instanceof,either,left,either,left,tuple2,map,string,event,long,map,string,event,left,either,left,tuple2,map,string,event,long,map,string,event,stream,record,get,value,tuple2,map,string,event,long,left,result,left,left,assert,equals,watermark,timestamp2,long,left,result,f1,assert,equals,expected,sequence,left,result,f0,object,watermark2,result,poll,assert,true,watermark2,instanceof,watermark,assert,equals,watermark,timestamp2,watermark,watermark2,get,timestamp,finally,harness,close
