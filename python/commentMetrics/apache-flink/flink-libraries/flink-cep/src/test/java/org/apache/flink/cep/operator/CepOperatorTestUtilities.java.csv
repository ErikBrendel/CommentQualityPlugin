commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Integer getKey(Event value) throws Exception {     return value.getId(). }
false;public,static;1;9;;public static <T> OneInputStreamOperatorTestHarness<Event, T> getCepTestHarness(CepOperator<Event, Integer, T> cepOperator) throws Exception {     KeySelector<Event, Integer> keySelector = new TestKeySelector().     return new KeyedOneInputStreamOperatorTestHarness<>(cepOperator, keySelector, BasicTypeInfo.INT_TYPE_INFO). }
false;public,static;2;6;;public static <K> CepOperator<Event, K, Map<String, List<Event>>> getKeyedCepOpearator(boolean isProcessingTime, NFACompiler.NFAFactory<Event> nfaFactory) {     return getKeyedCepOpearator(isProcessingTime, nfaFactory, null). }
false;public,static;3;7;;public static <K> CepOperator<Event, K, Map<String, List<Event>>> getKeyedCepOpearator(boolean isProcessingTime, NFACompiler.NFAFactory<Event> nfaFactory, EventComparator<Event> comparator) {     return getKeyedCepOpearator(isProcessingTime, nfaFactory, comparator, null). }
false;public;3;7;;@Override public void processMatch(Map<String, List<Event>> match, Context ctx, Collector<Map<String, List<Event>>> out) throws Exception {     out.collect(match). }
false;public,static;4;25;;public static <K> CepOperator<Event, K, Map<String, List<Event>>> getKeyedCepOpearator(boolean isProcessingTime, NFACompiler.NFAFactory<Event> nfaFactory, EventComparator<Event> comparator, OutputTag<Event> outputTag) {     return new CepOperator<>(Event.createTypeSerializer(), isProcessingTime, nfaFactory, comparator, null, new PatternProcessFunction<Event, Map<String, List<Event>>>() {          private static final long serialVersionUID = -7143807777582726991L.          @Override         public void processMatch(Map<String, List<Event>> match, Context ctx, Collector<Map<String, List<Event>>> out) throws Exception {             out.collect(match).         }     }, outputTag). }
