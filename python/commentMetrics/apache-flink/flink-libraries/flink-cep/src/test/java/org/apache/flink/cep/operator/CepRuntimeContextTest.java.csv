commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testCepRuntimeContextIsSetInNFA() throws Exception {     @SuppressWarnings("unchecked")     final NFA<Event> mockNFA = mock(NFA.class).     try (OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness = getCepTestHarness(createOperatorForNFA(mockNFA).build())) {         harness.open().         verify(mockNFA).open(any(CepRuntimeContext.class), any(Configuration.class)).     } }
false;public;0;21;;@Test public void testCepRuntimeContextIsSetInProcessFunction() throws Exception {     final VerifyRuntimeContextProcessFunction processFunction = new VerifyRuntimeContextProcessFunction().     try (OneInputStreamOperatorTestHarness<Event, Event> harness = getCepTestHarness(createOperatorForNFA(getSingleElementAlwaysTrueNFA()).withFunction(processFunction).build())) {         harness.open().         Event record = event().withName("A").build().         harness.processElement(record, 0).         assertFunction(processFunction).checkOpenCalled().checkCloseCalled().checkProcessMatchCalled().     } }
false;private;0;3;;private NFA<Event> getSingleElementAlwaysTrueNFA() {     return NFACompiler.compileFactory(Pattern.<Event>begin("A"), false).createNFA(). }
false;public;0;160;;@Test public void testCepRuntimeContext() {     final String taskName = "foobarTask".     final MetricGroup metricGroup = new UnregisteredMetricsGroup().     final int numberOfParallelSubtasks = 42.     final int indexOfSubtask = 43.     final int attemptNumber = 1337.     final String taskNameWithSubtask = "barfoo".     final ExecutionConfig executionConfig = mock(ExecutionConfig.class).     final ClassLoader userCodeClassLoader = mock(ClassLoader.class).     final DistributedCache distributedCache = mock(DistributedCache.class).     RuntimeContext mockedRuntimeContext = mock(RuntimeContext.class).     when(mockedRuntimeContext.getTaskName()).thenReturn(taskName).     when(mockedRuntimeContext.getMetricGroup()).thenReturn(metricGroup).     when(mockedRuntimeContext.getNumberOfParallelSubtasks()).thenReturn(numberOfParallelSubtasks).     when(mockedRuntimeContext.getIndexOfThisSubtask()).thenReturn(indexOfSubtask).     when(mockedRuntimeContext.getAttemptNumber()).thenReturn(attemptNumber).     when(mockedRuntimeContext.getTaskNameWithSubtasks()).thenReturn(taskNameWithSubtask).     when(mockedRuntimeContext.getExecutionConfig()).thenReturn(executionConfig).     when(mockedRuntimeContext.getUserCodeClassLoader()).thenReturn(userCodeClassLoader).     when(mockedRuntimeContext.getDistributedCache()).thenReturn(distributedCache).     RuntimeContext runtimeContext = new CepRuntimeContext(mockedRuntimeContext).     assertEquals(taskName, runtimeContext.getTaskName()).     assertEquals(metricGroup, runtimeContext.getMetricGroup()).     assertEquals(numberOfParallelSubtasks, runtimeContext.getNumberOfParallelSubtasks()).     assertEquals(indexOfSubtask, runtimeContext.getIndexOfThisSubtask()).     assertEquals(attemptNumber, runtimeContext.getAttemptNumber()).     assertEquals(taskNameWithSubtask, runtimeContext.getTaskNameWithSubtasks()).     assertEquals(executionConfig, runtimeContext.getExecutionConfig()).     assertEquals(userCodeClassLoader, runtimeContext.getUserCodeClassLoader()).     assertEquals(distributedCache, runtimeContext.getDistributedCache()).     try {         runtimeContext.getState(new ValueStateDescriptor<>("foobar", Integer.class, 42)).         fail("Expected getState to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getListState(new ListStateDescriptor<>("foobar", Integer.class)).         fail("Expected getListState to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getReducingState(new ReducingStateDescriptor<>("foobar", mock(ReduceFunction.class), Integer.class)).         fail("Expected getReducingState to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getAggregatingState(new AggregatingStateDescriptor<>("foobar", mock(AggregateFunction.class), Integer.class)).         fail("Expected getAggregatingState to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getFoldingState(new FoldingStateDescriptor<>("foobar", 0, mock(FoldFunction.class), Integer.class)).         fail("Expected getFoldingState to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getMapState(new MapStateDescriptor<>("foobar", Integer.class, String.class)).         fail("Expected getMapState to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.addAccumulator("foobar", mock(Accumulator.class)).         fail("Expected addAccumulator to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getAccumulator("foobar").         fail("Expected getAccumulator to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getAllAccumulators().         fail("Expected getAllAccumulators to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getIntCounter("foobar").         fail("Expected getIntCounter to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getLongCounter("foobar").         fail("Expected getLongCounter to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getDoubleCounter("foobar").         fail("Expected getDoubleCounter to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getHistogram("foobar").         fail("Expected getHistogram to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.hasBroadcastVariable("foobar").         fail("Expected hasBroadcastVariable to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getBroadcastVariable("foobar").         fail("Expected getBroadcastVariable to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     }     try {         runtimeContext.getBroadcastVariableWithInitializer("foobar", mock(BroadcastVariableInitializer.class)).         fail("Expected getBroadcastVariableWithInitializer to fail with unsupported operation exception.").     } catch (UnsupportedOperationException e) {     // expected     } }
false;static;1;3;;static MockProcessFunctionAsserter assertFunction(VerifyRuntimeContextProcessFunction function) {     return new MockProcessFunctionAsserter(function). }
false;;0;4;;MockProcessFunctionAsserter checkOpenCalled() {     assertThat(function.openCalled, is(true)).     return this. }
false;;0;4;;MockProcessFunctionAsserter checkCloseCalled() {     assertThat(function.openCalled, is(true)).     return this. }
false;;0;4;;MockProcessFunctionAsserter checkProcessMatchCalled() {     assertThat(function.processMatchCalled, is(true)).     return this. }
false;public;1;6;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     verifyContext().     openCalled = true. }
false;private;0;5;;private void verifyContext() {     if (!(getRuntimeContext() instanceof CepRuntimeContext)) {         fail("Runtime context was not wrapped in CepRuntimeContext").     } }
false;public;0;6;;@Override public void close() throws Exception {     super.close().     verifyContext().     closeCalled = true. }
false;public;3;5;;@Override public void processMatch(Map<String, List<Event>> match, Context ctx, Collector<Event> out) throws Exception {     verifyContext().     processMatchCalled = true. }
