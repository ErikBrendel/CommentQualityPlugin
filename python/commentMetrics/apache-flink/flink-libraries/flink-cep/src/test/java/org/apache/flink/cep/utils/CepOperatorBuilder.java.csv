commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public NFA<Event> createNFA() {     return nfa. }
false;public;3;7;;@Override public void processMatch(Map<String, List<Event>> match, Context ctx, Collector<Map<String, List<Event>>> out) throws Exception {     out.collect(match). }
false;public,static;1;24;;public static CepOperatorBuilder<Map<String, List<Event>>> createOperatorForNFA(NFA<Event> nfa) {     return new CepOperatorBuilder<>(true, new NFACompiler.NFAFactory<Event>() {          @Override         public NFA<Event> createNFA() {             return nfa.         }     }, null, null, new PatternProcessFunction<Event, Map<String, List<Event>>>() {          private static final long serialVersionUID = -7143807777582726991L.          @Override         public void processMatch(Map<String, List<Event>> match, Context ctx, Collector<Map<String, List<Event>>> out) throws Exception {             out.collect(match).         }     }, null). }
false;public;3;7;;@Override public void processMatch(Map<String, List<Event>> match, Context ctx, Collector<Map<String, List<Event>>> out) throws Exception {     out.collect(match). }
false;public,static;1;19;;public static CepOperatorBuilder<Map<String, List<Event>>> createOperatorForNFAFactory(NFACompiler.NFAFactory<Event> nfaFactory) {     return new CepOperatorBuilder<>(true, nfaFactory, null, null, new PatternProcessFunction<Event, Map<String, List<Event>>>() {          private static final long serialVersionUID = -7143807777582726991L.          @Override         public void processMatch(Map<String, List<Event>> match, Context ctx, Collector<Map<String, List<Event>>> out) throws Exception {             out.collect(match).         }     }, null). }
false;public;0;9;;public CepOperatorBuilder<OUT> inProcessingTime() {     return new CepOperatorBuilder<>(true, nfaFactory, comparator, skipStrategy, function, lateDataOutputTag). }
false;public;0;9;;public CepOperatorBuilder<OUT> inEventTime() {     return new CepOperatorBuilder<>(false, nfaFactory, comparator, skipStrategy, function, lateDataOutputTag). }
false;public;1;9;;public CepOperatorBuilder<OUT> withComparator(EventComparator<Event> comparator) {     return new CepOperatorBuilder<>(false, nfaFactory, comparator, skipStrategy, function, lateDataOutputTag). }
false;public;1;9;;public CepOperatorBuilder<OUT> withSkipStrategy(AfterMatchSkipStrategy skipStrategy) {     return new CepOperatorBuilder<>(false, nfaFactory, comparator, skipStrategy, function, lateDataOutputTag). }
false;public;1;9;;public CepOperatorBuilder<OUT> withLateDataOutputTag(OutputTag<Event> lateDataOutputTag) {     return new CepOperatorBuilder<>(false, nfaFactory, comparator, skipStrategy, function, lateDataOutputTag). }
false;public;0;4;;@Override public NFA<Event> createNFA() {     return nfa. }
false;public;1;14;;public CepOperatorBuilder<OUT> withNFA(NFA<Event> nfa) {     return new CepOperatorBuilder<>(false, new NFACompiler.NFAFactory<Event>() {          @Override         public NFA<Event> createNFA() {             return nfa.         }     }, comparator, skipStrategy, function, lateDataOutputTag). }
false;public;1;9;;public <T> CepOperatorBuilder<T> withFunction(PatternProcessFunction<Event, T> processFunction) {     return new CepOperatorBuilder<>(isProcessingTime, nfaFactory, comparator, skipStrategy, processFunction, lateDataOutputTag). }
false;public;0;9;;public <K> CepOperator<Event, K, OUT> build() {     return new CepOperator<>(Event.createTypeSerializer(), isProcessingTime, nfaFactory, comparator, skipStrategy, function, lateDataOutputTag). }
