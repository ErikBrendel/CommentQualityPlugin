commented;modifiers;parameterAmount;loc;comment;code
true;public;0;14;/**  * These test simply test that the pattern construction completes without failure.  */ ;/**  * These test simply test that the pattern construction completes without failure.  */ @Test public void testStrictContiguity() {     Pattern<Object, ?> pattern = Pattern.begin("start").next("next").next("end").     Pattern<Object, ?> previous.     Pattern<Object, ?> previous2.     assertNotNull(previous = pattern.getPrevious()).     assertNotNull(previous2 = previous.getPrevious()).     assertNull(previous2.getPrevious()).     assertEquals(pattern.getName(), "end").     assertEquals(previous.getName(), "next").     assertEquals(previous2.getName(), "start"). }
false;public;0;17;;@Test public void testNonStrictContiguity() {     Pattern<Object, ?> pattern = Pattern.begin("start").followedBy("next").followedBy("end").     Pattern<Object, ?> previous.     Pattern<Object, ?> previous2.     assertNotNull(previous = pattern.getPrevious()).     assertNotNull(previous2 = previous.getPrevious()).     assertNull(previous2.getPrevious()).     assertEquals(ConsumingStrategy.SKIP_TILL_NEXT, pattern.getQuantifier().getConsumingStrategy()).     assertEquals(ConsumingStrategy.SKIP_TILL_NEXT, previous.getQuantifier().getConsumingStrategy()).     assertEquals(pattern.getName(), "end").     assertEquals(previous.getName(), "next").     assertEquals(previous2.getName(), "start"). }
false;public;1;4;;@Override public boolean filter(Event value) throws Exception {     return value.getId() == 42. }
false;public;1;4;;@Override public boolean filter(Event value) throws Exception {     return value.getName().equals("foobar"). }
false;public;0;33;;@Test public void testStrictContiguityWithCondition() {     Pattern<Event, ?> pattern = Pattern.<Event>begin("start").next("next").where(new SimpleCondition<Event>() {          private static final long serialVersionUID = -7657256242101104925L.          @Override         public boolean filter(Event value) throws Exception {             return value.getName().equals("foobar").         }     }).next("end").where(new SimpleCondition<Event>() {          private static final long serialVersionUID = -7597452389191504189L.          @Override         public boolean filter(Event value) throws Exception {             return value.getId() == 42.         }     }).     Pattern<Event, ?> previous.     Pattern<Event, ?> previous2.     assertNotNull(previous = pattern.getPrevious()).     assertNotNull(previous2 = previous.getPrevious()).     assertNull(previous2.getPrevious()).     assertNotNull(pattern.getCondition()).     assertNotNull(previous.getCondition()).     assertNotNull(previous2.getCondition()).     assertEquals(pattern.getName(), "end").     assertEquals(previous.getName(), "next").     assertEquals(previous2.getName(), "start"). }
false;public;0;18;;@Test public void testPatternWithSubtyping() {     Pattern<Event, ?> pattern = Pattern.<Event>begin("start").next("subevent").subtype(SubEvent.class).followedBy("end").     Pattern<Event, ?> previous.     Pattern<Event, ?> previous2.     assertNotNull(previous = pattern.getPrevious()).     assertNotNull(previous2 = previous.getPrevious()).     assertNull(previous2.getPrevious()).     assertNotNull(previous.getCondition()).     assertTrue(previous.getCondition() instanceof SubtypeCondition).     assertEquals(pattern.getName(), "end").     assertEquals(previous.getName(), "subevent").     assertEquals(previous2.getName(), "start"). }
false;public;1;4;;@Override public boolean filter(SubEvent value) throws Exception {     return false. }
false;public;0;25;;@Test public void testPatternWithSubtypingAndFilter() {     Pattern<Event, Event> pattern = Pattern.<Event>begin("start").next("subevent").subtype(SubEvent.class).where(new SimpleCondition<SubEvent>() {          private static final long serialVersionUID = -4118591291880230304L.          @Override         public boolean filter(SubEvent value) throws Exception {             return false.         }     }).followedBy("end").     Pattern<Event, ?> previous.     Pattern<Event, ?> previous2.     assertNotNull(previous = pattern.getPrevious()).     assertNotNull(previous2 = previous.getPrevious()).     assertNull(previous2.getPrevious()).     assertEquals(ConsumingStrategy.SKIP_TILL_NEXT, pattern.getQuantifier().getConsumingStrategy()).     assertNotNull(previous.getCondition()).     assertEquals(pattern.getName(), "end").     assertEquals(previous.getName(), "subevent").     assertEquals(previous2.getName(), "start"). }
false;public;1;4;;@Override public boolean filter(Event value) throws Exception {     return false. }
false;public;1;4;;@Override public boolean filter(Event value) throws Exception {     return false. }
false;public;1;4;;@Override public boolean filter(Event value) throws Exception {     return false. }
false;public;0;40;;@Test public void testPatternWithOrFilter() {     Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {          private static final long serialVersionUID = 3518061453394250543L.          @Override         public boolean filter(Event value) throws Exception {             return false.         }     }).or(new SimpleCondition<Event>() {          private static final long serialVersionUID = 947463545810023841L.          @Override         public boolean filter(Event value) throws Exception {             return false.         }     }).next("or").or(new SimpleCondition<Event>() {          private static final long serialVersionUID = -2775487887505922250L.          @Override         public boolean filter(Event value) throws Exception {             return false.         }     }).followedBy("end").     Pattern<Event, ?> previous.     Pattern<Event, ?> previous2.     assertNotNull(previous = pattern.getPrevious()).     assertNotNull(previous2 = previous.getPrevious()).     assertNull(previous2.getPrevious()).     assertEquals(ConsumingStrategy.SKIP_TILL_NEXT, pattern.getQuantifier().getConsumingStrategy()).     assertFalse(previous.getCondition() instanceof RichOrCondition).     assertTrue(previous2.getCondition() instanceof RichOrCondition).     assertEquals(pattern.getName(), "end").     assertEquals(previous.getName(), "or").     assertEquals(previous2.getName(), "start"). }
false;public;0;12;;@Test public void testRichCondition() {     Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(mock(IterativeCondition.class)).where(mock(IterativeCondition.class)).followedBy("end").where(mock(IterativeCondition.class)).or(mock(IterativeCondition.class)).     assertTrue(pattern.getCondition() instanceof RichOrCondition).     assertTrue(pattern.getPrevious().getCondition() instanceof RichAndCondition). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testPatternTimesNegativeTimes() throws Exception {     Pattern.begin("start").where(dummyCondition()).times(-1). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testPatternTimesNegativeFrom() throws Exception {     Pattern.begin("start").where(dummyCondition()).times(-1, 2). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testPatternCanHaveQuantifierSpecifiedOnce1() throws Exception {     Pattern.begin("start").where(dummyCondition()).oneOrMore().oneOrMore().optional(). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testPatternCanHaveQuantifierSpecifiedOnce2() throws Exception {     Pattern.begin("start").where(dummyCondition()).oneOrMore().optional().times(1). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testPatternCanHaveQuantifierSpecifiedOnce3() throws Exception {     Pattern.begin("start").where(dummyCondition()).times(1).oneOrMore(). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testPatternCanHaveQuantifierSpecifiedOnce4() throws Exception {     Pattern.begin("start").where(dummyCondition()).oneOrMore().oneOrMore(). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testPatternCanHaveQuantifierSpecifiedOnce5() throws Exception {     Pattern.begin("start").where(dummyCondition()).oneOrMore().oneOrMore().optional(). }
false;public;0;4;;@Test(expected = MalformedPatternException.class) public void testNotNextCannotBeOneOrMore() throws Exception {     Pattern.begin("start").where(dummyCondition()).notNext("not").where(dummyCondition()).oneOrMore(). }
false;public;0;4;;@Test(expected = MalformedPatternException.class) public void testNotNextCannotBeTimes() throws Exception {     Pattern.begin("start").where(dummyCondition()).notNext("not").where(dummyCondition()).times(3). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testNotNextCannotBeOptional() throws Exception {     Pattern.begin("start").where(dummyCondition()).notNext("not").where(dummyCondition()).optional(). }
false;public;0;4;;@Test(expected = MalformedPatternException.class) public void testNotFollowedCannotBeOneOrMore() throws Exception {     Pattern.begin("start").where(dummyCondition()).notFollowedBy("not").where(dummyCondition()).oneOrMore(). }
false;public;0;4;;@Test(expected = MalformedPatternException.class) public void testNotFollowedCannotBeTimes() throws Exception {     Pattern.begin("start").where(dummyCondition()).notFollowedBy("not").where(dummyCondition()).times(3). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testNotFollowedCannotBeOptional() throws Exception {     Pattern.begin("start").where(dummyCondition()).notFollowedBy("not").where(dummyCondition()).optional(). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testUntilCannotBeAppliedToTimes() throws Exception {     Pattern.begin("start").where(dummyCondition()).times(1).until(dummyCondition()). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testUntilCannotBeAppliedToSingleton() throws Exception {     Pattern.begin("start").where(dummyCondition()).until(dummyCondition()). }
false;public;0;5;;@Test(expected = MalformedPatternException.class) public void testUntilCannotBeAppliedTwice() throws Exception {     Pattern.begin("start").where(dummyCondition()).until(dummyCondition()).until(dummyCondition()). }
false;public;1;4;;@Override public boolean filter(Object value) throws Exception {     return true. }
false;private;0;10;;private SimpleCondition<Object> dummyCondition() {     return new SimpleCondition<Object>() {          private static final long serialVersionUID = -2205071036073867531L.          @Override         public boolean filter(Object value) throws Exception {             return true.         }     }. }
