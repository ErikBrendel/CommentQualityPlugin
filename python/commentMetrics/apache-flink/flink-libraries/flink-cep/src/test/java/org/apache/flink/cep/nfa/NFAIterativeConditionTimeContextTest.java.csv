commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public boolean filter(Event value, Context<Event> ctx) throws Exception {     return ctx.timestamp() == timestamp. }
false;public;0;20;;@Test public void testEventTimestamp() throws Exception {     final Event event = event().withId(1).build().     final long timestamp = 3.     final Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new IterativeCondition<Event>() {          @Override         public boolean filter(Event value, Context<Event> ctx) throws Exception {             return ctx.timestamp() == timestamp.         }     }).     final NFATestHarness testHarness = forPattern(pattern).build().     final List<List<Event>> resultingPattern = testHarness.feedRecord(new StreamRecord<>(event, timestamp)).     compareMaps(resultingPattern, Collections.singletonList(Collections.singletonList(event))). }
false;public;2;4;;@Override public boolean filter(Event value, Context<Event> ctx) throws Exception {     return ctx.currentProcessingTime() == 3. }
false;public;0;27;;@Test public void testCurrentProcessingTime() throws Exception {     final Event event1 = event().withId(1).build().     final Event event2 = event().withId(2).build().     final Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new IterativeCondition<Event>() {          @Override         public boolean filter(Event value, Context<Event> ctx) throws Exception {             return ctx.currentProcessingTime() == 3.         }     }).     final TestTimerService cepTimerService = new TestTimerService().     final NFATestHarness testHarness = forPattern(pattern).withTimerService(cepTimerService).build().     cepTimerService.setCurrentProcessingTime(1).     final List<List<Event>> resultingPatterns1 = testHarness.feedRecord(new StreamRecord<>(event1, 7)).     cepTimerService.setCurrentProcessingTime(3).     final List<List<Event>> resultingPatterns2 = testHarness.feedRecord(new StreamRecord<>(event2, 8)).     compareMaps(resultingPatterns1, Collections.emptyList()).     compareMaps(resultingPatterns2, Collections.singletonList(Collections.singletonList(event2))). }
