commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Creates a {@link PatternStream} from an input data stream and a pattern.  *  * @param input DataStream containing the input events  * @param pattern Pattern specification which shall be detected  * @param <T> Type of the input events  * @return Resulting pattern stream  */ ;/**  * Creates a {@link PatternStream} from an input data stream and a pattern.  *  * @param input DataStream containing the input events  * @param pattern Pattern specification which shall be detected  * @param <T> Type of the input events  * @return Resulting pattern stream  */ public static <T> PatternStream<T> pattern(DataStream<T> input, Pattern<T, ?> pattern) {     return new PatternStream<>(input, pattern). }
true;public,static;3;7;/**  * Creates a {@link PatternStream} from an input data stream and a pattern.  *  * @param input DataStream containing the input events  * @param pattern Pattern specification which shall be detected  * @param comparator Comparator to sort events with equal timestamps  * @param <T> Type of the input events  * @return Resulting pattern stream  */ ;/**  * Creates a {@link PatternStream} from an input data stream and a pattern.  *  * @param input DataStream containing the input events  * @param pattern Pattern specification which shall be detected  * @param comparator Comparator to sort events with equal timestamps  * @param <T> Type of the input events  * @return Resulting pattern stream  */ public static <T> PatternStream<T> pattern(DataStream<T> input, Pattern<T, ?> pattern, EventComparator<T> comparator) {     final PatternStream<T> stream = new PatternStream<>(input, pattern).     return stream.withComparator(comparator). }
