commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public EventId getEventId() {     return eventId. }
false;public;0;3;;public String getPageName() {     return pageName. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     NodeId nodeId = (NodeId) o.     return Objects.equals(eventId, nodeId.eventId) && Objects.equals(pageName, nodeId.pageName). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(eventId, pageName). }
false;public;0;7;;@Override public String toString() {     return "NodeId{" + "eventId=" + eventId + ", pageName='" + pageName + '\'' + '}'. }
false;public;0;4;;@Override public boolean isImmutableType() {     return true. }
false;public;0;4;;@Override public NodeId createInstance() {     return null. }
false;public;1;4;;@Override public NodeId copy(NodeId from) {     return new NodeId(from.eventId, from.pageName). }
false;public;2;4;;@Override public NodeId copy(NodeId from, NodeId reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;10;;@Override public void serialize(NodeId record, DataOutputView target) throws IOException {     if (record != null) {         target.writeByte(1).         eventIdSerializer.serialize(record.eventId, target).         StringValue.writeString(record.pageName, target).     } else {         target.writeByte(0).     } }
false;public;1;11;;@Override public NodeId deserialize(DataInputView source) throws IOException {     byte b = source.readByte().     if (b == 0) {         return null.     }     EventId eventId = eventIdSerializer.deserialize(source).     String pageName = StringValue.readString(source).     return new NodeId(eventId, pageName). }
false;public;2;4;;@Override public NodeId deserialize(NodeId reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;7;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     target.writeByte(source.readByte()).     eventIdSerializer.copy(source, target).     StringValue.copyString(source, target). }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public TypeSerializerSnapshot<NodeId> snapshotConfiguration() {     return new NodeIdSerializerSnapshot(this). }
false;protected;0;4;;@Override protected int getCurrentOuterSnapshotVersion() {     return VERSION. }
false;protected;1;4;;@Override protected NodeIdSerializer createOuterSerializerWithNestedSerializers(TypeSerializer<?>[] nestedSerializers) {     return new NodeIdSerializer((EventId.EventIdSerializer) nestedSerializers[0]). }
false;protected;1;4;;@Override protected TypeSerializer<?>[] getNestedSerializers(NodeIdSerializer outerSerializer) {     return new TypeSerializer<?>[] { outerSerializer.eventIdSerializer }. }
false;private;1;9;;// ------------------------------------------------------------------------ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {     in.defaultReadObject().     if (eventIdSerializer == null) {         // the nested serializer will be null if this was read from a savepoint taken with versions         // lower than Flink 1.7. in this case, we explicitly create instance for the nested serializer.         this.eventIdSerializer = EventId.EventIdSerializer.INSTANCE.     } }
