commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Check if the matching status of the NFA has changed so far.  *  * @return {@code true} if matching status has changed, {@code false} otherwise  */ ;/**  * Check if the matching status of the NFA has changed so far.  *  * @return {@code true} if matching status has changed, {@code false} otherwise  */ public boolean isStateChanged() {     return stateChanged. }
true;public;0;3;/**  * Reset the changed bit checked via {@link #isStateChanged()} to {@code false}.  */ ;/**  * Reset the changed bit checked via {@link #isStateChanged()} to {@code false}.  */ public void resetStateChanged() {     this.stateChanged = false. }
true;public;0;3;/**  * Set the changed bit checked via {@link #isStateChanged()} to {@code true}.  */ ;/**  * Set the changed bit checked via {@link #isStateChanged()} to {@code true}.  */ public void setStateChanged() {     this.stateChanged = true. }
false;public;0;3;;public Queue<ComputationState> getPartialMatches() {     return partialMatches. }
false;public;0;3;;public Queue<ComputationState> getCompletedMatches() {     return completedMatches. }
false;public;1;3;;public void setNewPartialMatches(PriorityQueue<ComputationState> newPartialMatches) {     this.partialMatches = newPartialMatches. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     NFAState nfaState = (NFAState) o.     return Arrays.equals(partialMatches.toArray(), nfaState.partialMatches.toArray()) && Arrays.equals(completedMatches.toArray(), nfaState.completedMatches.toArray()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(partialMatches, completedMatches). }
false;public;0;8;;@Override public String toString() {     return "NFAState{" + "partialMatches=" + partialMatches + ", completedMatches=" + completedMatches + ", stateChanged=" + stateChanged + '}'. }
