commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;NodeId getTarget() {     return target. }
false;;0;3;;DeweyNumber getDeweyNumber() {     return deweyNumber. }
false;public;0;7;;@Override public String toString() {     return "SharedBufferEdge{" + "target=" + target + ", deweyNumber=" + deweyNumber + '}'. }
false;public;0;4;;@Override public boolean isImmutableType() {     return true. }
false;public;0;4;;@Override public SharedBufferEdge createInstance() {     return null. }
false;public;1;4;;@Override public SharedBufferEdge copy(SharedBufferEdge from) {     return new SharedBufferEdge(from.target, from.deweyNumber). }
false;public;2;4;;@Override public SharedBufferEdge copy(SharedBufferEdge from, SharedBufferEdge reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;5;;@Override public void serialize(SharedBufferEdge record, DataOutputView target) throws IOException {     nodeIdSerializer.serialize(record.target, target).     deweyNumberSerializer.serialize(record.deweyNumber, target). }
false;public;1;6;;@Override public SharedBufferEdge deserialize(DataInputView source) throws IOException {     NodeId target = nodeIdSerializer.deserialize(source).     DeweyNumber deweyNumber = deweyNumberSerializer.deserialize(source).     return new SharedBufferEdge(target, deweyNumber). }
false;public;2;4;;@Override public SharedBufferEdge deserialize(SharedBufferEdge reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;5;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     nodeIdSerializer.copy(source, target).     deweyNumberSerializer.copy(source, target). }
false;public;0;4;;// ----------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<SharedBufferEdge> snapshotConfiguration() {     return new SharedBufferEdgeSerializerSnapshot(this). }
false;protected;0;4;;@Override protected int getCurrentOuterSnapshotVersion() {     return VERSION. }
false;protected;1;6;;@Override protected SharedBufferEdgeSerializer createOuterSerializerWithNestedSerializers(TypeSerializer<?>[] nestedSerializers) {     return new SharedBufferEdgeSerializer((NodeId.NodeIdSerializer) nestedSerializers[0], (DeweyNumber.DeweyNumberSerializer) nestedSerializers[1]). }
false;protected;1;4;;@Override protected TypeSerializer<?>[] getNestedSerializers(SharedBufferEdgeSerializer outerSerializer) {     return new TypeSerializer<?>[] { outerSerializer.nodeIdSerializer, outerSerializer.deweyNumberSerializer }. }
false;private;1;10;;// ------------------------------------------------------------------------ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {     in.defaultReadObject().     if (nodeIdSerializer == null) {         // the nested serializers will be null if this was read from a savepoint taken with versions         // lower than Flink 1.7. in this case, we explicitly create instances for the nested serializers         this.nodeIdSerializer = new NodeId.NodeIdSerializer().         this.deweyNumberSerializer = DeweyNumber.DeweyNumberSerializer.INSTANCE.     } }
