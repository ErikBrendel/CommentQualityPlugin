commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;2;1;/**  * The filter function that evaluates the predicate.  *  * <p><strong>IMPORTANT:</strong> The system assumes that the function does not  * modify the elements on which the predicate is applied. Violating this assumption  * can lead to incorrect results.  *  * @param value The value to be tested.  * @param ctx The {@link Context} used for the evaluation of the function and provides access to  *            the already accepted events in the pattern (see {@link Context#getEventsForPattern(String)}).  * @return {@code true} for values that should be retained, {@code false}  * for values to be filtered out.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ ;/**  * The filter function that evaluates the predicate.  *  * <p><strong>IMPORTANT:</strong> The system assumes that the function does not  * modify the elements on which the predicate is applied. Violating this assumption  * can lead to incorrect results.  *  * @param value The value to be tested.  * @param ctx The {@link Context} used for the evaluation of the function and provides access to  *            the already accepted events in the pattern (see {@link Context#getEventsForPattern(String)}).  * @return {@code true} for values that should be retained, {@code false}  * for values to be filtered out.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ public abstract boolean filter(T value, Context<T> ctx) throws Exception.
true;;1;1;/**  * @return An {@link Iterable} over the already accepted elements  * for a given pattern. Elements are iterated in the order they were  * inserted in the pattern.  *  * @param name The name of the pattern.  */ ;/**  * @return An {@link Iterable} over the already accepted elements  * for a given pattern. Elements are iterated in the order they were  * inserted in the pattern.  *  * @param name The name of the pattern.  */ Iterable<T> getEventsForPattern(String name) throws Exception.
