commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void lock() {     refCounter += 1. }
true;;0;8;/**  * Releases lock on this object. If no more locks are acquired on it, this method will return true.  *  * @return true if no more locks are acquired  */ ;/**  * Releases lock on this object. If no more locks are acquired on it, this method will return true.  *  * @return true if no more locks are acquired  */ boolean release() {     if (refCounter <= 0) {         return true.     }     refCounter -= 1.     return refCounter == 0. }
false;public;0;3;;public T getElement() {     return element. }
false;public;0;6;;@Override public String toString() {     return "Lock{" + "refCounter=" + refCounter + '}'. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Lockable<?> lockable = (Lockable<?>) o.     return refCounter == lockable.refCounter && Objects.equals(element, lockable.element). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(refCounter, element). }
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;6;;@Override public LockableTypeSerializer<E> duplicate() {     TypeSerializer<E> elementSerializerCopy = elementSerializer.duplicate().     return elementSerializerCopy == elementSerializer ? this : new LockableTypeSerializer<>(elementSerializerCopy). }
false;public;0;4;;@Override public Lockable<E> createInstance() {     return null. }
false;public;1;4;;@Override public Lockable<E> copy(Lockable<E> from) {     return new Lockable<>(elementSerializer.copy(from.element), from.refCounter). }
false;public;2;5;;@Override public Lockable<E> copy(Lockable<E> from, Lockable<E> reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;5;;@Override public void serialize(Lockable<E> record, DataOutputView target) throws IOException {     IntSerializer.INSTANCE.serialize(record.refCounter, target).     elementSerializer.serialize(record.element, target). }
false;public;1;6;;@Override public Lockable<E> deserialize(DataInputView source) throws IOException {     int refCount = IntSerializer.INSTANCE.deserialize(source).     E record = elementSerializer.deserialize(source).     return new Lockable<>(record, refCount). }
false;public;2;5;;@Override public Lockable<E> deserialize(Lockable<E> reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;7;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     // refCounter     IntSerializer.INSTANCE.copy(source, target).     E element = elementSerializer.deserialize(source).     elementSerializer.serialize(element, target). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     LockableTypeSerializer<?> that = (LockableTypeSerializer<?>) o.     return Objects.equals(elementSerializer, that.elementSerializer). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(elementSerializer). }
false;public;0;4;;@Override public TypeSerializerSnapshot<Lockable<E>> snapshotConfiguration() {     return new LockableTypeSerializerSnapshot<>(this). }
false;;0;4;;@VisibleForTesting TypeSerializer<E> getElementSerializer() {     return elementSerializer. }
false;public;1;20;;@Override @SuppressWarnings("unchecked") public <U> TypeSerializerSnapshot<Lockable<E>> transformLegacySerializerSnapshot(TypeSerializerSnapshot<U> legacySnapshot) {     if (legacySnapshot instanceof LockableTypeSerializerSnapshot) {         return (TypeSerializerSnapshot<Lockable<E>>) legacySnapshot.     }     // 2. return a LockableTypeSerializerSnapshot that has the legacySnapshot as a nested snapshot.     if (legacySnapshot instanceof TypeSerializerConfigSnapshot) {         setElementSerializerAsPriorSerializer(legacySnapshot, this.elementSerializer).     }     LockableTypeSerializerSnapshot<E> lockableSnapshot = new LockableTypeSerializerSnapshot<>().     CompositeTypeSerializerUtil.setNestedSerializersSnapshots(lockableSnapshot, legacySnapshot).     return lockableSnapshot. }
false;private,static;2;5;;@SuppressWarnings("unchecked") private static <U, E> void setElementSerializerAsPriorSerializer(TypeSerializerSnapshot<U> legacySnapshot, TypeSerializer<E> elementSerializer) {     TypeSerializerConfigSnapshot<E> elementLegacySnapshot = (TypeSerializerConfigSnapshot<E>) legacySnapshot.     elementLegacySnapshot.setPriorSerializer(elementSerializer). }
