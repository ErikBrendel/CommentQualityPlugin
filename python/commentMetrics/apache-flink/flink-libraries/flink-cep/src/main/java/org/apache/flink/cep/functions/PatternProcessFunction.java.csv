commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;3;4;/**  * Generates resulting elements given a map of detected pattern events. The events  * are identified by their specified names.  *  * <p>{@link PatternProcessFunction.Context#timestamp()} in this case returns the time of the last element that was  * assigned to the match, resulting in this partial match being finished.  *  * @param match map containing the found pattern. Events are identified by their names.  * @param ctx enables access to time features and emitting results through side outputs  * @param out Collector used to output the generated elements  * @throws Exception This method may throw exceptions. Throwing an exception will cause the  *                   operation to fail and may trigger recovery.  */ ;/**  * Generates resulting elements given a map of detected pattern events. The events  * are identified by their specified names.  *  * <p>{@link PatternProcessFunction.Context#timestamp()} in this case returns the time of the last element that was  * assigned to the match, resulting in this partial match being finished.  *  * @param match map containing the found pattern. Events are identified by their names.  * @param ctx enables access to time features and emitting results through side outputs  * @param out Collector used to output the generated elements  * @throws Exception This method may throw exceptions. Throwing an exception will cause the  *                   operation to fail and may trigger recovery.  */ public abstract void processMatch(final Map<String, List<IN>> match, final Context ctx, final Collector<OUT> out) throws Exception.
true;;2;1;/**  * Emits a record to the side output identified by the {@link OutputTag}.  *  * @param outputTag the {@code OutputTag} that identifies the side output to emit to.  * @param value The record to emit.  */ ;/**  * Emits a record to the side output identified by the {@link OutputTag}.  *  * @param outputTag the {@code OutputTag} that identifies the side output to emit to.  * @param value The record to emit.  */ <X> void output(final OutputTag<X> outputTag, final X value).
