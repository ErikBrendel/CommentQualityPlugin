commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public StateTransitionAction getAction() {     return action. }
false;public;0;3;;public State<T> getTargetState() {     return targetState. }
false;public;0;3;;public State<T> getSourceState() {     return sourceState. }
false;public;0;3;;public IterativeCondition<T> getCondition() {     return condition. }
false;public;1;3;;public void setCondition(IterativeCondition<T> condition) {     this.condition = condition. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj instanceof StateTransition) {         @SuppressWarnings("unchecked")         StateTransition<T> other = (StateTransition<T>) obj.         return action == other.action && sourceState.getName().equals(other.sourceState.getName()) && targetState.getName().equals(other.targetState.getName()).     } else {         return false.     } }
false;public;0;5;;@Override public int hashCode() {     // we have to take the name of targetState because the transition might be reflexive     return Objects.hash(action, targetState.getName(), sourceState.getName()). }
false;public;0;10;;@Override public String toString() {     return new StringBuilder().append("StateTransition(").append(action).append(", ").append("from ").append(sourceState.getName()).append("to ").append(targetState.getName()).append(condition != null ? ", with condition)" : ")").toString(). }
