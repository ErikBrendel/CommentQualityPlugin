commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getTaskName() {     return runtimeContext.getTaskName(). }
false;public;0;4;;@Override public MetricGroup getMetricGroup() {     return runtimeContext.getMetricGroup(). }
false;public;0;4;;@Override public int getNumberOfParallelSubtasks() {     return runtimeContext.getNumberOfParallelSubtasks(). }
false;public;0;4;;@Override public int getMaxNumberOfParallelSubtasks() {     return runtimeContext.getMaxNumberOfParallelSubtasks(). }
false;public;0;4;;@Override public int getIndexOfThisSubtask() {     return runtimeContext.getIndexOfThisSubtask(). }
false;public;0;4;;@Override public int getAttemptNumber() {     return runtimeContext.getAttemptNumber(). }
false;public;0;4;;@Override public String getTaskNameWithSubtasks() {     return runtimeContext.getTaskNameWithSubtasks(). }
false;public;0;4;;@Override public ExecutionConfig getExecutionConfig() {     return runtimeContext.getExecutionConfig(). }
false;public;0;4;;@Override public ClassLoader getUserCodeClassLoader() {     return runtimeContext.getUserCodeClassLoader(). }
false;public;0;4;;@Override public DistributedCache getDistributedCache() {     return runtimeContext.getDistributedCache(). }
false;public;2;6;;// ----------------------------------------------------------------------------------- // Unsupported operations // ----------------------------------------------------------------------------------- @Override public <V, A extends Serializable> void addAccumulator(final String name, final Accumulator<V, A> accumulator) {     throw new UnsupportedOperationException("Accumulators are not supported."). }
false;public;1;4;;@Override public <V, A extends Serializable> Accumulator<V, A> getAccumulator(final String name) {     throw new UnsupportedOperationException("Accumulators are not supported."). }
false;public;0;4;;@Override public Map<String, Accumulator<?, ?>> getAllAccumulators() {     throw new UnsupportedOperationException("Accumulators are not supported."). }
false;public;1;4;;@Override public IntCounter getIntCounter(final String name) {     throw new UnsupportedOperationException("Int counters are not supported."). }
false;public;1;4;;@Override public LongCounter getLongCounter(final String name) {     throw new UnsupportedOperationException("Long counters are not supported."). }
false;public;1;4;;@Override public DoubleCounter getDoubleCounter(final String name) {     throw new UnsupportedOperationException("Double counters are not supported."). }
false;public;1;4;;@Override public Histogram getHistogram(final String name) {     throw new UnsupportedOperationException("Histograms are not supported."). }
false;public;1;4;;@Override public boolean hasBroadcastVariable(final String name) {     throw new UnsupportedOperationException("Broadcast variables are not supported."). }
false;public;1;4;;@Override public <RT> List<RT> getBroadcastVariable(final String name) {     throw new UnsupportedOperationException("Broadcast variables are not supported."). }
false;public;2;6;;@Override public <T, C> C getBroadcastVariableWithInitializer(final String name, final BroadcastVariableInitializer<T, C> initializer) {     throw new UnsupportedOperationException("Broadcast variables are not supported."). }
false;public;1;4;;@Override public <T> ValueState<T> getState(final ValueStateDescriptor<T> stateProperties) {     throw new UnsupportedOperationException("State is not supported."). }
false;public;1;4;;@Override public <T> ListState<T> getListState(final ListStateDescriptor<T> stateProperties) {     throw new UnsupportedOperationException("State is not supported."). }
false;public;1;4;;@Override public <T> ReducingState<T> getReducingState(final ReducingStateDescriptor<T> stateProperties) {     throw new UnsupportedOperationException("State is not supported."). }
false;public;1;5;;@Override public <IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(final AggregatingStateDescriptor<IN, ACC, OUT> stateProperties) {     throw new UnsupportedOperationException("State is not supported."). }
false;public;1;4;;@Override public <T, ACC> FoldingState<T, ACC> getFoldingState(final FoldingStateDescriptor<T, ACC> stateProperties) {     throw new UnsupportedOperationException("State is not supported."). }
false;public;1;4;;@Override public <UK, UV> MapState<UK, UV> getMapState(final MapStateDescriptor<UK, UV> stateProperties) {     throw new UnsupportedOperationException("State is not supported."). }
