commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public StateType getStateType() {     return stateType. }
false;public;0;3;;public boolean isFinal() {     return stateType == StateType.Final. }
false;public;0;3;;public boolean isStart() {     return stateType == StateType.Start. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public Collection<StateTransition<T>> getStateTransitions() {     return stateTransitions. }
false;public;0;3;;public void makeStart() {     this.stateType = StateType.Start. }
false;public;3;6;;public void addStateTransition(final StateTransitionAction action, final State<T> targetState, final IterativeCondition<T> condition) {     stateTransitions.add(new StateTransition<T>(this, action, targetState, condition)). }
false;public;1;3;;public void addIgnore(final IterativeCondition<T> condition) {     addStateTransition(StateTransitionAction.IGNORE, this, condition). }
false;public;2;3;;public void addIgnore(final State<T> targetState, final IterativeCondition<T> condition) {     addStateTransition(StateTransitionAction.IGNORE, targetState, condition). }
false;public;2;3;;public void addTake(final State<T> targetState, final IterativeCondition<T> condition) {     addStateTransition(StateTransitionAction.TAKE, targetState, condition). }
false;public;2;3;;public void addProceed(final State<T> targetState, final IterativeCondition<T> condition) {     addStateTransition(StateTransitionAction.PROCEED, targetState, condition). }
false;public;1;3;;public void addTake(final IterativeCondition<T> condition) {     addStateTransition(StateTransitionAction.TAKE, this, condition). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj instanceof State) {         @SuppressWarnings("unchecked")         State<T> other = (State<T>) obj.         return name.equals(other.name) && stateType == other.stateType && stateTransitions.equals(other.stateTransitions).     } else {         return false.     } }
false;public;0;12;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append(stateType).append(" State ").append(name).append(" [\n").     for (StateTransition<T> stateTransition : stateTransitions) {         builder.append("\t").append(stateTransition).append(",\n").     }     builder.append("])").     return builder.toString(). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, stateType, stateTransitions). }
false;public;0;3;;public boolean isStop() {     return stateType == StateType.Stop. }
