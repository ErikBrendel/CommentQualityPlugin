commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public NFAState createInstance() {     return null. }
false;public;1;17;;@Override public NFAState copy(NFAState from) {     try {         ByteArrayOutputStream baos = new ByteArrayOutputStream().         serialize(from, new DataOutputViewStreamWrapper(baos)).         baos.close().         byte[] data = baos.toByteArray().         ByteArrayInputStream bais = new ByteArrayInputStream(data).         NFAState copy = deserialize(new DataInputViewStreamWrapper(bais)).         bais.close().         return copy.     } catch (IOException e) {         throw new RuntimeException("Could not copy NFA.", e).     } }
false;public;2;4;;@Override public NFAState copy(NFAState from, NFAState reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;5;;@Override public void serialize(NFAState record, DataOutputView target) throws IOException {     serializeComputationStates(record.getPartialMatches(), target).     serializeComputationStates(record.getCompletedMatches(), target). }
false;public;1;6;;@Override public NFAState deserialize(DataInputView source) throws IOException {     PriorityQueue<ComputationState> partialMatches = deserializeComputationStates(source).     PriorityQueue<ComputationState> completedMatches = deserializeComputationStates(source).     return new NFAState(partialMatches, completedMatches). }
false;public;2;4;;@Override public NFAState deserialize(NFAState reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;5;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     // copy partial matches     copyStates(source, target).     // copy completed matches     copyStates(source, target). }
false;private;2;8;;private void copyStates(DataInputView source, DataOutputView target) throws IOException {     int computationStateNo = source.readInt().     target.writeInt(computationStateNo).     for (int i = 0. i < computationStateNo. i++) {         copySingleComputationState(source, target).     } }
false;public;0;4;;@Override public TypeSerializerSnapshot<NFAState> snapshotConfiguration() {     return new NFAStateSerializerSnapshot(this). }
false;;0;3;;/* 		Getters for internal serializers to use in NFAStateSerializerSnapshot. 	 */ TypeSerializer<DeweyNumber> getVersionSerializer() {     return versionSerializer. }
false;;0;3;;TypeSerializer<NodeId> getNodeIdSerializer() {     return nodeIdSerializer. }
false;;0;3;;TypeSerializer<EventId> getEventIdSerializer() {     return eventIdSerializer. }
false;private;2;6;;/* 		De/serialization methods 	 */ private void serializeComputationStates(Queue<ComputationState> states, DataOutputView target) throws IOException {     target.writeInt(states.size()).     for (ComputationState computationState : states) {         serializeSingleComputationState(computationState, target).     } }
false;private;1;10;;private PriorityQueue<ComputationState> deserializeComputationStates(DataInputView source) throws IOException {     PriorityQueue<ComputationState> computationStates = new PriorityQueue<>(NFAState.COMPUTATION_STATE_COMPARATOR).     int computationStateNo = source.readInt().     for (int i = 0. i < computationStateNo. i++) {         final ComputationState computationState = deserializeSingleComputationState(source).         computationStates.add(computationState).     }     return computationStates. }
false;private;2;10;;private void serializeSingleComputationState(ComputationState computationState, DataOutputView target) throws IOException {     StringValue.writeString(computationState.getCurrentStateName(), target).     nodeIdSerializer.serialize(computationState.getPreviousBufferEntry(), target).     versionSerializer.serialize(computationState.getVersion(), target).     target.writeLong(computationState.getStartTimestamp()).     serializeStartEvent(computationState.getStartEventID(), target). }
false;private;1;14;;private ComputationState deserializeSingleComputationState(DataInputView source) throws IOException {     String stateName = StringValue.readString(source).     NodeId prevState = nodeIdSerializer.deserialize(source).     DeweyNumber version = versionSerializer.deserialize(source).     long startTimestamp = source.readLong().     EventId startEventId = deserializeStartEvent(source).     return ComputationState.createState(stateName, prevState, version, startTimestamp, startEventId). }
false;private;2;11;;private void copySingleComputationState(DataInputView source, DataOutputView target) throws IOException {     StringValue.copyString(source, target).     NodeId prevState = nodeIdSerializer.deserialize(source).     nodeIdSerializer.serialize(prevState, target).     DeweyNumber version = versionSerializer.deserialize(source).     versionSerializer.serialize(version, target).     long startTimestamp = source.readLong().     target.writeLong(startTimestamp).     copyStartEvent(source, target). }
false;private;2;8;;private void serializeStartEvent(EventId startEventID, DataOutputView target) throws IOException {     if (startEventID != null) {         target.writeByte(1).         eventIdSerializer.serialize(startEventID, target).     } else {         target.writeByte(0).     } }
false;private;1;8;;private EventId deserializeStartEvent(DataInputView source) throws IOException {     byte isNull = source.readByte().     EventId startEventId = null.     if (isNull == 1) {         startEventId = eventIdSerializer.deserialize(source).     }     return startEventId. }
false;private;2;9;;private void copyStartEvent(DataInputView source, DataOutputView target) throws IOException {     byte isNull = source.readByte().     target.writeByte(isNull).     if (isNull == 1) {         EventId startEventId = eventIdSerializer.deserialize(source).         eventIdSerializer.serialize(startEventId, target).     } }
true;private;1;11;/* 	* Backwards compatible deserializing of NFAStateSerializer. 	*/ ;/* 	* Backwards compatible deserializing of NFAStateSerializer. 	*/ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {     in.defaultReadObject().     // lower than Flink 1.7. in this case, we explicitly create instance for the nested serializer.     if (versionSerializer == null || nodeIdSerializer == null || eventIdSerializer == null) {         this.versionSerializer = DeweyNumber.DeweyNumberSerializer.INSTANCE.         this.eventIdSerializer = EventId.EventIdSerializer.INSTANCE.         this.nodeIdSerializer = new NodeId.NodeIdSerializer().     } }
