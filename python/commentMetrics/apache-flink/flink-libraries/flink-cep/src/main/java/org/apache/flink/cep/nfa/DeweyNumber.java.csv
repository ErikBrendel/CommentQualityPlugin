commented;modifiers;parameterAmount;loc;comment;code
true;public;1;25;/**  * Checks whether this dewey number is compatible to the other dewey number.  *  * <p>True iff this contains other as a prefix or iff they differ only in the last digit whereas  * the last digit of this is greater than the last digit of other.  *  * @param other The other dewey number to check compatibility against  * @return Whether this dewey number is compatible to the other dewey number  */ ;/**  * Checks whether this dewey number is compatible to the other dewey number.  *  * <p>True iff this contains other as a prefix or iff they differ only in the last digit whereas  * the last digit of this is greater than the last digit of other.  *  * @param other The other dewey number to check compatibility against  * @return Whether this dewey number is compatible to the other dewey number  */ public boolean isCompatibleWith(DeweyNumber other) {     if (length() > other.length()) {         // prefix case         for (int i = 0. i < other.length(). i++) {             if (other.deweyNumber[i] != deweyNumber[i]) {                 return false.             }         }         return true.     } else if (length() == other.length()) {         // check init digits for equality         int lastIndex = length() - 1.         for (int i = 0. i < lastIndex. i++) {             if (other.deweyNumber[i] != deweyNumber[i]) {                 return false.             }         }         // check that the last digit is greater or equal         return deweyNumber[lastIndex] >= other.deweyNumber[lastIndex].     } else {         return false.     } }
false;public;0;3;;public int getRun() {     return deweyNumber[0]. }
false;public;0;3;;public int length() {     return deweyNumber.length. }
true;public;0;3;/**  * Creates a new dewey number from this such that its last digit is increased by  * one.  *  * @return A new dewey number derived from this whose last digit is increased by one  */ ;/**  * Creates a new dewey number from this such that its last digit is increased by  * one.  *  * @return A new dewey number derived from this whose last digit is increased by one  */ public DeweyNumber increase() {     return increase(1). }
true;public;1;6;/**  * Creates a new dewey number from this such that its last digit is increased by the supplied  * number.  *  * @param times how many times to increase the Dewey number  * @return A new dewey number derived from this whose last digit is increased by given number  */ ;/**  * Creates a new dewey number from this such that its last digit is increased by the supplied  * number.  *  * @param times how many times to increase the Dewey number  * @return A new dewey number derived from this whose last digit is increased by given number  */ public DeweyNumber increase(int times) {     int[] newDeweyNumber = Arrays.copyOf(deweyNumber, deweyNumber.length).     newDeweyNumber[deweyNumber.length - 1] += times.     return new DeweyNumber(newDeweyNumber). }
true;public;0;5;/**  * Creates a new dewey number from this such that a 0 is appended as new last digit.  *  * @return A new dewey number which contains this as a prefix and has 0 as last digit  */ ;/**  * Creates a new dewey number from this such that a 0 is appended as new last digit.  *  * @return A new dewey number which contains this as a prefix and has 0 as last digit  */ public DeweyNumber addStage() {     int[] newDeweyNumber = Arrays.copyOf(deweyNumber, deweyNumber.length + 1).     return new DeweyNumber(newDeweyNumber). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof DeweyNumber) {         DeweyNumber other = (DeweyNumber) obj.         return Arrays.equals(deweyNumber, other.deweyNumber).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return Arrays.hashCode(deweyNumber). }
false;public;0;14;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     for (int i = 0. i < length() - 1. i++) {         builder.append(deweyNumber[i]).append(".").     }     if (length() > 0) {         builder.append(deweyNumber[length() - 1]).     }     return builder.toString(). }
true;public,static;1;15;/**  * Creates a dewey number from a string representation. The input string must be a dot separated  * string of integers.  *  * @param deweyNumberString Dot separated string of integers  * @return Dewey number generated from the given input string  */ ;/**  * Creates a dewey number from a string representation. The input string must be a dot separated  * string of integers.  *  * @param deweyNumberString Dot separated string of integers  * @return Dewey number generated from the given input string  */ public static DeweyNumber fromString(final String deweyNumberString) {     String[] splits = deweyNumberString.split("\\.").     if (splits.length == 0) {         return new DeweyNumber(Integer.parseInt(deweyNumberString)).     } else {         int[] deweyNumber = new int[splits.length].         for (int i = 0. i < splits.length. i++) {             deweyNumber[i] = Integer.parseInt(splits[i]).         }         return new DeweyNumber(deweyNumber).     } }
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public DeweyNumber createInstance() {     return new DeweyNumber(1). }
false;public;1;4;;@Override public DeweyNumber copy(DeweyNumber from) {     return new DeweyNumber(from). }
false;public;2;4;;@Override public DeweyNumber copy(DeweyNumber from, DeweyNumber reuse) {     return copy(from). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;8;;@Override public void serialize(DeweyNumber record, DataOutputView target) throws IOException {     final int size = record.length().     target.writeInt(size).     for (int i = 0. i < size. i++) {         target.writeInt(record.deweyNumber[i]).     } }
false;public;1;9;;@Override public DeweyNumber deserialize(DataInputView source) throws IOException {     final int size = source.readInt().     int[] number = new int[size].     for (int i = 0. i < size. i++) {         number[i] = source.readInt().     }     return new DeweyNumber(number). }
false;public;2;4;;@Override public DeweyNumber deserialize(DeweyNumber reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;8;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     final int size = source.readInt().     target.writeInt(size).     for (int i = 0. i < size. i++) {         target.writeInt(source.readInt()).     } }
false;public;1;4;;@Override public boolean equals(Object obj) {     return obj == this || obj.getClass().equals(getClass()). }
false;public;0;4;;// ----------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<DeweyNumber> snapshotConfiguration() {     return new DeweyNumberSerializerSnapshot(). }
