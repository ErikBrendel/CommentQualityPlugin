commented;modifiers;parameterAmount;loc;comment;code
true;;2;3;/**  * Called for every timed out partial match (due to {@link org.apache.flink.cep.pattern.Pattern#within(Time)}).  * It enables custom handling, e.g. one can emit the timed out results through a side output:  *  * <pre>  * {@code  *  * private final OutputTag<T> timedOutPartialMatchesTag = ...  *  * private class MyFunction extends PatternProcessFunction<IN, OUT> implements TimedOutPartialMatchHandler<IN> {  *  *     @Override  *     public void processMatch(Map<String, List<IN>> match, Context ctx, Collector<OUT> out) throws Exception {  *          ...  *     }  *  *     @Override  *     void processTimedOutMatch(Map<String, List<IN>> match, PatternProcessFunction.Context ctx) throws Exception {  *          ctx.output(timedOutPartialMatchesTag, match).  *     }  * }  * }  * </pre>  *  * <p>{@link PatternProcessFunction.Context#timestamp()} in this case returns the minimal time in which we can  * say that the partial match will not become a match, which is effectively the timestamp of the first element  * assigned to the partial match plus the value of within.  *  * @param match map containing the timed out partial match. Events are identified by their names.  * @param ctx enables access to time features and emitting results through side outputs  * @throws Exception This method may throw exceptions. Throwing an exception will cause the  *                   operation to fail and may trigger recovery.  */ ;/**  * Called for every timed out partial match (due to {@link org.apache.flink.cep.pattern.Pattern#within(Time)}).  * It enables custom handling, e.g. one can emit the timed out results through a side output:  *  * <pre>  * {@code  *  * private final OutputTag<T> timedOutPartialMatchesTag = ...  *  * private class MyFunction extends PatternProcessFunction<IN, OUT> implements TimedOutPartialMatchHandler<IN> {  *  *     @Override  *     public void processMatch(Map<String, List<IN>> match, Context ctx, Collector<OUT> out) throws Exception {  *          ...  *     }  *  *     @Override  *     void processTimedOutMatch(Map<String, List<IN>> match, PatternProcessFunction.Context ctx) throws Exception {  *          ctx.output(timedOutPartialMatchesTag, match).  *     }  * }  * }  * </pre>  *  * <p>{@link PatternProcessFunction.Context#timestamp()} in this case returns the minimal time in which we can  * say that the partial match will not become a match, which is effectively the timestamp of the first element  * assigned to the partial match plus the value of within.  *  * @param match map containing the timed out partial match. Events are identified by their names.  * @param ctx enables access to time features and emitting results through side outputs  * @throws Exception This method may throw exceptions. Throwing an exception will cause the  *                   operation to fail and may trigger recovery.  */ void processTimedOutMatch(final Map<String, List<IN>> match, final PatternProcessFunction.Context ctx) throws Exception.
