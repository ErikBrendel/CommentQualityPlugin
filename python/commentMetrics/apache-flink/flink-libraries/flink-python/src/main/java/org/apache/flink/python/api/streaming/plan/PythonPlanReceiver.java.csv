commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Object getRecord() throws IOException {     return getRecord(false). }
false;public;1;3;;public Object getRecord(boolean normalized) throws IOException {     return getDeserializer().deserialize(normalized). }
false;private;0;32;;private Deserializer getDeserializer() throws IOException {     byte type = input.readByte().     if (type >= 0 && type < 26) {         Deserializer[] d = new Deserializer[type].         for (int x = 0. x < d.length. x++) {             d[x] = getDeserializer().         }         return new TupleDeserializer(d).     }     switch(type) {         case TYPE_BOOLEAN:             return new BooleanDeserializer().         case TYPE_BYTE:             return new ByteDeserializer().         case TYPE_INTEGER:             return new IntDeserializer().         case TYPE_LONG:             return new LongDeserializer().         case TYPE_FLOAT:             return new FloatDeserializer().         case TYPE_DOUBLE:             return new DoubleDeserializer().         case TYPE_STRING:             return new StringDeserializer().         case TYPE_BYTES:             return new BytesDeserializer().         case TYPE_NULL:             return new NullDeserializer().         default:             return new CustomTypeDeserializer(type).     } }
false;public;0;3;;public T deserialize() throws IOException {     return deserialize(false). }
false;public,abstract;1;1;;public abstract T deserialize(boolean normalized) throws IOException.
false;public;1;8;;@Override public Tuple deserialize(boolean normalized) throws IOException {     Tuple result = createTuple(deserializer.length).     for (int x = 0. x < result.getArity(). x++) {         result.setField(deserializer[x].deserialize(normalized), x).     }     return result. }
false;public;1;7;;@Override public CustomTypeWrapper deserialize(boolean normalized) throws IOException {     int size = input.readInt().     byte[] data = new byte[size].     input.readFully(data).     return new CustomTypeWrapper(type, data). }
false;public;1;4;;@Override public Boolean deserialize(boolean normalized) throws IOException {     return input.readBoolean(). }
false;public;1;4;;@Override public Byte deserialize(boolean normalized) throws IOException {     return input.readByte(). }
false;public;1;4;;@Override public Integer deserialize(boolean normalized) throws IOException {     return input.readInt(). }
false;public;1;8;;@Override public Object deserialize(boolean normalized) throws IOException {     if (normalized) {         return new Long(input.readLong()).intValue().     } else {         return input.readLong().     } }
false;public;1;8;;@Override public Object deserialize(boolean normalized) throws IOException {     if (normalized) {         return (double) input.readFloat().     } else {         return input.readFloat().     } }
false;public;1;4;;@Override public Double deserialize(boolean normalized) throws IOException {     return input.readDouble(). }
false;public;1;7;;@Override public String deserialize(boolean normalized) throws IOException {     int size = input.readInt().     byte[] buffer = new byte[size].     input.readFully(buffer).     return new String(buffer, ConfigConstants.DEFAULT_CHARSET). }
false;public;1;4;;@Override public Object deserialize(boolean normalized) throws IOException {     return null. }
false;public;1;7;;@Override public byte[] deserialize(boolean normalized) throws IOException {     int size = input.readInt().     byte[] buffer = new byte[size].     input.readFully(buffer).     return buffer. }
