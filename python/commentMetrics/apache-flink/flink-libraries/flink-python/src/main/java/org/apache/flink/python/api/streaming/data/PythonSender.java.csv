commented;modifiers;parameterAmount;loc;comment;code
true;public;1;16;// =====Setup======================================================================================================== ;// =====Setup======================================================================================================== public void open(File outputFile) throws IOException {     outputFile.mkdirs().     if (outputFile.exists()) {         outputFile.delete().     }     outputFile.createNewFile().     outputRAF = new RandomAccessFile(outputFile, "rw").     outputRAF.setLength(mappedFileSizeBytes).     outputRAF.seek(mappedFileSizeBytes - 1).     outputRAF.writeByte(0).     outputRAF.seek(0).     outputChannel = outputRAF.getChannel().     fileBuffer = outputChannel.map(FileChannel.MapMode.READ_WRITE, 0, mappedFileSizeBytes). }
false;public;0;3;;public void close() throws IOException {     closeMappedFile(). }
false;private;0;4;;private void closeMappedFile() throws IOException {     outputChannel.close().     outputRAF.close(). }
true;protected;2;20;/**  * Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values  * in the iterator are of the same type. This method does NOT take care of synchronization. The caller must  * guarantee that the file may be written to before calling this method.  *  * @param input     iterator containing records  * @param serializer serializer for the input records  * @return size of the written buffer  * @throws IOException  */ ;// =====IO=========================================================================================================== /**  * Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values  * in the iterator are of the same type. This method does NOT take care of synchronization. The caller must  * guarantee that the file may be written to before calling this method.  *  * @param input     iterator containing records  * @param serializer serializer for the input records  * @return size of the written buffer  * @throws IOException  */ protected <IN> int sendBuffer(SingleElementPushBackIterator<IN> input, Serializer<IN> serializer) throws IOException {     fileBuffer.clear().     while (input.hasNext()) {         IN value = input.next().         ByteBuffer bb = serializer.serialize(value).         if (bb.remaining() > mappedFileSizeBytes) {             throw new RuntimeException("Serialized object does not fit into a single buffer.").         }         if (bb.remaining() <= fileBuffer.remaining()) {             fileBuffer.put(bb).         } else {             input.pushBack(value).             break.         }     }     int size = fileBuffer.position().     return size. }
false;protected;1;13;;// =====Serializer=================================================================================================== @SuppressWarnings("unchecked") protected <IN> Serializer<IN> getSerializer(IN value) {     if (value instanceof byte[]) {         return (Serializer<IN>) new ArraySerializer().     }     if (((Tuple2<?, ?>) value).f0 instanceof byte[]) {         return (Serializer<IN>) new ValuePairSerializer().     }     if (((Tuple2<?, ?>) value).f0 instanceof Tuple) {         return (Serializer<IN>) new KeyValuePairSerializer().     }     throw new IllegalArgumentException("This object can't be serialized: " + value). }
true;public;1;5;/**  * Serializes the given value into a {@link ByteBuffer}.  *  * @param value value to serialize  * @return ByteBuffer containing serialized record  */ ;/**  * Serializes the given value into a {@link ByteBuffer}.  *  * @param value value to serialize  * @return ByteBuffer containing serialized record  */ public ByteBuffer serialize(T value) {     serializeInternal(value).     buffer.flip().     return buffer. }
false;protected,abstract;1;1;;protected abstract void serializeInternal(T value).
false;public;1;6;;@Override public void serializeInternal(byte[] value) {     buffer = ByteBuffer.allocate(value.length + 1).     buffer.put(TYPE_ARRAY).     buffer.put(value). }
false;public;1;7;;@Override public void serializeInternal(Tuple2<byte[], byte[]> value) {     buffer = ByteBuffer.allocate(1 + value.f0.length + value.f1.length).     buffer.put(TYPE_VALUE_VALUE).     buffer.put(value.f0).     buffer.put(value.f1). }
false;public;1;14;;@Override public void serializeInternal(Tuple2<Tuple, byte[]> value) {     int keySize = 0.     for (int x = 0. x < value.f0.getArity(). x++) {         keySize += ((byte[]) value.f0.getField(x)).length.     }     buffer = ByteBuffer.allocate(5 + keySize + value.f1.length).     buffer.put(TYPE_KEY_VALUE).     buffer.put((byte) value.f0.getArity()).     for (int x = 0. x < value.f0.getArity(). x++) {         buffer.put((byte[]) value.f0.getField(x)).     }     buffer.put(value.f1). }
