commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;// =====Setup======================================================================================================== @SuppressWarnings("unchecked") public void open(File inputFile) throws IOException {     deserializer = (Deserializer<OUT>) (readAsByteArray ? new ByteArrayDeserializer() : new TupleDeserializer()).     inputFile.getParentFile().mkdirs().     if (inputFile.exists()) {         inputFile.delete().     }     inputFile.createNewFile().     inputRAF = new RandomAccessFile(inputFile, "rw").     inputRAF.setLength(mappedFileSizeBytes).     inputRAF.seek(mappedFileSizeBytes - 1).     inputRAF.writeByte(0).     inputRAF.seek(0).     inputChannel = inputRAF.getChannel().     fileBuffer = inputChannel.map(FileChannel.MapMode.READ_WRITE, 0, mappedFileSizeBytes). }
false;public;0;3;;public void close() throws IOException {     closeMappedFile(). }
false;private;0;4;;private void closeMappedFile() throws IOException {     inputChannel.close().     inputRAF.close(). }
true;public;2;8;/**  * Reads a buffer of the given size from the memory-mapped file, and collects all records contained. This method  * assumes that all values in the buffer are of the same type. This method does NOT take care of synchronization.  * The user must guarantee that the buffer was completely written before calling this method.  *  * @param c Collector to collect records  * @param bufferSize size of the buffer  * @throws IOException  */ ;// =====IO=========================================================================================================== /**  * Reads a buffer of the given size from the memory-mapped file, and collects all records contained. This method  * assumes that all values in the buffer are of the same type. This method does NOT take care of synchronization.  * The user must guarantee that the buffer was completely written before calling this method.  *  * @param c Collector to collect records  * @param bufferSize size of the buffer  * @throws IOException  */ @SuppressWarnings({ "rawtypes", "unchecked" }) public void collectBuffer(Collector<OUT> c, int bufferSize) throws IOException {     fileBuffer.position(0).     while (fileBuffer.position() < bufferSize) {         c.collect(deserializer.deserialize()).     } }
false;;0;1;;T deserialize().
false;public;0;7;;@Override public byte[] deserialize() {     int size = fileBuffer.getInt().     byte[] value = new byte[size].     fileBuffer.get(value).     return value. }
false;public;0;13;;@Override public Tuple2<Tuple, byte[]> deserialize() {     int keyTupleSize = fileBuffer.get().     Tuple keys = createTuple(keyTupleSize).     for (int x = 0. x < keyTupleSize. x++) {         byte[] data = new byte[fileBuffer.getInt()].         fileBuffer.get(data).         keys.setField(data, x).     }     byte[] value = new byte[fileBuffer.getInt()].     fileBuffer.get(value).     return new Tuple2<>(keys, value). }
false;public,static;1;7;;public static Tuple createTuple(int size) {     try {         return Tuple.getTupleClass(size).newInstance().     } catch (InstantiationException | IllegalAccessException e) {         throw new RuntimeException(e).     } }
