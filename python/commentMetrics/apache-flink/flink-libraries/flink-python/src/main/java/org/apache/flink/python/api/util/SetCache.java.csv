commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return className. }
true;public;2;4;/**  * Adds the given {@link DataSet} to this cache for the given ID.  *  * @param id  Set ID  * @param set DataSet to add  * @param <D> DataSet class  */ ;/**  * Adds the given {@link DataSet} to this cache for the given ID.  *  * @param id  Set ID  * @param set DataSet to add  * @param <D> DataSet class  */ public <D extends DataSet<?>> void add(int id, D set) {     cacheSetType(id, SetType.DATA_SET).     dataSets.put(id, set). }
true;public;2;4;/**  * Adds the given {@link UnsortedGrouping} to this cache for the given ID.  *  * @param id  Set ID  * @param set UnsortedGrouping to add  * @param <U> UnsortedGrouping class  */ ;/**  * Adds the given {@link UnsortedGrouping} to this cache for the given ID.  *  * @param id  Set ID  * @param set UnsortedGrouping to add  * @param <U> UnsortedGrouping class  */ public <U extends UnsortedGrouping<?>> void add(int id, U set) {     cacheSetType(id, SetType.UNSORTED_GROUPING).     unsortedGroupings.put(id, set). }
true;public;2;4;/**  * Adds the given {@link SortedGrouping} to this cache for the given ID.  *  * @param id  Set ID  * @param set SortedGrouping to add  * @param <S> SortedGrouping class  */ ;/**  * Adds the given {@link SortedGrouping} to this cache for the given ID.  *  * @param id  Set ID  * @param set SortedGrouping to add  * @param <S> SortedGrouping class  */ public <S extends SortedGrouping<?>> void add(int id, S set) {     cacheSetType(id, SetType.SORTED_GROUPING).     sortedGroupings.put(id, set). }
false;private;2;6;;private <T> void cacheSetType(int id, SetType type) {     SetType prior = setTypes.put(id, type).     if (prior != null) {         throw new IllegalStateException("Set ID " + id + " used to denote multiple sets.").     } }
true;public;1;3;/**  * Checks whether the cached set for the given ID is a {@link DataSet}.  *  * @param id id of set to check  * @return true, if the cached set is a DataSet, false otherwise  */ ;/**  * Checks whether the cached set for the given ID is a {@link DataSet}.  *  * @param id id of set to check  * @return true, if the cached set is a DataSet, false otherwise  */ public boolean isDataSet(int id) {     return isType(id, SetType.DATA_SET). }
true;public;1;3;/**  * Checks whether the cached set for the given ID is an {@link UnsortedGrouping}.  *  * @param id id of set to check  * @return true, if the cached set is an UnsortedGrouping, false otherwise  */ ;/**  * Checks whether the cached set for the given ID is an {@link UnsortedGrouping}.  *  * @param id id of set to check  * @return true, if the cached set is an UnsortedGrouping, false otherwise  */ public boolean isUnsortedGrouping(int id) {     return isType(id, SetType.UNSORTED_GROUPING). }
true;public;1;3;/**  * Checks whether the cached set for the given ID is a {@link SortedGrouping}.  *  * @param id Set ID  * @return true, if the cached set is a SortedGrouping, false otherwise  */ ;/**  * Checks whether the cached set for the given ID is a {@link SortedGrouping}.  *  * @param id Set ID  * @return true, if the cached set is a SortedGrouping, false otherwise  */ public boolean isSortedGrouping(int id) {     return isType(id, SetType.SORTED_GROUPING). }
false;private;2;10;;private boolean isType(int id, SetType type) {     if (cachedID != id) {         cachedID = id.         cachedType = setTypes.get(id).         if (cachedType == null) {             throw new IllegalStateException("No set exists for the given ID " + id).         }     }     return cachedType == type. }
true;public;1;4;/**  * Returns the cached {@link DataSet} for the given ID.  *  * @param id  Set ID  * @param <T> DataSet type  * @return Cached DataSet  * @throws IllegalStateException if the cached set is not a DataSet  */ ;/**  * Returns the cached {@link DataSet} for the given ID.  *  * @param id  Set ID  * @param <T> DataSet type  * @return Cached DataSet  * @throws IllegalStateException if the cached set is not a DataSet  */ @SuppressWarnings("unchecked") public <T> DataSet<T> getDataSet(int id) {     return verifyType(id, dataSets.get(id), SetType.DATA_SET). }
true;public;1;4;/**  * Returns the cached {@link UnsortedGrouping} for the given ID.  *  * @param id  Set ID  * @param <T> UnsortedGrouping type  * @return Cached UnsortedGrouping  * @throws IllegalStateException if the cached set is not an UnsortedGrouping  */ ;/**  * Returns the cached {@link UnsortedGrouping} for the given ID.  *  * @param id  Set ID  * @param <T> UnsortedGrouping type  * @return Cached UnsortedGrouping  * @throws IllegalStateException if the cached set is not an UnsortedGrouping  */ @SuppressWarnings("unchecked") public <T> UnsortedGrouping<T> getUnsortedGrouping(int id) {     return verifyType(id, unsortedGroupings.get(id), SetType.UNSORTED_GROUPING). }
true;public;1;4;/**  * Returns the cached {@link SortedGrouping} for the given ID.  *  * @param id  Set ID  * @param <T> SortedGrouping type  * @return Cached SortedGrouping  * @throws IllegalStateException if the cached set is not a SortedGrouping  */ ;/**  * Returns the cached {@link SortedGrouping} for the given ID.  *  * @param id  Set ID  * @param <T> SortedGrouping type  * @return Cached SortedGrouping  * @throws IllegalStateException if the cached set is not a SortedGrouping  */ @SuppressWarnings("unchecked") public <T> SortedGrouping<T> getSortedGrouping(int id) {     return verifyType(id, sortedGroupings.get(id), SetType.SORTED_GROUPING). }
false;private;3;7;;private <X> X verifyType(int id, X set, SetType type) {     if (set == null) {         SetType actualType = setTypes.get(id).         throw new IllegalStateException("Set ID " + id + " did not denote a " + type + ", but a " + actualType + " instead.").     }     return set. }
true;public;0;7;/**  * Resets this SetCache, removing any cached sets.  */ ;/**  * Resets this SetCache, removing any cached sets.  */ public void reset() {     setTypes.clear().     dataSets.clear().     unsortedGroupings.clear().     sortedGroupings.clear(). }
