commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append("SetID: ").append(setID).append("\n").     sb.append("ParentID: ").append(parentID).append("\n").     sb.append("OtherID: ").append(otherID).append("\n").     sb.append("Name: ").append(name).append("\n").     sb.append("Types: ").append(types).append("\n").     sb.append("Keys1: ").append(keys1).append("\n").     sb.append("Keys2: ").append(keys2).append("\n").     sb.append("Keys: ").append(keys).append("\n").     sb.append("Count: ").append(count).append("\n").     sb.append("Field: ").append(field).append("\n").     sb.append("Order: ").append(order.toString()).append("\n").     sb.append("Path: ").append(path).append("\n").     sb.append("FieldDelimiter: ").append(fieldDelimiter).append("\n").     sb.append("LineDelimiter: ").append(lineDelimiter).append("\n").     sb.append("From: ").append(frm).append("\n").     sb.append("To: ").append(to).append("\n").     sb.append("WriteMode: ").append(writeMode).append("\n").     sb.append("toError: ").append(toError).append("\n").     return sb.toString(). }
true;private,static;1;28;// ====Utility======================================================================================================= ;// ====Utility======================================================================================================= private static String[] normalizeKeys(Object keys) {     if (keys instanceof Tuple) {         Tuple tupleKeys = (Tuple) keys.         if (tupleKeys.getArity() == 0) {             return new String[0].         }         if (tupleKeys.getField(0) instanceof Integer) {             String[] stringKeys = new String[tupleKeys.getArity()].             for (int x = 0. x < stringKeys.length. x++) {                 stringKeys[x] = "f0.f" + (Integer) tupleKeys.getField(x).             }             return stringKeys.         }         if (tupleKeys.getField(0) instanceof String) {             return tupleToStringArray(tupleKeys).         }         throw new RuntimeException("Key argument contains field that is neither an int nor a String: " + tupleKeys).     }     if (keys instanceof int[]) {         int[] intKeys = (int[]) keys.         String[] stringKeys = new String[intKeys.length].         for (int x = 0. x < stringKeys.length. x++) {             stringKeys[x] = "f0.f" + intKeys[x].         }         return stringKeys.     }     throw new RuntimeException("Key argument is neither an int[] nor a Tuple: " + keys.toString()). }
false;private,static;1;7;;private static String[] tupleToStringArray(Tuple tuple) {     String[] keys = new String[tuple.getArity()].     for (int y = 0. y < tuple.getArity(). y++) {         keys[y] = (String) tuple.getField(y).     }     return keys. }
