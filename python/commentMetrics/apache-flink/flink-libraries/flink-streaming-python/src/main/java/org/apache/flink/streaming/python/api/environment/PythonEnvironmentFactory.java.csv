commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * A thin wrapper layer over {@link StreamExecutionEnvironment#getExecutionEnvironment()}. In addition it takes  * care for required Jython serializers registration.  *  * @return The python execution environment of the context in which the program is  * executed.  */ ;/**  * A thin wrapper layer over {@link StreamExecutionEnvironment#getExecutionEnvironment()}. In addition it takes  * care for required Jython serializers registration.  *  * @return The python execution environment of the context in which the program is  * executed.  */ public PythonStreamExecutionEnvironment get_execution_environment() {     return new PythonStreamExecutionEnvironment(StreamExecutionEnvironment.getExecutionEnvironment(), new Path(localTmpPath), scriptName). }
true;public;1;3;/**  * Creates a {@link LocalStreamEnvironment}. The local execution environment  * will run the program in a multi-threaded fashion in the same JVM as the  * environment was created in. The default parallelism of the local  * environment is the number of hardware contexts (CPU cores / threads),  * unless it was specified differently by {@link PythonStreamExecutionEnvironment#set_parallelism(int)}.  *  * @param config Pass a custom configuration into the cluster  * @return A local execution environment with the specified parallelism.  */ ;/**  * Creates a {@link LocalStreamEnvironment}. The local execution environment  * will run the program in a multi-threaded fashion in the same JVM as the  * environment was created in. The default parallelism of the local  * environment is the number of hardware contexts (CPU cores / threads),  * unless it was specified differently by {@link PythonStreamExecutionEnvironment#set_parallelism(int)}.  *  * @param config Pass a custom configuration into the cluster  * @return A local execution environment with the specified parallelism.  */ public PythonStreamExecutionEnvironment create_local_execution_environment(Configuration config) {     return new PythonStreamExecutionEnvironment(new LocalStreamEnvironment(config), new Path(localTmpPath), scriptName). }
true;public;2;4;/**  * A thin wrapper layer over {@link StreamExecutionEnvironment#createLocalEnvironment(int, Configuration)}.  *  * @param parallelism The parallelism for the local environment.  * @param config Pass a custom configuration into the cluster  * @return A local python execution environment with the specified parallelism.  */ ;/**  * A thin wrapper layer over {@link StreamExecutionEnvironment#createLocalEnvironment(int, Configuration)}.  *  * @param parallelism The parallelism for the local environment.  * @param config Pass a custom configuration into the cluster  * @return A local python execution environment with the specified parallelism.  */ public PythonStreamExecutionEnvironment create_local_execution_environment(int parallelism, Configuration config) {     return new PythonStreamExecutionEnvironment(StreamExecutionEnvironment.createLocalEnvironment(parallelism, config), new Path(localTmpPath), scriptName). }
true;public;3;5;/**  * A thin wrapper layer over {@link StreamExecutionEnvironment#createRemoteEnvironment(String, int, String...)}.  *  * @param host The host name or address of the master (JobManager), where the  * program should be executed.  * @param port The port of the master (JobManager), where the program should  * be executed.  * @param jar_files The JAR files with code that needs to be shipped to the  * cluster. If the program uses user-defined functions,  * user-defined input formats, or any libraries, those must be  * provided in the JAR files.  * @return A remote environment that executes the program on a cluster.  */ ;/**  * A thin wrapper layer over {@link StreamExecutionEnvironment#createRemoteEnvironment(String, int, String...)}.  *  * @param host The host name or address of the master (JobManager), where the  * program should be executed.  * @param port The port of the master (JobManager), where the program should  * be executed.  * @param jar_files The JAR files with code that needs to be shipped to the  * cluster. If the program uses user-defined functions,  * user-defined input formats, or any libraries, those must be  * provided in the JAR files.  * @return A remote environment that executes the program on a cluster.  */ public PythonStreamExecutionEnvironment create_remote_execution_environment(String host, int port, String... jar_files) {     return new PythonStreamExecutionEnvironment(StreamExecutionEnvironment.createRemoteEnvironment(host, port, jar_files), new Path(localTmpPath), scriptName). }
true;public;4;5;/**  *  A thin wrapper layer over {@link StreamExecutionEnvironment#createRemoteEnvironment(  * String, int, Configuration, String...)}.  *  *  @param host The host name or address of the master (JobManager), where the  *  program should be executed.  *  @param port The port of the master (JobManager), where the program should  *  be executed.  *  @param config The configuration used by the client that connects to the remote cluster.  *  @param jar_files The JAR files with code that needs to be shipped to the  *  cluster. If the program uses user-defined functions,  *  user-defined input formats, or any libraries, those must be  *  provided in the JAR files.  *  @return A remote environment that executes the program on a cluster.  */ ;/**  *  A thin wrapper layer over {@link StreamExecutionEnvironment#createRemoteEnvironment(  * String, int, Configuration, String...)}.  *  *  @param host The host name or address of the master (JobManager), where the  *  program should be executed.  *  @param port The port of the master (JobManager), where the program should  *  be executed.  *  @param config The configuration used by the client that connects to the remote cluster.  *  @param jar_files The JAR files with code that needs to be shipped to the  *  cluster. If the program uses user-defined functions,  *  user-defined input formats, or any libraries, those must be  *  provided in the JAR files.  *  @return A remote environment that executes the program on a cluster.  */ public PythonStreamExecutionEnvironment create_remote_execution_environment(String host, int port, Configuration config, String... jar_files) {     return new PythonStreamExecutionEnvironment(StreamExecutionEnvironment.createRemoteEnvironment(host, port, config, jar_files), new Path(localTmpPath), scriptName). }
true;public;4;5;/**  *  A thin wrapper layer over {@link StreamExecutionEnvironment#createRemoteEnvironment(  * String, int, int, String...)}.  *  *  @param host The host name or address of the master (JobManager), where the  *  program should be executed.  *  @param port The port of the master (JobManager), where the program should  *  be executed.  *  @param parallelism The parallelism to use during the execution.  *  @param jar_files The JAR files with code that needs to be shipped to the  *  cluster. If the program uses user-defined functions,  *  user-defined input formats, or any libraries, those must be  *  provided in the JAR files.  *  @return A remote environment that executes the program on a cluster.  */ ;/**  *  A thin wrapper layer over {@link StreamExecutionEnvironment#createRemoteEnvironment(  * String, int, int, String...)}.  *  *  @param host The host name or address of the master (JobManager), where the  *  program should be executed.  *  @param port The port of the master (JobManager), where the program should  *  be executed.  *  @param parallelism The parallelism to use during the execution.  *  @param jar_files The JAR files with code that needs to be shipped to the  *  cluster. If the program uses user-defined functions,  *  user-defined input formats, or any libraries, those must be  *  provided in the JAR files.  *  @return A remote environment that executes the program on a cluster.  */ public PythonStreamExecutionEnvironment create_remote_execution_environment(String host, int port, int parallelism, String... jar_files) {     return new PythonStreamExecutionEnvironment(StreamExecutionEnvironment.createRemoteEnvironment(host, port, parallelism, jar_files), new Path(localTmpPath), scriptName). }
