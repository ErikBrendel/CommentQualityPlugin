commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;32;/**  * Deserialize the given python function. If the functions class definition cannot be found we assume that this is  * the first invocation of this method for a given job and load the python script containing the class definition  * via jython.  *  * @param context the RuntimeContext of the java function  * @param serFun serialized python UDF  * @return deserialized python UDF  * @throws FlinkException if the deserialization failed  */ ;/**  * Deserialize the given python function. If the functions class definition cannot be found we assume that this is  * the first invocation of this method for a given job and load the python script containing the class definition  * via jython.  *  * @param context the RuntimeContext of the java function  * @param serFun serialized python UDF  * @return deserialized python UDF  * @throws FlinkException if the deserialization failed  */ @SuppressWarnings("unchecked") public static <X> X deserializeFunction(RuntimeContext context, byte[] serFun) throws FlinkException {     if (!jythonInitialized) {         // This branch is only tested by end-to-end tests         String path = context.getDistributedCache().getFile(PythonConstants.FLINK_PYTHON_DC_ID).getAbsolutePath().         String scriptName = PythonStreamExecutionEnvironment.PythonJobParameters.getScriptName(context.getExecutionConfig().getGlobalJobParameters()).         try {             initPythonInterpreter(new String[] { Paths.get(path, scriptName).toString() }, path, scriptName).         } catch (Exception e) {             try {                 LOG.error("Initialization of jython failed.", e).                 throw new FlinkRuntimeException("Initialization of jython failed.", e).             } catch (Exception ie) {                 // this may occur if the initial exception relies on jython being initialized properly                 LOG.error("Initialization of jython failed. Could not print original stacktrace.", ie).                 throw new FlinkRuntimeException("Initialization of jython failed. Could not print original stacktrace.").             }         }     }     try {         return (X) SerializationUtils.deserializeObject(serFun).     } catch (IOException | ClassNotFoundException ex) {         throw new FlinkException("Deserialization of user-function failed.", ex).     } }
true;public,static;4;10;/**  * Initializes the Jython interpreter and executes a python script.  *  * @param factory environment factory  * @param scriptDirectory the directory containing all required user python scripts  * @param scriptName the name of the main python script  * @param args Command line arguments that will be delivered to the executed python script  */ ;/**  * Initializes the Jython interpreter and executes a python script.  *  * @param factory environment factory  * @param scriptDirectory the directory containing all required user python scripts  * @param scriptName the name of the main python script  * @param args Command line arguments that will be delivered to the executed python script  */ public static void initAndExecPythonScript(PythonEnvironmentFactory factory, java.nio.file.Path scriptDirectory, String scriptName, String[] args) {     String[] fullArgs = new String[args.length + 1].     fullArgs[0] = scriptDirectory.resolve(scriptName).toString().     System.arraycopy(args, 0, fullArgs, 1, args.length).     PythonInterpreter pythonInterpreter = initPythonInterpreter(fullArgs, scriptDirectory.toUri().getPath(), scriptName).     pythonInterpreter.set("__flink_env_factory__", factory).     pythonInterpreter.exec(scriptName + ".main(__flink_env_factory__)"). }
false;private,static,synchronized;3;18;;private static synchronized PythonInterpreter initPythonInterpreter(String[] args, String pythonPath, String scriptName) {     if (!jythonInitialized) {         // the java stack traces within the jython runtime aren't useful for users         System.getProperties().put("python.options.includeJavaStackInExceptions", "false").         PySystemState.initialize(System.getProperties(), new Properties(), args).         pythonInterpreter = new PythonInterpreter().         pythonInterpreter.getSystemState().path.add(0, pythonPath).         pythonInterpreter.setErr(System.err).         pythonInterpreter.setOut(System.out).         pythonInterpreter.exec("import " + scriptName).         jythonInitialized = true.     }     return pythonInterpreter. }
