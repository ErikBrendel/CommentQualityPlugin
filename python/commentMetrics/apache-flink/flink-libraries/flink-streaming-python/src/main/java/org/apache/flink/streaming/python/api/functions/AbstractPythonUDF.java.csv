commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public void open(Configuration parameters) throws Exception {     this.fun = InterpreterUtils.deserializeFunction(getRuntimeContext(), this.serFun).     if (this.fun instanceof RichFunction) {         try {             final RichFunction rf = (RichFunction) this.fun.             rf.setRuntimeContext(getRuntimeContext()).             rf.open(parameters).         } catch (PyException pe) {             throw createAndLogException(pe).         }     } }
false;public;0;10;;@Override public void close() throws Exception {     if (this.fun instanceof RichFunction) {         try {             ((RichFunction) this.fun).close().         } catch (PyException pe) {             throw createAndLogException(pe).         }     } }
false;;1;3;;FlinkException createAndLogException(PyException pe) {     return createAndLogException(pe, log). }
false;static;2;10;;static FlinkException createAndLogException(PyException pe, Logger log) {     StringWriter sw = new StringWriter().     try (PrintWriter pw = new PrintWriter(sw)) {         pe.printStackTrace(pw).     }     String pythonStackTrace = sw.toString().trim().     log.error("Python function failed: " + System.lineSeparator() + pythonStackTrace).     return new FlinkException("Python function failed: " + pythonStackTrace). }
