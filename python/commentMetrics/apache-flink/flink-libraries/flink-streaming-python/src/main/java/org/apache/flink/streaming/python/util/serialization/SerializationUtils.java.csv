commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static byte[] serializeObject(Object o) throws IOException {     try (ByteArrayOutputStream baos = new ByteArrayOutputStream().         ObjectOutputStream oos = new ObjectOutputStream(baos)) {         oos.writeObject(o).         oos.flush().         return baos.toByteArray().     } }
false;public,static;1;6;;@SuppressWarnings("unchecked") public static <X> X deserializeObject(byte[] bytes) throws IOException, ClassNotFoundException {     try (ByteArrayInputStream bais = new ByteArrayInputStream(bytes).         ObjectInputStream ois = new SerialVersionOverridingPythonObjectInputStream(bais)) {         return (X) ois.readObject().     } }
false;protected;0;21;;protected ObjectStreamClass readClassDescriptor() throws ClassNotFoundException, IOException {     // initially streams descriptor     ObjectStreamClass readClassDescriptor = super.readClassDescriptor().     Class<?> localClass.     try {         localClass = resolveClass(readClassDescriptor).     } catch (ClassNotFoundException e) {         return readClassDescriptor.     }     ObjectStreamClass localClassDescriptor = ObjectStreamClass.lookup(localClass).     if (localClassDescriptor != null) {         // only if class implements serializable         final long localSUID = localClassDescriptor.getSerialVersionUID().         final long readSUID = readClassDescriptor.getSerialVersionUID().         if (readSUID != localSUID) {             // Overriding serialized class version mismatch             // Use local class descriptor for deserialization             readClassDescriptor = localClassDescriptor.         }     }     return readClassDescriptor. }
