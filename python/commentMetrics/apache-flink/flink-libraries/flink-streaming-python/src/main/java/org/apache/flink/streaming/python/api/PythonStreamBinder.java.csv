commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;11;/**  * Entry point for the execution of a python streaming task.  *  * @param args pathToScript [pathToPackage1 .. [pathToPackageX]] - [parameter1]..[parameterX]  * @throws Exception  */ ;/**  * Entry point for the execution of a python streaming task.  *  * @param args pathToScript [pathToPackage1 .. [pathToPackageX]] - [parameter1]..[parameterX]  * @throws Exception  */ public static void main(String[] args) throws Exception {     Configuration globalConfig = GlobalConfiguration.loadConfiguration().     PythonStreamBinder binder = new PythonStreamBinder(globalConfig).     try {         binder.runPlan(args).     } catch (Exception e) {         System.out.println("Failed to run plan: " + e.getMessage()).         e.printStackTrace().         LOG.error("Failed to run plan.", e).     } }
false;;1;57;;void runPlan(String[] args) throws Exception {     if (args.length < 1) {         System.out.println("Usage: prog <pathToScript> [parameter1]..[parameterX] - [<pathToPackage1> .. [<pathToPackageX]]").         return.     }     int split = 0.     for (int x = 0. x < args.length. x++) {         if (args[x].equals("-")) {             split = x.             break.         }     }     try {         String planFile = args[0].         String[] filesToCopy = Arrays.copyOfRange(args, 1, split == 0 ? args.length : split).         String[] planArgumentsArray = Arrays.copyOfRange(args, split == 0 ? args.length : split + 1, args.length).         // verify existence of files         Path planPath = new Path(planFile).         if (!FileSystem.getUnguardedFileSystem(planPath.toUri()).exists(planPath)) {             throw new FileNotFoundException("Plan file " + planFile + " does not exist.").         }         for (String file : filesToCopy) {             Path filePath = new Path(file).             if (!FileSystem.getUnguardedFileSystem(filePath.toUri()).exists(filePath)) {                 throw new FileNotFoundException("Additional file " + file + " does not exist.").             }         }         // setup temporary local directory for flink python library and user files         Path targetDir = new Path(localTmpPath).         deleteIfExists(targetDir).         targetDir.getFileSystem().mkdirs(targetDir).         // copy user files to temporary location         copyFile(planPath, targetDir, planPath.getName()).         for (String file : filesToCopy) {             Path source = new Path(file).             copyFile(source, targetDir, source.getName()).         }         String planNameWithExtension = planPath.getName().         String planName = planNameWithExtension.substring(0, planNameWithExtension.indexOf(".py")).         InterpreterUtils.initAndExecPythonScript(new PythonEnvironmentFactory(localTmpPath, planName), Paths.get(localTmpPath), planName, planArgumentsArray).     } finally {         try {             // clean up created files             FileSystem local = FileSystem.getLocalFileSystem().             local.delete(new Path(localTmpPath), true).         } catch (IOException ioe) {             LOG.error("PythonAPI file cleanup failed. {}", ioe.getMessage()).         }     } }
false;private,static;1;6;;// =====File utils=================================================================================================== private static void deleteIfExists(Path path) throws IOException {     FileSystem fs = path.getFileSystem().     if (fs.exists(path)) {         fs.delete(path, true).     } }
false;private,static;3;5;;private static void copyFile(Path source, Path targetDirectory, String name) throws IOException {     Path targetFilePath = new Path(targetDirectory, name).     deleteIfExists(targetFilePath).     FileUtils.copy(source, targetFilePath, true). }
