commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * A thin wrapper layer over {@link KeyedStream#countWindow(long, long)}.  *  * @param size The size of the windows in number of elements.  * @param slide The slide interval in number of elements.  * @return The python windowed stream {@link PythonWindowedStream}  */ ;/**  * A thin wrapper layer over {@link KeyedStream#countWindow(long, long)}.  *  * @param size The size of the windows in number of elements.  * @param slide The slide interval in number of elements.  * @return The python windowed stream {@link PythonWindowedStream}  */ public PythonWindowedStream count_window(long size, long slide) {     return new PythonWindowedStream<GlobalWindow>(this.stream.countWindow(size, slide)). }
true;public;1;3;/**  * A thin wrapper layer over {@link KeyedStream#timeWindow(Time)}.  *  * @param size The size of the window.  * @return The python windowed stream {@link PythonWindowedStream}  */ ;/**  * A thin wrapper layer over {@link KeyedStream#timeWindow(Time)}.  *  * @param size The size of the window.  * @return The python windowed stream {@link PythonWindowedStream}  */ public PythonWindowedStream time_window(Time size) {     return new PythonWindowedStream<TimeWindow>(this.stream.timeWindow(size)). }
true;public;2;3;/**  * A thin wrapper layer over {@link KeyedStream#timeWindow(Time, Time)}.  *  * @param size The size of the window.  * @return The python wrapper {@link PythonWindowedStream}  */ ;/**  * A thin wrapper layer over {@link KeyedStream#timeWindow(Time, Time)}.  *  * @param size The size of the window.  * @return The python wrapper {@link PythonWindowedStream}  */ public PythonWindowedStream time_window(Time size, Time slide) {     return new PythonWindowedStream<TimeWindow>(this.stream.timeWindow(size, slide)). }
true;public;1;3;/**  * A thin wrapper layer over {@link KeyedStream#reduce(ReduceFunction)}.  *  * @param reducer The {@link ReduceFunction} that will be called for every  * element of the input values with the same key.  * @return The transformed data stream @{link PythonSingleOutputStreamOperator}.  */ ;/**  * A thin wrapper layer over {@link KeyedStream#reduce(ReduceFunction)}.  *  * @param reducer The {@link ReduceFunction} that will be called for every  * element of the input values with the same key.  * @return The transformed data stream @{link PythonSingleOutputStreamOperator}.  */ public PythonSingleOutputStreamOperator reduce(ReduceFunction<PyObject> reducer) throws IOException {     return new PythonSingleOutputStreamOperator(this.stream.reduce(new PythonReduceFunction(reducer))). }
