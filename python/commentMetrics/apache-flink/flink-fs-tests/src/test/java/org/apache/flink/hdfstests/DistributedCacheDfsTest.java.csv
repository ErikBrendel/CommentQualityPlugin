commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;20;;@BeforeClass public static void setup() throws Exception {     File dataDir = TEMP_FOLDER.newFolder().     conf.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR, dataDir.getAbsolutePath()).     MiniDFSCluster.Builder builder = new MiniDFSCluster.Builder(conf).     hdfsCluster = builder.build().     String hdfsURI = "hdfs://" + NetUtils.hostAndPortToUrlString(hdfsCluster.getURI().getHost(), hdfsCluster.getNameNodePort()) + "/".     FileSystem dfs = FileSystem.get(new URI(hdfsURI)).     testFile = writeFile(dfs, dfs.getHomeDirectory(), "testFile").     testDir = new Path(dfs.getHomeDirectory(), "testDir").     dfs.mkdirs(testDir).     writeFile(dfs, testDir, "testFile1").     writeFile(dfs, testDir, "testFile2"). }
false;private,static;3;9;;private static Path writeFile(FileSystem dfs, Path rootDir, String fileName) throws IOException {     Path file = new Path(rootDir, fileName).     try (DataOutputStream outStream = new DataOutputStream(dfs.create(file, FileSystem.WriteMode.OVERWRITE))) {         outStream.writeUTF(testFileContent).     }     return file. }
false;public,static;0;4;;@AfterClass public static void teardown() {     hdfsCluster.shutdown(). }
false;public;0;15;;@Test public void testDistributeFileViaDFS() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(1).     env.registerCachedFile(testFile.toString(), "test_data", false).     env.registerCachedFile(testDir.toString(), "test_dir", false).     env.fromElements(1).map(new TestMapFunction()).addSink(new DiscardingSink<>()).     env.execute("Distributed Cache Via Blob Test Program"). }
false;public;1;20;;@Override public String map(Integer value) throws Exception {     final Path actualFile = new Path(getRuntimeContext().getDistributedCache().getFile("test_data").toURI()).     Path path = new Path(actualFile.toUri()).     assertFalse(path.getFileSystem().isDistributedFS()).     DataInputStream in = new DataInputStream(actualFile.getFileSystem().open(actualFile)).     String contents = in.readUTF().     assertEquals(testFileContent, contents).     final Path actualDir = new Path(getRuntimeContext().getDistributedCache().getFile("test_dir").toURI()).     FileStatus fileStatus = actualDir.getFileSystem().getFileStatus(actualDir).     assertTrue(fileStatus.isDir()).     FileStatus[] fileStatuses = actualDir.getFileSystem().listStatus(actualDir).     assertEquals(2, fileStatuses.length).     return contents. }
