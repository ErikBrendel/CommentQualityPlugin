commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testSnapshotAndRestoreWrappedCheckpointedFunction() throws Exception {     StreamMap<Integer, Integer> operator = new StreamMap<>(new WrappingTestFun(new WrappingTestFun(new InnerTestFun()))).     OneInputStreamOperatorTestHarness<Integer, Integer> testHarness = new OneInputStreamOperatorTestHarness<>(operator).     testHarness.setup().     testHarness.open().     testHarness.processElement(new StreamRecord<>(5, 12L)).     // snapshot and restore from scratch     OperatorSubtaskState snapshot = testHarness.snapshot(0, 0).     testHarness.close().     InnerTestFun innerTestFun = new InnerTestFun().     operator = new StreamMap<>(new WrappingTestFun(new WrappingTestFun(innerTestFun))).     testHarness = new OneInputStreamOperatorTestHarness<>(operator).     testHarness.setup().     testHarness.initializeState(snapshot).     testHarness.open().     Assert.assertTrue(innerTestFun.wasRestored).     testHarness.close(). }
false;public;0;31;;@Test public void testSnapshotAndRestoreWrappedListCheckpointed() throws Exception {     StreamMap<Integer, Integer> operator = new StreamMap<>(new WrappingTestFun(new WrappingTestFun(new InnerTestFunList()))).     OneInputStreamOperatorTestHarness<Integer, Integer> testHarness = new OneInputStreamOperatorTestHarness<>(operator).     testHarness.setup().     testHarness.open().     testHarness.processElement(new StreamRecord<>(5, 12L)).     // snapshot and restore from scratch     OperatorSubtaskState snapshot = testHarness.snapshot(0, 0).     testHarness.close().     InnerTestFunList innerTestFun = new InnerTestFunList().     operator = new StreamMap<>(new WrappingTestFun(new WrappingTestFun(innerTestFun))).     testHarness = new OneInputStreamOperatorTestHarness<>(operator).     testHarness.setup().     testHarness.initializeState(snapshot).     testHarness.open().     Assert.assertTrue(innerTestFun.wasRestored).     testHarness.close(). }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value. }
false;public;1;6;;@Override public void snapshotState(FunctionSnapshotContext context) throws Exception {     if (!wasRestored) {         serializableListState.add(42).     } }
false;public;1;13;;@Override public void initializeState(FunctionInitializationContext context) throws Exception {     serializableListState = context.getOperatorStateStore().getListState(new ListStateDescriptor<>("test-state", IntSerializer.INSTANCE)).     if (context.isRestored()) {         Iterator<Integer> integers = serializableListState.get().iterator().         int act = integers.next().         Assert.assertEquals(42, act).         Assert.assertFalse(integers.hasNext()).         wasRestored = true.     } }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value. }
false;public;2;4;;@Override public List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {     return Collections.singletonList(42). }
false;public;1;7;;@Override public void restoreState(List<Integer> state) throws Exception {     Assert.assertEquals(1, state.size()).     int val = state.get(0).     Assert.assertEquals(42, val).     wasRestored = true. }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value. }
