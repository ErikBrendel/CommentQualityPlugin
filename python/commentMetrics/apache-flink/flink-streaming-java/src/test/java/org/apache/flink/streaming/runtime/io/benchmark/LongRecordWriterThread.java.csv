commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;0;4;;public synchronized void shutdown() {     running = false.     recordsToSend.complete(0L). }
true;public,synchronized;1;4;/**  * Initializes the record writer thread with this many numbers to send.  *  * <p>If the thread was already started, if may now continue.  *  * @param records  * 		number of records to send  */ ;/**  * Initializes the record writer thread with this many numbers to send.  *  * <p>If the thread was already started, if may now continue.  *  * @param records  * 		number of records to send  */ public synchronized void setRecordsToSend(long records) {     checkState(!recordsToSend.isDone()).     recordsToSend.complete(records). }
false;private,synchronized;0;3;;private synchronized CompletableFuture<Long> getRecordsToSend() {     return recordsToSend. }
false;private,synchronized;0;3;;private synchronized void finishSendingRecords() {     recordsToSend = new CompletableFuture<>(). }
false;public;0;11;;@Override public void go() throws Exception {     try {         while (running) {             sendRecords(getRecordsToSend().get()).         }     } finally {         recordWriter.close().     } }
false;private;1;17;;private void sendRecords(long records) throws IOException, InterruptedException {     LongValue value = new LongValue(0).     for (int i = 1. i < records. i++) {         if (broadcastMode) {             recordWriter.broadcastEmit(value).         } else {             recordWriter.emit(value).         }     }     value.setValue(records).     recordWriter.broadcastEmit(value).     recordWriter.flushAll().     finishSendingRecords(). }
