# id;timestamp;commentText;codeText;commentWords;codeWords
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1489819457;Verify that there is no late-date side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,date,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1490282941;Verify that there is no late-date side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,date,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1490282941;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1490282942;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1490457557;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1490457571;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1493298548;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1495484544;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1506347384;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1515177485;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1519567828;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1526474860;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1531308946;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> @Test 	public void testNoLateSideOutputForSkippedWindows() throws Exception;1538998760;Verify that there is no late-data side output if the {@code WindowAssigner} does_not assign any windows.;@Test_	public void testNoLateSideOutputForSkippedWindows() throws Exception {__		OutputTag<Integer> lateOutputTag = new OutputTag<Integer>("late"){}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction, lateOutputTag)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Collections.<TimeWindow>emptyList())___		testHarness.processWatermark(0)__		testHarness.processElement(new StreamRecord<>(0, 5L))___		verify(mockAssigner, times(1)).assignWindows(eq(0), eq(5L), anyAssignerContext())___		assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty())__	};verify,that,there,is,no,late,data,side,output,if,the,code,window,assigner,does,not,assign,any,windows;test,public,void,test,no,late,side,output,for,skipped,windows,throws,exception,output,tag,integer,late,output,tag,new,output,tag,integer,late,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,late,output,tag,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,time,window,empty,list,test,harness,process,watermark,0,test,harness,process,element,new,stream,record,0,5l,verify,mock,assigner,times,1,assign,windows,eq,0,eq,5l,any,assigner,context,assert,true,test,harness,get,side,output,late,output,tag,null,test,harness,get,side,output,late,output,tag,is,empty
WindowOperatorContractTest -> public void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1485250954;Verify that windows are merged eagerly, if possible.;public void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4)),_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4)),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;public,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> public void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that windows are merged eagerly, if possible.;public void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4)),_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4)),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;public,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> public void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that windows are merged eagerly, if possible.;public void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4)),_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4)),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;public,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> public void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that windows are merged eagerly, if possible.;public void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4)),_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4)),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;public,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> public void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1485250954;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window.;public void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window;public,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> public void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window.;public void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window;public,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> public void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window.;public void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window;public,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> public void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window.;public void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window;public,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> public void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1485250954;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;public void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3)),_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3)),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;public,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> public void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;public void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3)),_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3)),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;public,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> public void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;public void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3)),_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3)),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;public,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> public void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;public void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3)),_				Lists.newArrayList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3)),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;public,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,lists,new,array,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282942;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457557;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457571;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1493298548;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1495484544;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1506347384;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1515177485;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1519567828;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1526474860;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1531308946;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1538998760;Verify that we only keep one of the underlying state windows. This test also verifies that_GC timers are correctly deleted when merging windows.;private void testMergingOfExistingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				_				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(5, testHarness.numKeyedStateEntries())_ _		assertEquals(4, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(1, 3)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4), new TimeWindow(1, 3))),_				new TimeWindow(0, 4))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		assertEquals(0, testHarness.extractOutputStreamRecords().size())__	};verify,that,we,only,keep,one,of,the,underlying,state,windows,this,test,also,verifies,that,gc,timers,are,correctly,deleted,when,merging,windows;private,void,test,merging,of,existing,windows,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,5,test,harness,num,keyed,state,entries,assert,equals,4,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,1,3,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,1,3,new,time,window,0,4,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,test,harness,extract,output,stream,records,size
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282942;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457557;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457571;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1493298548;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1495484544;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1506347384;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1515177485;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1519567828;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1526474860;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1531308946;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1538998760;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;private void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;private,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> public void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1485250954;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;public void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())____		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;public,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> public void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;public void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())____		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;public,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> public void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;public void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())____		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;public,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> public void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we neither invoke the trigger nor the window function if a timer_fires for a merging window that was already garbage collected.;public void testNoTimerFiringForGarbageCollectedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 10L)__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())____		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.shouldContinueOnTime(mockTrigger)___		_		timeAdaptor.advanceTime(testHarness, 4L)___		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())__		_		assertEquals(1, timeAdaptor.numTimers(testHarness))___		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		_		timeAdaptor.advanceTime(testHarness, 10L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)__	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,fires,for,a,merging,window,that,was,already,garbage,collected;public,void,test,no,timer,firing,for,garbage,collected,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,10l,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,should,continue,on,time,mock,trigger,time,adaptor,advance,time,test,harness,4l,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,time,adaptor,advance,time,test,harness,10l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282942;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457557;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457571;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1493298548;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1495484544;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1506347384;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1515177485;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1519567828;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1526474860;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1531308946;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception;1538998760;Verify that windows are merged eagerly, if possible.;private void testWindowsAreMergedEagerly(final TimeDomainAdaptor timeAdaptor) throws Exception {_		_		__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.OnMergeContext context = (Trigger.OnMergeContext) invocation.getArguments()[1]__				_				timeAdaptor.registerTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onMerge(anyTimeWindow(), anyOnMergeContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 0L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 2)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(3, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 2), new TimeWindow(2, 4))),_				new TimeWindow(0, 4))___		_		_		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				return TriggerResult.CONTINUE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		verify(mockTrigger).onMerge(eq(new TimeWindow(0, 4)), anyOnMergeContext())___		assertEquals(3, testHarness.numKeyedStateEntries())__		assertEquals(2, timeAdaptor.numTimers(testHarness))__	};verify,that,windows,are,merged,eagerly,if,possible;private,void,test,windows,are,merged,eagerly,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,on,merge,context,context,trigger,on,merge,context,invocation,get,arguments,1,time,adaptor,register,timer,context,0l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,continue,when,mock,trigger,on,merge,any,time,window,any,on,merge,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,0l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,2,test,harness,process,element,new,stream,record,0,0l,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,array,list,arrays,as,list,new,time,window,0,2,new,time,window,2,4,new,time,window,0,4,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,return,trigger,result,continue,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,on,merge,eq,new,time,window,0,4,any,on,merge,context,assert,equals,3,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1485250954;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,int,list,descriptor,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282942;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457557;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457571;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1493298548;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1495484544;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1506347384;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1515177485;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1519567828;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1526474860;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1531308946;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1538998760;Verify that we neither invoke the trigger nor the window function if a timer_for a non-existent window fires.;private void testNoTimerFiringForPurgedWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,a,non,existent,window,fires;private,void,test,no,timer,firing,for,purged,window,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282942;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,apply,any,int,any,time,window,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457557;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457571;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1493298548;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1495484544;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1506347384;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1515177485;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1519567828;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1526474860;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, never(), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,never,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1531308946;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception;1538998760;Verify that we neither invoke the trigger nor the window function if a timer_for an empty merging window fires.;private void testNoTimerFiringForPurgedMergingWindow(final TimeDomainAdaptor timeAdaptor) throws Exception {__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		@SuppressWarnings("unchecked")_		InternalWindowFunction<Iterable<Integer>, List<Integer>, Integer, TimeWindow> mockWindowFunction =_				mock(InternalWindowFunction.class)___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, List<Integer>> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, Long.MIN_VALUE)___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(2, 4)))___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 0L)__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ __		timeAdaptor.advanceTime(testHarness, 0L)___		_		timeAdaptor.verifyTriggerCallback(mockTrigger, times(1), null, null)___		verify(mockWindowFunction, never())_				.process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<List<Integer>>anyCollector())___		assertEquals(1, timeAdaptor.numTimers(testHarness))_ _	};verify,that,we,neither,invoke,the,trigger,nor,the,window,function,if,a,timer,for,an,empty,merging,window,fires;private,void,test,no,timer,firing,for,purged,merging,window,final,time,domain,adaptor,time,adaptor,throws,exception,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,suppress,warnings,unchecked,internal,window,function,iterable,integer,list,integer,integer,time,window,mock,window,function,mock,internal,window,function,class,keyed,one,input,stream,operator,test,harness,integer,integer,list,integer,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,long,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,2,4,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,0l,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,time,adaptor,advance,time,test,harness,0l,time,adaptor,verify,trigger,callback,mock,trigger,times,1,null,null,verify,mock,window,function,never,process,any,int,any,time,window,any,internal,window,context,any,int,iterable,window,operator,contract,test,list,integer,any,collector,assert,equals,1,time,adaptor,num,timers,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282942;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457557;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457571;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1493298548;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1495484544;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1506347384;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1515177485;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1519567828;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1526474860;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1531308946;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1538998760;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> @Test 	public void testSideOutput() throws Exception;1506347384;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {__		final OutputTag<Integer> integerOutputTag = new OutputTag<Integer>("int-out") {}__		final OutputTag<Long> longOutputTag = new OutputTag<Long>("long-out") {}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> windowFunction =_			new InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow>() {_				@Override_				public void process(_						Integer integer,_						TimeWindow window,_						InternalWindowContext ctx,_						Iterable<Integer> input,_						Collector<Void> out) throws Exception {_					Integer inputValue = input.iterator().next()___					ctx.output(integerOutputTag, inputValue)__					ctx.output(longOutputTag, inputValue.longValue())__				}__				@Override_				public void clear(_					TimeWindow window,_					InternalWindowContext context) throws Exception {}_			}___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_			createWindowOperator(mockAssigner, mockTrigger, 0L, windowFunction)___		testHarness.open()___		final long windowEnd = 42L___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_			.thenReturn(Collections.singletonList(new TimeWindow(0, windowEnd)))___		shouldFireOnElement(mockTrigger)___		testHarness.processElement(new StreamRecord<>(17, 5L))___		assertThat(testHarness.getSideOutput(integerOutputTag),_			contains(isStreamRecord(17, windowEnd - 1)))___		assertThat(testHarness.getSideOutput(longOutputTag),_			contains(isStreamRecord(17L, windowEnd - 1)))__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,final,output,tag,integer,integer,output,tag,new,output,tag,integer,int,out,final,output,tag,long,long,output,tag,new,output,tag,long,long,out,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,window,function,new,internal,window,function,iterable,integer,void,integer,time,window,override,public,void,process,integer,integer,time,window,window,internal,window,context,ctx,iterable,integer,input,collector,void,out,throws,exception,integer,input,value,input,iterator,next,ctx,output,integer,output,tag,input,value,ctx,output,long,output,tag,input,value,long,value,override,public,void,clear,time,window,window,internal,window,context,context,throws,exception,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,window,function,test,harness,open,final,long,window,end,42l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,singleton,list,new,time,window,0,window,end,should,fire,on,element,mock,trigger,test,harness,process,element,new,stream,record,17,5l,assert,that,test,harness,get,side,output,integer,output,tag,contains,is,stream,record,17,window,end,1,assert,that,test,harness,get,side,output,long,output,tag,contains,is,stream,record,17l,window,end,1
WindowOperatorContractTest -> @Test 	public void testSideOutput() throws Exception;1515177485;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {__		final OutputTag<Integer> integerOutputTag = new OutputTag<Integer>("int-out") {}__		final OutputTag<Long> longOutputTag = new OutputTag<Long>("long-out") {}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> windowFunction =_			new InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow>() {_				@Override_				public void process(_						Integer integer,_						TimeWindow window,_						InternalWindowContext ctx,_						Iterable<Integer> input,_						Collector<Void> out) throws Exception {_					Integer inputValue = input.iterator().next()___					ctx.output(integerOutputTag, inputValue)__					ctx.output(longOutputTag, inputValue.longValue())__				}__				@Override_				public void clear(_					TimeWindow window,_					InternalWindowContext context) throws Exception {}_			}___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_			createWindowOperator(mockAssigner, mockTrigger, 0L, windowFunction)___		testHarness.open()___		final long windowEnd = 42L___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_			.thenReturn(Collections.singletonList(new TimeWindow(0, windowEnd)))___		shouldFireOnElement(mockTrigger)___		testHarness.processElement(new StreamRecord<>(17, 5L))___		assertThat(testHarness.getSideOutput(integerOutputTag),_			contains(isStreamRecord(17, windowEnd - 1)))___		assertThat(testHarness.getSideOutput(longOutputTag),_			contains(isStreamRecord(17L, windowEnd - 1)))__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,final,output,tag,integer,integer,output,tag,new,output,tag,integer,int,out,final,output,tag,long,long,output,tag,new,output,tag,long,long,out,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,window,function,new,internal,window,function,iterable,integer,void,integer,time,window,override,public,void,process,integer,integer,time,window,window,internal,window,context,ctx,iterable,integer,input,collector,void,out,throws,exception,integer,input,value,input,iterator,next,ctx,output,integer,output,tag,input,value,ctx,output,long,output,tag,input,value,long,value,override,public,void,clear,time,window,window,internal,window,context,context,throws,exception,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,window,function,test,harness,open,final,long,window,end,42l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,singleton,list,new,time,window,0,window,end,should,fire,on,element,mock,trigger,test,harness,process,element,new,stream,record,17,5l,assert,that,test,harness,get,side,output,integer,output,tag,contains,is,stream,record,17,window,end,1,assert,that,test,harness,get,side,output,long,output,tag,contains,is,stream,record,17l,window,end,1
WindowOperatorContractTest -> @Test 	public void testSideOutput() throws Exception;1519567828;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {__		final OutputTag<Integer> integerOutputTag = new OutputTag<Integer>("int-out") {}__		final OutputTag<Long> longOutputTag = new OutputTag<Long>("long-out") {}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> windowFunction =_			new InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow>() {_				@Override_				public void process(_						Integer integer,_						TimeWindow window,_						InternalWindowContext ctx,_						Iterable<Integer> input,_						Collector<Void> out) throws Exception {_					Integer inputValue = input.iterator().next()___					ctx.output(integerOutputTag, inputValue)__					ctx.output(longOutputTag, inputValue.longValue())__				}__				@Override_				public void clear(_					TimeWindow window,_					InternalWindowContext context) throws Exception {}_			}___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_			createWindowOperator(mockAssigner, mockTrigger, 0L, windowFunction)___		testHarness.open()___		final long windowEnd = 42L___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_			.thenReturn(Collections.singletonList(new TimeWindow(0, windowEnd)))___		shouldFireOnElement(mockTrigger)___		testHarness.processElement(new StreamRecord<>(17, 5L))___		assertThat(testHarness.getSideOutput(integerOutputTag),_			contains(isStreamRecord(17, windowEnd - 1)))___		assertThat(testHarness.getSideOutput(longOutputTag),_			contains(isStreamRecord(17L, windowEnd - 1)))__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,final,output,tag,integer,integer,output,tag,new,output,tag,integer,int,out,final,output,tag,long,long,output,tag,new,output,tag,long,long,out,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,window,function,new,internal,window,function,iterable,integer,void,integer,time,window,override,public,void,process,integer,integer,time,window,window,internal,window,context,ctx,iterable,integer,input,collector,void,out,throws,exception,integer,input,value,input,iterator,next,ctx,output,integer,output,tag,input,value,ctx,output,long,output,tag,input,value,long,value,override,public,void,clear,time,window,window,internal,window,context,context,throws,exception,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,window,function,test,harness,open,final,long,window,end,42l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,singleton,list,new,time,window,0,window,end,should,fire,on,element,mock,trigger,test,harness,process,element,new,stream,record,17,5l,assert,that,test,harness,get,side,output,integer,output,tag,contains,is,stream,record,17,window,end,1,assert,that,test,harness,get,side,output,long,output,tag,contains,is,stream,record,17l,window,end,1
WindowOperatorContractTest -> @Test 	public void testSideOutput() throws Exception;1526474860;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {__		final OutputTag<Integer> integerOutputTag = new OutputTag<Integer>("int-out") {}__		final OutputTag<Long> longOutputTag = new OutputTag<Long>("long-out") {}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> windowFunction =_			new InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow>() {_				@Override_				public void process(_						Integer integer,_						TimeWindow window,_						InternalWindowContext ctx,_						Iterable<Integer> input,_						Collector<Void> out) throws Exception {_					Integer inputValue = input.iterator().next()___					ctx.output(integerOutputTag, inputValue)__					ctx.output(longOutputTag, inputValue.longValue())__				}__				@Override_				public void clear(_					TimeWindow window,_					InternalWindowContext context) throws Exception {}_			}___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_			createWindowOperator(mockAssigner, mockTrigger, 0L, windowFunction)___		testHarness.open()___		final long windowEnd = 42L___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_			.thenReturn(Collections.singletonList(new TimeWindow(0, windowEnd)))___		shouldFireOnElement(mockTrigger)___		testHarness.processElement(new StreamRecord<>(17, 5L))___		assertThat(testHarness.getSideOutput(integerOutputTag),_			contains(isStreamRecord(17, windowEnd - 1)))___		assertThat(testHarness.getSideOutput(longOutputTag),_			contains(isStreamRecord(17L, windowEnd - 1)))__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,final,output,tag,integer,integer,output,tag,new,output,tag,integer,int,out,final,output,tag,long,long,output,tag,new,output,tag,long,long,out,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,window,function,new,internal,window,function,iterable,integer,void,integer,time,window,override,public,void,process,integer,integer,time,window,window,internal,window,context,ctx,iterable,integer,input,collector,void,out,throws,exception,integer,input,value,input,iterator,next,ctx,output,integer,output,tag,input,value,ctx,output,long,output,tag,input,value,long,value,override,public,void,clear,time,window,window,internal,window,context,context,throws,exception,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,window,function,test,harness,open,final,long,window,end,42l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,singleton,list,new,time,window,0,window,end,should,fire,on,element,mock,trigger,test,harness,process,element,new,stream,record,17,5l,assert,that,test,harness,get,side,output,integer,output,tag,contains,is,stream,record,17,window,end,1,assert,that,test,harness,get,side,output,long,output,tag,contains,is,stream,record,17l,window,end,1
WindowOperatorContractTest -> @Test 	public void testSideOutput() throws Exception;1531308946;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {__		final OutputTag<Integer> integerOutputTag = new OutputTag<Integer>("int-out") {}__		final OutputTag<Long> longOutputTag = new OutputTag<Long>("long-out") {}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> windowFunction =_			new InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow>() {_				@Override_				public void process(_						Integer integer,_						TimeWindow window,_						InternalWindowContext ctx,_						Iterable<Integer> input,_						Collector<Void> out) throws Exception {_					Integer inputValue = input.iterator().next()___					ctx.output(integerOutputTag, inputValue)__					ctx.output(longOutputTag, inputValue.longValue())__				}__				@Override_				public void clear(_					TimeWindow window,_					InternalWindowContext context) throws Exception {}_			}___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_			createWindowOperator(mockAssigner, mockTrigger, 0L, windowFunction)___		testHarness.open()___		final long windowEnd = 42L___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_			.thenReturn(Collections.singletonList(new TimeWindow(0, windowEnd)))___		shouldFireOnElement(mockTrigger)___		testHarness.processElement(new StreamRecord<>(17, 5L))___		assertThat(testHarness.getSideOutput(integerOutputTag),_			contains(isStreamRecord(17, windowEnd - 1)))___		assertThat(testHarness.getSideOutput(longOutputTag),_			contains(isStreamRecord(17L, windowEnd - 1)))__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,final,output,tag,integer,integer,output,tag,new,output,tag,integer,int,out,final,output,tag,long,long,output,tag,new,output,tag,long,long,out,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,window,function,new,internal,window,function,iterable,integer,void,integer,time,window,override,public,void,process,integer,integer,time,window,window,internal,window,context,ctx,iterable,integer,input,collector,void,out,throws,exception,integer,input,value,input,iterator,next,ctx,output,integer,output,tag,input,value,ctx,output,long,output,tag,input,value,long,value,override,public,void,clear,time,window,window,internal,window,context,context,throws,exception,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,window,function,test,harness,open,final,long,window,end,42l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,singleton,list,new,time,window,0,window,end,should,fire,on,element,mock,trigger,test,harness,process,element,new,stream,record,17,5l,assert,that,test,harness,get,side,output,integer,output,tag,contains,is,stream,record,17,window,end,1,assert,that,test,harness,get,side,output,long,output,tag,contains,is,stream,record,17l,window,end,1
WindowOperatorContractTest -> @Test 	public void testSideOutput() throws Exception;1538998760;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {__		final OutputTag<Integer> integerOutputTag = new OutputTag<Integer>("int-out") {}__		final OutputTag<Long> longOutputTag = new OutputTag<Long>("long-out") {}___		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()___		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> windowFunction =_			new InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow>() {_				@Override_				public void process(_						Integer integer,_						TimeWindow window,_						InternalWindowContext ctx,_						Iterable<Integer> input,_						Collector<Void> out) throws Exception {_					Integer inputValue = input.iterator().next()___					ctx.output(integerOutputTag, inputValue)__					ctx.output(longOutputTag, inputValue.longValue())__				}__				@Override_				public void clear(_					TimeWindow window,_					InternalWindowContext context) throws Exception {}_			}___		OneInputStreamOperatorTestHarness<Integer, Void> testHarness =_			createWindowOperator(mockAssigner, mockTrigger, 0L, windowFunction)___		testHarness.open()___		final long windowEnd = 42L___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_			.thenReturn(Collections.singletonList(new TimeWindow(0, windowEnd)))___		shouldFireOnElement(mockTrigger)___		testHarness.processElement(new StreamRecord<>(17, 5L))___		assertThat(testHarness.getSideOutput(integerOutputTag),_			contains(isStreamRecord(17, windowEnd - 1)))___		assertThat(testHarness.getSideOutput(longOutputTag),_			contains(isStreamRecord(17L, windowEnd - 1)))__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,final,output,tag,integer,integer,output,tag,new,output,tag,integer,int,out,final,output,tag,long,long,output,tag,new,output,tag,long,long,out,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,window,function,new,internal,window,function,iterable,integer,void,integer,time,window,override,public,void,process,integer,integer,time,window,window,internal,window,context,ctx,iterable,integer,input,collector,void,out,throws,exception,integer,input,value,input,iterator,next,ctx,output,integer,output,tag,input,value,ctx,output,long,output,tag,input,value,long,value,override,public,void,clear,time,window,window,internal,window,context,context,throws,exception,one,input,stream,operator,test,harness,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,0l,window,function,test,harness,open,final,long,window,end,42l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,collections,singleton,list,new,time,window,0,window,end,should,fire,on,element,mock,trigger,test,harness,process,element,new,stream,record,17,5l,assert,that,test,harness,get,side,output,integer,output,tag,contains,is,stream,record,17,window,end,1,assert,that,test,harness,get,side,output,long,output,tag,contains,is,stream,record,17l,window,end,1
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282942;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457557;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457571;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1493298548;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1495484544;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1506347384;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1515177485;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1519567828;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1526474860;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1531308946;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1538998760;A misbehaving {@code WindowAssigner} can cause a window to become late by merging if_it moves the end-of-window time before the watermark. This verifies that we don't allow that.;void testRejectShrinkingMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		int allowedLateness = 10___		if (timeAdaptor instanceof ProcessingTimeAdaptor) {_			_			allowedLateness = 0__		}__		MergingWindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, allowedLateness, mockWindowFunction)___		testHarness.open()___		timeAdaptor.advanceTime(testHarness, 0)___		assertEquals(0, testHarness.extractOutputStreamRecords().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 22)))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		timeAdaptor.advanceTime(testHarness, 20)___		_		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(1, timeAdaptor.numTimers(testHarness))_ __		_		_		_		_		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 22), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 2))___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 25)))___		shouldMergeWindows(_				mockAssigner,_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new ArrayList<>(Arrays.asList(new TimeWindow(0, 20 - allowedLateness + 2), new TimeWindow(0, 25))),_				new TimeWindow(0, 20 - allowedLateness + 1))___		expectedException.expect(UnsupportedOperationException.class)__		testHarness.processElement(new StreamRecord<>(0, 0L))__	};a,misbehaving,code,window,assigner,can,cause,a,window,to,become,late,by,merging,if,it,moves,the,end,of,window,time,before,the,watermark,this,verifies,that,we,don,t,allow,that;void,test,reject,shrinking,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,int,allowed,lateness,10,if,time,adaptor,instanceof,processing,time,adaptor,allowed,lateness,0,merging,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,allowed,lateness,mock,window,function,test,harness,open,time,adaptor,advance,time,test,harness,0,assert,equals,0,test,harness,extract,output,stream,records,size,assert,equals,0,test,harness,num,keyed,state,entries,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,22,test,harness,process,element,new,stream,record,0,0l,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,time,adaptor,advance,time,test,harness,20,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,1,time,adaptor,num,timers,test,harness,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,22,new,time,window,0,25,new,time,window,0,20,allowed,lateness,2,test,harness,process,element,new,stream,record,0,0l,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,25,should,merge,windows,mock,assigner,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,array,list,arrays,as,list,new,time,window,0,20,allowed,lateness,2,new,time,window,0,25,new,time,window,0,20,allowed,lateness,1,expected,exception,expect,unsupported,operation,exception,class,test,harness,process,element,new,stream,record,0,0l
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282942;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457557;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490457571;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1493298548;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1495484544;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1506347384;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1515177485;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1519567828;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1526474860;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1531308946;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1538998760;Verify that we correctly clean up even when a purging trigger has purged_window state.;private void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;private,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> public void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1485250954;Verify that we correctly clean up even when a purging trigger has purged_window state.;public void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;public,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,int,list,descriptor,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> public void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we correctly clean up even when a purging trigger has purged_window state.;public void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;public,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,int,list,descriptor,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> public void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we correctly clean up even when a purging trigger has purged_window state.;public void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;public,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,int,list,descriptor,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> public void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we correctly clean up even when a purging trigger has purged_window state.;public void testStateAndTimerCleanupAtGarbageCollectionWithPurgingTriggerAndMergingWindows(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockMergingAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(2, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))__	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;public,void,test,state,and,timer,cleanup,at,garbage,collection,with,purging,trigger,and,merging,windows,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,merging,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,2,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> public void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1485250954;Verify that we correctly clean up even when a purging trigger has purged_window state.;public void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;public,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,int,list,descriptor,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> public void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we correctly clean up even when a purging trigger has purged_window state.;public void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;public,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,int,list,descriptor,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> public void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1489819457;Verify that we correctly clean up even when a purging trigger has purged_window state.;public void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, intListDescriptor, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;public,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,int,list,descriptor,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
WindowOperatorContractTest -> public void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception;1490282941;Verify that we correctly clean up even when a purging trigger has purged_window state.;public void testStateAndTimerCleanupAtEventTimeGCWithPurgingTrigger(final TimeDomainAdaptor timeAdaptor) throws Exception {_		WindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner()__		timeAdaptor.setIsEventTime(mockAssigner)__		Trigger<Integer, TimeWindow> mockTrigger = mockTrigger()__		InternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction()___		KeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =_				createWindowOperator(mockAssigner, mockTrigger, 20L, mockWindowFunction)___		testHarness.open()___		when(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))_				.thenReturn(Arrays.asList(new TimeWindow(0, 20)))___		assertEquals(0, testHarness.getOutput().size())__		assertEquals(0, testHarness.numKeyedStateEntries())___		doAnswer(new Answer<TriggerResult>() {_			@Override_			public TriggerResult answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3]__				_				timeAdaptor.registerTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).update("hello")__				return TriggerResult.PURGE__			}_		}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext())___		doAnswer(new Answer<Object>() {_			@Override_			public Object answer(InvocationOnMock invocation) throws Exception {_				Trigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[1]__				timeAdaptor.deleteTimer(context, 1000L)__				context.getPartitionedState(valueStateDescriptor).clear()__				return null__			}_		}).when(mockTrigger).clear(anyTimeWindow(), anyTriggerContext())___		testHarness.processElement(new StreamRecord<>(0, 0L))___		_		verify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(1, testHarness.numKeyedStateEntries())_ _		assertEquals(2, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___		timeAdaptor.advanceTime(testHarness, 19 + 20)_ __		verify(mockTrigger, times(1)).clear(anyTimeWindow(), anyTriggerContext())___		assertEquals(0, testHarness.numKeyedStateEntries())_ _		assertEquals(0, timeAdaptor.numTimers(testHarness))_ _		assertEquals(0, timeAdaptor.numTimersOtherDomain(testHarness))___	};verify,that,we,correctly,clean,up,even,when,a,purging,trigger,has,purged,window,state;public,void,test,state,and,timer,cleanup,at,event,time,gcwith,purging,trigger,final,time,domain,adaptor,time,adaptor,throws,exception,window,assigner,integer,time,window,mock,assigner,mock,time,window,assigner,time,adaptor,set,is,event,time,mock,assigner,trigger,integer,time,window,mock,trigger,mock,trigger,internal,window,function,iterable,integer,void,integer,time,window,mock,window,function,mock,window,function,keyed,one,input,stream,operator,test,harness,integer,integer,void,test,harness,create,window,operator,mock,assigner,mock,trigger,20l,mock,window,function,test,harness,open,when,mock,assigner,assign,windows,any,int,any,long,any,assigner,context,then,return,arrays,as,list,new,time,window,0,20,assert,equals,0,test,harness,get,output,size,assert,equals,0,test,harness,num,keyed,state,entries,do,answer,new,answer,trigger,result,override,public,trigger,result,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,3,time,adaptor,register,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,update,hello,return,trigger,result,purge,when,mock,trigger,on,element,matchers,integer,any,object,any,long,any,time,window,any,trigger,context,do,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,throws,exception,trigger,trigger,context,context,trigger,trigger,context,invocation,get,arguments,1,time,adaptor,delete,timer,context,1000l,context,get,partitioned,state,value,state,descriptor,clear,return,null,when,mock,trigger,clear,any,time,window,any,trigger,context,test,harness,process,element,new,stream,record,0,0l,verify,mock,trigger,never,clear,any,time,window,any,trigger,context,assert,equals,1,test,harness,num,keyed,state,entries,assert,equals,2,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness,time,adaptor,advance,time,test,harness,19,20,verify,mock,trigger,times,1,clear,any,time,window,any,trigger,context,assert,equals,0,test,harness,num,keyed,state,entries,assert,equals,0,time,adaptor,num,timers,test,harness,assert,equals,0,time,adaptor,num,timers,other,domain,test,harness
