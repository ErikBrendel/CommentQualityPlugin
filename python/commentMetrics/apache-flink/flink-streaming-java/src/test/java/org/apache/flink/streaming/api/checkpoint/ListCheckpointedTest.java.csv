commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testUDFReturningNull() throws Exception {     testUDF(new TestUserFunction(null)). }
false;public;0;4;;@Test public void testUDFReturningEmpty() throws Exception {     testUDF(new TestUserFunction(Collections.<Integer>emptyList())). }
false;public;0;4;;@Test public void testUDFReturningData() throws Exception {     testUDF(new TestUserFunction(Arrays.asList(1, 2, 3))). }
false;private,static;1;13;;private static void testUDF(TestUserFunction userFunction) throws Exception {     OperatorSubtaskState snapshot.     try (AbstractStreamOperatorTestHarness<Integer> testHarness = createTestHarness(userFunction)) {         testHarness.open().         snapshot = testHarness.snapshot(0L, 0L).         assertFalse(userFunction.isRestored()).     }     try (AbstractStreamOperatorTestHarness<Integer> testHarness = createTestHarness(userFunction)) {         testHarness.initializeState(snapshot).         testHarness.open().         assertTrue(userFunction.isRestored()).     } }
false;private,static;1;7;;private static AbstractStreamOperatorTestHarness<Integer> createTestHarness(TestUserFunction userFunction) throws Exception {     return new AbstractStreamOperatorTestHarness<>(new StreamMap<>(userFunction), 1, 1, 0). }
false;public;1;4;;@Override public Integer map(Integer value) throws Exception {     return value. }
false;public;2;4;;@Override public List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {     return expected. }
false;public;1;9;;@Override public void restoreState(List<Integer> state) throws Exception {     if (null != expected) {         Assert.assertEquals(expected, state).     } else {         assertTrue(state.isEmpty()).     }     restored = true. }
false;public;0;3;;public boolean isRestored() {     return restored. }
