commented;modifiers;parameterAmount;loc;comment;code
true;public;0;8;/**  * Test test verifies that the execution environment can be used to execute a  * single job with multiple slots.  */ ;/**  * Test test verifies that the execution environment can be used to execute a  * single job with multiple slots.  */ @Test public void testRunIsolatedJob() throws Exception {     LocalStreamEnvironment env = new LocalStreamEnvironment().     assertEquals(1, env.getParallelism()).     addSmallBoundedJob(env, 3).     env.execute(). }
true;public;0;10;/**  * Test test verifies that the execution environment can be used to execute multiple  * bounded streaming jobs after one another.  */ ;/**  * Test test verifies that the execution environment can be used to execute multiple  * bounded streaming jobs after one another.  */ @Test public void testMultipleJobsAfterAnother() throws Exception {     LocalStreamEnvironment env = new LocalStreamEnvironment().     addSmallBoundedJob(env, 3).     env.execute().     addSmallBoundedJob(env, 5).     env.execute(). }
false;private,static;2;8;;// ------------------------------------------------------------------------ private static void addSmallBoundedJob(StreamExecutionEnvironment env, int parallelism) {     DataStream<Long> stream = env.generateSequence(1, 100).setParallelism(parallelism).     stream.filter(ignored -> false).setParallelism(parallelism).startNewChain().print().setParallelism(parallelism). }
