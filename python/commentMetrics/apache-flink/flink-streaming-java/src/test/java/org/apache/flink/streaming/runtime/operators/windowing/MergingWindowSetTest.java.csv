# id;timestamp;commentText;codeText;commentWords;codeWords
MergingWindowSetTest -> @Test 	public void testAddingIdenticalWindows() throws Exception;1485250954;Test adding a new window that is identical to an existing window. This should not cause_a merge.;@Test_	public void testAddingIdenticalWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))__	};test,adding,a,new,window,that,is,identical,to,an,existing,window,this,should,not,cause,a,merge;test,public,void,test,adding,identical,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2
MergingWindowSetTest -> @Test 	public void testAddingIdenticalWindows() throws Exception;1495484544;Test adding a new window that is identical to an existing window. This should not cause_a merge.;@Test_	public void testAddingIdenticalWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))__	};test,adding,a,new,window,that,is,identical,to,an,existing,window,this,should,not,cause,a,merge;test,public,void,test,adding,identical,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2
MergingWindowSetTest -> @Test 	public void testAddingIdenticalWindows() throws Exception;1502726910;Test adding a new window that is identical to an existing window. This should not cause_a merge.;@Test_	public void testAddingIdenticalWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))__	};test,adding,a,new,window,that,is,identical,to,an,existing,window,this,should,not,cause,a,merge;test,public,void,test,adding,identical,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2
MergingWindowSetTest -> @Test 	public void testAddingIdenticalWindows() throws Exception;1515177485;Test adding a new window that is identical to an existing window. This should not cause_a merge.;@Test_	public void testAddingIdenticalWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))__	};test,adding,a,new,window,that,is,identical,to,an,existing,window,this,should,not,cause,a,merge;test,public,void,test,adding,identical,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2
MergingWindowSetTest -> @Test 	public void testAddingIdenticalWindows() throws Exception;1547737168;Test adding a new window that is identical to an existing window. This should not cause_a merge.;@Test_	public void testAddingIdenticalWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))__	};test,adding,a,new,window,that,is,identical,to,an,existing,window,this,should,not,cause,a,merge;test,public,void,test,adding,identical,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringSingleWindow() throws Exception;1473960699;Test merging of a large new window that covers one existing windows.;@Test_	public void testMergeLargeWindowCoveringSingleWindow() throws Exception {_		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)))___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(0, 3)))__	};test,merging,of,a,large,new,window,that,covers,one,existing,windows;test,public,void,test,merge,large,window,covering,single,window,throws,exception,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,0,3,window,set,add,window,new,time,window,0,3,merge,function,assert,true,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,0,3
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringSingleWindow() throws Exception;1478005374;Test merging of a large new window that covers one existing windows.;@Test_	public void testMergeLargeWindowCoveringSingleWindow() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(0, 3)))__	};test,merging,of,a,large,new,window,that,covers,one,existing,windows;test,public,void,test,merge,large,window,covering,single,window,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,0,3,window,set,add,window,new,time,window,0,3,merge,function,assert,true,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,0,3
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringSingleWindow() throws Exception;1485170307;Test merging of a large new window that covers one existing windows.;@Test_	public void testMergeLargeWindowCoveringSingleWindow() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(0, 3)))__	};test,merging,of,a,large,new,window,that,covers,one,existing,windows;test,public,void,test,merge,large,window,covering,single,window,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,0,3,window,set,add,window,new,time,window,0,3,merge,function,assert,true,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,0,3
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringSingleWindow() throws Exception;1485250954;Test merging of a large new window that covers one existing windows.;@Test_	public void testMergeLargeWindowCoveringSingleWindow() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(0, 3)))__	};test,merging,of,a,large,new,window,that,covers,one,existing,windows;test,public,void,test,merge,large,window,covering,single,window,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,0,3,window,set,add,window,new,time,window,0,3,merge,function,assert,true,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,0,3
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringSingleWindow() throws Exception;1495484544;Test merging of a large new window that covers one existing windows.;@Test_	public void testMergeLargeWindowCoveringSingleWindow() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(0, 3)))__	};test,merging,of,a,large,new,window,that,covers,one,existing,windows;test,public,void,test,merge,large,window,covering,single,window,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,0,3,window,set,add,window,new,time,window,0,3,merge,function,assert,true,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,0,3
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringSingleWindow() throws Exception;1502726910;Test merging of a large new window that covers one existing windows.;@Test_	public void testMergeLargeWindowCoveringSingleWindow() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(0, 3)))__	};test,merging,of,a,large,new,window,that,covers,one,existing,windows;test,public,void,test,merge,large,window,covering,single,window,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,0,3,window,set,add,window,new,time,window,0,3,merge,function,assert,true,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,0,3
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringSingleWindow() throws Exception;1515177485;Test merging of a large new window that covers one existing windows.;@Test_	public void testMergeLargeWindowCoveringSingleWindow() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(0, 3)))__	};test,merging,of,a,large,new,window,that,covers,one,existing,windows;test,public,void,test,merge,large,window,covering,single,window,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,0,3,window,set,add,window,new,time,window,0,3,merge,function,assert,true,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,0,3
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringSingleWindow() throws Exception;1547737168;Test merging of a large new window that covers one existing windows.;@Test_	public void testMergeLargeWindowCoveringSingleWindow() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 2), windowSet.addWindow(new TimeWindow(1, 2), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(1, 2)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 2), windowSet.getStateWindow(new TimeWindow(0, 3)))__	};test,merging,of,a,large,new,window,that,covers,one,existing,windows;test,public,void,test,merge,large,window,covering,single,window,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,2,window,set,add,window,new,time,window,1,2,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,1,2,merge,function,reset,assert,equals,new,time,window,0,3,window,set,add,window,new,time,window,0,3,merge,function,assert,true,merge,function,has,merged,assert,equals,new,time,window,1,2,window,set,get,state,window,new,time,window,0,3
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception;1473960699;Test merging of a large new window that covers multiple existing windows.;@Test_	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception {_		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)))___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertThat(mergeFunction.mergedStateWindows(), anyOf(_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),_				containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))))__		assertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))))___	};test,merging,of,a,large,new,window,that,covers,multiple,existing,windows;test,public,void,test,merge,large,window,covering,multiple,windows,throws,exception,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,3,window,set,add,window,new,time,window,1,3,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,3,window,set,get,state,window,new,time,window,1,3,merge,function,reset,assert,equals,new,time,window,5,8,window,set,add,window,new,time,window,5,8,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,5,8,window,set,get,state,window,new,time,window,5,8,merge,function,reset,assert,equals,new,time,window,10,13,window,set,add,window,new,time,window,10,13,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,10,13,window,set,get,state,window,new,time,window,10,13,merge,function,reset,assert,equals,new,time,window,0,13,window,set,add,window,new,time,window,0,13,merge,function,assert,true,merge,function,has,merged,assert,that,merge,function,merged,state,windows,any,of,contains,in,any,order,new,time,window,0,3,new,time,window,5,8,contains,in,any,order,new,time,window,0,3,new,time,window,10,13,contains,in,any,order,new,time,window,5,8,new,time,window,10,13,assert,that,window,set,get,state,window,new,time,window,0,13,any,of,is,new,time,window,1,3,is,new,time,window,5,8,is,new,time,window,10,13
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception;1478005374;Test merging of a large new window that covers multiple existing windows.;@Test_	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertThat(mergeFunction.mergedStateWindows(), anyOf(_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),_				containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))))__		assertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))))__	};test,merging,of,a,large,new,window,that,covers,multiple,existing,windows;test,public,void,test,merge,large,window,covering,multiple,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,3,window,set,add,window,new,time,window,1,3,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,3,window,set,get,state,window,new,time,window,1,3,merge,function,reset,assert,equals,new,time,window,5,8,window,set,add,window,new,time,window,5,8,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,5,8,window,set,get,state,window,new,time,window,5,8,merge,function,reset,assert,equals,new,time,window,10,13,window,set,add,window,new,time,window,10,13,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,10,13,window,set,get,state,window,new,time,window,10,13,merge,function,reset,assert,equals,new,time,window,0,13,window,set,add,window,new,time,window,0,13,merge,function,assert,true,merge,function,has,merged,assert,that,merge,function,merged,state,windows,any,of,contains,in,any,order,new,time,window,0,3,new,time,window,5,8,contains,in,any,order,new,time,window,0,3,new,time,window,10,13,contains,in,any,order,new,time,window,5,8,new,time,window,10,13,assert,that,window,set,get,state,window,new,time,window,0,13,any,of,is,new,time,window,1,3,is,new,time,window,5,8,is,new,time,window,10,13
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception;1485170307;Test merging of a large new window that covers multiple existing windows.;@Test_	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertThat(mergeFunction.mergedStateWindows(), anyOf(_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),_				containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))))__		assertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))))__	};test,merging,of,a,large,new,window,that,covers,multiple,existing,windows;test,public,void,test,merge,large,window,covering,multiple,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,3,window,set,add,window,new,time,window,1,3,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,3,window,set,get,state,window,new,time,window,1,3,merge,function,reset,assert,equals,new,time,window,5,8,window,set,add,window,new,time,window,5,8,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,5,8,window,set,get,state,window,new,time,window,5,8,merge,function,reset,assert,equals,new,time,window,10,13,window,set,add,window,new,time,window,10,13,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,10,13,window,set,get,state,window,new,time,window,10,13,merge,function,reset,assert,equals,new,time,window,0,13,window,set,add,window,new,time,window,0,13,merge,function,assert,true,merge,function,has,merged,assert,that,merge,function,merged,state,windows,any,of,contains,in,any,order,new,time,window,0,3,new,time,window,5,8,contains,in,any,order,new,time,window,0,3,new,time,window,10,13,contains,in,any,order,new,time,window,5,8,new,time,window,10,13,assert,that,window,set,get,state,window,new,time,window,0,13,any,of,is,new,time,window,1,3,is,new,time,window,5,8,is,new,time,window,10,13
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception;1485250954;Test merging of a large new window that covers multiple existing windows.;@Test_	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertThat(mergeFunction.mergedStateWindows(), anyOf(_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),_				containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))))__		assertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))))__	};test,merging,of,a,large,new,window,that,covers,multiple,existing,windows;test,public,void,test,merge,large,window,covering,multiple,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,3,window,set,add,window,new,time,window,1,3,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,3,window,set,get,state,window,new,time,window,1,3,merge,function,reset,assert,equals,new,time,window,5,8,window,set,add,window,new,time,window,5,8,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,5,8,window,set,get,state,window,new,time,window,5,8,merge,function,reset,assert,equals,new,time,window,10,13,window,set,add,window,new,time,window,10,13,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,10,13,window,set,get,state,window,new,time,window,10,13,merge,function,reset,assert,equals,new,time,window,0,13,window,set,add,window,new,time,window,0,13,merge,function,assert,true,merge,function,has,merged,assert,that,merge,function,merged,state,windows,any,of,contains,in,any,order,new,time,window,0,3,new,time,window,5,8,contains,in,any,order,new,time,window,0,3,new,time,window,10,13,contains,in,any,order,new,time,window,5,8,new,time,window,10,13,assert,that,window,set,get,state,window,new,time,window,0,13,any,of,is,new,time,window,1,3,is,new,time,window,5,8,is,new,time,window,10,13
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception;1495484544;Test merging of a large new window that covers multiple existing windows.;@Test_	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertThat(mergeFunction.mergedStateWindows(), anyOf(_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),_				containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))))__		assertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))))__	};test,merging,of,a,large,new,window,that,covers,multiple,existing,windows;test,public,void,test,merge,large,window,covering,multiple,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,3,window,set,add,window,new,time,window,1,3,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,3,window,set,get,state,window,new,time,window,1,3,merge,function,reset,assert,equals,new,time,window,5,8,window,set,add,window,new,time,window,5,8,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,5,8,window,set,get,state,window,new,time,window,5,8,merge,function,reset,assert,equals,new,time,window,10,13,window,set,add,window,new,time,window,10,13,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,10,13,window,set,get,state,window,new,time,window,10,13,merge,function,reset,assert,equals,new,time,window,0,13,window,set,add,window,new,time,window,0,13,merge,function,assert,true,merge,function,has,merged,assert,that,merge,function,merged,state,windows,any,of,contains,in,any,order,new,time,window,0,3,new,time,window,5,8,contains,in,any,order,new,time,window,0,3,new,time,window,10,13,contains,in,any,order,new,time,window,5,8,new,time,window,10,13,assert,that,window,set,get,state,window,new,time,window,0,13,any,of,is,new,time,window,1,3,is,new,time,window,5,8,is,new,time,window,10,13
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception;1502726910;Test merging of a large new window that covers multiple existing windows.;@Test_	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertThat(mergeFunction.mergedStateWindows(), anyOf(_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),_				containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))))__		assertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))))__	};test,merging,of,a,large,new,window,that,covers,multiple,existing,windows;test,public,void,test,merge,large,window,covering,multiple,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,3,window,set,add,window,new,time,window,1,3,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,3,window,set,get,state,window,new,time,window,1,3,merge,function,reset,assert,equals,new,time,window,5,8,window,set,add,window,new,time,window,5,8,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,5,8,window,set,get,state,window,new,time,window,5,8,merge,function,reset,assert,equals,new,time,window,10,13,window,set,add,window,new,time,window,10,13,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,10,13,window,set,get,state,window,new,time,window,10,13,merge,function,reset,assert,equals,new,time,window,0,13,window,set,add,window,new,time,window,0,13,merge,function,assert,true,merge,function,has,merged,assert,that,merge,function,merged,state,windows,any,of,contains,in,any,order,new,time,window,0,3,new,time,window,5,8,contains,in,any,order,new,time,window,0,3,new,time,window,10,13,contains,in,any,order,new,time,window,5,8,new,time,window,10,13,assert,that,window,set,get,state,window,new,time,window,0,13,any,of,is,new,time,window,1,3,is,new,time,window,5,8,is,new,time,window,10,13
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception;1515177485;Test merging of a large new window that covers multiple existing windows.;@Test_	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertThat(mergeFunction.mergedStateWindows(), anyOf(_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),_				containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))))__		assertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))))__	};test,merging,of,a,large,new,window,that,covers,multiple,existing,windows;test,public,void,test,merge,large,window,covering,multiple,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,3,window,set,add,window,new,time,window,1,3,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,3,window,set,get,state,window,new,time,window,1,3,merge,function,reset,assert,equals,new,time,window,5,8,window,set,add,window,new,time,window,5,8,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,5,8,window,set,get,state,window,new,time,window,5,8,merge,function,reset,assert,equals,new,time,window,10,13,window,set,add,window,new,time,window,10,13,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,10,13,window,set,get,state,window,new,time,window,10,13,merge,function,reset,assert,equals,new,time,window,0,13,window,set,add,window,new,time,window,0,13,merge,function,assert,true,merge,function,has,merged,assert,that,merge,function,merged,state,windows,any,of,contains,in,any,order,new,time,window,0,3,new,time,window,5,8,contains,in,any,order,new,time,window,0,3,new,time,window,10,13,contains,in,any,order,new,time,window,5,8,new,time,window,10,13,assert,that,window,set,get,state,window,new,time,window,0,13,any,of,is,new,time,window,1,3,is,new,time,window,5,8,is,new,time,window,10,13
MergingWindowSetTest -> @Test 	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception;1547737168;Test merging of a large new window that covers multiple existing windows.;@Test_	public void testMergeLargeWindowCoveringMultipleWindows() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)))___		mergeFunction.reset()__		assertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction))__		assertFalse(mergeFunction.hasMerged())__		assertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)))___		__		mergeFunction.reset()__		assertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction))__		assertTrue(mergeFunction.hasMerged())__		assertThat(mergeFunction.mergedStateWindows(), anyOf(_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),_				containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),_				containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))))__		assertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))))__	};test,merging,of,a,large,new,window,that,covers,multiple,existing,windows;test,public,void,test,merge,large,window,covering,multiple,windows,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,event,time,session,windows,with,gap,time,milliseconds,3,mock,state,testing,merge,function,merge,function,new,testing,merge,function,merge,function,reset,assert,equals,new,time,window,1,3,window,set,add,window,new,time,window,1,3,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,1,3,window,set,get,state,window,new,time,window,1,3,merge,function,reset,assert,equals,new,time,window,5,8,window,set,add,window,new,time,window,5,8,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,5,8,window,set,get,state,window,new,time,window,5,8,merge,function,reset,assert,equals,new,time,window,10,13,window,set,add,window,new,time,window,10,13,merge,function,assert,false,merge,function,has,merged,assert,equals,new,time,window,10,13,window,set,get,state,window,new,time,window,10,13,merge,function,reset,assert,equals,new,time,window,0,13,window,set,add,window,new,time,window,0,13,merge,function,assert,true,merge,function,has,merged,assert,that,merge,function,merged,state,windows,any,of,contains,in,any,order,new,time,window,0,3,new,time,window,5,8,contains,in,any,order,new,time,window,0,3,new,time,window,10,13,contains,in,any,order,new,time,window,5,8,new,time,window,10,13,assert,that,window,set,get,state,window,new,time,window,0,13,any,of,is,new,time,window,1,3,is,new,time,window,5,8,is,new,time,window,10,13
MergingWindowSetTest -> NonEagerlyMergingWindowAssigner -> public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1485170307;Merge overlapping {@link TimeWindow}s.;public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__			TimeWindow earliestStart = null___			for (TimeWindow win : windows) {_				if (earliestStart == null) {_					earliestStart = win__				} else if (win.getStart() < earliestStart.getStart()) {_					earliestStart = win__				}_			}__			List<TimeWindow> associatedWindows = new ArrayList<>()___			for (TimeWindow win : windows) {_				if (win.getStart() < earliestStart.getEnd() && win.getStart() >= earliestStart.getStart()) {_					associatedWindows.add(win)__				}_			}__			TimeWindow target = new TimeWindow(earliestStart.getStart(), earliestStart.getEnd() + 1)___			if (associatedWindows.size() > 1) {_				c.merge(associatedWindows, target)__			}_		};merge,overlapping,link,time,window,s;public,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,time,window,earliest,start,null,for,time,window,win,windows,if,earliest,start,null,earliest,start,win,else,if,win,get,start,earliest,start,get,start,earliest,start,win,list,time,window,associated,windows,new,array,list,for,time,window,win,windows,if,win,get,start,earliest,start,get,end,win,get,start,earliest,start,get,start,associated,windows,add,win,time,window,target,new,time,window,earliest,start,get,start,earliest,start,get,end,1,if,associated,windows,size,1,c,merge,associated,windows,target
MergingWindowSetTest -> NonEagerlyMergingWindowAssigner -> public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1485250954;Merge overlapping {@link TimeWindow}s.;public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__			TimeWindow earliestStart = null___			for (TimeWindow win : windows) {_				if (earliestStart == null) {_					earliestStart = win__				} else if (win.getStart() < earliestStart.getStart()) {_					earliestStart = win__				}_			}__			List<TimeWindow> associatedWindows = new ArrayList<>()___			for (TimeWindow win : windows) {_				if (win.getStart() < earliestStart.getEnd() && win.getStart() >= earliestStart.getStart()) {_					associatedWindows.add(win)__				}_			}__			TimeWindow target = new TimeWindow(earliestStart.getStart(), earliestStart.getEnd() + 1)___			if (associatedWindows.size() > 1) {_				c.merge(associatedWindows, target)__			}_		};merge,overlapping,link,time,window,s;public,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,time,window,earliest,start,null,for,time,window,win,windows,if,earliest,start,null,earliest,start,win,else,if,win,get,start,earliest,start,get,start,earliest,start,win,list,time,window,associated,windows,new,array,list,for,time,window,win,windows,if,win,get,start,earliest,start,get,end,win,get,start,earliest,start,get,start,associated,windows,add,win,time,window,target,new,time,window,earliest,start,get,start,earliest,start,get,end,1,if,associated,windows,size,1,c,merge,associated,windows,target
MergingWindowSetTest -> NonEagerlyMergingWindowAssigner -> public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1495484544;Merge overlapping {@link TimeWindow}s.;public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__			TimeWindow earliestStart = null___			for (TimeWindow win : windows) {_				if (earliestStart == null) {_					earliestStart = win__				} else if (win.getStart() < earliestStart.getStart()) {_					earliestStart = win__				}_			}__			List<TimeWindow> associatedWindows = new ArrayList<>()___			for (TimeWindow win : windows) {_				if (win.getStart() < earliestStart.getEnd() && win.getStart() >= earliestStart.getStart()) {_					associatedWindows.add(win)__				}_			}__			TimeWindow target = new TimeWindow(earliestStart.getStart(), earliestStart.getEnd() + 1)___			if (associatedWindows.size() > 1) {_				c.merge(associatedWindows, target)__			}_		};merge,overlapping,link,time,window,s;public,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,time,window,earliest,start,null,for,time,window,win,windows,if,earliest,start,null,earliest,start,win,else,if,win,get,start,earliest,start,get,start,earliest,start,win,list,time,window,associated,windows,new,array,list,for,time,window,win,windows,if,win,get,start,earliest,start,get,end,win,get,start,earliest,start,get,start,associated,windows,add,win,time,window,target,new,time,window,earliest,start,get,start,earliest,start,get,end,1,if,associated,windows,size,1,c,merge,associated,windows,target
MergingWindowSetTest -> NonEagerlyMergingWindowAssigner -> public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1502726910;Merge overlapping {@link TimeWindow}s.;public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__			TimeWindow earliestStart = null___			for (TimeWindow win : windows) {_				if (earliestStart == null) {_					earliestStart = win__				} else if (win.getStart() < earliestStart.getStart()) {_					earliestStart = win__				}_			}__			List<TimeWindow> associatedWindows = new ArrayList<>()___			for (TimeWindow win : windows) {_				if (win.getStart() < earliestStart.getEnd() && win.getStart() >= earliestStart.getStart()) {_					associatedWindows.add(win)__				}_			}__			TimeWindow target = new TimeWindow(earliestStart.getStart(), earliestStart.getEnd() + 1)___			if (associatedWindows.size() > 1) {_				c.merge(associatedWindows, target)__			}_		};merge,overlapping,link,time,window,s;public,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,time,window,earliest,start,null,for,time,window,win,windows,if,earliest,start,null,earliest,start,win,else,if,win,get,start,earliest,start,get,start,earliest,start,win,list,time,window,associated,windows,new,array,list,for,time,window,win,windows,if,win,get,start,earliest,start,get,end,win,get,start,earliest,start,get,start,associated,windows,add,win,time,window,target,new,time,window,earliest,start,get,start,earliest,start,get,end,1,if,associated,windows,size,1,c,merge,associated,windows,target
MergingWindowSetTest -> NonEagerlyMergingWindowAssigner -> public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1515177485;Merge overlapping {@link TimeWindow}s.;public void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__			TimeWindow earliestStart = null___			for (TimeWindow win : windows) {_				if (earliestStart == null) {_					earliestStart = win__				} else if (win.getStart() < earliestStart.getStart()) {_					earliestStart = win__				}_			}__			List<TimeWindow> associatedWindows = new ArrayList<>()___			for (TimeWindow win : windows) {_				if (win.getStart() < earliestStart.getEnd() && win.getStart() >= earliestStart.getStart()) {_					associatedWindows.add(win)__				}_			}__			TimeWindow target = new TimeWindow(earliestStart.getStart(), earliestStart.getEnd() + 1)___			if (associatedWindows.size() > 1) {_				c.merge(associatedWindows, target)__			}_		};merge,overlapping,link,time,window,s;public,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,time,window,earliest,start,null,for,time,window,win,windows,if,earliest,start,null,earliest,start,win,else,if,win,get,start,earliest,start,get,start,earliest,start,win,list,time,window,associated,windows,new,array,list,for,time,window,win,windows,if,win,get,start,earliest,start,get,end,win,get,start,earliest,start,get,start,associated,windows,add,win,time,window,target,new,time,window,earliest,start,get,start,earliest,start,get,end,1,if,associated,windows,size,1,c,merge,associated,windows,target
MergingWindowSetTest -> @Test 	public void testNonEagerMerging() throws Exception;1485170307;This test uses a special (misbehaving) {@code MergingWindowAssigner} that produces cases_where windows that don't overlap with the newly added window are being merged. We verify_that the merging window set is nevertheless correct and contains all added windows.;@Test_	public void testNonEagerMerging() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet =_				new MergingWindowSet<>(new NonEagerlyMergingWindowAssigner(3000), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		TimeWindow result___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(0, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(2, 5), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(1, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(10, 12), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))__	};this,test,uses,a,special,misbehaving,code,merging,window,assigner,that,produces,cases,where,windows,that,don,t,overlap,with,the,newly,added,window,are,being,merged,we,verify,that,the,merging,window,set,is,nevertheless,correct,and,contains,all,added,windows;test,public,void,test,non,eager,merging,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,new,non,eagerly,merging,window,assigner,3000,mock,state,testing,merge,function,merge,function,new,testing,merge,function,time,window,result,merge,function,reset,result,window,set,add,window,new,time,window,0,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,2,5,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,1,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,10,12,merge,function,assert,not,null,window,set,get,state,window,result
MergingWindowSetTest -> @Test 	public void testNonEagerMerging() throws Exception;1485250954;This test uses a special (misbehaving) {@code MergingWindowAssigner} that produces cases_where windows that don't overlap with the newly added window are being merged. We verify_that the merging window set is nevertheless correct and contains all added windows.;@Test_	public void testNonEagerMerging() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet =_				new MergingWindowSet<>(new NonEagerlyMergingWindowAssigner(3000), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		TimeWindow result___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(0, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(2, 5), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(1, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(10, 12), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))__	};this,test,uses,a,special,misbehaving,code,merging,window,assigner,that,produces,cases,where,windows,that,don,t,overlap,with,the,newly,added,window,are,being,merged,we,verify,that,the,merging,window,set,is,nevertheless,correct,and,contains,all,added,windows;test,public,void,test,non,eager,merging,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,new,non,eagerly,merging,window,assigner,3000,mock,state,testing,merge,function,merge,function,new,testing,merge,function,time,window,result,merge,function,reset,result,window,set,add,window,new,time,window,0,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,2,5,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,1,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,10,12,merge,function,assert,not,null,window,set,get,state,window,result
MergingWindowSetTest -> @Test 	public void testNonEagerMerging() throws Exception;1495484544;This test uses a special (misbehaving) {@code MergingWindowAssigner} that produces cases_where windows that don't overlap with the newly added window are being merged. We verify_that the merging window set is nevertheless correct and contains all added windows.;@Test_	public void testNonEagerMerging() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet =_				new MergingWindowSet<>(new NonEagerlyMergingWindowAssigner(3000), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		TimeWindow result___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(0, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(2, 5), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(1, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(10, 12), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))__	};this,test,uses,a,special,misbehaving,code,merging,window,assigner,that,produces,cases,where,windows,that,don,t,overlap,with,the,newly,added,window,are,being,merged,we,verify,that,the,merging,window,set,is,nevertheless,correct,and,contains,all,added,windows;test,public,void,test,non,eager,merging,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,new,non,eagerly,merging,window,assigner,3000,mock,state,testing,merge,function,merge,function,new,testing,merge,function,time,window,result,merge,function,reset,result,window,set,add,window,new,time,window,0,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,2,5,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,1,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,10,12,merge,function,assert,not,null,window,set,get,state,window,result
MergingWindowSetTest -> @Test 	public void testNonEagerMerging() throws Exception;1502726910;This test uses a special (misbehaving) {@code MergingWindowAssigner} that produces cases_where windows that don't overlap with the newly added window are being merged. We verify_that the merging window set is nevertheless correct and contains all added windows.;@Test_	public void testNonEagerMerging() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet =_				new MergingWindowSet<>(new NonEagerlyMergingWindowAssigner(3000), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		TimeWindow result___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(0, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(2, 5), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(1, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(10, 12), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))__	};this,test,uses,a,special,misbehaving,code,merging,window,assigner,that,produces,cases,where,windows,that,don,t,overlap,with,the,newly,added,window,are,being,merged,we,verify,that,the,merging,window,set,is,nevertheless,correct,and,contains,all,added,windows;test,public,void,test,non,eager,merging,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,new,non,eagerly,merging,window,assigner,3000,mock,state,testing,merge,function,merge,function,new,testing,merge,function,time,window,result,merge,function,reset,result,window,set,add,window,new,time,window,0,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,2,5,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,1,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,10,12,merge,function,assert,not,null,window,set,get,state,window,result
MergingWindowSetTest -> @Test 	public void testNonEagerMerging() throws Exception;1515177485;This test uses a special (misbehaving) {@code MergingWindowAssigner} that produces cases_where windows that don't overlap with the newly added window are being merged. We verify_that the merging window set is nevertheless correct and contains all added windows.;@Test_	public void testNonEagerMerging() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet =_				new MergingWindowSet<>(new NonEagerlyMergingWindowAssigner(3000), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		TimeWindow result___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(0, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(2, 5), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(1, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(10, 12), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))__	};this,test,uses,a,special,misbehaving,code,merging,window,assigner,that,produces,cases,where,windows,that,don,t,overlap,with,the,newly,added,window,are,being,merged,we,verify,that,the,merging,window,set,is,nevertheless,correct,and,contains,all,added,windows;test,public,void,test,non,eager,merging,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,new,non,eagerly,merging,window,assigner,3000,mock,state,testing,merge,function,merge,function,new,testing,merge,function,time,window,result,merge,function,reset,result,window,set,add,window,new,time,window,0,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,2,5,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,1,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,10,12,merge,function,assert,not,null,window,set,get,state,window,result
MergingWindowSetTest -> @Test 	public void testNonEagerMerging() throws Exception;1547737168;This test uses a special (misbehaving) {@code MergingWindowAssigner} that produces cases_where windows that don't overlap with the newly added window are being merged. We verify_that the merging window set is nevertheless correct and contains all added windows.;@Test_	public void testNonEagerMerging() throws Exception {_		@SuppressWarnings("unchecked")_		ListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class)___		MergingWindowSet<TimeWindow> windowSet =_				new MergingWindowSet<>(new NonEagerlyMergingWindowAssigner(3000), mockState)___		TestingMergeFunction mergeFunction = new TestingMergeFunction()___		TimeWindow result___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(0, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(2, 5), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(1, 2), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))___		mergeFunction.reset()__		result = windowSet.addWindow(new TimeWindow(10, 12), mergeFunction)__		assertNotNull(windowSet.getStateWindow(result))__	};this,test,uses,a,special,misbehaving,code,merging,window,assigner,that,produces,cases,where,windows,that,don,t,overlap,with,the,newly,added,window,are,being,merged,we,verify,that,the,merging,window,set,is,nevertheless,correct,and,contains,all,added,windows;test,public,void,test,non,eager,merging,throws,exception,suppress,warnings,unchecked,list,state,tuple2,time,window,time,window,mock,state,mock,list,state,class,merging,window,set,time,window,window,set,new,merging,window,set,new,non,eagerly,merging,window,assigner,3000,mock,state,testing,merge,function,merge,function,new,testing,merge,function,time,window,result,merge,function,reset,result,window,set,add,window,new,time,window,0,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,2,5,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,1,2,merge,function,assert,not,null,window,set,get,state,window,result,merge,function,reset,result,window,set,add,window,new,time,window,10,12,merge,function,assert,not,null,window,set,get,state,window,result
