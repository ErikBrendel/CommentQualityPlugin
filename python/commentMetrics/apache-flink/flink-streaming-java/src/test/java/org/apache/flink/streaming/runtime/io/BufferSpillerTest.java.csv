commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;// ------------------------------------------------------------------------ // Setup / Cleanup // ------------------------------------------------------------------------ @BeforeClass public static void setupIOManager() {     ioManager = new IOManagerAsync(). }
false;public,static;0;4;;@AfterClass public static void shutdownIOManager() {     ioManager.shutdown(). }
false;public;0;4;;@Before public void createSpiller() throws IOException {     spiller = new BufferSpiller(ioManager, PAGE_SIZE). }
false;public;0;11;;@After public void cleanupSpiller() throws IOException {     if (spiller != null) {         spiller.close().         assertFalse(spiller.getCurrentChannel().isOpen()).         assertFalse(spiller.getCurrentSpillFile().exists()).     }     checkNoTempFilesRemain(). }
false;public;0;4;;@Override public BufferBlocker createBufferBlocker() {     return spiller. }
true;public;0;11;/**  * Tests that the static HEADER_SIZE field has valid header size.  */ ;/**  * Tests that the static HEADER_SIZE field has valid header size.  */ @Test public void testHeaderSizeStaticField() throws Exception {     int size = 13.     BufferOrEvent boe = generateRandomBuffer(size, 0).     spiller.add(boe).     assertEquals("Changed the header format, but did not adjust the HEADER_SIZE field", BufferSpiller.HEADER_SIZE + size, spiller.getBytesBlocked()). }
false;private,static;0;10;;private static void checkNoTempFilesRemain() {     // validate that all temp files have been removed     for (File dir : ioManager.getSpillingDirectories()) {         for (String file : dir.list()) {             if (file != null && !(file.equals(".") || file.equals(".."))) {                 fail("barrier buffer did not clean up temp files. remaining file: " + file).             }         }     } }
