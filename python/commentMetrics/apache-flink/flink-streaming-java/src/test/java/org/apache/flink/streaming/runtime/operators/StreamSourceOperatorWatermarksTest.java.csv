commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testEmitMaxWatermarkForFiniteSource() throws Exception {     // regular stream source operator     StreamSource<String, FiniteSource<String>> operator = new StreamSource<>(new FiniteSource<String>()).     final List<StreamElement> output = new ArrayList<>().     setupSourceOperator(operator, TimeCharacteristic.EventTime, 0).     operator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output)).     assertEquals(1, output.size()).     assertEquals(Watermark.MAX_WATERMARK, output.get(0)). }
false;public;0;17;;@Test public void testNoMaxWatermarkOnImmediateCancel() throws Exception {     final List<StreamElement> output = new ArrayList<>().     // regular stream source operator     final StreamSource<String, InfiniteSource<String>> operator = new StreamSource<>(new InfiniteSource<String>()).     setupSourceOperator(operator, TimeCharacteristic.EventTime, 0).     operator.cancel().     // run and exit     operator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output)).     assertTrue(output.isEmpty()). }
false;public;0;7;;@Override public void run() {     try {         Thread.sleep(200).     } catch (InterruptedException ignored) {     }     operator.cancel(). }
false;public;0;30;;@Test public void testNoMaxWatermarkOnAsyncCancel() throws Exception {     final List<StreamElement> output = new ArrayList<>().     // regular stream source operator     final StreamSource<String, InfiniteSource<String>> operator = new StreamSource<>(new InfiniteSource<String>()).     setupSourceOperator(operator, TimeCharacteristic.EventTime, 0).     // trigger an async cancel in a bit     new Thread("canceler") {          @Override         public void run() {             try {                 Thread.sleep(200).             } catch (InterruptedException ignored) {             }             operator.cancel().         }     }.start().     // run and wait to be canceled     try {         operator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output)).     } catch (InterruptedException ignored) {     }     assertTrue(output.isEmpty()). }
false;public;0;17;;@Test public void testNoMaxWatermarkOnImmediateStop() throws Exception {     final List<StreamElement> output = new ArrayList<>().     // regular stream source operator     final StoppableStreamSource<String, InfiniteSource<String>> operator = new StoppableStreamSource<>(new InfiniteSource<String>()).     setupSourceOperator(operator, TimeCharacteristic.EventTime, 0).     operator.stop().     // run and stop     operator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output)).     assertTrue(output.isEmpty()). }
false;public;0;7;;@Override public void run() {     try {         Thread.sleep(200).     } catch (InterruptedException ignored) {     }     operator.stop(). }
false;public;0;27;;@Test public void testNoMaxWatermarkOnAsyncStop() throws Exception {     final List<StreamElement> output = new ArrayList<>().     // regular stream source operator     final StoppableStreamSource<String, InfiniteSource<String>> operator = new StoppableStreamSource<>(new InfiniteSource<String>()).     setupSourceOperator(operator, TimeCharacteristic.EventTime, 0).     // trigger an async cancel in a bit     new Thread("canceler") {          @Override         public void run() {             try {                 Thread.sleep(200).             } catch (InterruptedException ignored) {             }             operator.stop().         }     }.start().     // run and wait to be stopped     operator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output)).     assertTrue(output.isEmpty()). }
false;public;0;40;;@Test public void testAutomaticWatermarkContext() throws Exception {     // regular stream source operator     final StoppableStreamSource<String, InfiniteSource<String>> operator = new StoppableStreamSource<>(new InfiniteSource<String>()).     long watermarkInterval = 10.     TestProcessingTimeService processingTimeService = new TestProcessingTimeService().     processingTimeService.setCurrentTime(0).     setupSourceOperator(operator, TimeCharacteristic.IngestionTime, watermarkInterval, processingTimeService).     final List<StreamElement> output = new ArrayList<>().     StreamSourceContexts.getSourceContext(TimeCharacteristic.IngestionTime, operator.getContainingTask().getProcessingTimeService(), operator.getContainingTask().getCheckpointLock(), operator.getContainingTask().getStreamStatusMaintainer(), new CollectorOutput<String>(output), operator.getExecutionConfig().getAutoWatermarkInterval(), -1).     for (long i = 1. i < 100. i += watermarkInterval) {         processingTimeService.setCurrentTime(i).     }     assertTrue(output.size() == 9).     long nextWatermark = 0.     for (StreamElement el : output) {         nextWatermark += watermarkInterval.         Watermark wm = (Watermark) el.         assertTrue(wm.getTimestamp() == nextWatermark).     } }
false;private,static;3;6;;// ------------------------------------------------------------------------ @SuppressWarnings("unchecked") private static <T> void setupSourceOperator(StreamSource<T, ?> operator, TimeCharacteristic timeChar, long watermarkInterval) throws Exception {     setupSourceOperator(operator, timeChar, watermarkInterval, new TestProcessingTimeService()). }
false;private,static;4;29;;@SuppressWarnings("unchecked") private static <T> void setupSourceOperator(StreamSource<T, ?> operator, TimeCharacteristic timeChar, long watermarkInterval, final ProcessingTimeService timeProvider) throws Exception {     ExecutionConfig executionConfig = new ExecutionConfig().     executionConfig.setAutoWatermarkInterval(watermarkInterval).     StreamConfig cfg = new StreamConfig(new Configuration()).     cfg.setStateBackend(new MemoryStateBackend()).     cfg.setTimeCharacteristic(timeChar).     cfg.setOperatorID(new OperatorID()).     Environment env = new DummyEnvironment("MockTwoInputTask", 1, 0).     StreamStatusMaintainer streamStatusMaintainer = mock(StreamStatusMaintainer.class).     when(streamStatusMaintainer.getStreamStatus()).thenReturn(StreamStatus.ACTIVE).     MockStreamTask mockTask = new MockStreamTaskBuilder(env).setConfig(cfg).setExecutionConfig(executionConfig).setStreamStatusMaintainer(streamStatusMaintainer).setProcessingTimeService(timeProvider).build().     operator.setup(mockTask, cfg, (Output<StreamRecord<T>>) mock(Output.class)). }
false;public;1;2;;@Override public void run(SourceContext<T> ctx) { }
false;public;0;2;;@Override public void cancel() { }
false;public;0;2;;@Override public void stop() { }
false;public;1;6;;@Override public void run(SourceContext<T> ctx) throws Exception {     while (running) {         Thread.sleep(20).     } }
false;public;0;4;;@Override public void cancel() {     running = false. }
false;public;0;4;;@Override public void stop() {     running = false. }
