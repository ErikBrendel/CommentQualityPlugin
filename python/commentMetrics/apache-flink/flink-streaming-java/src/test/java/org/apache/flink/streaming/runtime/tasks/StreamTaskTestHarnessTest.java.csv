commented;modifiers;parameterAmount;loc;comment;code
false;public;0;72;;@Test public void testMultipleSetupsThrowsException() {     StreamTaskTestHarness<String> harness.     harness = new StreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO).     harness.setupOutputForSingletonOperatorChain().     try {         harness.setupOutputForSingletonOperatorChain().         Assert.fail().     } catch (IllegalStateException expected) {     // expected     }     try {         harness.setupOperatorChain(new OperatorID(), new TestOperator()).         Assert.fail().     } catch (IllegalStateException expected) {     // expected     }     try {         harness.setupOperatorChain(new OperatorID(), new TwoInputTestOperator()).         Assert.fail().     } catch (IllegalStateException expected) {     // expected     }     harness = new StreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO).     harness.setupOperatorChain(new OperatorID(), new TestOperator()).chain(new OperatorID(), new TestOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).     try {         harness.setupOutputForSingletonOperatorChain().         Assert.fail().     } catch (IllegalStateException expected) {     // expected     }     try {         harness.setupOperatorChain(new OperatorID(), new TestOperator()).         Assert.fail().     } catch (IllegalStateException expected) {     // expected     }     try {         harness.setupOperatorChain(new OperatorID(), new TwoInputTestOperator()).         Assert.fail().     } catch (IllegalStateException expected) {     // expected     }     harness = new StreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO).     harness.setupOperatorChain(new OperatorID(), new TwoInputTestOperator()).chain(new OperatorID(), new TestOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).     try {         harness.setupOutputForSingletonOperatorChain().         Assert.fail().     } catch (IllegalStateException expected) {     // expected     }     try {         harness.setupOperatorChain(new OperatorID(), new TestOperator()).         Assert.fail().     } catch (IllegalStateException expected) {     // expected     }     try {         harness.setupOperatorChain(new OperatorID(), new TwoInputTestOperator()).         Assert.fail().     } catch (IllegalStateException expected) {     // expected     } }
false;public;1;3;;@Override public void processElement(StreamRecord<String> element) throws Exception { }
false;public;1;3;;@Override public void processElement1(StreamRecord<String> element) throws Exception { }
false;public;1;3;;@Override public void processElement2(StreamRecord<String> element) throws Exception { }
