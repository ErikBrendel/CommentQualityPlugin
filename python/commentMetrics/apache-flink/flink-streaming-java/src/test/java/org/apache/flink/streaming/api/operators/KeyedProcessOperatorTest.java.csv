# id;timestamp;commentText;codeText;commentWords;codeWords
KeyedProcessOperatorTest -> @Test 	public void testSideOutput() throws Exception;1506259751;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {_		KeyedProcessOperator<Integer, Integer, String> operator =_			new KeyedProcessOperator<>(new SideOutputProcessFunction())___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				operator, new IdentityKeySelector<>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(42, 17L ))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("IN:42", 17L ))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput = new ConcurrentLinkedQueue<>()__		expectedIntSideOutput.add(new StreamRecord<>(42, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedIntSideOutput,_			intSideOutput)___		ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput = new ConcurrentLinkedQueue<>()__		expectedLongSideOutput.add(new StreamRecord<>(42L, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedLongSideOutput,_			longSideOutput)___		testHarness.close()__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,side,output,process,function,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,42,17l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,in,42,17l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,concurrent,linked,queue,stream,record,integer,expected,int,side,output,new,concurrent,linked,queue,expected,int,side,output,add,new,stream,record,42,17l,concurrent,linked,queue,stream,record,integer,int,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,int,side,output,int,side,output,concurrent,linked,queue,stream,record,long,expected,long,side,output,new,concurrent,linked,queue,expected,long,side,output,add,new,stream,record,42l,17l,concurrent,linked,queue,stream,record,long,long,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,long,side,output,long,side,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testSideOutput() throws Exception;1508857182;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {_		KeyedProcessOperator<Integer, Integer, String> operator =_			new KeyedProcessOperator<>(new SideOutputProcessFunction())___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				operator, new IdentityKeySelector<>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(42, 17L ))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("IN:42", 17L ))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput = new ConcurrentLinkedQueue<>()__		expectedIntSideOutput.add(new StreamRecord<>(42, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedIntSideOutput,_			intSideOutput)___		ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput = new ConcurrentLinkedQueue<>()__		expectedLongSideOutput.add(new StreamRecord<>(42L, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedLongSideOutput,_			longSideOutput)___		testHarness.close()__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,side,output,process,function,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,42,17l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,in,42,17l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,concurrent,linked,queue,stream,record,integer,expected,int,side,output,new,concurrent,linked,queue,expected,int,side,output,add,new,stream,record,42,17l,concurrent,linked,queue,stream,record,integer,int,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,int,side,output,int,side,output,concurrent,linked,queue,stream,record,long,expected,long,side,output,new,concurrent,linked,queue,expected,long,side,output,add,new,stream,record,42l,17l,concurrent,linked,queue,stream,record,long,long,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,long,side,output,long,side,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testSideOutput() throws Exception;1509723634;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {_		KeyedProcessOperator<Integer, Integer, String> operator =_			new KeyedProcessOperator<>(new SideOutputProcessFunction())___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				operator, new IdentityKeySelector<>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(42, 17L ))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("IN:42", 17L ))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput = new ConcurrentLinkedQueue<>()__		expectedIntSideOutput.add(new StreamRecord<>(42, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedIntSideOutput,_			intSideOutput)___		ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput = new ConcurrentLinkedQueue<>()__		expectedLongSideOutput.add(new StreamRecord<>(42L, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedLongSideOutput,_			longSideOutput)___		testHarness.close()__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,side,output,process,function,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,42,17l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,in,42,17l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,concurrent,linked,queue,stream,record,integer,expected,int,side,output,new,concurrent,linked,queue,expected,int,side,output,add,new,stream,record,42,17l,concurrent,linked,queue,stream,record,integer,int,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,int,side,output,int,side,output,concurrent,linked,queue,stream,record,long,expected,long,side,output,new,concurrent,linked,queue,expected,long,side,output,add,new,stream,record,42l,17l,concurrent,linked,queue,stream,record,long,long,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,long,side,output,long,side,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testSideOutput() throws Exception;1519567828;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {_		KeyedProcessOperator<Integer, Integer, String> operator =_			new KeyedProcessOperator<>(new SideOutputProcessFunction())___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				operator, new IdentityKeySelector<>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(42, 17L ))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("IN:42", 17L ))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput = new ConcurrentLinkedQueue<>()__		expectedIntSideOutput.add(new StreamRecord<>(42, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedIntSideOutput,_			intSideOutput)___		ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput = new ConcurrentLinkedQueue<>()__		expectedLongSideOutput.add(new StreamRecord<>(42L, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedLongSideOutput,_			longSideOutput)___		testHarness.close()__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,side,output,process,function,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,42,17l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,in,42,17l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,concurrent,linked,queue,stream,record,integer,expected,int,side,output,new,concurrent,linked,queue,expected,int,side,output,add,new,stream,record,42,17l,concurrent,linked,queue,stream,record,integer,int,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,int,side,output,int,side,output,concurrent,linked,queue,stream,record,long,expected,long,side,output,new,concurrent,linked,queue,expected,long,side,output,add,new,stream,record,42l,17l,concurrent,linked,queue,stream,record,long,long,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,long,side,output,long,side,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testSideOutput() throws Exception;1520351570;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {_		KeyedProcessOperator<Integer, Integer, String> operator = new KeyedProcessOperator<>(new SideOutputProcessFunction())___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				operator, new IdentityKeySelector<>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(42, 17L ))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("IN:42", 17L ))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput = new ConcurrentLinkedQueue<>()__		expectedIntSideOutput.add(new StreamRecord<>(42, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedIntSideOutput,_			intSideOutput)___		ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput = new ConcurrentLinkedQueue<>()__		expectedLongSideOutput.add(new StreamRecord<>(42L, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedLongSideOutput,_			longSideOutput)___		testHarness.close()__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,side,output,process,function,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,42,17l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,in,42,17l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,concurrent,linked,queue,stream,record,integer,expected,int,side,output,new,concurrent,linked,queue,expected,int,side,output,add,new,stream,record,42,17l,concurrent,linked,queue,stream,record,integer,int,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,int,side,output,int,side,output,concurrent,linked,queue,stream,record,long,expected,long,side,output,new,concurrent,linked,queue,expected,long,side,output,add,new,stream,record,42l,17l,concurrent,linked,queue,stream,record,long,long,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,long,side,output,long,side,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testSideOutput() throws Exception;1528201559;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {_		KeyedProcessOperator<Integer, Integer, String> operator = new KeyedProcessOperator<>(new SideOutputProcessFunction())___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				operator, new IdentityKeySelector<>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(42, 17L ))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("IN:42", 17L ))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput = new ConcurrentLinkedQueue<>()__		expectedIntSideOutput.add(new StreamRecord<>(42, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedIntSideOutput,_			intSideOutput)___		ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput = new ConcurrentLinkedQueue<>()__		expectedLongSideOutput.add(new StreamRecord<>(42L, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedLongSideOutput,_			longSideOutput)___		testHarness.close()__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,side,output,process,function,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,42,17l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,in,42,17l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,concurrent,linked,queue,stream,record,integer,expected,int,side,output,new,concurrent,linked,queue,expected,int,side,output,add,new,stream,record,42,17l,concurrent,linked,queue,stream,record,integer,int,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,int,side,output,int,side,output,concurrent,linked,queue,stream,record,long,expected,long,side,output,new,concurrent,linked,queue,expected,long,side,output,add,new,stream,record,42l,17l,concurrent,linked,queue,stream,record,long,long,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,long,side,output,long,side,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testSideOutput() throws Exception;1531296542;This also verifies that the timestamps ouf side-emitted records is correct.;@Test_	public void testSideOutput() throws Exception {_		KeyedProcessOperator<Integer, Integer, String> operator = new KeyedProcessOperator<>(new SideOutputProcessFunction())___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				operator, new IdentityKeySelector<>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(42, 17L ))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("IN:42", 17L ))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput = new ConcurrentLinkedQueue<>()__		expectedIntSideOutput.add(new StreamRecord<>(42, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedIntSideOutput,_			intSideOutput)___		ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput = new ConcurrentLinkedQueue<>()__		expectedLongSideOutput.add(new StreamRecord<>(42L, 17L ))__		ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput =_			testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)__		TestHarnessUtil.assertOutputEquals(_			"Side output was not correct.",_			expectedLongSideOutput,_			longSideOutput)___		testHarness.close()__	};this,also,verifies,that,the,timestamps,ouf,side,emitted,records,is,correct;test,public,void,test,side,output,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,side,output,process,function,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,42,17l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,in,42,17l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,concurrent,linked,queue,stream,record,integer,expected,int,side,output,new,concurrent,linked,queue,expected,int,side,output,add,new,stream,record,42,17l,concurrent,linked,queue,stream,record,integer,int,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,int,side,output,int,side,output,concurrent,linked,queue,stream,record,long,expected,long,side,output,new,concurrent,linked,queue,expected,long,side,output,add,new,stream,record,42l,17l,concurrent,linked,queue,stream,record,long,long,side,output,test,harness,get,side,output,side,output,process,function,test,harness,util,assert,output,equals,side,output,was,not,correct,expected,long,side,output,long,side,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1488799576;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,stream,record,state,42,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1495484544;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,stream,record,state,42,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1506259751;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,stream,record,state,42,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1508857182;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17"))__		expectedOutput.add(new StreamRecord<>("STATE:42"))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,expected,output,add,new,stream,record,state,42,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1509723634;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17"))__		expectedOutput.add(new StreamRecord<>("STATE:42"))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,expected,output,add,new,stream,record,state,42,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1519567828;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17"))__		expectedOutput.add(new StreamRecord<>("STATE:42"))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,expected,output,add,new,stream,record,state,42,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1520351570;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17"))__		expectedOutput.add(new StreamRecord<>("STATE:42"))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,expected,output,add,new,stream,record,state,42,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1528201559;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ _		testHarness.processElement(new StreamRecord<>(13))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(13))_ _		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:13"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17"))__		expectedOutput.add(new StreamRecord<>("STATE:42"))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,process,element,new,stream,record,13,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,13,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,13,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,expected,output,add,new,stream,record,state,42,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testProcessingTimeTimerWithState() throws Exception;1531296542;Verifies that we don't have leakage between different keys.;@Test_	public void testProcessingTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(1)__		testHarness.processElement(new StreamRecord<>(17))_ _		testHarness.processElement(new StreamRecord<>(13))_ __		testHarness.setProcessingTime(2)__		testHarness.processElement(new StreamRecord<>(13))_ _		testHarness.processElement(new StreamRecord<>(42))_ __		testHarness.setProcessingTime(6)__		testHarness.setProcessingTime(7)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new StreamRecord<>("INPUT:17"))__		expectedOutput.add(new StreamRecord<>("INPUT:13"))__		expectedOutput.add(new StreamRecord<>("INPUT:42"))__		expectedOutput.add(new StreamRecord<>("STATE:17"))__		expectedOutput.add(new StreamRecord<>("STATE:42"))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,processing,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,1,test,harness,process,element,new,stream,record,17,test,harness,process,element,new,stream,record,13,test,harness,set,processing,time,2,test,harness,process,element,new,stream,record,13,test,harness,process,element,new,stream,record,42,test,harness,set,processing,time,6,test,harness,set,processing,time,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,stream,record,input,17,expected,output,add,new,stream,record,input,13,expected,output,add,new,stream,record,input,42,expected,output,add,new,stream,record,state,17,expected,output,add,new,stream,record,state,42,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1488799576;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1495484544;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1506259751;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1508857182;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1509723634;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1519567828;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1520351570;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1528201559;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ _		testHarness.processElement(new StreamRecord<>(13, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ _		testHarness.processElement(new StreamRecord<>(13, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new StreamRecord<>("INPUT:13", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,element,new,stream,record,13,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,element,new,stream,record,13,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,stream,record,input,13,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
KeyedProcessOperatorTest -> @Test 	public void testEventTimeTimerWithState() throws Exception;1531296542;Verifies that we don't have leakage between different keys.;@Test_	public void testEventTimeTimerWithState() throws Exception {__		KeyedProcessOperator<Integer, Integer, String> operator =_				new KeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.EVENT_TIME))___		OneInputStreamOperatorTestHarness<Integer, String> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.processWatermark(new Watermark(1))__		testHarness.processElement(new StreamRecord<>(17, 0L))_ _		testHarness.processElement(new StreamRecord<>(13, 0L))_ __		testHarness.processWatermark(new Watermark(2))__		testHarness.processElement(new StreamRecord<>(42, 1L))_ _		testHarness.processElement(new StreamRecord<>(13, 1L))_ __		testHarness.processWatermark(new Watermark(6))__		testHarness.processWatermark(new Watermark(7))___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		expectedOutput.add(new Watermark(1L))__		expectedOutput.add(new StreamRecord<>("INPUT:17", 0L))__		expectedOutput.add(new StreamRecord<>("INPUT:13", 0L))__		expectedOutput.add(new Watermark(2L))__		expectedOutput.add(new StreamRecord<>("INPUT:42", 1L))__		expectedOutput.add(new StreamRecord<>("STATE:17", 6L))__		expectedOutput.add(new Watermark(6L))__		expectedOutput.add(new StreamRecord<>("STATE:42", 7L))__		expectedOutput.add(new Watermark(7L))___		TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput())___		testHarness.close()__	};verifies,that,we,don,t,have,leakage,between,different,keys;test,public,void,test,event,time,timer,with,state,throws,exception,keyed,process,operator,integer,integer,string,operator,new,keyed,process,operator,new,triggering,stateful,flat,map,function,time,domain,one,input,stream,operator,test,harness,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,identity,key,selector,integer,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,watermark,new,watermark,1,test,harness,process,element,new,stream,record,17,0l,test,harness,process,element,new,stream,record,13,0l,test,harness,process,watermark,new,watermark,2,test,harness,process,element,new,stream,record,42,1l,test,harness,process,element,new,stream,record,13,1l,test,harness,process,watermark,new,watermark,6,test,harness,process,watermark,new,watermark,7,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,expected,output,add,new,watermark,1l,expected,output,add,new,stream,record,input,17,0l,expected,output,add,new,stream,record,input,13,0l,expected,output,add,new,watermark,2l,expected,output,add,new,stream,record,input,42,1l,expected,output,add,new,stream,record,state,17,6l,expected,output,add,new,watermark,6l,expected,output,add,new,stream,record,state,42,7l,expected,output,add,new,watermark,7l,test,harness,util,assert,output,equals,output,was,not,correct,expected,output,test,harness,get,output,test,harness,close
