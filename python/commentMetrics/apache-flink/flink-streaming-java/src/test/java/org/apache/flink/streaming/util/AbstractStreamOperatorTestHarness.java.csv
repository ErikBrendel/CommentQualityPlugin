# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractStreamOperatorTestHarness -> public void setup() throws Exception;1477069385;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() throws Exception {_		operator.setup(mockTask, config, new MockOutput())__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,throws,exception,operator,setup,mock,task,config,new,mock,output,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup() throws Exception;1477517188;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() throws Exception {_		operator.setup(mockTask, config, new MockOutput())__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,throws,exception,operator,setup,mock,task,config,new,mock,output,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup() throws Exception;1477517188;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() throws Exception {_		operator.setup(mockTask, config, new MockOutput())__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,throws,exception,operator,setup,mock,task,config,new,mock,output,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup() throws Exception;1477517188;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() throws Exception {_		operator.setup(mockTask, config, new MockOutput())__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,throws,exception,operator,setup,mock,task,config,new,mock,output,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup() throws Exception;1477517188;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() throws Exception {_		operator.setup(mockTask, config, new MockOutput())__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,throws,exception,operator,setup,mock,task,config,new,mock,output,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup() throws Exception;1477517189;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() throws Exception {_		operator.setup(mockTask, config, new MockOutput())__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,throws,exception,operator,setup,mock,task,config,new,mock,output,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup() throws Exception;1478251480;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() throws Exception {_		operator.setup(mockTask, config, new MockOutput())__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,throws,exception,operator,setup,mock,task,config,new,mock,output,setup,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1477069385;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}_		operator.initializeState(operatorStateHandles)__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,operator,initialize,state,operator,state,handles,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1477517188;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}_		operator.initializeState(operatorStateHandles)__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,operator,initialize,state,operator,state,handles,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1477517188;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}_		operator.initializeState(operatorStateHandles)__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,operator,initialize,state,operator,state,handles,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1477517188;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}_		operator.initializeState(operatorStateHandles)__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,operator,initialize,state,operator,state,handles,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1477517188;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					null,_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,null,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1477517189;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					null,_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,null,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1478251480;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					null,_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,null,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1478783881;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					null,_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,null,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1479853012;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					null,_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,null,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1482206691;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					null,_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,null,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1482244973;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1484216798;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1485250954;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1487167701;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1487783998;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1487871589;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getNumberOfKeyGroups()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,number,of,key,groups,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1489149057;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1489422543;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1489819457;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1489819457;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyGroupsStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyGroupsStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyGroupsStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,key,groups,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,key,groups,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,key,groups,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1490724328;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1491417780;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1493821466;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1493821557;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1495484544;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1497328696;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1497328697;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1497328697;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorStateHandles)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorStateHandles massagedOperatorStateHandles = new OperatorStateHandles(_					0,_					operatorStateHandles.getLegacyOperatorState(),_					localManagedKeyGroupState,_					localRawKeyGroupState,_					localManagedOperatorState,_					localRawOperatorState)___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,state,handles,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,state,handles,massaged,operator,state,handles,new,operator,state,handles,0,operator,state,handles,get,legacy,operator,state,local,managed,key,group,state,local,raw,key,group,state,local,managed,operator,state,local,raw,operator,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1502801814;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorSubtaskState)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState massagedOperatorStateHandles = new OperatorSubtaskState(_				operatorStateHandles.getLegacyOperatorState(),_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,subtask,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,massaged,operator,state,handles,new,operator,subtask,state,operator,state,handles,get,legacy,operator,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1503566976;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorSubtaskState)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState massagedOperatorStateHandles = new OperatorSubtaskState(_				operatorStateHandles.getLegacyOperatorState(),_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,subtask,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,massaged,operator,state,handles,new,operator,subtask,state,operator,state,handles,get,legacy,operator,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1503598628;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorSubtaskState)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState massagedOperatorStateHandles = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,subtask,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,massaged,operator,state,handles,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1506348255;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorSubtaskState)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState massagedOperatorStateHandles = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,subtask,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,massaged,operator,state,handles,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1507568316;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorSubtaskState)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState massagedOperatorStateHandles = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,subtask,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,massaged,operator,state,handles,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1509118643;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorSubtaskState)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState massagedOperatorStateHandles = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,subtask,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,massaged,operator,state,handles,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1515213012;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState(OperatorSubtaskState)}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState massagedOperatorStateHandles = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			operator.initializeState(massagedOperatorStateHandles)__		} else {_			operator.initializeState(null)__		}_		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,operator,subtask,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,massaged,operator,state,handles,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,operator,initialize,state,massaged,operator,state,handles,else,operator,initialize,state,null,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1516626397;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()__			taskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), operatorSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setTaskStateSnapshotsByCheckpointId(Collections.singletonMap(0L, taskStateSnapshot))__		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,task,state,snapshot,new,task,state,snapshot,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,operator,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1517489695;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()__			taskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), operatorSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setTaskStateSnapshotsByCheckpointId(Collections.singletonMap(0L, taskStateSnapshot))__		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,task,state,snapshot,new,task,state,snapshot,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,operator,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1517489695;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()__			taskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), operatorSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setTaskStateSnapshotsByCheckpointId(Collections.singletonMap(0L, taskStateSnapshot))__		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,task,state,snapshot,new,task,state,snapshot,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,operator,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception;1519039284;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorStateHandles operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()__			taskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), operatorSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setTaskStateSnapshotsByCheckpointId(Collections.singletonMap(0L, taskStateSnapshot))__		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,state,handles,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,task,state,snapshot,new,task,state,snapshot,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,operator,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1477517188;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			Collections.singletonList(keyedManaged),_			Collections.singletonList(keyedRaw),_			Collections.singletonList(opManaged),_			Collections.singletonList(opRaw))__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,collections,singleton,list,keyed,managed,collections,singleton,list,keyed,raw,collections,singleton,list,op,managed,collections,singleton,list,op,raw,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1477517188;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			Collections.singletonList(keyedManaged),_			Collections.singletonList(keyedRaw),_			Collections.singletonList(opManaged),_			Collections.singletonList(opRaw))__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,collections,singleton,list,keyed,managed,collections,singleton,list,keyed,raw,collections,singleton,list,op,managed,collections,singleton,list,op,raw,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1477517188;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1477517189;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1478251480;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1478783881;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1479853012;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1482206691;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1482244973;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1484216798;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1485250954;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp, streamFactory)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		OperatorStateHandles handles = new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__		return handles__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,stream,factory,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,operator,state,handles,handles,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null,return,handles
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1487167701;Calls {@link StreamOperator#snapshotState(long, long)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1487783998;Calls {@link StreamOperator#snapshotState(long, long)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(checkpointId, timestamp)___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1487871589;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1489149057;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1489422543;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1489819457;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1489819457;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyGroupsStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyGroupsStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,key,groups,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,key,groups,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1490724328;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1491417780;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1493821466;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			null,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,null,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1493821557;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		_		StreamStateHandle legacyStateHandle = null___		if (operator instanceof StreamCheckpointedOperator) {__			final CheckpointStreamFactory.CheckpointStateOutputStream outStream =_					streamFactory.createCheckpointStateOutputStream(checkpointId, timestamp)___				((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__				legacyStateHandle = outStream.closeAndGetHandle()__		}__		return new OperatorStateHandles(_			0,_			legacyStateHandle,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,stream,state,handle,legacy,state,handle,null,if,operator,instanceof,stream,checkpointed,operator,final,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,stream,factory,create,checkpoint,state,output,stream,checkpoint,id,timestamp,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,legacy,state,handle,out,stream,close,and,get,handle,return,new,operator,state,handles,0,legacy,state,handle,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1495484544;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		_		StreamStateHandle legacyStateHandle = null___		if (operator instanceof StreamCheckpointedOperator) {__			final CheckpointStreamFactory.CheckpointStateOutputStream outStream =_					streamFactory.createCheckpointStateOutputStream(checkpointId, timestamp)___				((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__				legacyStateHandle = outStream.closeAndGetHandle()__		}__		return new OperatorStateHandles(_			0,_			legacyStateHandle,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,stream,state,handle,legacy,state,handle,null,if,operator,instanceof,stream,checkpointed,operator,final,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,stream,factory,create,checkpoint,state,output,stream,checkpoint,id,timestamp,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,legacy,state,handle,out,stream,close,and,get,handle,return,new,operator,state,handles,0,legacy,state,handle,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1497328696;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		_		StreamStateHandle legacyStateHandle = null___		if (operator instanceof StreamCheckpointedOperator) {__			final CheckpointStreamFactory.CheckpointStateOutputStream outStream =_					streamFactory.createCheckpointStateOutputStream(checkpointId, timestamp)___				((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__				legacyStateHandle = outStream.closeAndGetHandle()__		}__		return new OperatorStateHandles(_			0,_			legacyStateHandle,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,stream,state,handle,legacy,state,handle,null,if,operator,instanceof,stream,checkpointed,operator,final,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,stream,factory,create,checkpoint,state,output,stream,checkpoint,id,timestamp,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,legacy,state,handle,out,stream,close,and,get,handle,return,new,operator,state,handles,0,legacy,state,handle,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1497328697;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		_		StreamStateHandle legacyStateHandle = null___		if (operator instanceof StreamCheckpointedOperator) {__			final CheckpointStreamFactory.CheckpointStateOutputStream outStream =_					streamFactory.createCheckpointStateOutputStream(checkpointId, timestamp)___				((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__				legacyStateHandle = outStream.closeAndGetHandle()__		}__		return new OperatorStateHandles(_			0,_			legacyStateHandle,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,stream,state,handle,legacy,state,handle,null,if,operator,instanceof,stream,checkpointed,operator,final,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,stream,factory,create,checkpoint,state,output,stream,checkpoint,id,timestamp,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,legacy,state,handle,out,stream,close,and,get,handle,return,new,operator,state,handles,0,legacy,state,handle,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1497328697;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		_		StreamStateHandle legacyStateHandle = null___		if (operator instanceof StreamCheckpointedOperator) {__			final CheckpointStreamFactory.CheckpointStateOutputStream outStream =_					streamFactory.createCheckpointStateOutputStream(checkpointId, timestamp)___				((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__				legacyStateHandle = outStream.closeAndGetHandle()__		}__		return new OperatorStateHandles(_			0,_			legacyStateHandle,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,stream,state,handle,legacy,state,handle,null,if,operator,instanceof,stream,checkpointed,operator,final,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,stream,factory,create,checkpoint,state,output,stream,checkpoint,id,timestamp,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,legacy,state,handle,out,stream,close,and,get,handle,return,new,operator,state,handles,0,legacy,state,handle,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1502801814;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		_		StreamStateHandle legacyStateHandle = null___		if (operator instanceof StreamCheckpointedOperator) {__			final CheckpointStreamFactory.CheckpointStateOutputStream outStream =_					streamFactory.createCheckpointStateOutputStream(checkpointId, timestamp)___				((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__				legacyStateHandle = outStream.closeAndGetHandle()__		}__		return new OperatorStateHandles(_			0,_			legacyStateHandle,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,stream,state,handle,legacy,state,handle,null,if,operator,instanceof,stream,checkpointed,operator,final,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,stream,factory,create,checkpoint,state,output,stream,checkpoint,id,timestamp,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,legacy,state,handle,out,stream,close,and,get,handle,return,new,operator,state,handles,0,legacy,state,handle,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1503566976;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(new JobID(), "test_op")___		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		_		StreamStateHandle legacyStateHandle = null___		if (operator instanceof StreamCheckpointedOperator) {__			final CheckpointStreamFactory.CheckpointStateOutputStream outStream =_					streamFactory.createCheckpointStateOutputStream(checkpointId, timestamp)___				((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__				legacyStateHandle = outStream.closeAndGetHandle()__		}__		return new OperatorStateHandles(_			0,_			legacyStateHandle,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,stream,state,handle,legacy,state,handle,null,if,operator,instanceof,stream,checkpointed,operator,final,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,stream,factory,create,checkpoint,state,output,stream,checkpoint,id,timestamp,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,legacy,state,handle,out,stream,close,and,get,handle,return,new,operator,state,handles,0,legacy,state,handle,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1503598628;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1506348255;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1507568316;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forFullCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,full,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1509118643;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1515213012;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1516626397;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpoint())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1517489695;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation())___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1517489695;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception;1519039284;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorStateHandles snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorStateHandles(_			0,_			keyedManaged != null ? Collections.singletonList(keyedManaged) : null,_			keyedRaw != null ? Collections.singletonList(keyedRaw) : null,_			opManaged != null ? Collections.singletonList(opManaged) : null,_			opRaw != null ? Collections.singletonList(opRaw) : null)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,state,handles,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,state,handles,0,keyed,managed,null,collections,singleton,list,keyed,managed,null,keyed,raw,null,collections,singleton,list,keyed,raw,null,op,managed,null,collections,singleton,list,op,managed,null,op,raw,null,collections,singleton,list,op,raw,null
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1477069385;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1477517188;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1477517188;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1477517188;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1477517188;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1477517189;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1478251480;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1478783881;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1479853012;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1482206691;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1482244973;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1484216798;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1485250954;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1487167701;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1487783998;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1487871589;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1489149057;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1489422543;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1489819457;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1489819457;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1490724328;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1491417780;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1493821466;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1493821557;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1495484544;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1497328696;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1497328697;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1497328697;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1502801814;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1503566976;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1503598628;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1506348255;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1507568316;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1509118643;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1515213012;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1516626397;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1517489695;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1517489695;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1519039284;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1519567828;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1519567828;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1519568061;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1526978549;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1526978550;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1528201124;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1534491183;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1534491183;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1547725934;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1548947531;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void close() throws Exception;1550863152;Calls close and dispose on the operator.;public void close() throws Exception {_		operator.close()__		operator.dispose()__		if (processingTimeService != null) {_			processingTimeService.shutdownService()__		}_		setupCalled = false___		internalEnvironment.ifPresent(MockEnvironment::close)__	};calls,close,and,dispose,on,the,operator;public,void,close,throws,exception,operator,close,operator,dispose,if,processing,time,service,null,processing,time,service,shutdown,service,setup,called,false,internal,environment,if,present,mock,environment,close
AbstractStreamOperatorTestHarness -> public void setup();1478783881;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1479853012;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1482206691;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1482244973;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1484216798;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1485250954;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1487167701;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1487783998;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1487871589;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1489149057;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1489422543;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1489819457;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1489819457;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1490724328;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1491417780;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1493821466;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1493821557;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1495484544;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1497328696;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1497328697;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1497328697;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1502801814;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1503566976;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1503598628;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1506348255;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1507568316;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1509118643;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1515213012;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1516626397;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1517489695;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1517489695;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1519039284;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1519567828;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1519567828;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1519568061;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1526978549;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1526978550;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1528201124;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1534491183;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1534491183;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1547725934;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1548947531;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public void setup();1550863152;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup() {_		setup(null)__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,setup,null
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1477069385;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1477517188;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1477517188;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1477517188;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1477517188;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1477517189;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1478251480;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1478783881;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1479853012;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1482206691;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1482244973;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1484216798;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1485250954;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1487167701;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1487783998;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1487871589;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1489149057;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1489422543;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1489819457;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1489819457;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1490724328;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1491417780;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1493821466;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1493821557;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1495484544;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1497328696;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1497328697;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1497328697;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1502801814;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1503566976;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1503598628;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1506348255;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1507568316;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1509118643;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1515213012;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1516626397;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1517489695;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1517489695;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1519039284;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1519567828;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1519567828;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1519568061;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1526978549;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1526978550;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1528201124;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1534491183;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1534491183;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1547725934;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1548947531;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1550863152;Get all the output from the task. This contains StreamRecords and Events interleaved.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved;public,concurrent,linked,queue,object,get,output,return,output,list
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1478783881;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1479853012;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1482206691;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1482244973;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1484216798;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1485250954;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1487167701;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1487783998;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1487871589;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1489149057;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1489422543;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1489819457;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1489819457;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1490724328;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1491417780;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1493821466;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1493821557;Calls_{@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()};public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1495484544;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1497328696;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1497328697;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1497328697;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1502801814;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1503566976;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1503598628;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1506348255;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1507568316;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1509118643;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1515213012;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		operator.setup(mockTask, config, new MockOutput(outputSerializer))__		setupCalled = true__	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1516626397;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1517489695;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1517489695;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1519039284;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1519567828;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1519567828;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1519568061;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1526978549;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1526978550;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1528201124;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1534491183;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1534491183;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1547725934;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			this.streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			when(mockTask.createStreamTaskStateInitializer()).thenReturn(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,this,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,when,mock,task,create,stream,task,state,initializer,then,return,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1548947531;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			mockTask.setStreamTaskStateInitializer(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,mock,task,set,stream,task,state,initializer,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> public void setup(TypeSerializer<OUT> outputSerializer);1550863152;Calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)} ()}.;public void setup(TypeSerializer<OUT> outputSerializer) {_		if (!setupCalled) {_			streamTaskStateInitializer =_				createStreamTaskStateManager(environment, stateBackend, processingTimeService)__			mockTask.setStreamTaskStateInitializer(streamTaskStateInitializer)__			operator.setup(mockTask, config, new MockOutput(outputSerializer))__			setupCalled = true__		}_	};calls,link,stream,operator,setup,stream,task,stream,config,output;public,void,setup,type,serializer,out,output,serializer,if,setup,called,stream,task,state,initializer,create,stream,task,state,manager,environment,state,backend,processing,time,service,mock,task,set,stream,task,state,initializer,stream,task,state,initializer,operator,setup,mock,task,config,new,mock,output,output,serializer,setup,called,true
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1477069385;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1477517188;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1477517188;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1477517188;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1477517188;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1477517189;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1478251480;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1478783881;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1479853012;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1482206691;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1482244973;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1484216798;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public void restore(StreamStateHandle snapshot) throws Exception;1485250954;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1477069385;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1477517188;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1477517188;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1477517188;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1477517188;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1477517189;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1478251480;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1478783881;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1479853012;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1482206691;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1482244973;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1484216798;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1485250954;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1487167701;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1487783998;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1487871589;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1489149057;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1489422543;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1489819457;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1489819457;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1490724328;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1491417780;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1493821466;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1493821557;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()};public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1495484544;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1497328696;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1497328697;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1497328697;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1502801814;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1503566976;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1503598628;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1506348255;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1507568316;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1509118643;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1515213012;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyOfCompletedCheckpoint(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyOfCompletedCheckpoint(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,of,completed,checkpoint,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,of,completed,checkpoint,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1516626397;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1517489695;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1517489695;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1519039284;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1519567828;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1519567828;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1519568061;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1526978549;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1526978550;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1528201124;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1534491183;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1534491183;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1547725934;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1548947531;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception;1550863152;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#notifyCheckpointComplete(long)} ()}.;public void notifyOfCompletedCheckpoint(long checkpointId) throws Exception {_		operator.notifyCheckpointComplete(checkpointId)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,notify,checkpoint,complete,long;public,void,notify,of,completed,checkpoint,long,checkpoint,id,throws,exception,operator,notify,checkpoint,complete,checkpoint,id
AbstractStreamOperatorTestHarness -> public OperatorSnapshotResult snapshot(long checkpointId, long timestamp) throws Exception;1477069385;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorSnapshotResult snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		return operator.snapshotState(checkpointId, timestamp, streamFactory)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,snapshot,result,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,return,operator,snapshot,state,checkpoint,id,timestamp,stream,factory
AbstractStreamOperatorTestHarness -> public OperatorSnapshotResult snapshot(long checkpointId, long timestamp) throws Exception;1477517188;Calls {@link StreamOperator#snapshotState(long, long, CheckpointStreamFactory)}.;public OperatorSnapshotResult snapshot(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory streamFactory = stateBackend.createStreamFactory(_				new JobID(),_				"test_op")___		return operator.snapshotState(checkpointId, timestamp, streamFactory)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,stream,factory;public,operator,snapshot,result,snapshot,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,stream,factory,state,backend,create,stream,factory,new,job,id,return,operator,snapshot,state,checkpoint,id,timestamp,stream,factory
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1477069385;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1477517188;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1477517188;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1477517188;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1477517188;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1477517189;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1478251480;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1478783881;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1479853012;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1482206691;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1482244973;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1484216798;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1485250954;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1493821557;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1495484544;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if (operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1497328696;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if (operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1497328697;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if (operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1497328697;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if (operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1502801814;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if (operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1503566976;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if (operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1519567828;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorSubtaskState(_			mergedManagedOperatorState,_			mergedRawOperatorState,_			mergedManagedKeyedState,_			mergedRawKeyedState)__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,merged,managed,operator,state,merged,raw,operator,state,merged,managed,keyed,state,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1519567828;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorSubtaskState(_			mergedManagedOperatorState,_			mergedRawOperatorState,_			mergedManagedKeyedState,_			mergedRawKeyedState)__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,merged,managed,operator,state,merged,raw,operator,state,merged,managed,keyed,state,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1519568061;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1526978549;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1526978550;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1528201124;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1534491183;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1534491183;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1547725934;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1548947531;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorSubtaskState)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,subtask,state,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception;1550863152;Takes the different {@link OperatorSubtaskState} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorSubtaskState} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, remember to use_{@link #repartitionOperatorState(OperatorSubtaskState, int, int, int, int)} to reshape the state handles_to include only those key-group states in the local key-group range and the operator states that would_be assigned to the local subtask. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorSubtaskState repackageState(OperatorSubtaskState... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorSubtaskState handle : handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			mergedManagedOperatorState.addAll(managedOperatorState)__			mergedRawOperatorState.addAll(rawOperatorState)__			mergedManagedKeyedState.addAll(managedKeyedState)__			mergedRawKeyedState.addAll(rawKeyedState)__		}__		return new OperatorSubtaskState(_			new StateObjectCollection<>(mergedManagedOperatorState),_			new StateObjectCollection<>(mergedRawOperatorState),_			new StateObjectCollection<>(mergedManagedKeyedState),_			new StateObjectCollection<>(mergedRawKeyedState))__	};takes,the,different,link,operator,subtask,state,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,subtask,state,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,remember,to,use,link,repartition,operator,state,operator,subtask,state,int,int,int,int,to,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,subtask,state,repackage,state,operator,subtask,state,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,subtask,state,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,merged,managed,operator,state,add,all,managed,operator,state,merged,raw,operator,state,add,all,raw,operator,state,merged,managed,keyed,state,add,all,managed,keyed,state,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,subtask,state,new,state,object,collection,merged,managed,operator,state,new,state,object,collection,merged,raw,operator,state,new,state,object,collection,merged,managed,keyed,state,new,state,object,collection,merged,raw,keyed,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1519567828;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotResult operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorSubtaskState(_			opManaged != null ? Collections.singletonList(opManaged) : Collections.emptyList(),_			opRaw != null ? Collections.singletonList(opRaw) : Collections.emptyList(),_			keyedManaged != null ? Collections.singletonList(keyedManaged) : Collections.emptyList(),_			keyedRaw != null ? Collections.singletonList(keyedRaw) : Collections.emptyList())__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,result,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,subtask,state,op,managed,null,collections,singleton,list,op,managed,collections,empty,list,op,raw,null,collections,singleton,list,op,raw,collections,empty,list,keyed,managed,null,collections,singleton,list,keyed,managed,collections,empty,list,keyed,raw,null,collections,singleton,list,keyed,raw,collections,empty,list
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1519567828;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		KeyedStateHandle keyedManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateManagedFuture())__		KeyedStateHandle keyedRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getKeyedStateRawFuture())___		OperatorStateHandle opManaged = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateManagedFuture())__		OperatorStateHandle opRaw = FutureUtil.runIfNotDoneAndGet(operatorStateResult.getOperatorStateRawFuture())___		return new OperatorSubtaskState(_			opManaged != null ? Collections.singletonList(opManaged) : Collections.emptyList(),_			opRaw != null ? Collections.singletonList(opRaw) : Collections.emptyList(),_			keyedManaged != null ? Collections.singletonList(keyedManaged) : Collections.emptyList(),_			keyedRaw != null ? Collections.singletonList(keyedRaw) : Collections.emptyList())__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,keyed,state,handle,keyed,managed,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,managed,future,keyed,state,handle,keyed,raw,future,util,run,if,not,done,and,get,operator,state,result,get,keyed,state,raw,future,operator,state,handle,op,managed,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,managed,future,operator,state,handle,op,raw,future,util,run,if,not,done,and,get,operator,state,result,get,operator,state,raw,future,return,new,operator,subtask,state,op,managed,null,collections,singleton,list,op,managed,collections,empty,list,op,raw,null,collections,singleton,list,op,raw,collections,empty,list,keyed,managed,null,collections,singleton,list,keyed,managed,collections,empty,list,keyed,raw,null,collections,singleton,list,keyed,raw,collections,empty,list
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1519568061;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1526978549;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1526978550;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1528201124;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1534491183;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1534491183;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1547725934;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1548947531;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception;1550863152;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSubtaskState snapshot(long checkpointId, long timestamp) throws Exception {_		return snapshotWithLocalState(checkpointId, timestamp).getJobManagerOwnedState()__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,subtask,state,snapshot,long,checkpoint,id,long,timestamp,throws,exception,return,snapshot,with,local,state,checkpoint,id,timestamp,get,job,manager,owned,state
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1519568061;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_				numKeyGroups,_				numSubtasks)___			KeyGroupRange localKeyGroupRange = keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getManagedKeyedState(),_				localKeyGroupRange)___			List<KeyedStateHandle> localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getRawKeyedState(),_				localKeyGroupRange)___			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()___			managedOperatorState.addAll(jmOperatorStateHandles.getManagedOperatorState())___			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_				managedOperatorState,_				numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()___			rawOperatorState.addAll(jmOperatorStateHandles.getRawOperatorState())___			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_				rawOperatorState,_				numSubtasks).get(subtaskIndex)___			OperatorSubtaskState processedJmOpSubtaskState = new OperatorSubtaskState(_				new StateObjectCollection<>(nullToEmptyCollection(localManagedOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localManagedKeyGroupState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawKeyGroupState)))___			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), processedJmOpSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,if,setup,called,setup,if,jm,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,managed,operator,state,add,all,jm,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,raw,operator,state,add,all,jm,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,processed,jm,op,subtask,state,new,operator,subtask,state,new,state,object,collection,null,to,empty,collection,local,managed,operator,state,new,state,object,collection,null,to,empty,collection,local,raw,operator,state,new,state,object,collection,null,to,empty,collection,local,managed,key,group,state,new,state,object,collection,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,processed,jm,op,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1526978549;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_				numKeyGroups,_				numSubtasks)___			KeyGroupRange localKeyGroupRange = keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getManagedKeyedState(),_				localKeyGroupRange)___			List<KeyedStateHandle> localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getRawKeyedState(),_				localKeyGroupRange)___			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()___			managedOperatorState.addAll(jmOperatorStateHandles.getManagedOperatorState())___			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_				managedOperatorState,_				numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()___			rawOperatorState.addAll(jmOperatorStateHandles.getRawOperatorState())___			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_				rawOperatorState,_				numSubtasks).get(subtaskIndex)___			OperatorSubtaskState processedJmOpSubtaskState = new OperatorSubtaskState(_				new StateObjectCollection<>(nullToEmptyCollection(localManagedOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localManagedKeyGroupState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawKeyGroupState)))___			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), processedJmOpSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,if,setup,called,setup,if,jm,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,managed,operator,state,add,all,jm,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,raw,operator,state,add,all,jm,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,processed,jm,op,subtask,state,new,operator,subtask,state,new,state,object,collection,null,to,empty,collection,local,managed,operator,state,new,state,object,collection,null,to,empty,collection,local,raw,operator,state,new,state,object,collection,null,to,empty,collection,local,managed,key,group,state,new,state,object,collection,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,processed,jm,op,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1526978550;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_				numKeyGroups,_				numSubtasks)___			KeyGroupRange localKeyGroupRange = keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getManagedKeyedState(),_				localKeyGroupRange)___			List<KeyedStateHandle> localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getRawKeyedState(),_				localKeyGroupRange)___			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()___			managedOperatorState.addAll(jmOperatorStateHandles.getManagedOperatorState())___			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_				managedOperatorState,_				numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()___			rawOperatorState.addAll(jmOperatorStateHandles.getRawOperatorState())___			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_				rawOperatorState,_				numSubtasks).get(subtaskIndex)___			OperatorSubtaskState processedJmOpSubtaskState = new OperatorSubtaskState(_				new StateObjectCollection<>(nullToEmptyCollection(localManagedOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localManagedKeyGroupState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawKeyGroupState)))___			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), processedJmOpSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,if,setup,called,setup,if,jm,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,managed,operator,state,add,all,jm,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,raw,operator,state,add,all,jm,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,processed,jm,op,subtask,state,new,operator,subtask,state,new,state,object,collection,null,to,empty,collection,local,managed,operator,state,new,state,object,collection,null,to,empty,collection,local,raw,operator,state,new,state,object,collection,null,to,empty,collection,local,managed,key,group,state,new,state,object,collection,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,processed,jm,op,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1528201124;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_				numKeyGroups,_				numSubtasks)___			KeyGroupRange localKeyGroupRange = keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getManagedKeyedState(),_				localKeyGroupRange)___			List<KeyedStateHandle> localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getRawKeyedState(),_				localKeyGroupRange)___			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()___			managedOperatorState.addAll(jmOperatorStateHandles.getManagedOperatorState())___			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_				managedOperatorState,_				numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()___			rawOperatorState.addAll(jmOperatorStateHandles.getRawOperatorState())___			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_				rawOperatorState,_				numSubtasks).get(subtaskIndex)___			OperatorSubtaskState processedJmOpSubtaskState = new OperatorSubtaskState(_				new StateObjectCollection<>(nullToEmptyCollection(localManagedOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localManagedKeyGroupState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawKeyGroupState)))___			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), processedJmOpSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,if,setup,called,setup,if,jm,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,managed,operator,state,add,all,jm,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,raw,operator,state,add,all,jm,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,processed,jm,op,subtask,state,new,operator,subtask,state,new,state,object,collection,null,to,empty,collection,local,managed,operator,state,new,state,object,collection,null,to,empty,collection,local,raw,operator,state,new,state,object,collection,null,to,empty,collection,local,managed,key,group,state,new,state,object,collection,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,processed,jm,op,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1534491183;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		checkState(!initializeCalled, "TestHarness has already been initialized. Have you " +_			"opened this harness before initializing it?")__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_				numKeyGroups,_				numSubtasks)___			KeyGroupRange localKeyGroupRange = keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getManagedKeyedState(),_				localKeyGroupRange)___			List<KeyedStateHandle> localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getRawKeyedState(),_				localKeyGroupRange)___			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()___			managedOperatorState.addAll(jmOperatorStateHandles.getManagedOperatorState())___			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_				managedOperatorState,_				numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()___			rawOperatorState.addAll(jmOperatorStateHandles.getRawOperatorState())___			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_				rawOperatorState,_				numSubtasks).get(subtaskIndex)___			OperatorSubtaskState processedJmOpSubtaskState = new OperatorSubtaskState(_				new StateObjectCollection<>(nullToEmptyCollection(localManagedOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localManagedKeyGroupState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawKeyGroupState)))___			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), processedJmOpSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,check,state,initialize,called,test,harness,has,already,been,initialized,have,you,opened,this,harness,before,initializing,it,if,setup,called,setup,if,jm,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,managed,operator,state,add,all,jm,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,raw,operator,state,add,all,jm,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,processed,jm,op,subtask,state,new,operator,subtask,state,new,state,object,collection,null,to,empty,collection,local,managed,operator,state,new,state,object,collection,null,to,empty,collection,local,raw,operator,state,new,state,object,collection,null,to,empty,collection,local,managed,key,group,state,new,state,object,collection,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,processed,jm,op,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1534491183;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		checkState(!initializeCalled, "TestHarness has already been initialized. Have you " +_			"opened this harness before initializing it?")__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_				numKeyGroups,_				numSubtasks)___			KeyGroupRange localKeyGroupRange = keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getManagedKeyedState(),_				localKeyGroupRange)___			List<KeyedStateHandle> localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getRawKeyedState(),_				localKeyGroupRange)___			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()___			managedOperatorState.addAll(jmOperatorStateHandles.getManagedOperatorState())___			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_				managedOperatorState,_				numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()___			rawOperatorState.addAll(jmOperatorStateHandles.getRawOperatorState())___			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_				rawOperatorState,_				numSubtasks).get(subtaskIndex)___			OperatorSubtaskState processedJmOpSubtaskState = new OperatorSubtaskState(_				new StateObjectCollection<>(nullToEmptyCollection(localManagedOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localManagedKeyGroupState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawKeyGroupState)))___			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), processedJmOpSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,check,state,initialize,called,test,harness,has,already,been,initialized,have,you,opened,this,harness,before,initializing,it,if,setup,called,setup,if,jm,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,managed,operator,state,add,all,jm,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,raw,operator,state,add,all,jm,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,processed,jm,op,subtask,state,new,operator,subtask,state,new,state,object,collection,null,to,empty,collection,local,managed,operator,state,new,state,object,collection,null,to,empty,collection,local,raw,operator,state,new,state,object,collection,null,to,empty,collection,local,managed,key,group,state,new,state,object,collection,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,processed,jm,op,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1547725934;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		checkState(!initializeCalled, "TestHarness has already been initialized. Have you " +_			"opened this harness before initializing it?")__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_				numKeyGroups,_				numSubtasks)___			KeyGroupRange localKeyGroupRange = keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getManagedKeyedState(),_				localKeyGroupRange)___			List<KeyedStateHandle> localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getRawKeyedState(),_				localKeyGroupRange)___			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()___			managedOperatorState.addAll(jmOperatorStateHandles.getManagedOperatorState())___			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_				managedOperatorState,_				numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()___			rawOperatorState.addAll(jmOperatorStateHandles.getRawOperatorState())___			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_				rawOperatorState,_				numSubtasks).get(subtaskIndex)___			OperatorSubtaskState processedJmOpSubtaskState = new OperatorSubtaskState(_				new StateObjectCollection<>(nullToEmptyCollection(localManagedOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localManagedKeyGroupState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawKeyGroupState)))___			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), processedJmOpSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,check,state,initialize,called,test,harness,has,already,been,initialized,have,you,opened,this,harness,before,initializing,it,if,setup,called,setup,if,jm,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,managed,operator,state,add,all,jm,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,raw,operator,state,add,all,jm,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,processed,jm,op,subtask,state,new,operator,subtask,state,new,state,object,collection,null,to,empty,collection,local,managed,operator,state,new,state,object,collection,null,to,empty,collection,local,raw,operator,state,new,state,object,collection,null,to,empty,collection,local,managed,key,group,state,new,state,object,collection,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,processed,jm,op,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1548947531;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		checkState(!initializeCalled, "TestHarness has already been initialized. Have you " +_			"opened this harness before initializing it?")__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_				numKeyGroups,_				numSubtasks)___			KeyGroupRange localKeyGroupRange = keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getManagedKeyedState(),_				localKeyGroupRange)___			List<KeyedStateHandle> localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_				jmOperatorStateHandles.getRawKeyedState(),_				localKeyGroupRange)___			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()___			managedOperatorState.addAll(jmOperatorStateHandles.getManagedOperatorState())___			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_				managedOperatorState,_				numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()___			rawOperatorState.addAll(jmOperatorStateHandles.getRawOperatorState())___			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_				rawOperatorState,_				numSubtasks).get(subtaskIndex)___			OperatorSubtaskState processedJmOpSubtaskState = new OperatorSubtaskState(_				new StateObjectCollection<>(nullToEmptyCollection(localManagedOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawOperatorState)),_				new StateObjectCollection<>(nullToEmptyCollection(localManagedKeyGroupState)),_				new StateObjectCollection<>(nullToEmptyCollection(localRawKeyGroupState)))___			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), processedJmOpSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,check,state,initialize,called,test,harness,has,already,been,initialized,have,you,opened,this,harness,before,initializing,it,if,setup,called,setup,if,jm,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,jm,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,managed,operator,state,add,all,jm,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,raw,operator,state,add,all,jm,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,processed,jm,op,subtask,state,new,operator,subtask,state,new,state,object,collection,null,to,empty,collection,local,managed,operator,state,new,state,object,collection,null,to,empty,collection,local,raw,operator,state,new,state,object,collection,null,to,empty,collection,local,managed,key,group,state,new,state,object,collection,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,processed,jm,op,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState( 		OperatorSubtaskState jmOperatorStateHandles, 		OperatorSubtaskState tmOperatorStateHandles) throws Exception;1550863152;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__@param jmOperatorStateHandles the primary state (owned by JM)_@param tmOperatorStateHandles the (optional) local state (owned by TM) or null._@throws Exception;public void initializeState(_		OperatorSubtaskState jmOperatorStateHandles,_		OperatorSubtaskState tmOperatorStateHandles) throws Exception {__		checkState(!initializeCalled, "TestHarness has already been initialized. Have you " +_			"opened this harness before initializing it?")__		if (!setupCalled) {_			setup()__		}__		if (jmOperatorStateHandles != null) {__			TaskStateSnapshot jmTaskStateSnapshot = new TaskStateSnapshot()__			jmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), jmOperatorStateHandles)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setJobManagerTaskStateSnapshotsByCheckpointId(_				Collections.singletonMap(0L, jmTaskStateSnapshot))___			if (tmOperatorStateHandles != null) {_				TaskStateSnapshot tmTaskStateSnapshot = new TaskStateSnapshot()__				tmTaskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), tmOperatorStateHandles)__				taskStateManager.setTaskManagerTaskStateSnapshotsByCheckpointId(_					Collections.singletonMap(0L, tmTaskStateSnapshot))__			}_		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,param,jm,operator,state,handles,the,primary,state,owned,by,jm,param,tm,operator,state,handles,the,optional,local,state,owned,by,tm,or,null,throws,exception;public,void,initialize,state,operator,subtask,state,jm,operator,state,handles,operator,subtask,state,tm,operator,state,handles,throws,exception,check,state,initialize,called,test,harness,has,already,been,initialized,have,you,opened,this,harness,before,initializing,it,if,setup,called,setup,if,jm,operator,state,handles,null,task,state,snapshot,jm,task,state,snapshot,new,task,state,snapshot,jm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,jm,operator,state,handles,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,job,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,jm,task,state,snapshot,if,tm,operator,state,handles,null,task,state,snapshot,tm,task,state,snapshot,new,task,state,snapshot,tm,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,tm,operator,state,handles,task,state,manager,set,task,manager,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,tm,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1477069385;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1477517188;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1477517188;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1477517188;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1477517188;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1477517189;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1478251480;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1478783881;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1479853012;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1482206691;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1482244973;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1484216798;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1485250954;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1487167701;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1487783998;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1487871589;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1489149057;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1489422543;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1489819457;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1489819457;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1490724328;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1491417780;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1493821466;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1493821557;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1495484544;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1497328696;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1497328697;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1497328697;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1502801814;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1503566976;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1503598628;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1506348255;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1507568316;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1509118643;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1515213012;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1516626397;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1517489695;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1517489695;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1519039284;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1519567828;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1519567828;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1519568061;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1526978549;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1526978550;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1528201124;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1534491183;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1534491183;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeState(null)__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,state,null,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1547725934;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeEmptyState()__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,empty,state,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1548947531;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeEmptyState()__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,empty,state,operator,open
AbstractStreamOperatorTestHarness -> public void open() throws Exception;1550863152;Calls {@link StreamOperator#open()}. This also_calls {@link StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void open() throws Exception {_		if (!initializeCalled) {_			initializeEmptyState()__		}_		operator.open()__	};calls,link,stream,operator,open,this,also,calls,link,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,open,throws,exception,if,initialize,called,initialize,empty,state,operator,open
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1478251480;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1478783881;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1479853012;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1482206691;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1482244973;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1484216798;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1485250954;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1487167701;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1487783998;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1487871589;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1489149057;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1489422543;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1489819457;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1489819457;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyGroupsStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyGroupsStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyGroupsStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyGroupsStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,key,groups,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,key,groups,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,key,groups,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,key,groups,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1490724328;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1491417780;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1493821466;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1493821557;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>_After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p>_<b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>_For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1495484544;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1497328696;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1497328697;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1497328697;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1502801814;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1503566976;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			null,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,null,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1503598628;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1506348255;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1507568316;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1509118643;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1515213012;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1516626397;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1517489695;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1517489695;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception;1519039284;Takes the different {@link OperatorStateHandles} created by calling {@link #snapshot(long, long)}_on different instances of {@link AbstractStreamOperatorTestHarness} (each one representing one subtask)_and repacks them into a single {@link OperatorStateHandles} so that the parallelism of the test_can change arbitrarily (i.e. be able to scale both up and down).__<p>After repacking the partial states, use {@link #initializeState(OperatorStateHandles)} to initialize_a new instance with the resulting state. Bear in mind that for parallelism greater than one, you_have to use the constructor {@link #AbstractStreamOperatorTestHarness(StreamOperator, int, int, int)}.__<p><b>NOTE: </b> each of the {@code handles} in the argument list is assumed to be from a single task of a single_operator (i.e. chain length of one).__<p>For an example of how to use it, have a look at_{@link AbstractStreamOperatorTest#testStateAndTimerStateShufflingScalingDown()}.__@param handles the different states to be merged._@return the resulting state, or {@code null} if no partial states are specified.;public static OperatorStateHandles repackageState(OperatorStateHandles... handles) throws Exception {__		if (handles.length < 1) {_			return null__		} else if (handles.length == 1) {_			return handles[0]__		}__		List<OperatorStateHandle> mergedManagedOperatorState = new ArrayList<>(handles.length)__		List<OperatorStateHandle> mergedRawOperatorState = new ArrayList<>(handles.length)___		List<KeyedStateHandle> mergedManagedKeyedState = new ArrayList<>(handles.length)__		List<KeyedStateHandle> mergedRawKeyedState = new ArrayList<>(handles.length)___		for (OperatorStateHandles handle: handles) {__			Collection<OperatorStateHandle> managedOperatorState = handle.getManagedOperatorState()__			Collection<OperatorStateHandle> rawOperatorState = handle.getRawOperatorState()__			Collection<KeyedStateHandle> managedKeyedState = handle.getManagedKeyedState()__			Collection<KeyedStateHandle> rawKeyedState = handle.getRawKeyedState()___			if (managedOperatorState != null) {_				mergedManagedOperatorState.addAll(managedOperatorState)__			}__			if (rawOperatorState != null) {_				mergedRawOperatorState.addAll(rawOperatorState)__			}__			if (managedKeyedState != null) {_				mergedManagedKeyedState.addAll(managedKeyedState)__			}__			if (rawKeyedState != null) {_				mergedRawKeyedState.addAll(rawKeyedState)__			}_		}__		return new OperatorStateHandles(_			0,_			mergedManagedKeyedState,_			mergedRawKeyedState,_			mergedManagedOperatorState,_			mergedRawOperatorState)__	};takes,the,different,link,operator,state,handles,created,by,calling,link,snapshot,long,long,on,different,instances,of,link,abstract,stream,operator,test,harness,each,one,representing,one,subtask,and,repacks,them,into,a,single,link,operator,state,handles,so,that,the,parallelism,of,the,test,can,change,arbitrarily,i,e,be,able,to,scale,both,up,and,down,p,after,repacking,the,partial,states,use,link,initialize,state,operator,state,handles,to,initialize,a,new,instance,with,the,resulting,state,bear,in,mind,that,for,parallelism,greater,than,one,you,have,to,use,the,constructor,link,abstract,stream,operator,test,harness,stream,operator,int,int,int,p,b,note,b,each,of,the,code,handles,in,the,argument,list,is,assumed,to,be,from,a,single,task,of,a,single,operator,i,e,chain,length,of,one,p,for,an,example,of,how,to,use,it,have,a,look,at,link,abstract,stream,operator,test,test,state,and,timer,state,shuffling,scaling,down,param,handles,the,different,states,to,be,merged,return,the,resulting,state,or,code,null,if,no,partial,states,are,specified;public,static,operator,state,handles,repackage,state,operator,state,handles,handles,throws,exception,if,handles,length,1,return,null,else,if,handles,length,1,return,handles,0,list,operator,state,handle,merged,managed,operator,state,new,array,list,handles,length,list,operator,state,handle,merged,raw,operator,state,new,array,list,handles,length,list,keyed,state,handle,merged,managed,keyed,state,new,array,list,handles,length,list,keyed,state,handle,merged,raw,keyed,state,new,array,list,handles,length,for,operator,state,handles,handle,handles,collection,operator,state,handle,managed,operator,state,handle,get,managed,operator,state,collection,operator,state,handle,raw,operator,state,handle,get,raw,operator,state,collection,keyed,state,handle,managed,keyed,state,handle,get,managed,keyed,state,collection,keyed,state,handle,raw,keyed,state,handle,get,raw,keyed,state,if,managed,operator,state,null,merged,managed,operator,state,add,all,managed,operator,state,if,raw,operator,state,null,merged,raw,operator,state,add,all,raw,operator,state,if,managed,keyed,state,null,merged,managed,keyed,state,add,all,managed,keyed,state,if,raw,keyed,state,null,merged,raw,keyed,state,add,all,raw,keyed,state,return,new,operator,state,handles,0,merged,managed,keyed,state,merged,raw,keyed,state,merged,managed,operator,state,merged,raw,operator,state
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1487167701;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1487783998;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1487871589;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1489149057;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1489422543;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1489819457;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1489819457;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1490724328;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1491417780;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1493821466;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1493821557;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if(operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1495484544;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if (operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1497328696;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if (operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1497328697;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if (operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1497328697;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if (operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1502801814;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if (operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public void restore(StreamStateHandle snapshot) throws Exception;1503566976;Calls {@link StreamCheckpointedOperator#restoreState(FSDataInputStream)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public void restore(StreamStateHandle snapshot) throws Exception {_		if (operator instanceof StreamCheckpointedOperator) {_			try (FSDataInputStream in = snapshot.openInputStream()) {_				((StreamCheckpointedOperator) operator).restoreState(in)__			}_		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,restore,state,fsdata,input,stream,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,void,restore,stream,state,handle,snapshot,throws,exception,if,operator,instanceof,stream,checkpointed,operator,try,fsdata,input,stream,in,snapshot,open,input,stream,stream,checkpointed,operator,operator,restore,state,in,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1519567828;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()__			taskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), operatorSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setTaskStateSnapshotsByCheckpointId(Collections.singletonMap(0L, taskStateSnapshot))__		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,task,state,snapshot,new,task,state,snapshot,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,operator,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1519567828;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		if (!setupCalled) {_			setup()__		}__		if (operatorStateHandles != null) {_			int numKeyGroups = getEnvironment().getTaskInfo().getMaxNumberOfParallelSubtasks()__			int numSubtasks = getEnvironment().getTaskInfo().getNumberOfParallelSubtasks()__			int subtaskIndex = getEnvironment().getTaskInfo().getIndexOfThisSubtask()___			__			List<KeyGroupRange> keyGroupPartitions = StateAssignmentOperation.createKeyGroupPartitions(_					numKeyGroups,_					numSubtasks)___			KeyGroupRange localKeyGroupRange =_					keyGroupPartitions.get(subtaskIndex)___			List<KeyedStateHandle> localManagedKeyGroupState = null__			if (operatorStateHandles.getManagedKeyedState() != null) {_				localManagedKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getManagedKeyedState(),_						localKeyGroupRange)__			}__			List<KeyedStateHandle> localRawKeyGroupState = null__			if (operatorStateHandles.getRawKeyedState() != null) {_				localRawKeyGroupState = StateAssignmentOperation.getKeyedStateHandles(_						operatorStateHandles.getRawKeyedState(),_						localKeyGroupRange)__			}__			List<OperatorStateHandle> managedOperatorState = new ArrayList<>()__			if (operatorStateHandles.getManagedOperatorState() != null) {_				managedOperatorState.addAll(operatorStateHandles.getManagedOperatorState())__			}_			Collection<OperatorStateHandle> localManagedOperatorState = operatorStateRepartitioner.repartitionState(_					managedOperatorState,_					numSubtasks).get(subtaskIndex)___			List<OperatorStateHandle> rawOperatorState = new ArrayList<>()__			if (operatorStateHandles.getRawOperatorState() != null) {_				rawOperatorState.addAll(operatorStateHandles.getRawOperatorState())__			}_			Collection<OperatorStateHandle> localRawOperatorState = operatorStateRepartitioner.repartitionState(_					rawOperatorState,_					numSubtasks).get(subtaskIndex)___			OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_				nullToEmptyCollection(localManagedOperatorState),_				nullToEmptyCollection(localRawOperatorState),_				nullToEmptyCollection(localManagedKeyGroupState),_				nullToEmptyCollection(localRawKeyGroupState))___			TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()__			taskStateSnapshot.putSubtaskStateByOperatorID(operator.getOperatorID(), operatorSubtaskState)___			taskStateManager.setReportedCheckpointId(0)__			taskStateManager.setTaskStateSnapshotsByCheckpointId(Collections.singletonMap(0L, taskStateSnapshot))__		}__		operator.initializeState()__		initializeCalled = true__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,if,setup,called,setup,if,operator,state,handles,null,int,num,key,groups,get,environment,get,task,info,get,max,number,of,parallel,subtasks,int,num,subtasks,get,environment,get,task,info,get,number,of,parallel,subtasks,int,subtask,index,get,environment,get,task,info,get,index,of,this,subtask,list,key,group,range,key,group,partitions,state,assignment,operation,create,key,group,partitions,num,key,groups,num,subtasks,key,group,range,local,key,group,range,key,group,partitions,get,subtask,index,list,keyed,state,handle,local,managed,key,group,state,null,if,operator,state,handles,get,managed,keyed,state,null,local,managed,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,managed,keyed,state,local,key,group,range,list,keyed,state,handle,local,raw,key,group,state,null,if,operator,state,handles,get,raw,keyed,state,null,local,raw,key,group,state,state,assignment,operation,get,keyed,state,handles,operator,state,handles,get,raw,keyed,state,local,key,group,range,list,operator,state,handle,managed,operator,state,new,array,list,if,operator,state,handles,get,managed,operator,state,null,managed,operator,state,add,all,operator,state,handles,get,managed,operator,state,collection,operator,state,handle,local,managed,operator,state,operator,state,repartitioner,repartition,state,managed,operator,state,num,subtasks,get,subtask,index,list,operator,state,handle,raw,operator,state,new,array,list,if,operator,state,handles,get,raw,operator,state,null,raw,operator,state,add,all,operator,state,handles,get,raw,operator,state,collection,operator,state,handle,local,raw,operator,state,operator,state,repartitioner,repartition,state,raw,operator,state,num,subtasks,get,subtask,index,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,null,to,empty,collection,local,managed,operator,state,null,to,empty,collection,local,raw,operator,state,null,to,empty,collection,local,managed,key,group,state,null,to,empty,collection,local,raw,key,group,state,task,state,snapshot,task,state,snapshot,new,task,state,snapshot,task,state,snapshot,put,subtask,state,by,operator,id,operator,get,operator,id,operator,subtask,state,task,state,manager,set,reported,checkpoint,id,0,task,state,manager,set,task,state,snapshots,by,checkpoint,id,collections,singleton,map,0l,task,state,snapshot,operator,initialize,state,initialize,called,true
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1519568061;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1526978549;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1526978550;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1528201124;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1534491183;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1534491183;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1547725934;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1548947531;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.__<p>This will reshape the state handles to include only those key-group states_in the local key-group range and the operator states that would be assigned to the local_subtask.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before,p,this,will,reshape,the,state,handles,to,include,only,those,key,group,states,in,the,local,key,group,range,and,the,operator,states,that,would,be,assigned,to,the,local,subtask;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception;1550863152;Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#initializeState()}._Calls {@link org.apache.flink.streaming.api.operators.StreamOperator#setup(StreamTask, StreamConfig, Output)}_if it was not called before.;public void initializeState(OperatorSubtaskState operatorStateHandles) throws Exception {_		initializeState(operatorStateHandles, null)__	};calls,link,org,apache,flink,streaming,api,operators,stream,operator,initialize,state,calls,link,org,apache,flink,streaming,api,operators,stream,operator,setup,stream,task,stream,config,output,if,it,was,not,called,before;public,void,initialize,state,operator,subtask,state,operator,state,handles,throws,exception,initialize,state,operator,state,handles,null
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1519568061;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1526978549;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1526978550;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1528201124;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1534491183;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1534491183;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1547725934;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1548947531;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception;1550863152;Calls {@link StreamOperator#snapshotState(long, long, CheckpointOptions, org.apache.flink.runtime.state.CheckpointStreamFactory)}.;public OperatorSnapshotFinalizer snapshotWithLocalState(long checkpointId, long timestamp) throws Exception {__		OperatorSnapshotFutures operatorStateResult = operator.snapshotState(_			checkpointId,_			timestamp,_			CheckpointOptions.forCheckpointWithDefaultLocation(),_			checkpointStorage.resolveCheckpointStorageLocation(checkpointId, CheckpointStorageLocationReference.getDefault()))___		return new OperatorSnapshotFinalizer(operatorStateResult)__	};calls,link,stream,operator,snapshot,state,long,long,checkpoint,options,org,apache,flink,runtime,state,checkpoint,stream,factory;public,operator,snapshot,finalizer,snapshot,with,local,state,long,checkpoint,id,long,timestamp,throws,exception,operator,snapshot,futures,operator,state,result,operator,snapshot,state,checkpoint,id,timestamp,checkpoint,options,for,checkpoint,with,default,location,checkpoint,storage,resolve,checkpoint,storage,location,checkpoint,id,checkpoint,storage,location,reference,get,default,return,new,operator,snapshot,finalizer,operator,state,result
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1487167701;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1487783998;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1487871589;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1489149057;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1489422543;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1489819457;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1489819457;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1490724328;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1491417780;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @Deprecated 	@SuppressWarnings("deprecation") 	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception;1493821466;Calls {@link StreamCheckpointedOperator#snapshotState(FSDataOutputStream, long, long)} if_the operator implements this interface.;@Deprecated_	@SuppressWarnings("deprecation")_	public StreamStateHandle snapshotLegacy(long checkpointId, long timestamp) throws Exception {__		CheckpointStreamFactory.CheckpointStateOutputStream outStream = stateBackend.createStreamFactory(_				new JobID(),_				"test_op").createCheckpointStateOutputStream(checkpointId, timestamp)__		if(operator instanceof StreamCheckpointedOperator) {_			((StreamCheckpointedOperator) operator).snapshotState(outStream, checkpointId, timestamp)__			return outStream.closeAndGetHandle()__		} else {_			throw new RuntimeException("Operator is not StreamCheckpointedOperator")__		}_	};calls,link,stream,checkpointed,operator,snapshot,state,fsdata,output,stream,long,long,if,the,operator,implements,this,interface;deprecated,suppress,warnings,deprecation,public,stream,state,handle,snapshot,legacy,long,checkpoint,id,long,timestamp,throws,exception,checkpoint,stream,factory,checkpoint,state,output,stream,out,stream,state,backend,create,stream,factory,new,job,id,create,checkpoint,state,output,stream,checkpoint,id,timestamp,if,operator,instanceof,stream,checkpointed,operator,stream,checkpointed,operator,operator,snapshot,state,out,stream,checkpoint,id,timestamp,return,out,stream,close,and,get,handle,else,throw,new,runtime,exception,operator,is,not,stream,checkpointed,operator
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1477069385;Get all the output from the task and clear the output buffer._This contains only StreamRecords.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,all,the,output,from,the,task,and,clear,the,output,buffer,this,contains,only,stream,records;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1477517188;Get all the output from the task and clear the output buffer._This contains only StreamRecords.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,all,the,output,from,the,task,and,clear,the,output,buffer,this,contains,only,stream,records;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1477517188;Get all the output from the task and clear the output buffer._This contains only StreamRecords.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,all,the,output,from,the,task,and,clear,the,output,buffer,this,contains,only,stream,records;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1477517188;Get all the output from the task and clear the output buffer._This contains only StreamRecords.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,all,the,output,from,the,task,and,clear,the,output,buffer,this,contains,only,stream,records;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1477517188;Get all the output from the task and clear the output buffer._This contains only StreamRecords.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,all,the,output,from,the,task,and,clear,the,output,buffer,this,contains,only,stream,records;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1477517189;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1478251480;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1478783881;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1479853012;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1482206691;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1482244973;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1484216798;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1485250954;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1487167701;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1487783998;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1487871589;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1489149057;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1489422543;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1489819457;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1489819457;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1490724328;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1491417780;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1493821466;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1493821557;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1495484544;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1497328696;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1497328697;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1497328697;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1502801814;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1503566976;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1503598628;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1506348255;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1507568316;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1509118643;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1515213012;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1516626397;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1517489695;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1517489695;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1519039284;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1519567828;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1519567828;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1519568061;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1526978549;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1526978550;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1528201124;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1534491183;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1534491183;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1547725934;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1548947531;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
AbstractStreamOperatorTestHarness -> @SuppressWarnings("unchecked") 	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords();1550863152;Get only the {@link StreamRecord StreamRecords} emitted by the operator.;@SuppressWarnings("unchecked")_	public List<StreamRecord<? extends OUT>> extractOutputStreamRecords() {_		List<StreamRecord<? extends OUT>> resultElements = new LinkedList<>()__		for (Object e: getOutput()) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};get,only,the,link,stream,record,stream,records,emitted,by,the,operator;suppress,warnings,unchecked,public,list,stream,record,extends,out,extract,output,stream,records,list,stream,record,extends,out,result,elements,new,linked,list,for,object,e,get,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
