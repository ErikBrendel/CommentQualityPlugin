commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testConfigurationFailOnException() throws Exception {     testConfigForwarding(true). }
false;public;0;4;;@Test public void testConfigurationDeclineOnException() throws Exception {     testConfigForwarding(false). }
false;public;0;5;;@Test public void testFailIsDefaultConfig() {     ExecutionConfig newExecutionConfig = new ExecutionConfig().     Assert.assertTrue(newExecutionConfig.isFailTaskOnCheckpointError()). }
false;public;2;8;;@Override public CheckpointExceptionHandler createCheckpointExceptionHandler(boolean failTaskOnCheckpointException, Environment environment) {     Assert.assertEquals(expectedHandlerFlag, failTaskOnCheckpointException).     return super.createCheckpointExceptionHandler(failTaskOnCheckpointException, environment). }
false;protected;0;2;;@Override protected void init() throws Exception { }
false;protected;0;2;;@Override protected void run() throws Exception { }
false;protected;0;2;;@Override protected void cleanup() throws Exception { }
false;protected;0;2;;@Override protected void cancelTask() throws Exception { }
false;protected;0;4;;@Override protected CheckpointExceptionHandlerFactory createCheckpointExceptionHandlerFactory() {     return inspectingFactory. }
false;private;1;41;;private void testConfigForwarding(boolean failOnException) throws Exception {     final boolean expectedHandlerFlag = failOnException.     final DummyEnvironment environment = new DummyEnvironment("test", 1, 0).     environment.setTaskStateManager(new TestTaskStateManager()).     environment.getExecutionConfig().setFailTaskOnCheckpointError(expectedHandlerFlag).     final CheckpointExceptionHandlerFactory inspectingFactory = new CheckpointExceptionHandlerFactory() {          @Override         public CheckpointExceptionHandler createCheckpointExceptionHandler(boolean failTaskOnCheckpointException, Environment environment) {             Assert.assertEquals(expectedHandlerFlag, failTaskOnCheckpointException).             return super.createCheckpointExceptionHandler(failTaskOnCheckpointException, environment).         }     }.     StreamTask streamTask = new StreamTask(environment, null) {          @Override         protected void init() throws Exception {         }          @Override         protected void run() throws Exception {         }          @Override         protected void cleanup() throws Exception {         }          @Override         protected void cancelTask() throws Exception {         }          @Override         protected CheckpointExceptionHandlerFactory createCheckpointExceptionHandlerFactory() {             return inspectingFactory.         }     }.     streamTask.invoke(). }
false;public;0;5;;@Test public void testCheckpointConfigDefault() throws Exception {     StreamExecutionEnvironment streamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment().     Assert.assertTrue(streamExecutionEnvironment.getCheckpointConfig().isFailOnCheckpointingErrors()). }
false;public;0;4;;@Test public void testPropagationFailFromCheckpointConfig() throws Exception {     doTestPropagationFromCheckpointConfig(true). }
false;public;0;4;;@Test public void testPropagationDeclineFromCheckpointConfig() throws Exception {     doTestPropagationFromCheckpointConfig(false). }
false;public;1;3;;@Override public void run(SourceContext<Integer> ctx) throws Exception { }
false;public;0;3;;@Override public void cancel() { }
false;public;1;25;;public void doTestPropagationFromCheckpointConfig(boolean failTaskOnCheckpointErrors) throws Exception {     StreamExecutionEnvironment streamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment().     streamExecutionEnvironment.setParallelism(1).     streamExecutionEnvironment.getCheckpointConfig().setCheckpointInterval(1000).     streamExecutionEnvironment.getCheckpointConfig().setFailOnCheckpointingErrors(failTaskOnCheckpointErrors).     streamExecutionEnvironment.addSource(new SourceFunction<Integer>() {          @Override         public void run(SourceContext<Integer> ctx) throws Exception {         }          @Override         public void cancel() {         }     }).addSink(new DiscardingSink<>()).     StreamGraph streamGraph = streamExecutionEnvironment.getStreamGraph().     JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph).     SerializedValue<ExecutionConfig> serializedExecutionConfig = jobGraph.getSerializedExecutionConfig().     ExecutionConfig executionConfig = serializedExecutionConfig.deserializeValue(Thread.currentThread().getContextClassLoader()).     Assert.assertEquals(failTaskOnCheckpointErrors, executionConfig.isFailTaskOnCheckpointError()). }
