# id;timestamp;commentText;codeText;commentWords;codeWords
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1445418103;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1474981121;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1475231926;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1475766252;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1476972861;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1478636079;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1478636134;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1481290875;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1487762095;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1487871589;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),_					_					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),_	_					_					createBarrier(3, 0),_					_					_					createBuffer(0), createBarrier(4, 0),_					_					_					createBuffer(1), createBuffer(2), createBarrier(5, 1), _					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),_					_					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),_					_					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2), _					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),_					_					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),_					_					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),_					_					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1493195810;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),__					_					createBarrier(3, 0),__					_					createBuffer(0), createBarrier(4, 0),__					_					createBuffer(1), createBuffer(2), createBarrier(5, 1),_					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),__					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),__					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2),_					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),__					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),__					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),__					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1494598316;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),__					_					createBarrier(3, 0),__					_					createBuffer(0), createBarrier(4, 0),__					_					createBuffer(1), createBuffer(2), createBarrier(5, 1),_					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),__					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),__					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2),_					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),__					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),__					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),__					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1495484544;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__<p>This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),__					_					createBarrier(3, 0),__					_					createBuffer(0), createBarrier(4, 0),__					_					createBuffer(1), createBuffer(2), createBarrier(5, 1),_					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),__					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),__					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2),_					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),__					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),__					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),__					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,p,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1502801814;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__<p>This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),__					_					createBarrier(3, 0),__					_					createBuffer(0), createBarrier(4, 0),__					_					createBuffer(1), createBuffer(2), createBarrier(5, 1),_					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),__					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),__					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2),_					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),__					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),__					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),__					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,p,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1509118643;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__<p>This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),__					_					createBarrier(3, 0),__					_					createBuffer(0), createBarrier(4, 0),__					_					createBuffer(1), createBuffer(2), createBarrier(5, 1),_					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),__					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),__					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2),_					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),__					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),__					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),__					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,p,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1515519059;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__<p>This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),__					_					createBarrier(3, 0),__					_					createBuffer(0), createBarrier(4, 0),__					_					createBuffer(1), createBuffer(2), createBarrier(5, 1),_					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),__					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),__					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2),_					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),__					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),__					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),__					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,p,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1516285456;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__<p>This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),__					_					createBarrier(3, 0),__					_					createBuffer(0), createBarrier(4, 0),__					_					createBuffer(1), createBuffer(2), createBarrier(5, 1),_					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),__					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),__					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2),_					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),__					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),__					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),__					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,p,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testCompleteCheckpointsOnLateBarriers();1517489695;This test validates that the barrier tracker does not immediately_discard a pending checkpoint as soon as it sees a barrier from a_later checkpoint from some channel.__<p>This behavior is crucial, otherwise topologies where different inputs_have different latency (and that latency is close to or higher than the_checkpoint interval) may skip many checkpoints, or fail to complete a_checkpoint all together.;@Test_	public void testCompleteCheckpointsOnLateBarriers() {_		try {_			BufferOrEvent[] sequence = {_					_					createBuffer(1), createBuffer(1), createBuffer(0), createBuffer(2),_					createBarrier(2, 1), createBarrier(2, 0), createBarrier(2, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(3, 1), createBarrier(3, 2),__					_					createBuffer(1), createBuffer(0),_					createBarrier(4, 2), createBarrier(4, 1),_					createBuffer(1), createBuffer(2),__					_					createBarrier(3, 0),__					_					createBuffer(0), createBarrier(4, 0),__					_					createBuffer(1), createBuffer(2), createBarrier(5, 1),_					createBuffer(0), createBarrier(5, 0),_					createBuffer(1), createBarrier(5, 2),__					_					createBuffer(1), createBarrier(6, 1),_					createBuffer(0), createBarrier(6, 0),__					_					createBuffer(1), createBarrier(7, 1),_					createBuffer(0), createBarrier(7, 2),_					createBuffer(2), createBarrier(8, 2),_					createBuffer(0), createBarrier(8, 1),_					createBuffer(1), createBarrier(9, 1),__					_					createBarrier(7, 0),_					createBuffer(0), createBarrier(9, 2),_					createBuffer(2), createBarrier(10, 2),__					_					createBarrier(8, 0),_					createBuffer(1), createBuffer(2), createBarrier(9, 0),__					_					createBuffer(1), createBuffer(0), createBuffer(2)_			}___			MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__			BarrierTracker tracker = new BarrierTracker(gate)___			CheckpointSequenceValidator validator =_					new CheckpointSequenceValidator(2, 3, 4, 5, 7, 8, 9)__			tracker.registerCheckpointEventHandler(validator)___			for (BufferOrEvent boe : sequence) {_				if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {_					assertEquals(boe, tracker.getNextNonBlocked())__				}_			}__			assertNull(tracker.getNextNonBlocked())__			assertNull(tracker.getNextNonBlocked())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};this,test,validates,that,the,barrier,tracker,does,not,immediately,discard,a,pending,checkpoint,as,soon,as,it,sees,a,barrier,from,a,later,checkpoint,from,some,channel,p,this,behavior,is,crucial,otherwise,topologies,where,different,inputs,have,different,latency,and,that,latency,is,close,to,or,higher,than,the,checkpoint,interval,may,skip,many,checkpoints,or,fail,to,complete,a,checkpoint,all,together;test,public,void,test,complete,checkpoints,on,late,barriers,try,buffer,or,event,sequence,create,buffer,1,create,buffer,1,create,buffer,0,create,buffer,2,create,barrier,2,1,create,barrier,2,0,create,barrier,2,2,create,buffer,1,create,buffer,0,create,barrier,3,1,create,barrier,3,2,create,buffer,1,create,buffer,0,create,barrier,4,2,create,barrier,4,1,create,buffer,1,create,buffer,2,create,barrier,3,0,create,buffer,0,create,barrier,4,0,create,buffer,1,create,buffer,2,create,barrier,5,1,create,buffer,0,create,barrier,5,0,create,buffer,1,create,barrier,5,2,create,buffer,1,create,barrier,6,1,create,buffer,0,create,barrier,6,0,create,buffer,1,create,barrier,7,1,create,buffer,0,create,barrier,7,2,create,buffer,2,create,barrier,8,2,create,buffer,0,create,barrier,8,1,create,buffer,1,create,barrier,9,1,create,barrier,7,0,create,buffer,0,create,barrier,9,2,create,buffer,2,create,barrier,10,2,create,barrier,8,0,create,buffer,1,create,buffer,2,create,barrier,9,0,create,buffer,1,create,buffer,0,create,buffer,2,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,checkpoint,sequence,validator,validator,new,checkpoint,sequence,validator,2,3,4,5,7,8,9,tracker,register,checkpoint,event,handler,validator,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,assert,equals,boe,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,assert,null,tracker,get,next,non,blocked,catch,exception,e,e,print,stack,trace,fail,e,get,message
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1481290875;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		StatefulTask statefulTask = mock(StatefulTask.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,stateful,task,stateful,task,mock,stateful,task,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1487762095;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		StatefulTask statefulTask = mock(StatefulTask.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,stateful,task,stateful,task,mock,stateful,task,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1487871589;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		StatefulTask statefulTask = mock(StatefulTask.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,stateful,task,stateful,task,mock,stateful,task,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1493195810;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		StatefulTask statefulTask = mock(StatefulTask.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,stateful,task,stateful,task,mock,stateful,task,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1494598316;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		StatefulTask statefulTask = mock(StatefulTask.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,stateful,task,stateful,task,mock,stateful,task,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1495484544;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		StatefulTask statefulTask = mock(StatefulTask.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,stateful,task,stateful,task,mock,stateful,task,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1502801814;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		StatefulTask statefulTask = mock(StatefulTask.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,stateful,task,stateful,task,mock,stateful,task,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1509118643;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		StatefulTask statefulTask = mock(StatefulTask.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,stateful,task,stateful,task,mock,stateful,task,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1515519059;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		AbstractInvokable statefulTask = mock(AbstractInvokable.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,abstract,invokable,stateful,task,mock,abstract,invokable,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1516285456;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		AbstractInvokable statefulTask = mock(AbstractInvokable.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,abstract,invokable,stateful,task,mock,abstract,invokable,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
BarrierTrackerTest -> @Test 	public void testInterleavedCancellationBarriers() throws Exception;1517489695;Tests that each checkpoint is only aborted once in case of an interleaved cancellation_barrier arrival of two consecutive checkpoints.;@Test_	public void testInterleavedCancellationBarriers() throws Exception {_		BufferOrEvent[] sequence = {_			createBarrier(1L, 0),_			createCancellationBarrier(2L, 0),_			createCancellationBarrier(1L, 1),_			createCancellationBarrier(2L, 1),_			createCancellationBarrier(1L, 2),_			createCancellationBarrier(2L, 2),_			createBuffer(0)_		}___		MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence))__		BarrierTracker tracker = new BarrierTracker(gate)__		AbstractInvokable statefulTask = mock(AbstractInvokable.class)___		tracker.registerCheckpointEventHandler(statefulTask)___		for (BufferOrEvent boe : sequence) {_			if (boe.isBuffer() || (boe.getEvent().getClass() != CheckpointBarrier.class && boe.getEvent().getClass() != CancelCheckpointMarker.class)) {_				assertEquals(boe, tracker.getNextNonBlocked())__			}_		}__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(1L), any(Throwable.class))__		verify(statefulTask, times(1)).abortCheckpointOnBarrier(eq(2L), any(Throwable.class))__	};tests,that,each,checkpoint,is,only,aborted,once,in,case,of,an,interleaved,cancellation,barrier,arrival,of,two,consecutive,checkpoints;test,public,void,test,interleaved,cancellation,barriers,throws,exception,buffer,or,event,sequence,create,barrier,1l,0,create,cancellation,barrier,2l,0,create,cancellation,barrier,1l,1,create,cancellation,barrier,2l,1,create,cancellation,barrier,1l,2,create,cancellation,barrier,2l,2,create,buffer,0,mock,input,gate,gate,new,mock,input,gate,3,arrays,as,list,sequence,barrier,tracker,tracker,new,barrier,tracker,gate,abstract,invokable,stateful,task,mock,abstract,invokable,class,tracker,register,checkpoint,event,handler,stateful,task,for,buffer,or,event,boe,sequence,if,boe,is,buffer,boe,get,event,get,class,checkpoint,barrier,class,boe,get,event,get,class,cancel,checkpoint,marker,class,assert,equals,boe,tracker,get,next,non,blocked,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,1l,any,throwable,class,verify,stateful,task,times,1,abort,checkpoint,on,barrier,eq,2l,any,throwable,class
