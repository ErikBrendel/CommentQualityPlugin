commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public MockStreamTaskBuilder setName(String name) {     this.name = name.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setCheckpointLock(Object checkpointLock) {     this.checkpointLock = checkpointLock.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setConfig(StreamConfig config) {     this.config = config.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setExecutionConfig(ExecutionConfig executionConfig) {     this.executionConfig = executionConfig.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setStreamTaskStateInitializer(StreamTaskStateInitializer streamTaskStateInitializer) {     this.streamTaskStateInitializer = streamTaskStateInitializer.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setClosableRegistry(CloseableRegistry closableRegistry) {     this.closableRegistry = closableRegistry.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setStreamStatusMaintainer(StreamStatusMaintainer streamStatusMaintainer) {     this.streamStatusMaintainer = streamStatusMaintainer.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setCheckpointStorage(CheckpointStorage checkpointStorage) {     this.checkpointStorage = checkpointStorage.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setProcessingTimeService(ProcessingTimeService processingTimeService) {     this.processingTimeService = processingTimeService.     return this. }
false;public;1;4;;public MockStreamTaskBuilder setHandleAsyncException(BiConsumer<String, Throwable> handleAsyncException) {     this.handleAsyncException = handleAsyncException.     return this. }
false;public;0;15;;public MockStreamTask build() {     return new MockStreamTask(environment, name, checkpointLock, config, executionConfig, streamTaskStateInitializer, closableRegistry, streamStatusMaintainer, checkpointStorage, processingTimeService, handleAsyncException, accumulatorMap). }
