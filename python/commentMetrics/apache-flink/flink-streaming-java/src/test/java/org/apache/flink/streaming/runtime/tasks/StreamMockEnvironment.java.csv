commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void addInputGate(InputGate gate) {     inputs.add(gate). }
false;public;2;12;;public <T> void addOutput(final Collection<Object> outputList, final TypeSerializer<T> serializer) {     try {         outputs.add(new RecordOrEventCollectingResultPartitionWriter<T>(outputList, new TestPooledBufferProvider(Integer.MAX_VALUE), serializer)).     } catch (Throwable t) {         t.printStackTrace().         fail(t.getMessage()).     } }
false;public;0;4;;@Override public Configuration getTaskConfiguration() {     return this.taskConfiguration. }
false;public;0;4;;@Override public MemoryManager getMemoryManager() {     return this.memManager. }
false;public;0;4;;@Override public IOManager getIOManager() {     return this.ioManager. }
false;public;0;4;;@Override public ExecutionConfig getExecutionConfig() {     return this.executionConfig. }
false;public;0;4;;@Override public JobID getJobID() {     return this.jobID. }
false;public;0;4;;@Override public Configuration getJobConfiguration() {     return this.jobConfiguration. }
false;public;0;4;;@Override public InputSplitProvider getInputSplitProvider() {     return this.inputSplitProvider. }
false;public;0;4;;@Override public TaskInfo getTaskInfo() {     return this.taskInfo. }
false;public;0;4;;@Override public ClassLoader getUserClassLoader() {     return getClass().getClassLoader(). }
false;public;0;4;;@Override public Map<String, Future<Path>> getDistributedCacheEntries() {     return Collections.emptyMap(). }
false;public;1;4;;@Override public ResultPartitionWriter getWriter(int index) {     return outputs.get(index). }
false;public;0;4;;@Override public ResultPartitionWriter[] getAllWriters() {     return outputs.toArray(new ResultPartitionWriter[outputs.size()]). }
false;public;1;4;;@Override public InputGate getInputGate(int index) {     return inputs.get(index). }
false;public;0;6;;@Override public InputGate[] getAllInputGates() {     InputGate[] gates = new InputGate[inputs.size()].     inputs.toArray(gates).     return gates. }
false;public;0;4;;@Override public TaskEventDispatcher getTaskEventDispatcher() {     return taskEventDispatcher. }
false;public;0;4;;@Override public JobVertexID getJobVertexId() {     return new JobVertexID(new byte[16]). }
false;public;0;4;;@Override public ExecutionAttemptID getExecutionId() {     return executionAttemptID. }
false;public;0;4;;@Override public BroadcastVariableManager getBroadcastVariableManager() {     return this.bcVarManager. }
false;public;0;4;;@Override public TaskStateManager getTaskStateManager() {     return taskStateManager. }
false;public;0;4;;@Override public GlobalAggregateManager getGlobalAggregateManager() {     return aggregateManager. }
false;public;0;4;;@Override public AccumulatorRegistry getAccumulatorRegistry() {     return accumulatorRegistry. }
false;public;0;4;;@Override public TaskKvStateRegistry getTaskKvStateRegistry() {     return kvStateRegistry. }
false;public;2;3;;@Override public void acknowledgeCheckpoint(long checkpointId, CheckpointMetrics checkpointMetrics) { }
false;public;3;8;;@Override public void acknowledgeCheckpoint(long checkpointId, CheckpointMetrics checkpointMetrics, TaskStateSnapshot subtaskState) {     taskStateManager.reportTaskStateSnapshots(new CheckpointMetaData(checkpointId, 0L), checkpointMetrics, subtaskState, null). }
false;public;2;2;;@Override public void declineCheckpoint(long checkpointId, Throwable cause) { }
false;public;1;4;;@Override public void failExternally(Throwable cause) {     this.wasFailedExternally = true. }
false;public;0;3;;public boolean wasFailedExternally() {     return wasFailedExternally. }
false;public;0;4;;@Override public TaskManagerRuntimeInfo getTaskManagerInfo() {     return new TestingTaskManagerRuntimeInfo(). }
false;public;0;4;;@Override public TaskMetricGroup getMetricGroup() {     return UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(). }
