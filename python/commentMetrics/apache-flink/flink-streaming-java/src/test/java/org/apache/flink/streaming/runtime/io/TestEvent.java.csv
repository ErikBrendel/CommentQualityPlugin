commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;// ------------------------------------------------------------------------ // Serialization // ------------------------------------------------------------------------ @Override public void write(DataOutputView out) throws IOException {     out.writeLong(magicNumber).     out.writeInt(payload.length).     out.write(payload). }
false;public;1;6;;@Override public void read(DataInputView in) throws IOException {     this.magicNumber = in.readLong().     this.payload = new byte[in.readInt()].     in.readFully(this.payload). }
false;public;0;4;;// ------------------------------------------------------------------------ // Standard utilities // ------------------------------------------------------------------------ @Override public int hashCode() {     return Long.valueOf(magicNumber).hashCode(). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj != null && obj.getClass() == TestEvent.class) {         TestEvent that = (TestEvent) obj.         return this.magicNumber == that.magicNumber && Arrays.equals(this.payload, that.payload).     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return String.format("TestEvent %d (%s)", magicNumber, StringUtils.byteToHexString(payload)). }
