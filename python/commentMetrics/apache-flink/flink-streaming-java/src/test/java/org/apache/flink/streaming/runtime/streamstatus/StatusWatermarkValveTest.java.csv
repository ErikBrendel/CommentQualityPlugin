# id;timestamp;commentText;codeText;commentWords;codeWords
StatusWatermarkValveTest -> @Test 	public void testMultipleInputValve();1486732842;Tests that valves work as expected when they handle multiple input channels (tested with 3)._Tested behaviours are explained as inline comments.;@Test_	public void testMultipleInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		_		_		_		__		valve.inputWatermark(new Watermark(0), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(0), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		valve.inputWatermark(new Watermark(12), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(8), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(10), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(15), 1)__		_		assertEquals(new Watermark(10), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		__		valve.inputWatermark(new Watermark(6), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		_		_		_		_		_		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(12), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(17), 0)__		assertEquals(new Watermark(15), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(25), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(20), 1)__		assertEquals(new Watermark(20), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		_		_		_		__		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(18), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(22), 1)__		assertEquals(new Watermark(22), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(28), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(33), 1)__		assertEquals(new Watermark(28), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(30), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(31), 0)__		_		assertEquals(new Watermark(30), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(34), 2)__		assertEquals(new Watermark(31), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		_		_		assertEquals(new Watermark(33), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		_		__		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(36), 0)__		assertEquals(new Watermark(36), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(35), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(37), 0)__		assertEquals(new Watermark(37), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(38), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(40), 0)__		_		assertEquals(new Watermark(38), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,valves,work,as,expected,when,they,handle,multiple,input,channels,tested,with,3,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,multiple,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,12,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,8,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,10,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,15,1,assert,equals,new,watermark,10,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,6,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,12,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,17,0,assert,equals,new,watermark,15,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,25,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,20,1,assert,equals,new,watermark,20,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,18,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,22,1,assert,equals,new,watermark,22,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,28,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,33,1,assert,equals,new,watermark,28,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,30,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,31,0,assert,equals,new,watermark,30,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,34,2,assert,equals,new,watermark,31,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,equals,new,watermark,33,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,1,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,36,0,assert,equals,new,watermark,36,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,35,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,37,0,assert,equals,new,watermark,37,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,38,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,40,0,assert,equals,new,watermark,38,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testMultipleInputValve();1495484544;Tests that valves work as expected when they handle multiple input channels (tested with 3)._Tested behaviours are explained as inline comments.;@Test_	public void testMultipleInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		_		_		_		__		valve.inputWatermark(new Watermark(0), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(0), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		valve.inputWatermark(new Watermark(12), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(8), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(10), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(15), 1)__		_		assertEquals(new Watermark(10), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		__		valve.inputWatermark(new Watermark(6), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		_		_		_		_		_		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(12), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(17), 0)__		assertEquals(new Watermark(15), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(25), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(20), 1)__		assertEquals(new Watermark(20), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		_		_		_		__		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(18), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(22), 1)__		assertEquals(new Watermark(22), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(28), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(33), 1)__		assertEquals(new Watermark(28), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(30), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(31), 0)__		_		assertEquals(new Watermark(30), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(34), 2)__		assertEquals(new Watermark(31), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		_		_		assertEquals(new Watermark(33), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		_		__		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(36), 0)__		assertEquals(new Watermark(36), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(35), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(37), 0)__		assertEquals(new Watermark(37), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(38), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(40), 0)__		_		assertEquals(new Watermark(38), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,valves,work,as,expected,when,they,handle,multiple,input,channels,tested,with,3,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,multiple,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,12,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,8,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,10,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,15,1,assert,equals,new,watermark,10,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,6,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,12,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,17,0,assert,equals,new,watermark,15,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,25,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,20,1,assert,equals,new,watermark,20,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,18,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,22,1,assert,equals,new,watermark,22,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,28,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,33,1,assert,equals,new,watermark,28,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,30,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,31,0,assert,equals,new,watermark,30,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,34,2,assert,equals,new,watermark,31,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,equals,new,watermark,33,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,1,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,36,0,assert,equals,new,watermark,36,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,35,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,37,0,assert,equals,new,watermark,37,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,38,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,40,0,assert,equals,new,watermark,38,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testMultipleInputValve();1506955238;Tests that valves work as expected when they handle multiple input channels (tested with 3)._Tested behaviours are explained as inline comments.;@Test_	public void testMultipleInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		_		_		_		__		valve.inputWatermark(new Watermark(0), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(0), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		valve.inputWatermark(new Watermark(12), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(8), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(10), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(15), 1)__		_		assertEquals(new Watermark(10), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		__		valve.inputWatermark(new Watermark(6), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		_		_		_		_		_		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(12), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(17), 0)__		assertEquals(new Watermark(15), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(25), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(20), 1)__		assertEquals(new Watermark(20), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		_		_		_		__		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(18), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(22), 1)__		assertEquals(new Watermark(22), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(28), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(33), 1)__		assertEquals(new Watermark(28), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(30), 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(31), 0)__		_		assertEquals(new Watermark(30), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(34), 2)__		assertEquals(new Watermark(31), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		_		_		assertEquals(new Watermark(33), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		_		__		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(36), 0)__		assertEquals(new Watermark(36), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(35), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(37), 0)__		assertEquals(new Watermark(37), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		_		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(38), 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(40), 0)__		_		assertEquals(new Watermark(38), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,valves,work,as,expected,when,they,handle,multiple,input,channels,tested,with,3,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,multiple,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,12,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,8,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,10,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,15,1,assert,equals,new,watermark,10,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,6,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,12,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,17,0,assert,equals,new,watermark,15,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,25,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,20,1,assert,equals,new,watermark,20,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,18,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,22,1,assert,equals,new,watermark,22,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,28,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,33,1,assert,equals,new,watermark,28,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,30,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,31,0,assert,equals,new,watermark,30,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,34,2,assert,equals,new,watermark,31,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,equals,new,watermark,33,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,1,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,36,0,assert,equals,new,watermark,36,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,35,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,37,0,assert,equals,new,watermark,37,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,38,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,40,0,assert,equals,new,watermark,38,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testMultipleInputValve();1506955334;Tests that valves work as expected when they handle multiple input channels (tested with 3)._Tested behaviours are explained as inline comments.;@Test_	public void testMultipleInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		_		_		_		__		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(0), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())___		_		_		_		__		valve.inputWatermark(new Watermark(12), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(8), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(10), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(15), 1)__		_		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())___		_		_		__		valve.inputWatermark(new Watermark(6), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		_		__		_		_		_		_		_		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(12), valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(17), 0)__		assertEquals(new Watermark(15), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(20), 1)__		assertEquals(new Watermark(20), valveOutput.popLastSeenOutput())___		_		_		_		_		_		_		__		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(18), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(22), 1)__		assertEquals(new Watermark(22), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(28), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(33), 1)__		assertEquals(new Watermark(28), valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(30), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(31), 0)__		_		assertEquals(new Watermark(30), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(34), 2)__		assertEquals(new Watermark(31), valveOutput.popLastSeenOutput())___		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		_		_		assertEquals(new Watermark(33), valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		_		_		_		_		__		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(36), 0)__		assertEquals(new Watermark(36), valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(35), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(37), 0)__		assertEquals(new Watermark(37), valveOutput.popLastSeenOutput())___		_		_		_		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(38), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(40), 0)__		_		assertEquals(new Watermark(38), valveOutput.popLastSeenOutput())__	};tests,that,valves,work,as,expected,when,they,handle,multiple,input,channels,tested,with,3,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,multiple,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,0,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,12,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,8,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,10,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,15,1,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,6,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,12,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,17,0,assert,equals,new,watermark,15,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,25,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,20,1,assert,equals,new,watermark,20,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,18,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,22,1,assert,equals,new,watermark,22,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,28,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,33,1,assert,equals,new,watermark,28,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,30,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,31,0,assert,equals,new,watermark,30,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,34,2,assert,equals,new,watermark,31,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,new,watermark,33,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,1,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,36,0,assert,equals,new,watermark,36,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,35,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,37,0,assert,equals,new,watermark,37,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,38,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,40,0,assert,equals,new,watermark,38,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputValve();1506955334;Tests that valves work as expected when they handle multiple input channels (tested with 3)._Tested behaviours are explained as inline comments.;@Test_	public void testMultipleInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		_		_		_		__		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(0), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())___		_		_		_		__		valve.inputWatermark(new Watermark(12), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(8), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(10), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(15), 1)__		_		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())___		_		_		__		valve.inputWatermark(new Watermark(6), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		_		__		_		_		_		_		_		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(12), valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(17), 0)__		assertEquals(new Watermark(15), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(20), 1)__		assertEquals(new Watermark(20), valveOutput.popLastSeenOutput())___		_		_		_		_		_		_		__		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(18), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(22), 1)__		assertEquals(new Watermark(22), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(28), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(33), 1)__		assertEquals(new Watermark(28), valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(30), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(31), 0)__		_		assertEquals(new Watermark(30), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(34), 2)__		assertEquals(new Watermark(31), valveOutput.popLastSeenOutput())___		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		_		_		assertEquals(new Watermark(33), valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		_		_		_		_		__		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(36), 0)__		assertEquals(new Watermark(36), valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(35), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(37), 0)__		assertEquals(new Watermark(37), valveOutput.popLastSeenOutput())___		_		_		_		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(38), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(40), 0)__		_		assertEquals(new Watermark(38), valveOutput.popLastSeenOutput())__	};tests,that,valves,work,as,expected,when,they,handle,multiple,input,channels,tested,with,3,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,multiple,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,0,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,12,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,8,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,10,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,15,1,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,6,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,12,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,17,0,assert,equals,new,watermark,15,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,25,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,20,1,assert,equals,new,watermark,20,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,18,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,22,1,assert,equals,new,watermark,22,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,28,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,33,1,assert,equals,new,watermark,28,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,30,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,31,0,assert,equals,new,watermark,30,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,34,2,assert,equals,new,watermark,31,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,new,watermark,33,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,1,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,36,0,assert,equals,new,watermark,36,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,35,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,37,0,assert,equals,new,watermark,37,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,38,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,40,0,assert,equals,new,watermark,38,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testSingleInputIncreasingWatermarks();1506955334;Tests that watermarks correctly advance with increasing watermarks for a single input valve.;@Test_	public void testSingleInputIncreasingWatermarks() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,watermarks,correctly,advance,with,increasing,watermarks,for,a,single,input,valve;test,public,void,test,single,input,increasing,watermarks,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,watermark,new,watermark,0,0,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testSingleInputIncreasingWatermarks();1506955334;Tests that watermarks correctly advance with increasing watermarks for a single input valve.;@Test_	public void testSingleInputIncreasingWatermarks() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,watermarks,correctly,advance,with,increasing,watermarks,for,a,single,input,valve;test,public,void,test,single,input,increasing,watermarks,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,watermark,new,watermark,0,0,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputWatermarkAdvancingWithPartiallyIdleChannels();1506955334;Tests that for multiple inputs, when some inputs are idle, the min watermark_is correctly computed and advanced from the remaining active inputs.;@Test_	public void testMultipleInputWatermarkAdvancingWithPartiallyIdleChannels() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(15), 0)__		valve.inputWatermark(new Watermark(10), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		_		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(18), 1)__		_		assertEquals(new Watermark(15), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(20), 0)__		_		assertEquals(new Watermark(18), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,for,multiple,inputs,when,some,inputs,are,idle,the,min,watermark,is,correctly,computed,and,advanced,from,the,remaining,active,inputs;test,public,void,test,multiple,input,watermark,advancing,with,partially,idle,channels,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,15,0,valve,input,watermark,new,watermark,10,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,18,1,assert,equals,new,watermark,15,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,20,0,assert,equals,new,watermark,18,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputWatermarkAdvancingWithPartiallyIdleChannels();1506955334;Tests that for multiple inputs, when some inputs are idle, the min watermark_is correctly computed and advanced from the remaining active inputs.;@Test_	public void testMultipleInputWatermarkAdvancingWithPartiallyIdleChannels() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(15), 0)__		valve.inputWatermark(new Watermark(10), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		_		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(18), 1)__		_		assertEquals(new Watermark(15), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(20), 0)__		_		assertEquals(new Watermark(18), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,for,multiple,inputs,when,some,inputs,are,idle,the,min,watermark,is,correctly,computed,and,advanced,from,the,remaining,active,inputs;test,public,void,test,multiple,input,watermark,advancing,with,partially,idle,channels,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,15,0,valve,input,watermark,new,watermark,10,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,18,1,assert,equals,new,watermark,15,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,20,0,assert,equals,new,watermark,18,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testSingleInputDecreasingWatermarksYieldsNoOutput();1506955334;Tests that watermarks do not advance with decreasing watermark inputs for a single input valve.;@Test_	public void testSingleInputDecreasingWatermarksYieldsNoOutput() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(18), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(42), 0)__		assertEquals(new Watermark(42), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,watermarks,do,not,advance,with,decreasing,watermark,inputs,for,a,single,input,valve;test,public,void,test,single,input,decreasing,watermarks,yields,no,output,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,18,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,42,0,assert,equals,new,watermark,42,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testSingleInputDecreasingWatermarksYieldsNoOutput();1506955334;Tests that watermarks do not advance with decreasing watermark inputs for a single input valve.;@Test_	public void testSingleInputDecreasingWatermarksYieldsNoOutput() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(18), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(42), 0)__		assertEquals(new Watermark(42), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,watermarks,do,not,advance,with,decreasing,watermark,inputs,for,a,single,input,valve;test,public,void,test,single,input,decreasing,watermarks,yields,no,output,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,18,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,42,0,assert,equals,new,watermark,42,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testOneInputValve();1486732842;Tests that valves work as expected when they handle only 1 input channel._Tested behaviours are explained as inline comments.;@Test_	public void testOneInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(new Watermark(0), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(18), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(42), 0)__		assertEquals(new Watermark(42), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(52), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(60), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(40), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(68), 0)__		assertEquals(new Watermark(68), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(72), 0)__		assertEquals(new Watermark(72), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,valves,work,as,expected,when,they,handle,only,1,input,channel,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,one,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,stream,status,stream,status,active,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,0,assert,equals,new,watermark,0,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,18,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,42,0,assert,equals,new,watermark,42,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,52,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,60,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,40,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,68,0,assert,equals,new,watermark,68,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,72,0,assert,equals,new,watermark,72,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testOneInputValve();1495484544;Tests that valves work as expected when they handle only 1 input channel._Tested behaviours are explained as inline comments.;@Test_	public void testOneInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(new Watermark(0), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(18), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(42), 0)__		assertEquals(new Watermark(42), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(52), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(60), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(40), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(68), 0)__		assertEquals(new Watermark(68), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(72), 0)__		assertEquals(new Watermark(72), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,valves,work,as,expected,when,they,handle,only,1,input,channel,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,one,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,stream,status,stream,status,active,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,0,assert,equals,new,watermark,0,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,18,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,42,0,assert,equals,new,watermark,42,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,52,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,60,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,40,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,68,0,assert,equals,new,watermark,68,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,72,0,assert,equals,new,watermark,72,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testOneInputValve();1506955238;Tests that valves work as expected when they handle only 1 input channel._Tested behaviours are explained as inline comments.;@Test_	public void testOneInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(new Watermark(0), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(18), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(42), 0)__		assertEquals(new Watermark(42), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(52), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(60), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		_		valve.inputWatermark(new Watermark(40), 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		_		valve.inputWatermark(new Watermark(68), 0)__		assertEquals(new Watermark(68), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputWatermark(new Watermark(72), 0)__		assertEquals(new Watermark(72), valveOutput.popLastOutputWatermark())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,valves,work,as,expected,when,they,handle,only,1,input,channel,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,one,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,stream,status,stream,status,active,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,0,0,assert,equals,new,watermark,0,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,18,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,42,0,assert,equals,new,watermark,42,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,52,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,60,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,40,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,68,0,assert,equals,new,watermark,68,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,watermark,new,watermark,72,0,assert,equals,new,watermark,72,valve,output,pop,last,output,watermark,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testOneInputValve();1506955334;Tests that valves work as expected when they handle only 1 input channel._Tested behaviours are explained as inline comments.;@Test_	public void testOneInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(18), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(42), 0)__		assertEquals(new Watermark(42), valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(52), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(60), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())____		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())____		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())____		_		_		valve.inputWatermark(new Watermark(40), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(68), 0)__		assertEquals(new Watermark(68), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(72), 0)__		assertEquals(new Watermark(72), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,valves,work,as,expected,when,they,handle,only,1,input,channel,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,one,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,stream,status,stream,status,active,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,0,0,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,18,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,42,0,assert,equals,new,watermark,42,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,52,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,60,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,40,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,68,0,assert,equals,new,watermark,68,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,72,0,assert,equals,new,watermark,72,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testOneInputValve();1506955334;Tests that valves work as expected when they handle only 1 input channel._Tested behaviours are explained as inline comments.;@Test_	public void testOneInputValve() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		valve.inputWatermark(new Watermark(0), 0)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(18), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(42), 0)__		assertEquals(new Watermark(42), valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(52), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(60), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())____		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())____		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())____		_		_		valve.inputWatermark(new Watermark(40), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(68), 0)__		assertEquals(new Watermark(68), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(72), 0)__		assertEquals(new Watermark(72), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,valves,work,as,expected,when,they,handle,only,1,input,channel,tested,behaviours,are,explained,as,inline,comments;test,public,void,test,one,input,valve,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,stream,status,stream,status,active,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,0,0,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,18,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,42,0,assert,equals,new,watermark,42,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,52,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,60,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,40,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,68,0,assert,equals,new,watermark,68,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,72,0,assert,equals,new,watermark,72,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testSingleInputWatermarksIntactDuringIdleness();1506955334;Tests that the watermark of an input channel remains intact while in the IDLE status.;@Test_	public void testSingleInputWatermarksIntactDuringIdleness() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(50), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())__		assertEquals(25, valve.getInputChannelStatus(0).watermark)___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(50), 0)__		assertEquals(new Watermark(50), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,the,watermark,of,an,input,channel,remains,intact,while,in,the,idle,status;test,public,void,test,single,input,watermarks,intact,during,idleness,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,50,0,assert,equals,null,valve,output,pop,last,seen,output,assert,equals,25,valve,get,input,channel,status,0,watermark,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,50,0,assert,equals,new,watermark,50,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testSingleInputWatermarksIntactDuringIdleness();1506955334;Tests that the watermark of an input channel remains intact while in the IDLE status.;@Test_	public void testSingleInputWatermarksIntactDuringIdleness() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		valve.inputWatermark(new Watermark(25), 0)__		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(50), 0)__		assertEquals(null, valveOutput.popLastSeenOutput())__		assertEquals(25, valve.getInputChannelStatus(0).watermark)___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(50), 0)__		assertEquals(new Watermark(50), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,the,watermark,of,an,input,channel,remains,intact,while,in,the,idle,status;test,public,void,test,single,input,watermarks,intact,during,idleness,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,watermark,new,watermark,25,0,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,50,0,assert,equals,null,valve,output,pop,last,seen,output,assert,equals,25,valve,get,input,channel,status,0,watermark,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,50,0,assert,equals,new,watermark,50,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputWatermarkAdvancingAsChannelsIndividuallyBecomeIdle();1506955334;Tests that as input channels individually and gradually become idle, watermarks_are output as soon remaining active channels can yield a new min watermark.;@Test_	public void testMultipleInputWatermarkAdvancingAsChannelsIndividuallyBecomeIdle() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(25), 0)__		valve.inputWatermark(new Watermark(10), 1)__		valve.inputWatermark(new Watermark(17), 2)__		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		_		assertEquals(new Watermark(17), valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		_		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,as,input,channels,individually,and,gradually,become,idle,watermarks,are,output,as,soon,remaining,active,channels,can,yield,a,new,min,watermark;test,public,void,test,multiple,input,watermark,advancing,as,channels,individually,become,idle,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,25,0,valve,input,watermark,new,watermark,10,1,valve,input,watermark,new,watermark,17,2,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,1,assert,equals,new,watermark,17,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputWatermarkAdvancingAsChannelsIndividuallyBecomeIdle();1506955334;Tests that as input channels individually and gradually become idle, watermarks_are output as soon remaining active channels can yield a new min watermark.;@Test_	public void testMultipleInputWatermarkAdvancingAsChannelsIndividuallyBecomeIdle() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(25), 0)__		valve.inputWatermark(new Watermark(10), 1)__		valve.inputWatermark(new Watermark(17), 2)__		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		_		assertEquals(new Watermark(17), valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		_		assertEquals(new Watermark(25), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,as,input,channels,individually,and,gradually,become,idle,watermarks,are,output,as,soon,remaining,active,channels,can,yield,a,new,min,watermark;test,public,void,test,multiple,input,watermark,advancing,as,channels,individually,become,idle,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,25,0,valve,input,watermark,new,watermark,10,1,valve,input,watermark,new,watermark,17,2,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,1,assert,equals,new,watermark,17,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,25,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testSingleInputStreamStatusToggling();1506955334;Tests that stream status toggling works correctly, as well as that non-toggling status_inputs do not yield output for a single input valve.;@Test_	public void testSingleInputStreamStatusToggling() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		_		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,stream,status,toggling,works,correctly,as,well,as,that,non,toggling,status,inputs,do,not,yield,output,for,a,single,input,valve;test,public,void,test,single,input,stream,status,toggling,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,stream,status,stream,status,active,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testSingleInputStreamStatusToggling();1506955334;Tests that stream status toggling works correctly, as well as that non-toggling status_inputs do not yield output for a single input valve.;@Test_	public void testSingleInputStreamStatusToggling() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(1, valveOutput)___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		_		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,stream,status,toggling,works,correctly,as,well,as,that,non,toggling,status,inputs,do,not,yield,output,for,a,single,input,valve;test,public,void,test,single,input,stream,status,toggling,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,1,valve,output,valve,input,stream,status,stream,status,active,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,stream,status,active,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputFlushMaxWatermarkAndStreamStatusOnceAllInputsBecomeIdle();1506955334;Tests that when all inputs become idle, the max watermark across all channels_is correctly "flushed" from the valve, as well as the stream status IDLE marker.__<p>This test along with {@link #testMultipleInputWatermarkAdvancingAsChannelsIndividuallyBecomeIdle}_should completely verify that the eventual watermark advancement result when all inputs become idle_is independent of the order that the inputs become idle.;@Test_	public void testMultipleInputFlushMaxWatermarkAndStreamStatusOnceAllInputsBecomeIdle() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		_		_		_		_		_		_		__		valve.inputWatermark(new Watermark(10), 0)__		valve.inputWatermark(new Watermark(5), 1)__		valve.inputWatermark(new Watermark(3), 2)__		assertEquals(new Watermark(3), valveOutput.popLastSeenOutput())___		_		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,when,all,inputs,become,idle,the,max,watermark,across,all,channels,is,correctly,flushed,from,the,valve,as,well,as,the,stream,status,idle,marker,p,this,test,along,with,link,test,multiple,input,watermark,advancing,as,channels,individually,become,idle,should,completely,verify,that,the,eventual,watermark,advancement,result,when,all,inputs,become,idle,is,independent,of,the,order,that,the,inputs,become,idle;test,public,void,test,multiple,input,flush,max,watermark,and,stream,status,once,all,inputs,become,idle,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,10,0,valve,input,watermark,new,watermark,5,1,valve,input,watermark,new,watermark,3,2,assert,equals,new,watermark,3,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,valve,input,stream,status,stream,status,idle,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputFlushMaxWatermarkAndStreamStatusOnceAllInputsBecomeIdle();1506955334;Tests that when all inputs become idle, the max watermark across all channels_is correctly "flushed" from the valve, as well as the stream status IDLE marker.__<p>This test along with {@link #testMultipleInputWatermarkAdvancingAsChannelsIndividuallyBecomeIdle}_should completely verify that the eventual watermark advancement result when all inputs become idle_is independent of the order that the inputs become idle.;@Test_	public void testMultipleInputFlushMaxWatermarkAndStreamStatusOnceAllInputsBecomeIdle() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		_		_		_		_		_		_		__		valve.inputWatermark(new Watermark(10), 0)__		valve.inputWatermark(new Watermark(5), 1)__		valve.inputWatermark(new Watermark(3), 2)__		assertEquals(new Watermark(3), valveOutput.popLastSeenOutput())___		_		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,when,all,inputs,become,idle,the,max,watermark,across,all,channels,is,correctly,flushed,from,the,valve,as,well,as,the,stream,status,idle,marker,p,this,test,along,with,link,test,multiple,input,watermark,advancing,as,channels,individually,become,idle,should,completely,verify,that,the,eventual,watermark,advancement,result,when,all,inputs,become,idle,is,independent,of,the,order,that,the,inputs,become,idle;test,public,void,test,multiple,input,flush,max,watermark,and,stream,status,once,all,inputs,become,idle,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,10,0,valve,input,watermark,new,watermark,5,1,valve,input,watermark,new,watermark,3,2,assert,equals,new,watermark,3,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,valve,input,stream,status,stream,status,idle,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputDecreasingWatermarksYieldsNoOutput();1506955334;Tests that for a multiple input valve, decreasing watermarks will yield no output.;@Test_	public void testMultipleInputDecreasingWatermarksYieldsNoOutput() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(25), 0)__		valve.inputWatermark(new Watermark(10), 1)__		valve.inputWatermark(new Watermark(17), 2)__		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(12), 0)__		valve.inputWatermark(new Watermark(8), 1)__		valve.inputWatermark(new Watermark(15), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,for,a,multiple,input,valve,decreasing,watermarks,will,yield,no,output;test,public,void,test,multiple,input,decreasing,watermarks,yields,no,output,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,25,0,valve,input,watermark,new,watermark,10,1,valve,input,watermark,new,watermark,17,2,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,12,0,valve,input,watermark,new,watermark,8,1,valve,input,watermark,new,watermark,15,2,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputDecreasingWatermarksYieldsNoOutput();1506955334;Tests that for a multiple input valve, decreasing watermarks will yield no output.;@Test_	public void testMultipleInputDecreasingWatermarksYieldsNoOutput() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(25), 0)__		valve.inputWatermark(new Watermark(10), 1)__		valve.inputWatermark(new Watermark(17), 2)__		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(12), 0)__		valve.inputWatermark(new Watermark(8), 1)__		valve.inputWatermark(new Watermark(15), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,for,a,multiple,input,valve,decreasing,watermarks,will,yield,no,output;test,public,void,test,multiple,input,decreasing,watermarks,yields,no,output,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,25,0,valve,input,watermark,new,watermark,10,1,valve,input,watermark,new,watermark,17,2,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,12,0,valve,input,watermark,new,watermark,8,1,valve,input,watermark,new,watermark,15,2,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputWatermarkRealignmentAfterResumeActive();1506955334;Tests that when idle channels become active again, they need to "catch up" with_the latest watermark before they are considered for min watermark computation again.;@Test_	public void testMultipleInputWatermarkRealignmentAfterResumeActive() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(10), 0)__		valve.inputWatermark(new Watermark(7), 1)__		valve.inputWatermark(new Watermark(3), 2)__		assertEquals(new Watermark(3), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(7), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 2)__		assertFalse(valve.getInputChannelStatus(2).isWatermarkAligned)___		_		valve.inputWatermark(new Watermark(5), 2)__		assertEquals(5, valve.getInputChannelStatus(2).watermark)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(9), 2)__		assertTrue(valve.getInputChannelStatus(2).isWatermarkAligned)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(12), 1)__		assertEquals(new Watermark(9), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,when,idle,channels,become,active,again,they,need,to,catch,up,with,the,latest,watermark,before,they,are,considered,for,min,watermark,computation,again;test,public,void,test,multiple,input,watermark,realignment,after,resume,active,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,10,0,valve,input,watermark,new,watermark,7,1,valve,input,watermark,new,watermark,3,2,assert,equals,new,watermark,3,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,7,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,2,assert,false,valve,get,input,channel,status,2,is,watermark,aligned,valve,input,watermark,new,watermark,5,2,assert,equals,5,valve,get,input,channel,status,2,watermark,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,9,2,assert,true,valve,get,input,channel,status,2,is,watermark,aligned,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,12,1,assert,equals,new,watermark,9,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputWatermarkRealignmentAfterResumeActive();1506955334;Tests that when idle channels become active again, they need to "catch up" with_the latest watermark before they are considered for min watermark computation again.;@Test_	public void testMultipleInputWatermarkRealignmentAfterResumeActive() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(10), 0)__		valve.inputWatermark(new Watermark(7), 1)__		valve.inputWatermark(new Watermark(3), 2)__		assertEquals(new Watermark(3), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(new Watermark(7), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 2)__		assertFalse(valve.getInputChannelStatus(2).isWatermarkAligned)___		_		valve.inputWatermark(new Watermark(5), 2)__		assertEquals(5, valve.getInputChannelStatus(2).watermark)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(9), 2)__		assertTrue(valve.getInputChannelStatus(2).isWatermarkAligned)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(12), 1)__		assertEquals(new Watermark(9), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,when,idle,channels,become,active,again,they,need,to,catch,up,with,the,latest,watermark,before,they,are,considered,for,min,watermark,computation,again;test,public,void,test,multiple,input,watermark,realignment,after,resume,active,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,10,0,valve,input,watermark,new,watermark,7,1,valve,input,watermark,new,watermark,3,2,assert,equals,new,watermark,3,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,new,watermark,7,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,2,assert,false,valve,get,input,channel,status,2,is,watermark,aligned,valve,input,watermark,new,watermark,5,2,assert,equals,5,valve,get,input,channel,status,2,watermark,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,9,2,assert,true,valve,get,input,channel,status,2,is,watermark,aligned,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,12,1,assert,equals,new,watermark,9,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputYieldsWatermarkOnlyWhenAllChannelsReceivesWatermarks();1506955334;Tests that the valve yields a watermark only when all inputs have received a watermark.;@Test_	public void testMultipleInputYieldsWatermarkOnlyWhenAllChannelsReceivesWatermarks() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(0), 0)__		valve.inputWatermark(new Watermark(0), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,the,valve,yields,a,watermark,only,when,all,inputs,have,received,a,watermark;test,public,void,test,multiple,input,yields,watermark,only,when,all,channels,receives,watermarks,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,valve,input,watermark,new,watermark,0,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputYieldsWatermarkOnlyWhenAllChannelsReceivesWatermarks();1506955334;Tests that the valve yields a watermark only when all inputs have received a watermark.;@Test_	public void testMultipleInputYieldsWatermarkOnlyWhenAllChannelsReceivesWatermarks() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(0), 0)__		valve.inputWatermark(new Watermark(0), 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,the,valve,yields,a,watermark,only,when,all,inputs,have,received,a,watermark;test,public,void,test,multiple,input,yields,watermark,only,when,all,channels,receives,watermarks,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,valve,input,watermark,new,watermark,0,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputIncreasingWatermarks();1506955334;Tests that new min watermark is emitted from the valve as soon as the overall_new min watermark across inputs advances.;@Test_	public void testMultipleInputIncreasingWatermarks() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(0), 0)__		valve.inputWatermark(new Watermark(0), 1)__		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(12), 0)__		valve.inputWatermark(new Watermark(8), 2)__		valve.inputWatermark(new Watermark(10), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(15), 1)__		_		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(17), 2)__		_		assertEquals(new Watermark(12), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(20), 0)__		_		assertEquals(new Watermark(15), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,new,min,watermark,is,emitted,from,the,valve,as,soon,as,the,overall,new,min,watermark,across,inputs,advances;test,public,void,test,multiple,input,increasing,watermarks,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,valve,input,watermark,new,watermark,0,1,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,12,0,valve,input,watermark,new,watermark,8,2,valve,input,watermark,new,watermark,10,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,15,1,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,17,2,assert,equals,new,watermark,12,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,20,0,assert,equals,new,watermark,15,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputIncreasingWatermarks();1506955334;Tests that new min watermark is emitted from the valve as soon as the overall_new min watermark across inputs advances.;@Test_	public void testMultipleInputIncreasingWatermarks() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(3, valveOutput)___		valve.inputWatermark(new Watermark(0), 0)__		valve.inputWatermark(new Watermark(0), 1)__		valve.inputWatermark(new Watermark(0), 2)__		assertEquals(new Watermark(0), valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(12), 0)__		valve.inputWatermark(new Watermark(8), 2)__		valve.inputWatermark(new Watermark(10), 2)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(15), 1)__		_		assertEquals(new Watermark(10), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(17), 2)__		_		assertEquals(new Watermark(12), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputWatermark(new Watermark(20), 0)__		_		assertEquals(new Watermark(15), valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,new,min,watermark,is,emitted,from,the,valve,as,soon,as,the,overall,new,min,watermark,across,inputs,advances;test,public,void,test,multiple,input,increasing,watermarks,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,3,valve,output,valve,input,watermark,new,watermark,0,0,valve,input,watermark,new,watermark,0,1,valve,input,watermark,new,watermark,0,2,assert,equals,new,watermark,0,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,12,0,valve,input,watermark,new,watermark,8,2,valve,input,watermark,new,watermark,10,2,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,15,1,assert,equals,new,watermark,10,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,17,2,assert,equals,new,watermark,12,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output,valve,input,watermark,new,watermark,20,0,assert,equals,new,watermark,15,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputStreamStatusToggling();1506955334;Tests that stream status toggling works correctly, as well as that non-toggling status_inputs do not yield output for a multiple input valve.;@Test_	public void testMultipleInputStreamStatusToggling() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(2, valveOutput)___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		_		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,stream,status,toggling,works,correctly,as,well,as,that,non,toggling,status,inputs,do,not,yield,output,for,a,multiple,input,valve;test,public,void,test,multiple,input,stream,status,toggling,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,2,valve,output,valve,input,stream,status,stream,status,active,0,valve,input,stream,status,stream,status,active,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,valve,input,stream,status,stream,status,idle,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,1,assert,equals,stream,status,active,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testMultipleInputStreamStatusToggling();1506955334;Tests that stream status toggling works correctly, as well as that non-toggling status_inputs do not yield output for a multiple input valve.;@Test_	public void testMultipleInputStreamStatusToggling() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(2, valveOutput)___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		_		valve.inputStreamStatus(StreamStatus.ACTIVE, 1)__		assertEquals(StreamStatus.ACTIVE, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.ACTIVE, 0)__		_		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,stream,status,toggling,works,correctly,as,well,as,that,non,toggling,status,inputs,do,not,yield,output,for,a,multiple,input,valve;test,public,void,test,multiple,input,stream,status,toggling,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,2,valve,output,valve,input,stream,status,stream,status,active,0,valve,input,stream,status,stream,status,active,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,0,valve,input,stream,status,stream,status,idle,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,1,assert,equals,stream,status,active,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,active,0,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testAllInputChannelsStartAsActive();1486732842;Tests that all input channels of a valve start as ACTIVE stream status.;@Test_	public void testAllInputChannelsStartAsActive() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(4, valveOutput)___		_		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 3)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,all,input,channels,of,a,valve,start,as,active,stream,status;test,public,void,test,all,input,channels,start,as,active,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,4,valve,output,valve,input,stream,status,stream,status,idle,3,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testAllInputChannelsStartAsActive();1495484544;Tests that all input channels of a valve start as ACTIVE stream status.;@Test_	public void testAllInputChannelsStartAsActive() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(4, valveOutput)___		_		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 3)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,all,input,channels,of,a,valve,start,as,active,stream,status;test,public,void,test,all,input,channels,start,as,active,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,4,valve,output,valve,input,stream,status,stream,status,idle,3,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testAllInputChannelsStartAsActive();1506955238;Tests that all input channels of a valve start as ACTIVE stream status.;@Test_	public void testAllInputChannelsStartAsActive() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(4, valveOutput)___		_		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 3)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastOutputStreamStatus())__		assertTrue(valveOutput.hasNoOutputWatermarks())__		assertTrue(valveOutput.hasNoOutputStreamStatuses())__	};tests,that,all,input,channels,of,a,valve,start,as,active,stream,status;test,public,void,test,all,input,channels,start,as,active,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,4,valve,output,valve,input,stream,status,stream,status,idle,3,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,0,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,1,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses,valve,input,stream,status,stream,status,idle,2,assert,equals,stream,status,idle,valve,output,pop,last,output,stream,status,assert,true,valve,output,has,no,output,watermarks,assert,true,valve,output,has,no,output,stream,statuses
StatusWatermarkValveTest -> @Test 	public void testAllInputChannelsStartAsActive();1506955334;Tests that all input channels of a valve start as ACTIVE stream status.;@Test_	public void testAllInputChannelsStartAsActive() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(4, valveOutput)___		_		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 3)__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,all,input,channels,of,a,valve,start,as,active,stream,status;test,public,void,test,all,input,channels,start,as,active,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,4,valve,output,valve,input,stream,status,stream,status,idle,3,valve,input,stream,status,stream,status,idle,0,valve,input,stream,status,stream,status,idle,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
StatusWatermarkValveTest -> @Test 	public void testAllInputChannelsStartAsActive();1506955334;Tests that all input channels of a valve start as ACTIVE stream status.;@Test_	public void testAllInputChannelsStartAsActive() {_		BufferedValveOutputHandler valveOutput = new BufferedValveOutputHandler()__		StatusWatermarkValve valve = new StatusWatermarkValve(4, valveOutput)___		_		_		_		_		__		valve.inputStreamStatus(StreamStatus.IDLE, 3)__		valve.inputStreamStatus(StreamStatus.IDLE, 0)__		valve.inputStreamStatus(StreamStatus.IDLE, 1)__		assertEquals(null, valveOutput.popLastSeenOutput())___		valve.inputStreamStatus(StreamStatus.IDLE, 2)__		assertEquals(StreamStatus.IDLE, valveOutput.popLastSeenOutput())__		assertEquals(null, valveOutput.popLastSeenOutput())__	};tests,that,all,input,channels,of,a,valve,start,as,active,stream,status;test,public,void,test,all,input,channels,start,as,active,buffered,valve,output,handler,valve,output,new,buffered,valve,output,handler,status,watermark,valve,valve,new,status,watermark,valve,4,valve,output,valve,input,stream,status,stream,status,idle,3,valve,input,stream,status,stream,status,idle,0,valve,input,stream,status,stream,status,idle,1,assert,equals,null,valve,output,pop,last,seen,output,valve,input,stream,status,stream,status,idle,2,assert,equals,stream,status,idle,valve,output,pop,last,seen,output,assert,equals,null,valve,output,pop,last,seen,output
