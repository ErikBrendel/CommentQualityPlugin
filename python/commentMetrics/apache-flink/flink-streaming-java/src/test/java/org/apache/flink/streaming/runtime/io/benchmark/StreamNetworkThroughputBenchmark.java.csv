commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void executeBenchmark(long records) throws Exception {     executeBenchmark(records, Long.MAX_VALUE). }
true;public;2;13;/**  * Executes the throughput benchmark with the given number of records.  *  * @param records to pass through the network stack  */ ;/**  * Executes the throughput benchmark with the given number of records.  *  * @param records to pass through the network stack  */ public void executeBenchmark(long records, long timeout) throws Exception {     final LongValue value = new LongValue().     value.setValue(0).     long lastRecord = records / writerThreads.length.     CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(lastRecord).     for (LongRecordWriterThread writerThread : writerThreads) {         writerThread.setRecordsToSend(lastRecord).     }     recordsReceived.get(timeout, TimeUnit.MILLISECONDS). }
false;public;3;3;;public void setUp(int recordWriters, int channels, int flushTimeout) throws Exception {     setUp(recordWriters, channels, flushTimeout, false). }
false;public;4;3;;public void setUp(int recordWriters, int channels, int flushTimeout, boolean localMode) throws Exception {     setUp(recordWriters, channels, flushTimeout, localMode, -1, -1). }
false;public;6;18;;public void setUp(int recordWriters, int channels, int flushTimeout, boolean localMode, int senderBufferPoolSize, int receiverBufferPoolSize) throws Exception {     setUp(recordWriters, channels, flushTimeout, false, localMode, senderBufferPoolSize, receiverBufferPoolSize, new Configuration()). }
true;public;8;27;/**  * Initializes the throughput benchmark with the given parameters.  *  * @param recordWriters  * 		number of senders, i.e.  * 		{@link org.apache.flink.runtime.io.network.api.writer.RecordWriter} instances  * @param channels  * 		number of outgoing channels / receivers  */ ;/**  * Initializes the throughput benchmark with the given parameters.  *  * @param recordWriters  * 		number of senders, i.e.  * 		{@link org.apache.flink.runtime.io.network.api.writer.RecordWriter} instances  * @param channels  * 		number of outgoing channels / receivers  */ public void setUp(int recordWriters, int channels, int flushTimeout, boolean broadcastMode, boolean localMode, int senderBufferPoolSize, int receiverBufferPoolSize, Configuration config) throws Exception {     environment = new StreamNetworkBenchmarkEnvironment<>().     environment.setUp(recordWriters, channels, broadcastMode, localMode, senderBufferPoolSize, receiverBufferPoolSize, config).     receiver = environment.createReceiver().     writerThreads = new LongRecordWriterThread[recordWriters].     for (int writer = 0. writer < recordWriters. writer++) {         writerThreads[writer] = new LongRecordWriterThread(environment.createRecordWriter(writer, flushTimeout), broadcastMode).         writerThreads[writer].start().     } }
true;public;0;8;/**  * Shuts down a benchmark previously set up via {@link #setUp}.  *  * <p>This will wait for all senders to finish but timeout with an exception after 5 seconds.  */ ;/**  * Shuts down a benchmark previously set up via {@link #setUp}.  *  * <p>This will wait for all senders to finish but timeout with an exception after 5 seconds.  */ public void tearDown() throws Exception {     for (LongRecordWriterThread writerThread : writerThreads) {         writerThread.shutdown().         writerThread.sync(5000).     }     environment.tearDown().     receiver.shutdown(). }
