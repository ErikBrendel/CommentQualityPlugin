commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testCheckpointModeTranslation() {     try {         // with deactivated fault tolerance, the checkpoint mode should be at-least-once         StreamExecutionEnvironment deactivated = getSimpleJob().         for (JobVertex vertex : deactivated.getStreamGraph().getJobGraph().getVertices()) {             assertEquals(CheckpointingMode.AT_LEAST_ONCE, new StreamConfig(vertex.getConfiguration()).getCheckpointMode()).         }         // with activated fault tolerance, the checkpoint mode should be by default exactly once         StreamExecutionEnvironment activated = getSimpleJob().         activated.enableCheckpointing(1000L).         for (JobVertex vertex : activated.getStreamGraph().getJobGraph().getVertices()) {             assertEquals(CheckpointingMode.EXACTLY_ONCE, new StreamConfig(vertex.getConfiguration()).getCheckpointMode()).         }         // explicitly setting the mode         StreamExecutionEnvironment explicit = getSimpleJob().         explicit.enableCheckpointing(1000L, CheckpointingMode.AT_LEAST_ONCE).         for (JobVertex vertex : explicit.getStreamGraph().getJobGraph().getVertices()) {             assertEquals(CheckpointingMode.AT_LEAST_ONCE, new StreamConfig(vertex.getConfiguration()).getCheckpointMode()).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;1;3;;@Override public void invoke(Long value) { }
false;private,static;0;11;;private static StreamExecutionEnvironment getSimpleJob() {     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.generateSequence(1, 10000000).addSink(new SinkFunction<Long>() {          @Override         public void invoke(Long value) {         }     }).     return env. }
