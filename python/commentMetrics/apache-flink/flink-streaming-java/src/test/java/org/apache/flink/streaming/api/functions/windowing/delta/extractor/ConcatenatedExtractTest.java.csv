commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@SuppressWarnings("unchecked") @Before public void setupData() {     testTuple2Array = new Tuple2[2].     testTuple2Array[0] = new Tuple2<String[], int[]>(testStringArray1, testIntArray2).     testTuple2Array[1] = new Tuple2<String[], int[]>(testStringArray2, testIntArray1).     testTuple2 = new Tuple2<String[], int[]>(testStringArray3, testIntArray3).     testData = new Tuple2<Tuple2<String[], int[]>, Tuple2<String[], int[]>[]>(testTuple2, testTuple2Array). }
false;public;0;10;;@SuppressWarnings({ "rawtypes", "unchecked" }) @Test public void test1() {     Extractor ext = new ConcatenatedExtract(new FieldFromTuple(0), new FieldFromTuple(1)).add(new FieldsFromArray(Integer.class, 2, 1, 0)).     int[] expected = { testIntArray3[2], testIntArray3[1], testIntArray3[0] }.     assertEquals(new Integer(expected[0]), ((Integer[]) ext.extract(testData))[0]).     assertEquals(new Integer(expected[1]), ((Integer[]) ext.extract(testData))[1]).     assertEquals(new Integer(expected[2]), ((Integer[]) ext.extract(testData))[2]). }
false;public;0;14;;@SuppressWarnings({ "unchecked", "rawtypes" }) @Test public void test2() {     Extractor ext = new // Tuple2<String[],int[]>[]     ConcatenatedExtract(// Tuple2<String[],int[]>[]     new FieldFromTuple(1), // Tuple2<String[],int[]>[]     new FieldsFromArray(Tuple2.class, 1)).add(// Tuple2<String[],int[]>     new FieldFromArray(0)).add(// Object[] (Containing String[])     new ArrayFromTuple(0)).add(// String[]     new FieldFromArray(0)).add(// String     new FieldFromArray(1)).     String expected2 = testStringArray2[1].     assertEquals(expected2, ext.extract(testData)). }
