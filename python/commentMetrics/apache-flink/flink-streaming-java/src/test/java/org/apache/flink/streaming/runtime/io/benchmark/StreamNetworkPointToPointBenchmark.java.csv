commented;modifiers;parameterAmount;loc;comment;code
true;public;2;17;/**  * Executes the latency benchmark with the given number of records.  *  * @param records  * 		records to pass through the network stack  * @param flushAfterLastEmit  * 		whether to flush the {@link RecordWriter} after the last record  */ ;/**  * Executes the latency benchmark with the given number of records.  *  * @param records  * 		records to pass through the network stack  * @param flushAfterLastEmit  * 		whether to flush the {@link RecordWriter} after the last record  */ public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {     final LongValue value = new LongValue().     value.setValue(0).     CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records).     for (int i = 1. i < records. i++) {         recordWriter.emit(value).     }     value.setValue(records).     recordWriter.broadcastEmit(value).     if (flushAfterLastEmit) {         recordWriter.flushAll().     }     recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS). }
false;public;1;3;;public void setUp(long flushTimeout) throws Exception {     setUp(flushTimeout, new Configuration()). }
true;public;2;7;/**  * Initializes the throughput benchmark with the given parameters.  *  * @param flushTimeout  * 		output flushing interval of the  * 		{@link org.apache.flink.runtime.io.network.api.writer.RecordWriter}'s output flusher thread  */ ;/**  * Initializes the throughput benchmark with the given parameters.  *  * @param flushTimeout  * 		output flushing interval of the  * 		{@link org.apache.flink.runtime.io.network.api.writer.RecordWriter}'s output flusher thread  */ public void setUp(long flushTimeout, Configuration config) throws Exception {     environment = new StreamNetworkBenchmarkEnvironment<>().     environment.setUp(1, 1, false, false, -1, -1, config).     receiver = environment.createReceiver().     recordWriter = environment.createRecordWriter(0, flushTimeout). }
true;public;0;4;/**  * Shuts down a benchmark previously set up via {@link #setUp}.  */ ;/**  * Shuts down a benchmark previously set up via {@link #setUp}.  */ public void tearDown() {     environment.tearDown().     receiver.shutdown(). }
