# id;timestamp;commentText;codeText;commentWords;codeWords
StreamNetworkPointToPointBenchmark -> public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception;1515416222;Executes the latency benchmark with the given number of records.__@param records_records to pass through the network stack_@param flushAfterLastEmit_whether to flush the {@link RecordWriter} after the last record;public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {_		final LongValue value = new LongValue()__		value.setValue(0)___		CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records)___		for (int i = 1_ i < records_ i++) {_			recordWriter.emit(value)__		}_		value.setValue(records)__		recordWriter.broadcastEmit(value)__		if (flushAfterLastEmit) {_			recordWriter.flush()__		}__		recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS)__	};executes,the,latency,benchmark,with,the,given,number,of,records,param,records,records,to,pass,through,the,network,stack,param,flush,after,last,emit,whether,to,flush,the,link,record,writer,after,the,last,record;public,void,execute,benchmark,long,records,boolean,flush,after,last,emit,throws,exception,final,long,value,value,new,long,value,value,set,value,0,completable,future,records,received,receiver,set,expected,record,records,for,int,i,1,i,records,i,record,writer,emit,value,value,set,value,records,record,writer,broadcast,emit,value,if,flush,after,last,emit,record,writer,flush,records,received,get,time,unit,milliseconds
StreamNetworkPointToPointBenchmark -> public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception;1515510651;Executes the latency benchmark with the given number of records.__@param records_records to pass through the network stack_@param flushAfterLastEmit_whether to flush the {@link RecordWriter} after the last record;public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {_		final LongValue value = new LongValue()__		value.setValue(0)___		CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records)___		for (int i = 1_ i < records_ i++) {_			recordWriter.emit(value)__		}_		value.setValue(records)__		recordWriter.broadcastEmit(value)__		if (flushAfterLastEmit) {_			recordWriter.flush()__		}__		recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS)__	};executes,the,latency,benchmark,with,the,given,number,of,records,param,records,records,to,pass,through,the,network,stack,param,flush,after,last,emit,whether,to,flush,the,link,record,writer,after,the,last,record;public,void,execute,benchmark,long,records,boolean,flush,after,last,emit,throws,exception,final,long,value,value,new,long,value,value,set,value,0,completable,future,records,received,receiver,set,expected,record,records,for,int,i,1,i,records,i,record,writer,emit,value,value,set,value,records,record,writer,broadcast,emit,value,if,flush,after,last,emit,record,writer,flush,records,received,get,time,unit,milliseconds
StreamNetworkPointToPointBenchmark -> public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception;1519039302;Executes the latency benchmark with the given number of records.__@param records_records to pass through the network stack_@param flushAfterLastEmit_whether to flush the {@link RecordWriter} after the last record;public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {_		final LongValue value = new LongValue()__		value.setValue(0)___		CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records)___		for (int i = 1_ i < records_ i++) {_			recordWriter.emit(value)__		}_		value.setValue(records)__		recordWriter.broadcastEmit(value)__		if (flushAfterLastEmit) {_			recordWriter.flush()__		}__		recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS)__	};executes,the,latency,benchmark,with,the,given,number,of,records,param,records,records,to,pass,through,the,network,stack,param,flush,after,last,emit,whether,to,flush,the,link,record,writer,after,the,last,record;public,void,execute,benchmark,long,records,boolean,flush,after,last,emit,throws,exception,final,long,value,value,new,long,value,value,set,value,0,completable,future,records,received,receiver,set,expected,record,records,for,int,i,1,i,records,i,record,writer,emit,value,value,set,value,records,record,writer,broadcast,emit,value,if,flush,after,last,emit,record,writer,flush,records,received,get,time,unit,milliseconds
StreamNetworkPointToPointBenchmark -> public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception;1519308961;Executes the latency benchmark with the given number of records.__@param records_records to pass through the network stack_@param flushAfterLastEmit_whether to flush the {@link RecordWriter} after the last record;public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {_		final LongValue value = new LongValue()__		value.setValue(0)___		CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records)___		for (int i = 1_ i < records_ i++) {_			recordWriter.emit(value)__		}_		value.setValue(records)__		recordWriter.broadcastEmit(value)__		if (flushAfterLastEmit) {_			recordWriter.flushAll()__		}__		recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS)__	};executes,the,latency,benchmark,with,the,given,number,of,records,param,records,records,to,pass,through,the,network,stack,param,flush,after,last,emit,whether,to,flush,the,link,record,writer,after,the,last,record;public,void,execute,benchmark,long,records,boolean,flush,after,last,emit,throws,exception,final,long,value,value,new,long,value,value,set,value,0,completable,future,records,received,receiver,set,expected,record,records,for,int,i,1,i,records,i,record,writer,emit,value,value,set,value,records,record,writer,broadcast,emit,value,if,flush,after,last,emit,record,writer,flush,all,records,received,get,time,unit,milliseconds
StreamNetworkPointToPointBenchmark -> public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception;1524407315;Executes the latency benchmark with the given number of records.__@param records_records to pass through the network stack_@param flushAfterLastEmit_whether to flush the {@link RecordWriter} after the last record;public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {_		final LongValue value = new LongValue()__		value.setValue(0)___		CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records)___		for (int i = 1_ i < records_ i++) {_			recordWriter.emit(value)__		}_		value.setValue(records)__		recordWriter.broadcastEmit(value)__		if (flushAfterLastEmit) {_			recordWriter.flushAll()__		}__		recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS)__	};executes,the,latency,benchmark,with,the,given,number,of,records,param,records,records,to,pass,through,the,network,stack,param,flush,after,last,emit,whether,to,flush,the,link,record,writer,after,the,last,record;public,void,execute,benchmark,long,records,boolean,flush,after,last,emit,throws,exception,final,long,value,value,new,long,value,value,set,value,0,completable,future,records,received,receiver,set,expected,record,records,for,int,i,1,i,records,i,record,writer,emit,value,value,set,value,records,record,writer,broadcast,emit,value,if,flush,after,last,emit,record,writer,flush,all,records,received,get,time,unit,milliseconds
StreamNetworkPointToPointBenchmark -> public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception;1536826628;Executes the latency benchmark with the given number of records.__@param records_records to pass through the network stack_@param flushAfterLastEmit_whether to flush the {@link RecordWriter} after the last record;public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {_		final LongValue value = new LongValue()__		value.setValue(0)___		CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records)___		for (int i = 1_ i < records_ i++) {_			recordWriter.emit(value)__		}_		value.setValue(records)__		recordWriter.broadcastEmit(value)__		if (flushAfterLastEmit) {_			recordWriter.flushAll()__		}__		recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS)__	};executes,the,latency,benchmark,with,the,given,number,of,records,param,records,records,to,pass,through,the,network,stack,param,flush,after,last,emit,whether,to,flush,the,link,record,writer,after,the,last,record;public,void,execute,benchmark,long,records,boolean,flush,after,last,emit,throws,exception,final,long,value,value,new,long,value,value,set,value,0,completable,future,records,received,receiver,set,expected,record,records,for,int,i,1,i,records,i,record,writer,emit,value,value,set,value,records,record,writer,broadcast,emit,value,if,flush,after,last,emit,record,writer,flush,all,records,received,get,time,unit,milliseconds
StreamNetworkPointToPointBenchmark -> public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception;1537185337;Executes the latency benchmark with the given number of records.__@param records_records to pass through the network stack_@param flushAfterLastEmit_whether to flush the {@link RecordWriter} after the last record;public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {_		final LongValue value = new LongValue()__		value.setValue(0)___		CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records)___		for (int i = 1_ i < records_ i++) {_			recordWriter.emit(value)__		}_		value.setValue(records)__		recordWriter.broadcastEmit(value)__		if (flushAfterLastEmit) {_			recordWriter.flushAll()__		}__		recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS)__	};executes,the,latency,benchmark,with,the,given,number,of,records,param,records,records,to,pass,through,the,network,stack,param,flush,after,last,emit,whether,to,flush,the,link,record,writer,after,the,last,record;public,void,execute,benchmark,long,records,boolean,flush,after,last,emit,throws,exception,final,long,value,value,new,long,value,value,set,value,0,completable,future,records,received,receiver,set,expected,record,records,for,int,i,1,i,records,i,record,writer,emit,value,value,set,value,records,record,writer,broadcast,emit,value,if,flush,after,last,emit,record,writer,flush,all,records,received,get,time,unit,milliseconds
StreamNetworkPointToPointBenchmark -> public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception;1548265071;Executes the latency benchmark with the given number of records.__@param records_records to pass through the network stack_@param flushAfterLastEmit_whether to flush the {@link RecordWriter} after the last record;public void executeBenchmark(long records, boolean flushAfterLastEmit) throws Exception {_		final LongValue value = new LongValue()__		value.setValue(0)___		CompletableFuture<?> recordsReceived = receiver.setExpectedRecord(records)___		for (int i = 1_ i < records_ i++) {_			recordWriter.emit(value)__		}_		value.setValue(records)__		recordWriter.broadcastEmit(value)__		if (flushAfterLastEmit) {_			recordWriter.flushAll()__		}__		recordsReceived.get(RECEIVER_TIMEOUT, TimeUnit.MILLISECONDS)__	};executes,the,latency,benchmark,with,the,given,number,of,records,param,records,records,to,pass,through,the,network,stack,param,flush,after,last,emit,whether,to,flush,the,link,record,writer,after,the,last,record;public,void,execute,benchmark,long,records,boolean,flush,after,last,emit,throws,exception,final,long,value,value,new,long,value,value,set,value,0,completable,future,records,received,receiver,set,expected,record,records,for,int,i,1,i,records,i,record,writer,emit,value,value,set,value,records,record,writer,broadcast,emit,value,if,flush,after,last,emit,record,writer,flush,all,records,received,get,time,unit,milliseconds
StreamNetworkPointToPointBenchmark -> public void setUp(long flushTimeout) throws Exception;1515416222;Initializes the throughput benchmark with the given parameters.__@param flushTimeout_output flushing interval of the_{@link org.apache.flink.streaming.runtime.io.StreamRecordWriter}'s output flusher thread;public void setUp(long flushTimeout) throws Exception {_		environment = new StreamNetworkBenchmarkEnvironment<>()__		environment.setUp(1, 1)___		receiver = environment.createReceiver()__		recordWriter = environment.createStreamRecordWriter(0, flushTimeout)__	};initializes,the,throughput,benchmark,with,the,given,parameters,param,flush,timeout,output,flushing,interval,of,the,link,org,apache,flink,streaming,runtime,io,stream,record,writer,s,output,flusher,thread;public,void,set,up,long,flush,timeout,throws,exception,environment,new,stream,network,benchmark,environment,environment,set,up,1,1,receiver,environment,create,receiver,record,writer,environment,create,stream,record,writer,0,flush,timeout
StreamNetworkPointToPointBenchmark -> public void setUp(long flushTimeout) throws Exception;1515510651;Initializes the throughput benchmark with the given parameters.__@param flushTimeout_output flushing interval of the_{@link org.apache.flink.streaming.runtime.io.StreamRecordWriter}'s output flusher thread;public void setUp(long flushTimeout) throws Exception {_		environment = new StreamNetworkBenchmarkEnvironment<>()__		environment.setUp(1, 1)___		receiver = environment.createReceiver()__		recordWriter = environment.createRecordWriter(0, flushTimeout)__	};initializes,the,throughput,benchmark,with,the,given,parameters,param,flush,timeout,output,flushing,interval,of,the,link,org,apache,flink,streaming,runtime,io,stream,record,writer,s,output,flusher,thread;public,void,set,up,long,flush,timeout,throws,exception,environment,new,stream,network,benchmark,environment,environment,set,up,1,1,receiver,environment,create,receiver,record,writer,environment,create,record,writer,0,flush,timeout
StreamNetworkPointToPointBenchmark -> public void setUp(long flushTimeout) throws Exception;1519039302;Initializes the throughput benchmark with the given parameters.__@param flushTimeout_output flushing interval of the_{@link org.apache.flink.streaming.runtime.io.StreamRecordWriter}'s output flusher thread;public void setUp(long flushTimeout) throws Exception {_		environment = new StreamNetworkBenchmarkEnvironment<>()__		environment.setUp(1, 1, false)___		receiver = environment.createReceiver()__		recordWriter = environment.createRecordWriter(0, flushTimeout)__	};initializes,the,throughput,benchmark,with,the,given,parameters,param,flush,timeout,output,flushing,interval,of,the,link,org,apache,flink,streaming,runtime,io,stream,record,writer,s,output,flusher,thread;public,void,set,up,long,flush,timeout,throws,exception,environment,new,stream,network,benchmark,environment,environment,set,up,1,1,false,receiver,environment,create,receiver,record,writer,environment,create,record,writer,0,flush,timeout
StreamNetworkPointToPointBenchmark -> public void setUp(long flushTimeout) throws Exception;1519308961;Initializes the throughput benchmark with the given parameters.__@param flushTimeout_output flushing interval of the_{@link org.apache.flink.streaming.runtime.io.StreamRecordWriter}'s output flusher thread;public void setUp(long flushTimeout) throws Exception {_		environment = new StreamNetworkBenchmarkEnvironment<>()__		environment.setUp(1, 1, false)___		receiver = environment.createReceiver()__		recordWriter = environment.createRecordWriter(0, flushTimeout)__	};initializes,the,throughput,benchmark,with,the,given,parameters,param,flush,timeout,output,flushing,interval,of,the,link,org,apache,flink,streaming,runtime,io,stream,record,writer,s,output,flusher,thread;public,void,set,up,long,flush,timeout,throws,exception,environment,new,stream,network,benchmark,environment,environment,set,up,1,1,false,receiver,environment,create,receiver,record,writer,environment,create,record,writer,0,flush,timeout
StreamNetworkPointToPointBenchmark -> public void setUp(long flushTimeout) throws Exception;1524407315;Initializes the throughput benchmark with the given parameters.__@param flushTimeout_output flushing interval of the_{@link org.apache.flink.streaming.runtime.io.StreamRecordWriter}'s output flusher thread;public void setUp(long flushTimeout) throws Exception {_		environment = new StreamNetworkBenchmarkEnvironment<>()__		environment.setUp(1, 1, false, -1, -1)___		receiver = environment.createReceiver()__		recordWriter = environment.createRecordWriter(0, flushTimeout)__	};initializes,the,throughput,benchmark,with,the,given,parameters,param,flush,timeout,output,flushing,interval,of,the,link,org,apache,flink,streaming,runtime,io,stream,record,writer,s,output,flusher,thread;public,void,set,up,long,flush,timeout,throws,exception,environment,new,stream,network,benchmark,environment,environment,set,up,1,1,false,1,1,receiver,environment,create,receiver,record,writer,environment,create,record,writer,0,flush,timeout
StreamNetworkPointToPointBenchmark -> public void tearDown();1515416222;Shuts down a benchmark previously set up via {@link #setUp}.;public void tearDown() {_		environment.tearDown()__		receiver.shutdown()__	};shuts,down,a,benchmark,previously,set,up,via,link,set,up;public,void,tear,down,environment,tear,down,receiver,shutdown
StreamNetworkPointToPointBenchmark -> public void tearDown();1515510651;Shuts down a benchmark previously set up via {@link #setUp}.;public void tearDown() {_		environment.tearDown()__		receiver.shutdown()__	};shuts,down,a,benchmark,previously,set,up,via,link,set,up;public,void,tear,down,environment,tear,down,receiver,shutdown
StreamNetworkPointToPointBenchmark -> public void tearDown();1519039302;Shuts down a benchmark previously set up via {@link #setUp}.;public void tearDown() {_		environment.tearDown()__		receiver.shutdown()__	};shuts,down,a,benchmark,previously,set,up,via,link,set,up;public,void,tear,down,environment,tear,down,receiver,shutdown
StreamNetworkPointToPointBenchmark -> public void tearDown();1519308961;Shuts down a benchmark previously set up via {@link #setUp}.;public void tearDown() {_		environment.tearDown()__		receiver.shutdown()__	};shuts,down,a,benchmark,previously,set,up,via,link,set,up;public,void,tear,down,environment,tear,down,receiver,shutdown
StreamNetworkPointToPointBenchmark -> public void tearDown();1524407315;Shuts down a benchmark previously set up via {@link #setUp}.;public void tearDown() {_		environment.tearDown()__		receiver.shutdown()__	};shuts,down,a,benchmark,previously,set,up,via,link,set,up;public,void,tear,down,environment,tear,down,receiver,shutdown
StreamNetworkPointToPointBenchmark -> public void tearDown();1536826628;Shuts down a benchmark previously set up via {@link #setUp}.;public void tearDown() {_		environment.tearDown()__		receiver.shutdown()__	};shuts,down,a,benchmark,previously,set,up,via,link,set,up;public,void,tear,down,environment,tear,down,receiver,shutdown
StreamNetworkPointToPointBenchmark -> public void tearDown();1537185337;Shuts down a benchmark previously set up via {@link #setUp}.;public void tearDown() {_		environment.tearDown()__		receiver.shutdown()__	};shuts,down,a,benchmark,previously,set,up,via,link,set,up;public,void,tear,down,environment,tear,down,receiver,shutdown
StreamNetworkPointToPointBenchmark -> public void tearDown();1548265071;Shuts down a benchmark previously set up via {@link #setUp}.;public void tearDown() {_		environment.tearDown()__		receiver.shutdown()__	};shuts,down,a,benchmark,previously,set,up,via,link,set,up;public,void,tear,down,environment,tear,down,receiver,shutdown
StreamNetworkPointToPointBenchmark -> public void setUp(long flushTimeout, Configuration config) throws Exception;1536826628;Initializes the throughput benchmark with the given parameters.__@param flushTimeout_output flushing interval of the_{@link org.apache.flink.streaming.runtime.io.StreamRecordWriter}'s output flusher thread;public void setUp(long flushTimeout, Configuration config) throws Exception {_		environment = new StreamNetworkBenchmarkEnvironment<>()__		environment.setUp(1, 1, false, -1, -1, config)___		receiver = environment.createReceiver()__		recordWriter = environment.createRecordWriter(0, flushTimeout)__	};initializes,the,throughput,benchmark,with,the,given,parameters,param,flush,timeout,output,flushing,interval,of,the,link,org,apache,flink,streaming,runtime,io,stream,record,writer,s,output,flusher,thread;public,void,set,up,long,flush,timeout,configuration,config,throws,exception,environment,new,stream,network,benchmark,environment,environment,set,up,1,1,false,1,1,config,receiver,environment,create,receiver,record,writer,environment,create,record,writer,0,flush,timeout
StreamNetworkPointToPointBenchmark -> public void setUp(long flushTimeout, Configuration config) throws Exception;1537185337;Initializes the throughput benchmark with the given parameters.__@param flushTimeout_output flushing interval of the_{@link org.apache.flink.streaming.runtime.io.StreamRecordWriter}'s output flusher thread;public void setUp(long flushTimeout, Configuration config) throws Exception {_		environment = new StreamNetworkBenchmarkEnvironment<>()__		environment.setUp(1, 1, false, false, -1, -1, config)___		receiver = environment.createReceiver()__		recordWriter = environment.createRecordWriter(0, flushTimeout)__	};initializes,the,throughput,benchmark,with,the,given,parameters,param,flush,timeout,output,flushing,interval,of,the,link,org,apache,flink,streaming,runtime,io,stream,record,writer,s,output,flusher,thread;public,void,set,up,long,flush,timeout,configuration,config,throws,exception,environment,new,stream,network,benchmark,environment,environment,set,up,1,1,false,false,1,1,config,receiver,environment,create,receiver,record,writer,environment,create,record,writer,0,flush,timeout
StreamNetworkPointToPointBenchmark -> public void setUp(long flushTimeout, Configuration config) throws Exception;1548265071;Initializes the throughput benchmark with the given parameters.__@param flushTimeout_output flushing interval of the_{@link org.apache.flink.runtime.io.network.api.writer.RecordWriter}'s output flusher thread;public void setUp(long flushTimeout, Configuration config) throws Exception {_		environment = new StreamNetworkBenchmarkEnvironment<>()__		environment.setUp(1, 1, false, false, -1, -1, config)___		receiver = environment.createReceiver()__		recordWriter = environment.createRecordWriter(0, flushTimeout)__	};initializes,the,throughput,benchmark,with,the,given,parameters,param,flush,timeout,output,flushing,interval,of,the,link,org,apache,flink,runtime,io,network,api,writer,record,writer,s,output,flusher,thread;public,void,set,up,long,flush,timeout,configuration,config,throws,exception,environment,new,stream,network,benchmark,environment,environment,set,up,1,1,false,false,1,1,config,receiver,environment,create,receiver,record,writer,environment,create,record,writer,0,flush,timeout
