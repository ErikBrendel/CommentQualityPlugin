commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void init() {     testStrings = new String[Tuple.MAX_ARITY].     for (int i = 0. i < Tuple.MAX_ARITY. i++) {         testStrings[i] = Integer.toString(i).     } }
false;public;0;12;;@Test public void testConvertFromTupleToArray() throws InstantiationException, IllegalAccessException {     for (int i = 0. i < Tuple.MAX_ARITY. i++) {         Tuple currentTuple = (Tuple) CLASSES[i].newInstance().         String[] currentArray = new String[i + 1].         for (int j = 0. j <= i. j++) {             currentTuple.setField(testStrings[j], j).             currentArray[j] = testStrings[j].         }         arrayEqualityCheck(currentArray, new ArrayFromTuple().extract(currentTuple)).     } }
false;public;0;27;;@Test public void testUserSpecifiedOrder() throws InstantiationException, IllegalAccessException {     Tuple currentTuple = (Tuple) CLASSES[Tuple.MAX_ARITY - 1].newInstance().     for (int i = 0. i < Tuple.MAX_ARITY. i++) {         currentTuple.setField(testStrings[i], i).     }     String[] expected = { testStrings[5], testStrings[3], testStrings[6], testStrings[7], testStrings[0] }.     arrayEqualityCheck(expected, new ArrayFromTuple(5, 3, 6, 7, 0).extract(currentTuple)).     String[] expected2 = { testStrings[0], testStrings[Tuple.MAX_ARITY - 1] }.     arrayEqualityCheck(expected2, new ArrayFromTuple(0, Tuple.MAX_ARITY - 1).extract(currentTuple)).     String[] expected3 = { testStrings[Tuple.MAX_ARITY - 1], testStrings[0] }.     arrayEqualityCheck(expected3, new ArrayFromTuple(Tuple.MAX_ARITY - 1, 0).extract(currentTuple)).     String[] expected4 = { testStrings[13], testStrings[4], testStrings[5], testStrings[4], testStrings[2], testStrings[8], testStrings[6], testStrings[2], testStrings[8], testStrings[3], testStrings[5], testStrings[2], testStrings[16], testStrings[4], testStrings[3], testStrings[2], testStrings[6], testStrings[4], testStrings[7], testStrings[4], testStrings[2], testStrings[8], testStrings[7], testStrings[2] }.     arrayEqualityCheck(expected4, new ArrayFromTuple(13, 4, 5, 4, 2, 8, 6, 2, 8, 3, 5, 2, 16, 4, 3, 2, 6, 4, 7, 4, 2, 8, 7, 2).extract(currentTuple)). }
false;private;2;6;;private void arrayEqualityCheck(Object[] array1, Object[] array2) {     assertEquals("The result arrays must have the same length", array1.length, array2.length).     for (int i = 0. i < array1.length. i++) {         assertEquals("Unequal fields at position " + i, array1[i], array2[i]).     } }
