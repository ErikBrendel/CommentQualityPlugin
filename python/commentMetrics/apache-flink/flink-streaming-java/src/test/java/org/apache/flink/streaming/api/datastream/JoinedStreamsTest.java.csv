commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() {     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     dataStream1 = env.fromElements("a1", "a2", "a3").     dataStream2 = env.fromElements("a1", "a2").     keySelector = element -> element.     tsAssigner = TumblingEventTimeWindows.of(Time.milliseconds(1)).     joinFunction = (first, second) -> first + second. }
false;public;0;15;;@Test public void testDelegateToCoGrouped() {     Time lateness = Time.milliseconds(42L).     JoinedStreams.WithWindow<String, String, String, TimeWindow> withLateness = dataStream1.join(dataStream2).where(keySelector).equalTo(keySelector).window(tsAssigner).allowedLateness(lateness).     withLateness.apply(joinFunction, BasicTypeInfo.STRING_TYPE_INFO).     Assert.assertEquals(lateness.toMilliseconds(), withLateness.getCoGroupedWindowedStream().getAllowedLateness().toMilliseconds()). }
false;public;0;13;;@Test public void testSetAllowedLateness() {     Time lateness = Time.milliseconds(42L).     JoinedStreams.WithWindow<String, String, String, TimeWindow> withLateness = dataStream1.join(dataStream2).where(keySelector).equalTo(keySelector).window(tsAssigner).allowedLateness(lateness).     Assert.assertEquals(lateness.toMilliseconds(), withLateness.getAllowedLateness().toMilliseconds()). }
