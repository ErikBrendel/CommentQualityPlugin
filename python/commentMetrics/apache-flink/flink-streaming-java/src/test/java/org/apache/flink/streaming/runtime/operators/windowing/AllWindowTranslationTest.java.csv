# id;timestamp;commentText;codeText;commentWords;codeWords
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testReduceWithRichReducerFails() throws Exception;1484127347;.reduce() does not support RichReduceFunction, since the reduce function is used internally_in a {@code ReducingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testReduceWithRichReducerFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new RichReduceFunction<Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};reduce,does,not,support,rich,reduce,function,since,the,reduce,function,is,used,internally,in,a,code,reducing,state;test,expected,unsupported,operation,exception,class,public,void,test,reduce,with,rich,reducer,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,rich,reduce,function,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,reduce,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testReduceWithRichReducerFails() throws Exception;1485370583;.reduce() does not support RichReduceFunction, since the reduce function is used internally_in a {@code ReducingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testReduceWithRichReducerFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new RichReduceFunction<Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};reduce,does,not,support,rich,reduce,function,since,the,reduce,function,is,used,internally,in,a,code,reducing,state;test,expected,unsupported,operation,exception,class,public,void,test,reduce,with,rich,reducer,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,rich,reduce,function,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,reduce,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testReduceWithRichReducerFails() throws Exception;1488286976;.reduce() does not support RichReduceFunction, since the reduce function is used internally_in a {@code ReducingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testReduceWithRichReducerFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new RichReduceFunction<Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};reduce,does,not,support,rich,reduce,function,since,the,reduce,function,is,used,internally,in,a,code,reducing,state;test,expected,unsupported,operation,exception,class,public,void,test,reduce,with,rich,reducer,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,rich,reduce,function,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,reduce,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testReduceWithRichReducerFails() throws Exception;1493195810;.reduce() does not support RichReduceFunction, since the reduce function is used internally_in a {@code ReducingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testReduceWithRichReducerFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new RichReduceFunction<Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};reduce,does,not,support,rich,reduce,function,since,the,reduce,function,is,used,internally,in,a,code,reducing,state;test,expected,unsupported,operation,exception,class,public,void,test,reduce,with,rich,reducer,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,rich,reduce,function,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,reduce,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testReduceWithRichReducerFails() throws Exception;1493894636;.reduce() does not support RichReduceFunction, since the reduce function is used internally_in a {@code ReducingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testReduceWithRichReducerFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new RichReduceFunction<Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};reduce,does,not,support,rich,reduce,function,since,the,reduce,function,is,used,internally,in,a,code,reducing,state;test,expected,unsupported,operation,exception,class,public,void,test,reduce,with,rich,reducer,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,rich,reduce,function,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,reduce,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testReduceWithRichReducerFails() throws Exception;1495484544;.reduce() does not support RichReduceFunction, since the reduce function is used internally_in a {@code ReducingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testReduceWithRichReducerFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new RichReduceFunction<Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};reduce,does,not,support,rich,reduce,function,since,the,reduce,function,is,used,internally,in,a,code,reducing,state;test,expected,unsupported,operation,exception,class,public,void,test,reduce,with,rich,reducer,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,rich,reduce,function,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,reduce,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testReduceWithRichReducerFails() throws Exception;1503598628;.reduce() does not support RichReduceFunction, since the reduce function is used internally_in a {@code ReducingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testReduceWithRichReducerFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new RichReduceFunction<Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};reduce,does,not,support,rich,reduce,function,since,the,reduce,function,is,used,internally,in,a,code,reducing,state;test,expected,unsupported,operation,exception,class,public,void,test,reduce,with,rich,reducer,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,rich,reduce,function,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,reduce,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testReduceWithRichReducerFails() throws Exception;1508571218;.reduce() does not support RichReduceFunction, since the reduce function is used internally_in a {@code ReducingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testReduceWithRichReducerFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new RichReduceFunction<Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> reduce(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};reduce,does,not,support,rich,reduce,function,since,the,reduce,function,is,used,internally,in,a,code,reducing,state;test,expected,unsupported,operation,exception,class,public,void,test,reduce,with,rich,reducer,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,rich,reduce,function,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,reduce,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testFoldWithRichFolderFails() throws Exception;1484127347;.fold() does not support RichFoldFunction, since the fold function is used internally_in a {@code FoldingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testFoldWithRichFolderFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(new Tuple2<>("", 0), new RichFoldFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> fold(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};fold,does,not,support,rich,fold,function,since,the,fold,function,is,used,internally,in,a,code,folding,state;test,expected,unsupported,operation,exception,class,public,void,test,fold,with,rich,folder,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,new,tuple2,0,new,rich,fold,function,tuple2,string,integer,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,fold,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testFoldWithRichFolderFails() throws Exception;1485370583;.fold() does not support RichFoldFunction, since the fold function is used internally_in a {@code FoldingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testFoldWithRichFolderFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(new Tuple2<>("", 0), new RichFoldFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> fold(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};fold,does,not,support,rich,fold,function,since,the,fold,function,is,used,internally,in,a,code,folding,state;test,expected,unsupported,operation,exception,class,public,void,test,fold,with,rich,folder,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,new,tuple2,0,new,rich,fold,function,tuple2,string,integer,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,fold,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testFoldWithRichFolderFails() throws Exception;1488286976;.fold() does not support RichFoldFunction, since the fold function is used internally_in a {@code FoldingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testFoldWithRichFolderFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(new Tuple2<>("", 0), new RichFoldFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> fold(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};fold,does,not,support,rich,fold,function,since,the,fold,function,is,used,internally,in,a,code,folding,state;test,expected,unsupported,operation,exception,class,public,void,test,fold,with,rich,folder,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,new,tuple2,0,new,rich,fold,function,tuple2,string,integer,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,fold,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testFoldWithRichFolderFails() throws Exception;1493195810;.fold() does not support RichFoldFunction, since the fold function is used internally_in a {@code FoldingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testFoldWithRichFolderFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(new Tuple2<>("", 0), new RichFoldFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> fold(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};fold,does,not,support,rich,fold,function,since,the,fold,function,is,used,internally,in,a,code,folding,state;test,expected,unsupported,operation,exception,class,public,void,test,fold,with,rich,folder,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,new,tuple2,0,new,rich,fold,function,tuple2,string,integer,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,fold,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testFoldWithRichFolderFails() throws Exception;1493894636;.fold() does not support RichFoldFunction, since the fold function is used internally_in a {@code FoldingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testFoldWithRichFolderFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(new Tuple2<>("", 0), new RichFoldFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> fold(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};fold,does,not,support,rich,fold,function,since,the,fold,function,is,used,internally,in,a,code,folding,state;test,expected,unsupported,operation,exception,class,public,void,test,fold,with,rich,folder,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,new,tuple2,0,new,rich,fold,function,tuple2,string,integer,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,fold,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testFoldWithRichFolderFails() throws Exception;1495484544;.fold() does not support RichFoldFunction, since the fold function is used internally_in a {@code FoldingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testFoldWithRichFolderFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(new Tuple2<>("", 0), new RichFoldFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> fold(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};fold,does,not,support,rich,fold,function,since,the,fold,function,is,used,internally,in,a,code,folding,state;test,expected,unsupported,operation,exception,class,public,void,test,fold,with,rich,folder,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,new,tuple2,0,new,rich,fold,function,tuple2,string,integer,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,fold,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testFoldWithRichFolderFails() throws Exception;1503598628;.fold() does not support RichFoldFunction, since the fold function is used internally_in a {@code FoldingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testFoldWithRichFolderFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(new Tuple2<>("", 0), new RichFoldFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> fold(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};fold,does,not,support,rich,fold,function,since,the,fold,function,is,used,internally,in,a,code,folding,state;test,expected,unsupported,operation,exception,class,public,void,test,fold,with,rich,folder,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,new,tuple2,0,new,rich,fold,function,tuple2,string,integer,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,fold,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testFoldWithRichFolderFails() throws Exception;1508571218;.fold() does not support RichFoldFunction, since the fold function is used internally_in a {@code FoldingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testFoldWithRichFolderFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(new Tuple2<>("", 0), new RichFoldFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {_					private static final long serialVersionUID = -6448847205314995812L___					@Override_					public Tuple2<String, Integer> fold(Tuple2<String, Integer> value1,_							Tuple2<String, Integer> value2) throws Exception {_						return null__					}_				})___		fail("exception was not thrown")__	};fold,does,not,support,rich,fold,function,since,the,fold,function,is,used,internally,in,a,code,folding,state;test,expected,unsupported,operation,exception,class,public,void,test,fold,with,rich,folder,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,new,tuple2,0,new,rich,fold,function,tuple2,string,integer,tuple2,string,integer,private,static,final,long,serial,version,uid,6448847205314995812l,override,public,tuple2,string,integer,fold,tuple2,string,integer,value1,tuple2,string,integer,value2,throws,exception,return,null,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	@Ignore 	public void testReduceFastProcessingTime() throws Exception;1484127347;Ignored because we currently don't have the fast processing-time window operator.;@Test_	@SuppressWarnings("rawtypes")_	@Ignore_	public void testReduceFastProcessingTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DataStream<Tuple2<String, Integer>> window = source_				.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new DummyReducer())___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof AggregatingProcessingTimeWindowOperator)___		processElementAndEnsureOutput(operator, null, BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};ignored,because,we,currently,don,t,have,the,fast,processing,time,window,operator;test,suppress,warnings,rawtypes,ignore,public,void,test,reduce,fast,processing,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,data,stream,tuple2,string,integer,window,source,window,all,sliding,processing,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,dummy,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,aggregating,processing,time,window,operator,process,element,and,ensure,output,operator,null,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	@Ignore 	public void testReduceFastProcessingTime() throws Exception;1485370583;Ignored because we currently don't have the fast processing-time window operator.;@Test_	@SuppressWarnings("rawtypes")_	@Ignore_	public void testReduceFastProcessingTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DataStream<Tuple2<String, Integer>> window = source_				.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new DummyReducer())___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof AggregatingProcessingTimeWindowOperator)___		processElementAndEnsureOutput(operator, null, BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};ignored,because,we,currently,don,t,have,the,fast,processing,time,window,operator;test,suppress,warnings,rawtypes,ignore,public,void,test,reduce,fast,processing,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,data,stream,tuple2,string,integer,window,source,window,all,sliding,processing,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,dummy,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,aggregating,processing,time,window,operator,process,element,and,ensure,output,operator,null,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	@Ignore 	public void testReduceFastProcessingTime() throws Exception;1488286976;Ignored because we currently don't have the fast processing-time window operator.;@Test_	@SuppressWarnings("rawtypes")_	@Ignore_	public void testReduceFastProcessingTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DataStream<Tuple2<String, Integer>> window = source_				.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new DummyReducer())___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof AggregatingProcessingTimeWindowOperator)___		processElementAndEnsureOutput(operator, null, BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};ignored,because,we,currently,don,t,have,the,fast,processing,time,window,operator;test,suppress,warnings,rawtypes,ignore,public,void,test,reduce,fast,processing,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,data,stream,tuple2,string,integer,window,source,window,all,sliding,processing,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,dummy,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,aggregating,processing,time,window,operator,process,element,and,ensure,output,operator,null,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	@Ignore 	public void testReduceFastProcessingTime() throws Exception;1493195810;Ignored because we currently don't have the fast processing-time window operator.;@Test_	@SuppressWarnings("rawtypes")_	@Ignore_	public void testReduceFastProcessingTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DataStream<Tuple2<String, Integer>> window = source_				.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new DummyReducer())___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof AggregatingProcessingTimeWindowOperator)___		processElementAndEnsureOutput(operator, null, BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};ignored,because,we,currently,don,t,have,the,fast,processing,time,window,operator;test,suppress,warnings,rawtypes,ignore,public,void,test,reduce,fast,processing,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,data,stream,tuple2,string,integer,window,source,window,all,sliding,processing,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,dummy,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,aggregating,processing,time,window,operator,process,element,and,ensure,output,operator,null,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	@Ignore 	public void testReduceFastProcessingTime() throws Exception;1493894636;Ignored because we currently don't have the fast processing-time window operator.;@Test_	@SuppressWarnings("rawtypes")_	@Ignore_	public void testReduceFastProcessingTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DataStream<Tuple2<String, Integer>> window = source_				.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new DummyReducer())___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof AggregatingProcessingTimeWindowOperator)___		processElementAndEnsureOutput(operator, null, BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};ignored,because,we,currently,don,t,have,the,fast,processing,time,window,operator;test,suppress,warnings,rawtypes,ignore,public,void,test,reduce,fast,processing,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,data,stream,tuple2,string,integer,window,source,window,all,sliding,processing,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,dummy,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,aggregating,processing,time,window,operator,process,element,and,ensure,output,operator,null,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	@Ignore 	public void testReduceFastProcessingTime() throws Exception;1495484544;Ignored because we currently don't have the fast processing-time window operator.;@Test_	@SuppressWarnings("rawtypes")_	@Ignore_	public void testReduceFastProcessingTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DataStream<Tuple2<String, Integer>> window = source_				.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(new DummyReducer())___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof AggregatingProcessingTimeWindowOperator)___		processElementAndEnsureOutput(operator, null, BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};ignored,because,we,currently,don,t,have,the,fast,processing,time,window,operator;test,suppress,warnings,rawtypes,ignore,public,void,test,reduce,fast,processing,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,data,stream,tuple2,string,integer,window,source,window,all,sliding,processing,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,new,dummy,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,aggregating,processing,time,window,operator,process,element,and,ensure,output,operator,null,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1445418103;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator1 = (NonKeyedWindowOperator) operator1__		Assert.assertFalse(winOperator1.isSetProcessingTime())__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingTimeWindows)__		Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof PreAggregatingHeapWindowBuffer.Factory)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator2 = (NonKeyedWindowOperator) operator2__		Assert.assertFalse(winOperator2.isSetProcessingTime())__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingTimeWindows)__		Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof HeapWindowBuffer.Factory)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator1,non,keyed,window,operator,operator1,assert,assert,false,win,operator1,is,set,processing,time,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,time,windows,assert,assert,true,win,operator1,get,window,buffer,factory,instanceof,pre,aggregating,heap,window,buffer,factory,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator2,non,keyed,window,operator,operator2,assert,assert,false,win,operator2,is,set,processing,time,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,time,windows,assert,assert,true,win,operator2,get,window,buffer,factory,instanceof,heap,window,buffer,factory
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1454527671;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator1 = (NonKeyedWindowOperator) operator1__		Assert.assertFalse(winOperator1.isSetProcessingTime())__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingTimeWindows)__		Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof PreAggregatingHeapWindowBuffer.Factory)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator2 = (NonKeyedWindowOperator) operator2__		Assert.assertFalse(winOperator2.isSetProcessingTime())__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingTimeWindows)__		Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof HeapWindowBuffer.Factory)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator1,non,keyed,window,operator,operator1,assert,assert,false,win,operator1,is,set,processing,time,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,time,windows,assert,assert,true,win,operator1,get,window,buffer,factory,instanceof,pre,aggregating,heap,window,buffer,factory,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,iterable,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator2,non,keyed,window,operator,operator2,assert,assert,false,win,operator2,is,set,processing,time,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,time,windows,assert,assert,true,win,operator2,get,window,buffer,factory,instanceof,heap,window,buffer,factory
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1455703064;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator1 = (NonKeyedWindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingTimeWindows)__		Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof PreAggregatingHeapWindowBuffer.Factory)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator2 = (NonKeyedWindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingTimeWindows)__		Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof HeapWindowBuffer.Factory)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator1,non,keyed,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,time,windows,assert,assert,true,win,operator1,get,window,buffer,factory,instanceof,pre,aggregating,heap,window,buffer,factory,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,iterable,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator2,non,keyed,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,time,windows,assert,assert,true,win,operator2,get,window,buffer,factory,instanceof,heap,window,buffer,factory
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1456528025;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator1 = (NonKeyedWindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingTimeWindows)__		Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof PreAggregatingHeapWindowBuffer.Factory)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator2 = (NonKeyedWindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingTimeWindows)__		Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof HeapWindowBuffer.Factory)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator1,non,keyed,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,time,windows,assert,assert,true,win,operator1,get,window,buffer,factory,instanceof,pre,aggregating,heap,window,buffer,factory,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator2,non,keyed,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,time,windows,assert,assert,true,win,operator2,get,window,buffer,factory,instanceof,heap,window,buffer,factory
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1456528720;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator1 = (NonKeyedWindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingTimeWindows)__		Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof ReducingWindowBuffer.Factory)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator2 = (NonKeyedWindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingTimeWindows)__		Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof ListWindowBuffer.Factory)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator1,non,keyed,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,time,windows,assert,assert,true,win,operator1,get,window,buffer,factory,instanceof,reducing,window,buffer,factory,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator2,non,keyed,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,time,windows,assert,assert,true,win,operator2,get,window,buffer,factory,instanceof,list,window,buffer,factory
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1456774151;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator1 = (NonKeyedWindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof ReducingWindowBuffer.Factory)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator2 = (NonKeyedWindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof ListWindowBuffer.Factory)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator1,non,keyed,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,window,buffer,factory,instanceof,reducing,window,buffer,factory,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator2,non,keyed,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,window,buffer,factory,instanceof,list,window,buffer,factory
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1459866414;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof ReducingStateDescriptor)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,reducing,state,descriptor,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1459869538;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof ReducingStateDescriptor)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,reducing,state,descriptor,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1467726666;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof ReducingStateDescriptor)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,reducing,state,descriptor,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1472663071;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof ReducingStateDescriptor)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,reducing,state,descriptor,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testEventTime() throws Exception;1477293106;These tests ensure that the correct trigger is set when using event-time windows.;@Test_	@SuppressWarnings("rawtypes")_	public void testEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof ReducingStateDescriptor)___		DataStream<Tuple2<String, Integer>> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,the,correct,trigger,is,set,when,using,event,time,windows;test,suppress,warnings,rawtypes,public,void,test,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,reducing,state,descriptor,data,stream,tuple2,string,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testAggregateWithRichFunctionFails() throws Exception;1485370583;.aggregate() does not support RichAggregateFunction, since the AggregateFunction is used internally_in an {@code AggregatingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testAggregateWithRichFunctionFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.aggregate(new DummyRichAggregationFunction<Tuple2<String, Integer>>())___		fail("exception was not thrown")__	};aggregate,does,not,support,rich,aggregate,function,since,the,aggregate,function,is,used,internally,in,an,code,aggregating,state;test,expected,unsupported,operation,exception,class,public,void,test,aggregate,with,rich,function,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,aggregate,new,dummy,rich,aggregation,function,tuple2,string,integer,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testAggregateWithRichFunctionFails() throws Exception;1488286976;.aggregate() does not support RichAggregateFunction, since the AggregateFunction is used internally_in an {@code AggregatingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testAggregateWithRichFunctionFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.aggregate(new DummyRichAggregationFunction<Tuple2<String, Integer>>())___		fail("exception was not thrown")__	};aggregate,does,not,support,rich,aggregate,function,since,the,aggregate,function,is,used,internally,in,an,code,aggregating,state;test,expected,unsupported,operation,exception,class,public,void,test,aggregate,with,rich,function,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,aggregate,new,dummy,rich,aggregation,function,tuple2,string,integer,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testAggregateWithRichFunctionFails() throws Exception;1493195810;.aggregate() does not support RichAggregateFunction, since the AggregateFunction is used internally_in an {@code AggregatingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testAggregateWithRichFunctionFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.aggregate(new DummyRichAggregationFunction<Tuple2<String, Integer>>())___		fail("exception was not thrown")__	};aggregate,does,not,support,rich,aggregate,function,since,the,aggregate,function,is,used,internally,in,an,code,aggregating,state;test,expected,unsupported,operation,exception,class,public,void,test,aggregate,with,rich,function,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,aggregate,new,dummy,rich,aggregation,function,tuple2,string,integer,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testAggregateWithRichFunctionFails() throws Exception;1493894636;.aggregate() does not support RichAggregateFunction, since the AggregateFunction is used internally_in an {@code AggregatingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testAggregateWithRichFunctionFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.aggregate(new DummyRichAggregationFunction<Tuple2<String, Integer>>())___		fail("exception was not thrown")__	};aggregate,does,not,support,rich,aggregate,function,since,the,aggregate,function,is,used,internally,in,an,code,aggregating,state;test,expected,unsupported,operation,exception,class,public,void,test,aggregate,with,rich,function,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,aggregate,new,dummy,rich,aggregation,function,tuple2,string,integer,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testAggregateWithRichFunctionFails() throws Exception;1495484544;.aggregate() does not support RichAggregateFunction, since the AggregateFunction is used internally_in an {@code AggregatingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testAggregateWithRichFunctionFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.aggregate(new DummyRichAggregationFunction<Tuple2<String, Integer>>())___		fail("exception was not thrown")__	};aggregate,does,not,support,rich,aggregate,function,since,the,aggregate,function,is,used,internally,in,an,code,aggregating,state;test,expected,unsupported,operation,exception,class,public,void,test,aggregate,with,rich,function,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,aggregate,new,dummy,rich,aggregation,function,tuple2,string,integer,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testAggregateWithRichFunctionFails() throws Exception;1503598628;.aggregate() does not support RichAggregateFunction, since the AggregateFunction is used internally_in an {@code AggregatingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testAggregateWithRichFunctionFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.aggregate(new DummyRichAggregationFunction<Tuple2<String, Integer>>())___		fail("exception was not thrown")__	};aggregate,does,not,support,rich,aggregate,function,since,the,aggregate,function,is,used,internally,in,an,code,aggregating,state;test,expected,unsupported,operation,exception,class,public,void,test,aggregate,with,rich,function,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,aggregate,new,dummy,rich,aggregation,function,tuple2,string,integer,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test(expected = UnsupportedOperationException.class) 	public void testAggregateWithRichFunctionFails() throws Exception;1508571218;.aggregate() does not support RichAggregateFunction, since the AggregateFunction is used internally_in an {@code AggregatingState}.;@Test(expected = UnsupportedOperationException.class)_	public void testAggregateWithRichFunctionFails() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.aggregate(new DummyRichAggregationFunction<Tuple2<String, Integer>>())___		fail("exception was not thrown")__	};aggregate,does,not,support,rich,aggregate,function,since,the,aggregate,function,is,used,internally,in,an,code,aggregating,state;test,expected,unsupported,operation,exception,class,public,void,test,aggregate,with,rich,function,fails,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,processing,time,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,aggregate,new,dummy,rich,aggregation,function,tuple2,string,integer,fail,exception,was,not,thrown
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testApplyWithPreReducerEventTime() throws Exception;1484127347;Test for the deprecated .apply(Reducer, WindowFunction).;@Test_	@SuppressWarnings("rawtypes")_	public void testApplyWithPreReducerEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple3<String, String, Integer>> window = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(reducer, new AllWindowFunction<Tuple2<String, Integer>, Tuple3<String, String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple3<String, String, Integer>> out) throws Exception {_						for (Tuple2<String, Integer> in : values) {_							out.collect(new Tuple3<>(in.f0, in.f0, in.f1))__						}_					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple3<String, String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof WindowOperator)__		WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator__		Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor)___		processElementAndEnsureOutput(operator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};test,for,the,deprecated,apply,reducer,window,function;test,suppress,warnings,rawtypes,public,void,test,apply,with,pre,reducer,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,ingestion,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple3,string,string,integer,window,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,reducer,new,all,window,function,tuple2,string,integer,tuple3,string,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple3,string,string,integer,out,throws,exception,for,tuple2,string,integer,in,values,out,collect,new,tuple3,in,f0,in,f0,in,f1,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple3,string,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,window,operator,window,operator,string,tuple2,string,integer,win,operator,window,operator,string,tuple2,string,integer,operator,assert,assert,true,win,operator,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator,get,state,descriptor,instanceof,reducing,state,descriptor,process,element,and,ensure,output,operator,win,operator,get,key,selector,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testApplyWithPreReducerEventTime() throws Exception;1485370583;Test for the deprecated .apply(Reducer, WindowFunction).;@Test_	@SuppressWarnings("rawtypes")_	public void testApplyWithPreReducerEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple3<String, String, Integer>> window = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(reducer, new AllWindowFunction<Tuple2<String, Integer>, Tuple3<String, String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple3<String, String, Integer>> out) throws Exception {_						for (Tuple2<String, Integer> in : values) {_							out.collect(new Tuple3<>(in.f0, in.f0, in.f1))__						}_					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple3<String, String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof WindowOperator)__		WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator__		Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor)___		processElementAndEnsureOutput(operator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};test,for,the,deprecated,apply,reducer,window,function;test,suppress,warnings,rawtypes,public,void,test,apply,with,pre,reducer,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,ingestion,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple3,string,string,integer,window,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,reducer,new,all,window,function,tuple2,string,integer,tuple3,string,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple3,string,string,integer,out,throws,exception,for,tuple2,string,integer,in,values,out,collect,new,tuple3,in,f0,in,f0,in,f1,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple3,string,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,window,operator,window,operator,string,tuple2,string,integer,win,operator,window,operator,string,tuple2,string,integer,operator,assert,assert,true,win,operator,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator,get,state,descriptor,instanceof,reducing,state,descriptor,process,element,and,ensure,output,operator,win,operator,get,key,selector,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testApplyWithPreReducerEventTime() throws Exception;1488286976;Test for the deprecated .apply(Reducer, WindowFunction).;@Test_	@SuppressWarnings("rawtypes")_	public void testApplyWithPreReducerEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple3<String, String, Integer>> window = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(reducer, new AllWindowFunction<Tuple2<String, Integer>, Tuple3<String, String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple3<String, String, Integer>> out) throws Exception {_						for (Tuple2<String, Integer> in : values) {_							out.collect(new Tuple3<>(in.f0, in.f0, in.f1))__						}_					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple3<String, String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof WindowOperator)__		WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator__		Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor)___		processElementAndEnsureOutput(operator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};test,for,the,deprecated,apply,reducer,window,function;test,suppress,warnings,rawtypes,public,void,test,apply,with,pre,reducer,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,ingestion,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple3,string,string,integer,window,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,reducer,new,all,window,function,tuple2,string,integer,tuple3,string,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple3,string,string,integer,out,throws,exception,for,tuple2,string,integer,in,values,out,collect,new,tuple3,in,f0,in,f0,in,f1,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple3,string,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,window,operator,window,operator,string,tuple2,string,integer,win,operator,window,operator,string,tuple2,string,integer,operator,assert,assert,true,win,operator,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator,get,state,descriptor,instanceof,reducing,state,descriptor,process,element,and,ensure,output,operator,win,operator,get,key,selector,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testApplyWithPreReducerEventTime() throws Exception;1493195810;Test for the deprecated .apply(Reducer, WindowFunction).;@Test_	@SuppressWarnings("rawtypes")_	public void testApplyWithPreReducerEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple3<String, String, Integer>> window = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(reducer, new AllWindowFunction<Tuple2<String, Integer>, Tuple3<String, String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple3<String, String, Integer>> out) throws Exception {_						for (Tuple2<String, Integer> in : values) {_							out.collect(new Tuple3<>(in.f0, in.f0, in.f1))__						}_					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple3<String, String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof WindowOperator)__		WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator__		Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor)___		processElementAndEnsureOutput(operator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};test,for,the,deprecated,apply,reducer,window,function;test,suppress,warnings,rawtypes,public,void,test,apply,with,pre,reducer,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,ingestion,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple3,string,string,integer,window,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,reducer,new,all,window,function,tuple2,string,integer,tuple3,string,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple3,string,string,integer,out,throws,exception,for,tuple2,string,integer,in,values,out,collect,new,tuple3,in,f0,in,f0,in,f1,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple3,string,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,window,operator,window,operator,string,tuple2,string,integer,win,operator,window,operator,string,tuple2,string,integer,operator,assert,assert,true,win,operator,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator,get,state,descriptor,instanceof,reducing,state,descriptor,process,element,and,ensure,output,operator,win,operator,get,key,selector,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testApplyWithPreReducerEventTime() throws Exception;1493894636;Test for the deprecated .apply(Reducer, WindowFunction).;@Test_	@SuppressWarnings("rawtypes")_	public void testApplyWithPreReducerEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple3<String, String, Integer>> window = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(reducer, new AllWindowFunction<Tuple2<String, Integer>, Tuple3<String, String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple3<String, String, Integer>> out) throws Exception {_						for (Tuple2<String, Integer> in : values) {_							out.collect(new Tuple3<>(in.f0, in.f0, in.f1))__						}_					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple3<String, String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof WindowOperator)__		WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator__		Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor)___		processElementAndEnsureOutput(operator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};test,for,the,deprecated,apply,reducer,window,function;test,suppress,warnings,rawtypes,public,void,test,apply,with,pre,reducer,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,ingestion,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple3,string,string,integer,window,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,reducer,new,all,window,function,tuple2,string,integer,tuple3,string,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple3,string,string,integer,out,throws,exception,for,tuple2,string,integer,in,values,out,collect,new,tuple3,in,f0,in,f0,in,f1,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple3,string,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,window,operator,window,operator,string,tuple2,string,integer,win,operator,window,operator,string,tuple2,string,integer,operator,assert,assert,true,win,operator,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator,get,state,descriptor,instanceof,reducing,state,descriptor,process,element,and,ensure,output,operator,win,operator,get,key,selector,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testApplyWithPreReducerEventTime() throws Exception;1495484544;Test for the deprecated .apply(Reducer, WindowFunction).;@Test_	@SuppressWarnings("rawtypes")_	public void testApplyWithPreReducerEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple3<String, String, Integer>> window = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(reducer, new AllWindowFunction<Tuple2<String, Integer>, Tuple3<String, String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple3<String, String, Integer>> out) throws Exception {_						for (Tuple2<String, Integer> in : values) {_							out.collect(new Tuple3<>(in.f0, in.f0, in.f1))__						}_					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple3<String, String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof WindowOperator)__		WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator__		Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor)___		processElementAndEnsureOutput(operator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};test,for,the,deprecated,apply,reducer,window,function;test,suppress,warnings,rawtypes,public,void,test,apply,with,pre,reducer,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,ingestion,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple3,string,string,integer,window,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,reducer,new,all,window,function,tuple2,string,integer,tuple3,string,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple3,string,string,integer,out,throws,exception,for,tuple2,string,integer,in,values,out,collect,new,tuple3,in,f0,in,f0,in,f1,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple3,string,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,window,operator,window,operator,string,tuple2,string,integer,win,operator,window,operator,string,tuple2,string,integer,operator,assert,assert,true,win,operator,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator,get,state,descriptor,instanceof,reducing,state,descriptor,process,element,and,ensure,output,operator,win,operator,get,key,selector,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testApplyWithPreReducerEventTime() throws Exception;1503598628;Test for the deprecated .apply(Reducer, WindowFunction).;@Test_	@SuppressWarnings("rawtypes")_	public void testApplyWithPreReducerEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple3<String, String, Integer>> window = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(reducer, new AllWindowFunction<Tuple2<String, Integer>, Tuple3<String, String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple3<String, String, Integer>> out) throws Exception {_						for (Tuple2<String, Integer> in : values) {_							out.collect(new Tuple3<>(in.f0, in.f0, in.f1))__						}_					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple3<String, String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof WindowOperator)__		WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator__		Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor)___		processElementAndEnsureOutput(operator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};test,for,the,deprecated,apply,reducer,window,function;test,suppress,warnings,rawtypes,public,void,test,apply,with,pre,reducer,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,ingestion,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple3,string,string,integer,window,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,reducer,new,all,window,function,tuple2,string,integer,tuple3,string,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple3,string,string,integer,out,throws,exception,for,tuple2,string,integer,in,values,out,collect,new,tuple3,in,f0,in,f0,in,f1,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple3,string,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,window,operator,window,operator,string,tuple2,string,integer,win,operator,window,operator,string,tuple2,string,integer,operator,assert,assert,true,win,operator,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator,get,state,descriptor,instanceof,reducing,state,descriptor,process,element,and,ensure,output,operator,win,operator,get,key,selector,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testApplyWithPreReducerEventTime() throws Exception;1508571218;Test for the deprecated .apply(Reducer, WindowFunction).;@Test_	@SuppressWarnings("rawtypes")_	public void testApplyWithPreReducerEventTime() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple3<String, String, Integer>> window = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.apply(reducer, new AllWindowFunction<Tuple2<String, Integer>, Tuple3<String, String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple3<String, String, Integer>> out) throws Exception {_						for (Tuple2<String, Integer> in : values) {_							out.collect(new Tuple3<>(in.f0, in.f0, in.f1))__						}_					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>> transform =_				(OneInputTransformation<Tuple2<String, Integer>, Tuple3<String, String, Integer>>) window.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple3<String, String, Integer>> operator = transform.getOperator()__		Assert.assertTrue(operator instanceof WindowOperator)__		WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator__		Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor)___		processElementAndEnsureOutput(operator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>("hello", 1))__	};test,for,the,deprecated,apply,reducer,window,function;test,suppress,warnings,rawtypes,public,void,test,apply,with,pre,reducer,event,time,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,ingestion,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple3,string,string,integer,window,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,apply,reducer,new,all,window,function,tuple2,string,integer,tuple3,string,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple3,string,string,integer,out,throws,exception,for,tuple2,string,integer,in,values,out,collect,new,tuple3,in,f0,in,f0,in,f1,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,transform,one,input,transformation,tuple2,string,integer,tuple3,string,string,integer,window,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple3,string,string,integer,operator,transform,get,operator,assert,assert,true,operator,instanceof,window,operator,window,operator,string,tuple2,string,integer,win,operator,window,operator,string,tuple2,string,integer,operator,assert,assert,true,win,operator,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator,get,state,descriptor,instanceof,reducing,state,descriptor,process,element,and,ensure,output,operator,win,operator,get,key,selector,basic,type,info,new,tuple2,hello,1
AllWindowTranslationTest -> private static <K, IN, OUT> void processElementAndEnsureOutput( 			OneInputStreamOperator<IN, OUT> operator, 			KeySelector<IN, K> keySelector, 			TypeInformation<K> keyType, 			IN element) throws Exception;1484127347;Ensure that we get some output from the given operator when pushing in an element and_setting watermark and processing time to {@code Long.MAX_VALUE}.;private static <K, IN, OUT> void processElementAndEnsureOutput(_			OneInputStreamOperator<IN, OUT> operator,_			KeySelector<IN, K> keySelector,_			TypeInformation<K> keyType,_			IN element) throws Exception {__		KeyedOneInputStreamOperatorTestHarness<K, IN, OUT> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						operator,_						keySelector,_						keyType)___		testHarness.open()___		testHarness.setProcessingTime(0)__		testHarness.processWatermark(Long.MIN_VALUE)___		testHarness.processElement(new StreamRecord<>(element, 0))___		_		testHarness.setProcessingTime(Long.MAX_VALUE)__		testHarness.processWatermark(Long.MAX_VALUE)___		_		assertTrue(testHarness.getOutput().size() >= 3)___		testHarness.close()__	};ensure,that,we,get,some,output,from,the,given,operator,when,pushing,in,an,element,and,setting,watermark,and,processing,time,to,code,long;private,static,k,in,out,void,process,element,and,ensure,output,one,input,stream,operator,in,out,operator,key,selector,in,k,key,selector,type,information,k,key,type,in,element,throws,exception,keyed,one,input,stream,operator,test,harness,k,in,out,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,key,selector,key,type,test,harness,open,test,harness,set,processing,time,0,test,harness,process,watermark,long,test,harness,process,element,new,stream,record,element,0,test,harness,set,processing,time,long,test,harness,process,watermark,long,assert,true,test,harness,get,output,size,3,test,harness,close
AllWindowTranslationTest -> private static <K, IN, OUT> void processElementAndEnsureOutput( 			OneInputStreamOperator<IN, OUT> operator, 			KeySelector<IN, K> keySelector, 			TypeInformation<K> keyType, 			IN element) throws Exception;1485370583;Ensure that we get some output from the given operator when pushing in an element and_setting watermark and processing time to {@code Long.MAX_VALUE}.;private static <K, IN, OUT> void processElementAndEnsureOutput(_			OneInputStreamOperator<IN, OUT> operator,_			KeySelector<IN, K> keySelector,_			TypeInformation<K> keyType,_			IN element) throws Exception {__		KeyedOneInputStreamOperatorTestHarness<K, IN, OUT> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						operator,_						keySelector,_						keyType)___		testHarness.open()___		testHarness.setProcessingTime(0)__		testHarness.processWatermark(Long.MIN_VALUE)___		testHarness.processElement(new StreamRecord<>(element, 0))___		_		testHarness.setProcessingTime(Long.MAX_VALUE)__		testHarness.processWatermark(Long.MAX_VALUE)___		_		assertTrue(testHarness.getOutput().size() >= 3)___		testHarness.close()__	};ensure,that,we,get,some,output,from,the,given,operator,when,pushing,in,an,element,and,setting,watermark,and,processing,time,to,code,long;private,static,k,in,out,void,process,element,and,ensure,output,one,input,stream,operator,in,out,operator,key,selector,in,k,key,selector,type,information,k,key,type,in,element,throws,exception,keyed,one,input,stream,operator,test,harness,k,in,out,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,key,selector,key,type,test,harness,open,test,harness,set,processing,time,0,test,harness,process,watermark,long,test,harness,process,element,new,stream,record,element,0,test,harness,set,processing,time,long,test,harness,process,watermark,long,assert,true,test,harness,get,output,size,3,test,harness,close
AllWindowTranslationTest -> private static <K, IN, OUT> void processElementAndEnsureOutput( 			OneInputStreamOperator<IN, OUT> operator, 			KeySelector<IN, K> keySelector, 			TypeInformation<K> keyType, 			IN element) throws Exception;1488286976;Ensure that we get some output from the given operator when pushing in an element and_setting watermark and processing time to {@code Long.MAX_VALUE}.;private static <K, IN, OUT> void processElementAndEnsureOutput(_			OneInputStreamOperator<IN, OUT> operator,_			KeySelector<IN, K> keySelector,_			TypeInformation<K> keyType,_			IN element) throws Exception {__		KeyedOneInputStreamOperatorTestHarness<K, IN, OUT> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						operator,_						keySelector,_						keyType)___		testHarness.open()___		testHarness.setProcessingTime(0)__		testHarness.processWatermark(Long.MIN_VALUE)___		testHarness.processElement(new StreamRecord<>(element, 0))___		_		testHarness.setProcessingTime(Long.MAX_VALUE)__		testHarness.processWatermark(Long.MAX_VALUE)___		_		assertTrue(testHarness.getOutput().size() >= 3)___		testHarness.close()__	};ensure,that,we,get,some,output,from,the,given,operator,when,pushing,in,an,element,and,setting,watermark,and,processing,time,to,code,long;private,static,k,in,out,void,process,element,and,ensure,output,one,input,stream,operator,in,out,operator,key,selector,in,k,key,selector,type,information,k,key,type,in,element,throws,exception,keyed,one,input,stream,operator,test,harness,k,in,out,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,key,selector,key,type,test,harness,open,test,harness,set,processing,time,0,test,harness,process,watermark,long,test,harness,process,element,new,stream,record,element,0,test,harness,set,processing,time,long,test,harness,process,watermark,long,assert,true,test,harness,get,output,size,3,test,harness,close
AllWindowTranslationTest -> private static <K, IN, OUT> void processElementAndEnsureOutput( 			OneInputStreamOperator<IN, OUT> operator, 			KeySelector<IN, K> keySelector, 			TypeInformation<K> keyType, 			IN element) throws Exception;1493195810;Ensure that we get some output from the given operator when pushing in an element and_setting watermark and processing time to {@code Long.MAX_VALUE}.;private static <K, IN, OUT> void processElementAndEnsureOutput(_			OneInputStreamOperator<IN, OUT> operator,_			KeySelector<IN, K> keySelector,_			TypeInformation<K> keyType,_			IN element) throws Exception {__		KeyedOneInputStreamOperatorTestHarness<K, IN, OUT> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						operator,_						keySelector,_						keyType)___		testHarness.open()___		testHarness.setProcessingTime(0)__		testHarness.processWatermark(Long.MIN_VALUE)___		testHarness.processElement(new StreamRecord<>(element, 0))___		_		testHarness.setProcessingTime(Long.MAX_VALUE)__		testHarness.processWatermark(Long.MAX_VALUE)___		_		assertTrue(testHarness.getOutput().size() >= 3)___		testHarness.close()__	};ensure,that,we,get,some,output,from,the,given,operator,when,pushing,in,an,element,and,setting,watermark,and,processing,time,to,code,long;private,static,k,in,out,void,process,element,and,ensure,output,one,input,stream,operator,in,out,operator,key,selector,in,k,key,selector,type,information,k,key,type,in,element,throws,exception,keyed,one,input,stream,operator,test,harness,k,in,out,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,key,selector,key,type,test,harness,open,test,harness,set,processing,time,0,test,harness,process,watermark,long,test,harness,process,element,new,stream,record,element,0,test,harness,set,processing,time,long,test,harness,process,watermark,long,assert,true,test,harness,get,output,size,3,test,harness,close
AllWindowTranslationTest -> private static <K, IN, OUT> void processElementAndEnsureOutput( 			OneInputStreamOperator<IN, OUT> operator, 			KeySelector<IN, K> keySelector, 			TypeInformation<K> keyType, 			IN element) throws Exception;1493894636;Ensure that we get some output from the given operator when pushing in an element and_setting watermark and processing time to {@code Long.MAX_VALUE}.;private static <K, IN, OUT> void processElementAndEnsureOutput(_			OneInputStreamOperator<IN, OUT> operator,_			KeySelector<IN, K> keySelector,_			TypeInformation<K> keyType,_			IN element) throws Exception {__		KeyedOneInputStreamOperatorTestHarness<K, IN, OUT> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						operator,_						keySelector,_						keyType)___		testHarness.open()___		testHarness.setProcessingTime(0)__		testHarness.processWatermark(Long.MIN_VALUE)___		testHarness.processElement(new StreamRecord<>(element, 0))___		_		testHarness.setProcessingTime(Long.MAX_VALUE)__		testHarness.processWatermark(Long.MAX_VALUE)___		_		assertTrue(testHarness.getOutput().size() >= 3)___		testHarness.close()__	};ensure,that,we,get,some,output,from,the,given,operator,when,pushing,in,an,element,and,setting,watermark,and,processing,time,to,code,long;private,static,k,in,out,void,process,element,and,ensure,output,one,input,stream,operator,in,out,operator,key,selector,in,k,key,selector,type,information,k,key,type,in,element,throws,exception,keyed,one,input,stream,operator,test,harness,k,in,out,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,key,selector,key,type,test,harness,open,test,harness,set,processing,time,0,test,harness,process,watermark,long,test,harness,process,element,new,stream,record,element,0,test,harness,set,processing,time,long,test,harness,process,watermark,long,assert,true,test,harness,get,output,size,3,test,harness,close
AllWindowTranslationTest -> private static <K, IN, OUT> void processElementAndEnsureOutput( 			OneInputStreamOperator<IN, OUT> operator, 			KeySelector<IN, K> keySelector, 			TypeInformation<K> keyType, 			IN element) throws Exception;1495484544;Ensure that we get some output from the given operator when pushing in an element and_setting watermark and processing time to {@code Long.MAX_VALUE}.;private static <K, IN, OUT> void processElementAndEnsureOutput(_			OneInputStreamOperator<IN, OUT> operator,_			KeySelector<IN, K> keySelector,_			TypeInformation<K> keyType,_			IN element) throws Exception {__		KeyedOneInputStreamOperatorTestHarness<K, IN, OUT> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						operator,_						keySelector,_						keyType)___		testHarness.open()___		testHarness.setProcessingTime(0)__		testHarness.processWatermark(Long.MIN_VALUE)___		testHarness.processElement(new StreamRecord<>(element, 0))___		_		testHarness.setProcessingTime(Long.MAX_VALUE)__		testHarness.processWatermark(Long.MAX_VALUE)___		_		assertTrue(testHarness.getOutput().size() >= 3)___		testHarness.close()__	};ensure,that,we,get,some,output,from,the,given,operator,when,pushing,in,an,element,and,setting,watermark,and,processing,time,to,code,long;private,static,k,in,out,void,process,element,and,ensure,output,one,input,stream,operator,in,out,operator,key,selector,in,k,key,selector,type,information,k,key,type,in,element,throws,exception,keyed,one,input,stream,operator,test,harness,k,in,out,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,key,selector,key,type,test,harness,open,test,harness,set,processing,time,0,test,harness,process,watermark,long,test,harness,process,element,new,stream,record,element,0,test,harness,set,processing,time,long,test,harness,process,watermark,long,assert,true,test,harness,get,output,size,3,test,harness,close
AllWindowTranslationTest -> private static <K, IN, OUT> void processElementAndEnsureOutput( 			OneInputStreamOperator<IN, OUT> operator, 			KeySelector<IN, K> keySelector, 			TypeInformation<K> keyType, 			IN element) throws Exception;1503598628;Ensure that we get some output from the given operator when pushing in an element and_setting watermark and processing time to {@code Long.MAX_VALUE}.;private static <K, IN, OUT> void processElementAndEnsureOutput(_			OneInputStreamOperator<IN, OUT> operator,_			KeySelector<IN, K> keySelector,_			TypeInformation<K> keyType,_			IN element) throws Exception {__		KeyedOneInputStreamOperatorTestHarness<K, IN, OUT> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						operator,_						keySelector,_						keyType)___		testHarness.open()___		testHarness.setProcessingTime(0)__		testHarness.processWatermark(Long.MIN_VALUE)___		testHarness.processElement(new StreamRecord<>(element, 0))___		_		testHarness.setProcessingTime(Long.MAX_VALUE)__		testHarness.processWatermark(Long.MAX_VALUE)___		_		assertTrue(testHarness.getOutput().size() >= 3)___		testHarness.close()__	};ensure,that,we,get,some,output,from,the,given,operator,when,pushing,in,an,element,and,setting,watermark,and,processing,time,to,code,long;private,static,k,in,out,void,process,element,and,ensure,output,one,input,stream,operator,in,out,operator,key,selector,in,k,key,selector,type,information,k,key,type,in,element,throws,exception,keyed,one,input,stream,operator,test,harness,k,in,out,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,key,selector,key,type,test,harness,open,test,harness,set,processing,time,0,test,harness,process,watermark,long,test,harness,process,element,new,stream,record,element,0,test,harness,set,processing,time,long,test,harness,process,watermark,long,assert,true,test,harness,get,output,size,3,test,harness,close
AllWindowTranslationTest -> private static <K, IN, OUT> void processElementAndEnsureOutput( 			OneInputStreamOperator<IN, OUT> operator, 			KeySelector<IN, K> keySelector, 			TypeInformation<K> keyType, 			IN element) throws Exception;1508571218;Ensure that we get some output from the given operator when pushing in an element and_setting watermark and processing time to {@code Long.MAX_VALUE}.;private static <K, IN, OUT> void processElementAndEnsureOutput(_			OneInputStreamOperator<IN, OUT> operator,_			KeySelector<IN, K> keySelector,_			TypeInformation<K> keyType,_			IN element) throws Exception {__		KeyedOneInputStreamOperatorTestHarness<K, IN, OUT> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						operator,_						keySelector,_						keyType)___		testHarness.open()___		testHarness.setProcessingTime(0)__		testHarness.processWatermark(Long.MIN_VALUE)___		testHarness.processElement(new StreamRecord<>(element, 0))___		_		testHarness.setProcessingTime(Long.MAX_VALUE)__		testHarness.processWatermark(Long.MAX_VALUE)___		_		assertTrue(testHarness.getOutput().size() >= 3)___		testHarness.close()__	};ensure,that,we,get,some,output,from,the,given,operator,when,pushing,in,an,element,and,setting,watermark,and,processing,time,to,code,long;private,static,k,in,out,void,process,element,and,ensure,output,one,input,stream,operator,in,out,operator,key,selector,in,k,key,selector,type,information,k,key,type,in,element,throws,exception,keyed,one,input,stream,operator,test,harness,k,in,out,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,key,selector,key,type,test,harness,open,test,harness,set,processing,time,0,test,harness,process,watermark,long,test,harness,process,element,new,stream,record,element,0,test,harness,set,processing,time,long,test,harness,process,watermark,long,assert,true,test,harness,get,output,size,3,test,harness,close
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testFoldBuffer() throws Exception;1456528720;These tests ensure that a Fold buffer is used if possible;@Test_	@SuppressWarnings("rawtypes")_	public void testFoldBuffer() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyFolder folder = new DummyFolder()___		DataStream<Integer> window1 = source_				.windowAll(SlidingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator1 = (NonKeyedWindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingTimeWindows)__		Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof FoldingWindowBuffer.Factory)___		DataStream<Integer> window2 = source_				.windowAll(TumblingTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.evictor(CountEvictor.of(13))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator2 = (NonKeyedWindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingTimeWindows)__		Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof ListWindowBuffer.Factory)__	};these,tests,ensure,that,a,fold,buffer,is,used,if,possible;test,suppress,warnings,rawtypes,public,void,test,fold,buffer,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,folder,folder,new,dummy,folder,data,stream,integer,window1,source,window,all,sliding,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform1,one,input,transformation,tuple2,string,integer,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator1,non,keyed,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,time,windows,assert,assert,true,win,operator1,get,window,buffer,factory,instanceof,folding,window,buffer,factory,data,stream,integer,window2,source,window,all,tumbling,time,windows,of,time,of,1,time,unit,seconds,evictor,count,evictor,of,13,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform2,one,input,transformation,tuple2,string,integer,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator2,non,keyed,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,time,windows,assert,assert,true,win,operator2,get,window,buffer,factory,instanceof,list,window,buffer,factory
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testFoldBuffer() throws Exception;1456774151;These tests ensure that a Fold buffer is used if possible;@Test_	@SuppressWarnings("rawtypes")_	public void testFoldBuffer() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyFolder folder = new DummyFolder()___		DataStream<Integer> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator1 = (NonKeyedWindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getWindowBufferFactory() instanceof FoldingWindowBuffer.Factory)___		DataStream<Integer> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.evictor(CountEvictor.of(13))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof NonKeyedWindowOperator)__		NonKeyedWindowOperator winOperator2 = (NonKeyedWindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getWindowBufferFactory() instanceof ListWindowBuffer.Factory)__	};these,tests,ensure,that,a,fold,buffer,is,used,if,possible;test,suppress,warnings,rawtypes,public,void,test,fold,buffer,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,folder,folder,new,dummy,folder,data,stream,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform1,one,input,transformation,tuple2,string,integer,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator1,non,keyed,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,window,buffer,factory,instanceof,folding,window,buffer,factory,data,stream,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,evictor,count,evictor,of,13,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform2,one,input,transformation,tuple2,string,integer,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,non,keyed,window,operator,non,keyed,window,operator,win,operator2,non,keyed,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,window,buffer,factory,instanceof,list,window,buffer,factory
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testFoldBuffer() throws Exception;1459866414;These tests ensure that a Fold buffer is used if possible;@Test_	@SuppressWarnings("rawtypes")_	public void testFoldBuffer() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyFolder folder = new DummyFolder()___		DataStream<Integer> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof FoldingStateDescriptor)___		DataStream<Integer> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.evictor(CountEvictor.of(13))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,a,fold,buffer,is,used,if,possible;test,suppress,warnings,rawtypes,public,void,test,fold,buffer,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,folder,folder,new,dummy,folder,data,stream,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform1,one,input,transformation,tuple2,string,integer,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,folding,state,descriptor,data,stream,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,evictor,count,evictor,of,13,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform2,one,input,transformation,tuple2,string,integer,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testFoldBuffer() throws Exception;1459869538;These tests ensure that a Fold buffer is used if possible;@Test_	@SuppressWarnings("rawtypes")_	public void testFoldBuffer() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyFolder folder = new DummyFolder()___		DataStream<Integer> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof FoldingStateDescriptor)___		DataStream<Integer> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.evictor(CountEvictor.of(13))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,a,fold,buffer,is,used,if,possible;test,suppress,warnings,rawtypes,public,void,test,fold,buffer,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,folder,folder,new,dummy,folder,data,stream,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform1,one,input,transformation,tuple2,string,integer,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,folding,state,descriptor,data,stream,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,evictor,count,evictor,of,13,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform2,one,input,transformation,tuple2,string,integer,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testFoldBuffer() throws Exception;1467726666;These tests ensure that a Fold buffer is used if possible;@Test_	@SuppressWarnings("rawtypes")_	public void testFoldBuffer() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyFolder folder = new DummyFolder()___		DataStream<Integer> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof FoldingStateDescriptor)___		DataStream<Integer> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.evictor(CountEvictor.of(13))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,a,fold,buffer,is,used,if,possible;test,suppress,warnings,rawtypes,public,void,test,fold,buffer,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,folder,folder,new,dummy,folder,data,stream,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform1,one,input,transformation,tuple2,string,integer,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,folding,state,descriptor,data,stream,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,evictor,count,evictor,of,13,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform2,one,input,transformation,tuple2,string,integer,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testFoldBuffer() throws Exception;1472663071;These tests ensure that a Fold buffer is used if possible;@Test_	@SuppressWarnings("rawtypes")_	public void testFoldBuffer() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyFolder folder = new DummyFolder()___		DataStream<Integer> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof FoldingStateDescriptor)___		DataStream<Integer> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.evictor(CountEvictor.of(13))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,a,fold,buffer,is,used,if,possible;test,suppress,warnings,rawtypes,public,void,test,fold,buffer,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,folder,folder,new,dummy,folder,data,stream,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform1,one,input,transformation,tuple2,string,integer,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,folding,state,descriptor,data,stream,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,evictor,count,evictor,of,13,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform2,one,input,transformation,tuple2,string,integer,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
AllWindowTranslationTest -> @Test 	@SuppressWarnings("rawtypes") 	public void testFoldBuffer() throws Exception;1477293106;These tests ensure that a Fold buffer is used if possible;@Test_	@SuppressWarnings("rawtypes")_	public void testFoldBuffer() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))__		env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime)___		DummyFolder folder = new DummyFolder()___		DataStream<Integer> window1 = source_				.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)__		WindowOperator winOperator1 = (WindowOperator) operator1__		Assert.assertTrue(winOperator1.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator1.getWindowAssigner() instanceof SlidingEventTimeWindows)__		Assert.assertTrue(winOperator1.getStateDescriptor() instanceof FoldingStateDescriptor)___		DataStream<Integer> window2 = source_				.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))_				.evictor(CountEvictor.of(13))_				.fold(0, folder)___		OneInputTransformation<Tuple2<String, Integer>, Integer> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Integer>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Integer> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__		WindowOperator winOperator2 = (WindowOperator) operator2__		Assert.assertTrue(winOperator2.getTrigger() instanceof EventTimeTrigger)__		Assert.assertTrue(winOperator2.getWindowAssigner() instanceof TumblingEventTimeWindows)__		Assert.assertTrue(winOperator2.getStateDescriptor() instanceof ListStateDescriptor)__	};these,tests,ensure,that,a,fold,buffer,is,used,if,possible;test,suppress,warnings,rawtypes,public,void,test,fold,buffer,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,env,set,stream,time,characteristic,time,characteristic,ingestion,time,dummy,folder,folder,new,dummy,folder,data,stream,integer,window1,source,window,all,sliding,event,time,windows,of,time,of,1,time,unit,seconds,time,of,100,time,unit,milliseconds,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform1,one,input,transformation,tuple2,string,integer,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,window,operator,win,operator1,window,operator,operator1,assert,assert,true,win,operator1,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator1,get,window,assigner,instanceof,sliding,event,time,windows,assert,assert,true,win,operator1,get,state,descriptor,instanceof,folding,state,descriptor,data,stream,integer,window2,source,window,all,tumbling,event,time,windows,of,time,of,1,time,unit,seconds,evictor,count,evictor,of,13,fold,0,folder,one,input,transformation,tuple2,string,integer,integer,transform2,one,input,transformation,tuple2,string,integer,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator,window,operator,win,operator2,window,operator,operator2,assert,assert,true,win,operator2,get,trigger,instanceof,event,time,trigger,assert,assert,true,win,operator2,get,window,assigner,instanceof,tumbling,event,time,windows,assert,assert,true,win,operator2,get,state,descriptor,instanceof,list,state,descriptor
