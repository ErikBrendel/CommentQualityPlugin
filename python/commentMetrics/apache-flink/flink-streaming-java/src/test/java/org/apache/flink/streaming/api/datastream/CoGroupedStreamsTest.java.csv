commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() {     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     dataStream1 = env.fromElements("a1", "a2", "a3").     dataStream2 = env.fromElements("a1", "a2").     keySelector = element -> element.     tsAssigner = TumblingEventTimeWindows.of(Time.milliseconds(1L)).     coGroupFunction = (CoGroupFunction<String, String, String>) (first, second, out) -> out.collect(""). }
false;public;0;15;;@Test public void testDelegateToCoGrouped() {     Time lateness = Time.milliseconds(42L).     CoGroupedStreams.WithWindow<String, String, String, TimeWindow> withLateness = dataStream1.coGroup(dataStream2).where(keySelector).equalTo(keySelector).window(tsAssigner).allowedLateness(lateness).     withLateness.apply(coGroupFunction, BasicTypeInfo.STRING_TYPE_INFO).     Assert.assertEquals(lateness.toMilliseconds(), withLateness.getWindowedStream().getAllowedLateness()). }
false;public;0;13;;@Test public void testSetAllowedLateness() {     Time lateness = Time.milliseconds(42L).     CoGroupedStreams.WithWindow<String, String, String, TimeWindow> withLateness = dataStream1.coGroup(dataStream2).where(keySelector).equalTo(keySelector).window(tsAssigner).allowedLateness(lateness).     Assert.assertEquals(lateness.toMilliseconds(), withLateness.getAllowedLateness().toMilliseconds()). }
