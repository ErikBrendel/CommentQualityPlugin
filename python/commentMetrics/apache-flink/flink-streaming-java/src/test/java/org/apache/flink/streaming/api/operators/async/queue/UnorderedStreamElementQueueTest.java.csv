# id;timestamp;commentText;codeText;commentWords;codeWords
UnorderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1482206691;Tests that only elements before the oldest watermark are returned if they are completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)___		final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8, executor, operatorActions)___		StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))__		StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4, 4L))__		WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))__		StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5, 6L))__		StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6, 7L))___		List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1, record2, watermark1, record3,_			record4, watermark2, record5, record6)___		_		for (StreamElementQueueEntry<?> entry : entries) {_			queue.put(entry)__		}__		Assert.assertTrue(8 == queue.size())___		Future<AsyncResult> firstPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.poll()__			}_		}, executor)___		_		record3.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertFalse(firstPoll.isDone())___		record2.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record2, firstPoll.get())___		Future<AsyncResult> secondPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.poll()__			}_		}, executor)___		record6.collect(Collections.<Integer>emptyList())__		record4.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		_		Assert.assertFalse(secondPoll.isDone())___		record1.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record1, secondPoll.get())___		_		Assert.assertEquals(watermark1, queue.poll())___		_		Set<AsyncResult> expected = new HashSet<>(2)__		expected.add(record3)__		expected.add(record4)___		Set<AsyncResult> actual = new HashSet<>(2)___		actual.add(queue.poll())__		actual.add(queue.poll())___		Assert.assertEquals(expected, actual)___		Assert.assertEquals(watermark2, queue.poll())___		_		_		Assert.assertEquals(record6, queue.poll())___		_		Assert.assertTrue(1 == queue.size())___		Future<AsyncResult> thirdPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.poll()__			}_		}, executor)___		Thread.sleep(10L)___		Assert.assertFalse(thirdPoll.isDone())___		record5.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record5, thirdPoll.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,elements,before,the,oldest,watermark,are,returned,if,they,are,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,unordered,stream,element,queue,queue,new,unordered,stream,element,queue,8,executor,operator,actions,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,record3,new,stream,record,queue,entry,new,stream,record,3,3l,stream,record,queue,entry,integer,record4,new,stream,record,queue,entry,new,stream,record,4,4l,watermark,queue,entry,watermark2,new,watermark,queue,entry,new,watermark,5l,stream,record,queue,entry,integer,record5,new,stream,record,queue,entry,new,stream,record,5,6l,stream,record,queue,entry,integer,record6,new,stream,record,queue,entry,new,stream,record,6,7l,list,stream,element,queue,entry,entries,arrays,as,list,record1,record2,watermark1,record3,record4,watermark2,record5,record6,for,stream,element,queue,entry,entry,entries,queue,put,entry,assert,assert,true,8,queue,size,future,async,result,first,poll,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,poll,executor,record3,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,first,poll,is,done,record2,collect,collections,integer,empty,list,assert,assert,equals,record2,first,poll,get,future,async,result,second,poll,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,poll,executor,record6,collect,collections,integer,empty,list,record4,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,second,poll,is,done,record1,collect,collections,integer,empty,list,assert,assert,equals,record1,second,poll,get,assert,assert,equals,watermark1,queue,poll,set,async,result,expected,new,hash,set,2,expected,add,record3,expected,add,record4,set,async,result,actual,new,hash,set,2,actual,add,queue,poll,actual,add,queue,poll,assert,assert,equals,expected,actual,assert,assert,equals,watermark2,queue,poll,assert,assert,equals,record6,queue,poll,assert,assert,true,1,queue,size,future,async,result,third,poll,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,poll,executor,thread,sleep,10l,assert,assert,false,third,poll,is,done,record5,collect,collections,integer,empty,list,assert,assert,equals,record5,third,poll,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
UnorderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1495484544;Tests that only elements before the oldest watermark are returned if they are completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)___		final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8, executor, operatorActions)___		StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))__		StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4, 4L))__		WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))__		StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5, 6L))__		StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6, 7L))___		List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1, record2, watermark1, record3,_			record4, watermark2, record5, record6)___		_		for (StreamElementQueueEntry<?> entry : entries) {_			queue.put(entry)__		}__		Assert.assertTrue(8 == queue.size())___		Future<AsyncResult> firstPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.poll()__			}_		}, executor)___		_		record3.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertFalse(firstPoll.isDone())___		record2.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record2, firstPoll.get())___		Future<AsyncResult> secondPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.poll()__			}_		}, executor)___		record6.collect(Collections.<Integer>emptyList())__		record4.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		_		Assert.assertFalse(secondPoll.isDone())___		record1.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record1, secondPoll.get())___		_		Assert.assertEquals(watermark1, queue.poll())___		_		Set<AsyncResult> expected = new HashSet<>(2)__		expected.add(record3)__		expected.add(record4)___		Set<AsyncResult> actual = new HashSet<>(2)___		actual.add(queue.poll())__		actual.add(queue.poll())___		Assert.assertEquals(expected, actual)___		Assert.assertEquals(watermark2, queue.poll())___		_		_		Assert.assertEquals(record6, queue.poll())___		_		Assert.assertTrue(1 == queue.size())___		Future<AsyncResult> thirdPoll = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.poll()__			}_		}, executor)___		Thread.sleep(10L)___		Assert.assertFalse(thirdPoll.isDone())___		record5.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record5, thirdPoll.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,elements,before,the,oldest,watermark,are,returned,if,they,are,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,unordered,stream,element,queue,queue,new,unordered,stream,element,queue,8,executor,operator,actions,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,record3,new,stream,record,queue,entry,new,stream,record,3,3l,stream,record,queue,entry,integer,record4,new,stream,record,queue,entry,new,stream,record,4,4l,watermark,queue,entry,watermark2,new,watermark,queue,entry,new,watermark,5l,stream,record,queue,entry,integer,record5,new,stream,record,queue,entry,new,stream,record,5,6l,stream,record,queue,entry,integer,record6,new,stream,record,queue,entry,new,stream,record,6,7l,list,stream,element,queue,entry,entries,arrays,as,list,record1,record2,watermark1,record3,record4,watermark2,record5,record6,for,stream,element,queue,entry,entry,entries,queue,put,entry,assert,assert,true,8,queue,size,future,async,result,first,poll,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,poll,executor,record3,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,first,poll,is,done,record2,collect,collections,integer,empty,list,assert,assert,equals,record2,first,poll,get,future,async,result,second,poll,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,poll,executor,record6,collect,collections,integer,empty,list,record4,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,second,poll,is,done,record1,collect,collections,integer,empty,list,assert,assert,equals,record1,second,poll,get,assert,assert,equals,watermark1,queue,poll,set,async,result,expected,new,hash,set,2,expected,add,record3,expected,add,record4,set,async,result,actual,new,hash,set,2,actual,add,queue,poll,actual,add,queue,poll,assert,assert,equals,expected,actual,assert,assert,equals,watermark2,queue,poll,assert,assert,equals,record6,queue,poll,assert,assert,true,1,queue,size,future,async,result,third,poll,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,poll,executor,thread,sleep,10l,assert,assert,false,third,poll,is,done,record5,collect,collections,integer,empty,list,assert,assert,equals,record5,third,poll,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
UnorderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1501760738;Tests that only elements before the oldest watermark are returned if they are completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)___		final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8, executor, operatorActions)___		StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))__		StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4, 4L))__		WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))__		StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5, 6L))__		StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6, 7L))___		List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1, record2, watermark1, record3,_			record4, watermark2, record5, record6)___		_		for (StreamElementQueueEntry<?> entry : entries) {_			queue.put(entry)__		}__		Assert.assertTrue(8 == queue.size())___		CompletableFuture<AsyncResult> firstPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		_		record3.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertFalse(firstPoll.isDone())___		record2.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record2, firstPoll.get())___		CompletableFuture<AsyncResult> secondPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		record6.collect(Collections.<Integer>emptyList())__		record4.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		_		Assert.assertFalse(secondPoll.isDone())___		record1.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record1, secondPoll.get())___		_		Assert.assertEquals(watermark1, queue.poll())___		_		Set<AsyncResult> expected = new HashSet<>(2)__		expected.add(record3)__		expected.add(record4)___		Set<AsyncResult> actual = new HashSet<>(2)___		actual.add(queue.poll())__		actual.add(queue.poll())___		Assert.assertEquals(expected, actual)___		Assert.assertEquals(watermark2, queue.poll())___		_		_		Assert.assertEquals(record6, queue.poll())___		_		Assert.assertTrue(1 == queue.size())___		CompletableFuture<AsyncResult> thirdPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(thirdPoll.isDone())___		record5.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(record5, thirdPoll.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,elements,before,the,oldest,watermark,are,returned,if,they,are,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,unordered,stream,element,queue,queue,new,unordered,stream,element,queue,8,executor,operator,actions,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,record3,new,stream,record,queue,entry,new,stream,record,3,3l,stream,record,queue,entry,integer,record4,new,stream,record,queue,entry,new,stream,record,4,4l,watermark,queue,entry,watermark2,new,watermark,queue,entry,new,watermark,5l,stream,record,queue,entry,integer,record5,new,stream,record,queue,entry,new,stream,record,5,6l,stream,record,queue,entry,integer,record6,new,stream,record,queue,entry,new,stream,record,6,7l,list,stream,element,queue,entry,entries,arrays,as,list,record1,record2,watermark1,record3,record4,watermark2,record5,record6,for,stream,element,queue,entry,entry,entries,queue,put,entry,assert,assert,true,8,queue,size,completable,future,async,result,first,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,record3,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,first,poll,is,done,record2,collect,collections,integer,empty,list,assert,assert,equals,record2,first,poll,get,completable,future,async,result,second,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,record6,collect,collections,integer,empty,list,record4,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,second,poll,is,done,record1,collect,collections,integer,empty,list,assert,assert,equals,record1,second,poll,get,assert,assert,equals,watermark1,queue,poll,set,async,result,expected,new,hash,set,2,expected,add,record3,expected,add,record4,set,async,result,actual,new,hash,set,2,actual,add,queue,poll,actual,add,queue,poll,assert,assert,equals,expected,actual,assert,assert,equals,watermark2,queue,poll,assert,assert,equals,record6,queue,poll,assert,assert,true,1,queue,size,completable,future,async,result,third,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,thread,sleep,10l,assert,assert,false,third,poll,is,done,record5,collect,collections,integer,empty,list,assert,assert,equals,record5,third,poll,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
UnorderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1503407113;Tests that only elements before the oldest watermark are returned if they are completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)___		final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8, executor, operatorActions)___		StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))__		StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4, 4L))__		WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))__		StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5, 6L))__		StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6, 7L))___		List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1, record2, watermark1, record3,_			record4, watermark2, record5, record6)___		_		for (StreamElementQueueEntry<?> entry : entries) {_			queue.put(entry)__		}__		Assert.assertTrue(8 == queue.size())___		CompletableFuture<AsyncResult> firstPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		_		record3.complete(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertFalse(firstPoll.isDone())___		record2.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(record2, firstPoll.get())___		CompletableFuture<AsyncResult> secondPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		record6.complete(Collections.<Integer>emptyList())__		record4.complete(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		_		Assert.assertFalse(secondPoll.isDone())___		record1.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(record1, secondPoll.get())___		_		Assert.assertEquals(watermark1, queue.poll())___		_		Set<AsyncResult> expected = new HashSet<>(2)__		expected.add(record3)__		expected.add(record4)___		Set<AsyncResult> actual = new HashSet<>(2)___		actual.add(queue.poll())__		actual.add(queue.poll())___		Assert.assertEquals(expected, actual)___		Assert.assertEquals(watermark2, queue.poll())___		_		_		Assert.assertEquals(record6, queue.poll())___		_		Assert.assertTrue(1 == queue.size())___		CompletableFuture<AsyncResult> thirdPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(thirdPoll.isDone())___		record5.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(record5, thirdPoll.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,elements,before,the,oldest,watermark,are,returned,if,they,are,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,unordered,stream,element,queue,queue,new,unordered,stream,element,queue,8,executor,operator,actions,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,record3,new,stream,record,queue,entry,new,stream,record,3,3l,stream,record,queue,entry,integer,record4,new,stream,record,queue,entry,new,stream,record,4,4l,watermark,queue,entry,watermark2,new,watermark,queue,entry,new,watermark,5l,stream,record,queue,entry,integer,record5,new,stream,record,queue,entry,new,stream,record,5,6l,stream,record,queue,entry,integer,record6,new,stream,record,queue,entry,new,stream,record,6,7l,list,stream,element,queue,entry,entries,arrays,as,list,record1,record2,watermark1,record3,record4,watermark2,record5,record6,for,stream,element,queue,entry,entry,entries,queue,put,entry,assert,assert,true,8,queue,size,completable,future,async,result,first,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,record3,complete,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,first,poll,is,done,record2,complete,collections,integer,empty,list,assert,assert,equals,record2,first,poll,get,completable,future,async,result,second,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,record6,complete,collections,integer,empty,list,record4,complete,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,second,poll,is,done,record1,complete,collections,integer,empty,list,assert,assert,equals,record1,second,poll,get,assert,assert,equals,watermark1,queue,poll,set,async,result,expected,new,hash,set,2,expected,add,record3,expected,add,record4,set,async,result,actual,new,hash,set,2,actual,add,queue,poll,actual,add,queue,poll,assert,assert,equals,expected,actual,assert,assert,equals,watermark2,queue,poll,assert,assert,equals,record6,queue,poll,assert,assert,true,1,queue,size,completable,future,async,result,third,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,thread,sleep,10l,assert,assert,false,third,poll,is,done,record5,complete,collections,integer,empty,list,assert,assert,equals,record5,third,poll,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
UnorderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1506417942;Tests that only elements before the oldest watermark are returned if they are completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)___		final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8, executor, operatorActions)___		StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))__		StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4, 4L))__		WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))__		StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5, 6L))__		StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6, 7L))___		List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1, record2, watermark1, record3,_			record4, watermark2, record5, record6)___		_		for (StreamElementQueueEntry<?> entry : entries) {_			queue.put(entry)__		}__		Assert.assertTrue(8 == queue.size())___		CompletableFuture<AsyncResult> firstPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new CompletionException(e)__				}_			},_			executor)___		_		record3.complete(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertFalse(firstPoll.isDone())___		record2.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(record2, firstPoll.get())___		CompletableFuture<AsyncResult> secondPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new CompletionException(e)__				}_			},_			executor)___		record6.complete(Collections.<Integer>emptyList())__		record4.complete(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		_		Assert.assertFalse(secondPoll.isDone())___		record1.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(record1, secondPoll.get())___		_		Assert.assertEquals(watermark1, queue.poll())___		_		Set<AsyncResult> expected = new HashSet<>(2)__		expected.add(record3)__		expected.add(record4)___		Set<AsyncResult> actual = new HashSet<>(2)___		actual.add(queue.poll())__		actual.add(queue.poll())___		Assert.assertEquals(expected, actual)___		Assert.assertEquals(watermark2, queue.poll())___		_		_		Assert.assertEquals(record6, queue.poll())___		_		Assert.assertTrue(1 == queue.size())___		CompletableFuture<AsyncResult> thirdPoll = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new CompletionException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(thirdPoll.isDone())___		record5.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(record5, thirdPoll.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,elements,before,the,oldest,watermark,are,returned,if,they,are,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,unordered,stream,element,queue,queue,new,unordered,stream,element,queue,8,executor,operator,actions,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,record3,new,stream,record,queue,entry,new,stream,record,3,3l,stream,record,queue,entry,integer,record4,new,stream,record,queue,entry,new,stream,record,4,4l,watermark,queue,entry,watermark2,new,watermark,queue,entry,new,watermark,5l,stream,record,queue,entry,integer,record5,new,stream,record,queue,entry,new,stream,record,5,6l,stream,record,queue,entry,integer,record6,new,stream,record,queue,entry,new,stream,record,6,7l,list,stream,element,queue,entry,entries,arrays,as,list,record1,record2,watermark1,record3,record4,watermark2,record5,record6,for,stream,element,queue,entry,entry,entries,queue,put,entry,assert,assert,true,8,queue,size,completable,future,async,result,first,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,completion,exception,e,executor,record3,complete,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,first,poll,is,done,record2,complete,collections,integer,empty,list,assert,assert,equals,record2,first,poll,get,completable,future,async,result,second,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,completion,exception,e,executor,record6,complete,collections,integer,empty,list,record4,complete,collections,integer,empty,list,thread,sleep,10l,assert,assert,false,second,poll,is,done,record1,complete,collections,integer,empty,list,assert,assert,equals,record1,second,poll,get,assert,assert,equals,watermark1,queue,poll,set,async,result,expected,new,hash,set,2,expected,add,record3,expected,add,record4,set,async,result,actual,new,hash,set,2,actual,add,queue,poll,actual,add,queue,poll,assert,assert,equals,expected,actual,assert,assert,equals,watermark2,queue,poll,assert,assert,equals,record6,queue,poll,assert,assert,true,1,queue,size,completable,future,async,result,third,poll,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,completion,exception,e,executor,thread,sleep,10l,assert,assert,false,third,poll,is,done,record5,complete,collections,integer,empty,list,assert,assert,equals,record5,third,poll,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
