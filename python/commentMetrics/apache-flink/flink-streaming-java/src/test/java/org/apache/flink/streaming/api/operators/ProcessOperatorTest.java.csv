commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testTimestampAndWatermarkQuerying() throws Exception {     ProcessOperator<Integer, String> operator = new ProcessOperator<>(new QueryingProcessFunction(TimeDomain.EVENT_TIME)).     OneInputStreamOperatorTestHarness<Integer, String> testHarness = new OneInputStreamOperatorTestHarness<>(operator).     testHarness.setup().     testHarness.open().     testHarness.processWatermark(new Watermark(17)).     testHarness.processElement(new StreamRecord<>(5, 12L)).     testHarness.processWatermark(new Watermark(42)).     testHarness.processElement(new StreamRecord<>(6, 13L)).     ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>().     expectedOutput.add(new Watermark(17L)).     expectedOutput.add(new StreamRecord<>("5TIME:17 TS:12", 12L)).     expectedOutput.add(new Watermark(42L)).     expectedOutput.add(new StreamRecord<>("6TIME:42 TS:13", 13L)).     TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput()).     testHarness.close(). }
false;public;0;27;;@Test public void testTimestampAndProcessingTimeQuerying() throws Exception {     ProcessOperator<Integer, String> operator = new ProcessOperator<>(new QueryingProcessFunction(TimeDomain.PROCESSING_TIME)).     OneInputStreamOperatorTestHarness<Integer, String> testHarness = new OneInputStreamOperatorTestHarness<>(operator).     testHarness.setup().     testHarness.open().     testHarness.setProcessingTime(17).     testHarness.processElement(new StreamRecord<>(5)).     testHarness.setProcessingTime(42).     testHarness.processElement(new StreamRecord<>(6)).     ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>().     expectedOutput.add(new StreamRecord<>("5TIME:17 TS:null")).     expectedOutput.add(new StreamRecord<>("6TIME:42 TS:null")).     TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput()).     testHarness.close(). }
false;public;0;17;;@Test public void testNullOutputTagRefusal() throws Exception {     ProcessOperator<Integer, String> operator = new ProcessOperator<>(new NullOutputTagEmittingProcessFunction()).     OneInputStreamOperatorTestHarness<Integer, String> testHarness = new OneInputStreamOperatorTestHarness<>(operator).     testHarness.setup().     testHarness.open().     testHarness.setProcessingTime(17).     try {         expectedException.expect(IllegalArgumentException.class).         testHarness.processElement(new StreamRecord<>(5)).     } finally {         testHarness.close().     } }
true;public;0;39;/**  * This also verifies that the timestamps ouf side-emitted records is correct.  */ ;/**  * This also verifies that the timestamps ouf side-emitted records is correct.  */ @Test public void testSideOutput() throws Exception {     ProcessOperator<Integer, String> operator = new ProcessOperator<>(new SideOutputProcessFunction()).     OneInputStreamOperatorTestHarness<Integer, String> testHarness = new OneInputStreamOperatorTestHarness<>(operator).     testHarness.setup().     testHarness.open().     testHarness.processElement(new StreamRecord<>(42, 17L)).     ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>().     expectedOutput.add(new StreamRecord<>("IN:42", 17L)).     TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput()).     ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput = new ConcurrentLinkedQueue<>().     expectedIntSideOutput.add(new StreamRecord<>(42, 17L)).     ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput = testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG).     TestHarnessUtil.assertOutputEquals("Side output was not correct.", expectedIntSideOutput, intSideOutput).     ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput = new ConcurrentLinkedQueue<>().     expectedLongSideOutput.add(new StreamRecord<>(42L, 17L)).     ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput = testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG).     TestHarnessUtil.assertOutputEquals("Side output was not correct.", expectedLongSideOutput, longSideOutput).     testHarness.close(). }
false;public;3;4;;@Override public void processElement(Integer value, Context ctx, Collector<String> out) throws Exception {     ctx.output(null, value). }
false;public;3;7;;@Override public void processElement(Integer value, Context ctx, Collector<String> out) throws Exception {     out.collect("IN:" + value).     ctx.output(INTEGER_OUTPUT_TAG, value).     ctx.output(LONG_OUTPUT_TAG, value.longValue()). }
false;public;3;8;;@Override public void processElement(Integer value, Context ctx, Collector<String> out) throws Exception {     if (timeDomain.equals(TimeDomain.EVENT_TIME)) {         out.collect(value + "TIME:" + ctx.timerService().currentWatermark() + " TS:" + ctx.timestamp()).     } else {         out.collect(value + "TIME:" + ctx.timerService().currentProcessingTime() + " TS:" + ctx.timestamp()).     } }
false;public;3;6;;@Override public void onTimer(long timestamp, OnTimerContext ctx, Collector<String> out) throws Exception { }
