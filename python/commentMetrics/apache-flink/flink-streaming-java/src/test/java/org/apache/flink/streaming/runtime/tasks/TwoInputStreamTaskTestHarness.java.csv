commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;60;;@Override protected void initializeInputs() throws IOException, InterruptedException {     inputGates = new StreamTestSingleInputGate[numInputGates].     List<StreamEdge> inPhysicalEdges = new LinkedList<StreamEdge>().     StreamOperator<IN1> dummyOperator = new AbstractStreamOperator<IN1>() {          private static final long serialVersionUID = 1L.     }.     StreamNode sourceVertexDummy = new StreamNode(null, 0, "default group", null, dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class).     StreamNode targetVertexDummy = new StreamNode(null, 1, "default group", null, dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class).     for (int i = 0. i < numInputGates. i++) {         switch(inputGateAssignment[i]) {             case 1:                 {                     inputGates[i] = new StreamTestSingleInputGate<IN1>(numInputChannelsPerGate, bufferSize, inputSerializer1).                     StreamEdge streamEdge = new StreamEdge(sourceVertexDummy, targetVertexDummy, 1, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null).                     inPhysicalEdges.add(streamEdge).                     break.                 }             case 2:                 {                     inputGates[i] = new StreamTestSingleInputGate<IN2>(numInputChannelsPerGate, bufferSize, inputSerializer2).                     StreamEdge streamEdge = new StreamEdge(sourceVertexDummy, targetVertexDummy, 2, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null).                     inPhysicalEdges.add(streamEdge).                     break.                 }             default:                 throw new IllegalStateException("Wrong input gate assignment.").         }         this.mockEnv.addInputGate(inputGates[i].getInputGate()).     }     streamConfig.setInPhysicalEdges(inPhysicalEdges).     streamConfig.setNumberOfInputs(numInputGates).     streamConfig.setTypeSerializerIn1(inputSerializer1).     streamConfig.setTypeSerializerIn2(inputSerializer2). }
false;public;0;5;;@Override @SuppressWarnings("unchecked") public TwoInputStreamTask<IN1, IN2, OUT> getTask() {     return (TwoInputStreamTask<IN1, IN2, OUT>) super.getTask(). }
