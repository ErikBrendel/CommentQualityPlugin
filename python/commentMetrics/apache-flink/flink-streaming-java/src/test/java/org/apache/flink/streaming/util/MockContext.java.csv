commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<OUT> getOutputs() {     return outputs. }
false;public;0;3;;public Output<StreamRecord<OUT>> getOutput() {     return output. }
false;public,static;2;3;;public static <IN, OUT> List<OUT> createAndExecute(OneInputStreamOperator<IN, OUT> operator, List<IN> inputs) throws Exception {     return createAndExecuteForKeyedStream(operator, inputs, null, null). }
false;public,static;4;30;;public static <IN, OUT, KEY> List<OUT> createAndExecuteForKeyedStream(OneInputStreamOperator<IN, OUT> operator, List<IN> inputs, KeySelector<IN, KEY> keySelector, TypeInformation<KEY> keyType) throws Exception {     OneInputStreamOperatorTestHarness<IN, OUT> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator, keySelector, keyType).     testHarness.setup().     testHarness.open().     operator.open().     for (IN in : inputs) {         testHarness.processElement(new StreamRecord<>(in)).     }     testHarness.close().     ConcurrentLinkedQueue<Object> output = testHarness.getOutput().     List<OUT> result = new ArrayList<>().     for (Object o : output) {         if (o instanceof StreamRecord) {             result.add((OUT) ((StreamRecord) o).getValue()).         }     }     return result. }
