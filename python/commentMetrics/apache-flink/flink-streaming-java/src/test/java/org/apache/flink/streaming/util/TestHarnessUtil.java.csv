commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;10;/**  * Extracts the raw elements from the given output list.  */ ;/**  * Extracts the raw elements from the given output list.  */ @SuppressWarnings("unchecked") public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {     List<OUT> resultElements = new LinkedList<>().     for (Object e : output) {         if (e instanceof StreamRecord) {             resultElements.add(((StreamRecord<OUT>) e).getValue()).         }     }     return resultElements. }
true;public,static;3;6;/**  * Compare the two queues containing operator/task output by converting them to an array first.  */ ;/**  * Compare the two queues containing operator/task output by converting them to an array first.  */ public static <T> void assertOutputEquals(String message, Queue<T> expected, Queue<T> actual) {     Assert.assertArrayEquals(message, expected.toArray(), actual.toArray()). }
true;public,static;4;38;/**  * Compare the two queues containing operator/task output by converting them to an array first.  */ ;/**  * Compare the two queues containing operator/task output by converting them to an array first.  */ public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator) {     assertEquals(Iterables.size(expected), Iterables.size(actual)).     // first, compare only watermarks, their position should be deterministic     Iterator<Object> exIt = expected.iterator().     Iterator<Object> actIt = actual.iterator().     while (exIt.hasNext()) {         Object nextEx = exIt.next().         Object nextAct = actIt.next().         if (nextEx instanceof Watermark) {             assertEquals(nextEx, nextAct).         }     }     List<Object> expectedRecords = new ArrayList<>().     List<Object> actualRecords = new ArrayList<>().     for (Object ex : expected) {         if (ex instanceof StreamRecord) {             expectedRecords.add(ex).         }     }     for (Object act : actual) {         if (act instanceof StreamRecord) {             actualRecords.add(act).         }     }     Object[] sortedExpected = expectedRecords.toArray().     Object[] sortedActual = actualRecords.toArray().     Arrays.sort(sortedExpected, comparator).     Arrays.sort(sortedActual, comparator).     Assert.assertArrayEquals(message, sortedExpected, sortedActual). }
true;public,static;1;13;/**  * Verify no StreamRecord is equal to or later than any watermarks. This is checked over the  * order of the elements  *  * @param elements An iterable containing StreamRecords and watermarks  */ ;/**  * Verify no StreamRecord is equal to or later than any watermarks. This is checked over the  * order of the elements  *  * @param elements An iterable containing StreamRecords and watermarks  */ public static void assertNoLateRecords(Iterable<Object> elements) {     // check that no watermark is violated     long highestWatermark = Long.MIN_VALUE.     for (Object elem : elements) {         if (elem instanceof Watermark) {             highestWatermark = ((Watermark) elem).asWatermark().getTimestamp().         } else if (elem instanceof StreamRecord) {             boolean dataIsOnTime = highestWatermark < ((StreamRecord) elem).getTimestamp().             Assert.assertTrue("Late data was emitted after join", dataIsOnTime).         }     } }
