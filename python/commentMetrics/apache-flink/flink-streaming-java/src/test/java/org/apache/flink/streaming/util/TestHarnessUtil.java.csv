# id;timestamp;commentText;codeText;commentWords;codeWords
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1445418103;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1445608082;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1445608190;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1459869538;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1472663401;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1485250954;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1493195810;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1495484544;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual);1502726910;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEquals(String message, Queue<Object> expected, Queue<Object> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,string,message,queue,object,expected,queue,object,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static <T> void assertOutputEquals(String message, Queue<T> expected, Queue<T> actual);1506259751;Compare the two queues containing operator/task output by converting them to an array first.;public static <T> void assertOutputEquals(String message, Queue<T> expected, Queue<T> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,t,void,assert,output,equals,string,message,queue,t,expected,queue,t,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static <T> void assertOutputEquals(String message, Queue<T> expected, Queue<T> actual);1530798703;Compare the two queues containing operator/task output by converting them to an array first.;public static <T> void assertOutputEquals(String message, Queue<T> expected, Queue<T> actual) {_		Assert.assertArrayEquals(message,_				expected.toArray(),_				actual.toArray())___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,t,void,assert,output,equals,string,message,queue,t,expected,queue,t,actual,assert,assert,array,equals,message,expected,to,array,actual,to,array
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Queue<Object> expected, Queue<Object> actual, Comparator<Object> comparator);1445418103;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Queue<Object> expected, Queue<Object> actual, Comparator<Object> comparator) {_		Object[] sortedExpected = expected.toArray()__		Object[] sortedActual = actual.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,queue,object,expected,queue,object,actual,comparator,object,comparator,object,sorted,expected,expected,to,array,object,sorted,actual,actual,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Queue<Object> expected, Queue<Object> actual, Comparator<Object> comparator);1445608082;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Queue<Object> expected, Queue<Object> actual, Comparator<Object> comparator) {_		Object[] sortedExpected = expected.toArray()__		Object[] sortedActual = actual.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,queue,object,expected,queue,object,actual,comparator,object,comparator,object,sorted,expected,expected,to,array,object,sorted,actual,actual,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Queue<Object> expected, Queue<Object> actual, Comparator<Object> comparator);1445608190;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Queue<Object> expected, Queue<Object> actual, Comparator<Object> comparator) {_		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				Assert.assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,queue,object,expected,queue,object,actual,comparator,object,comparator,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Queue<Object> expected, Queue<Object> actual, Comparator<Object> comparator);1459869538;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Queue<Object> expected, Queue<Object> actual, Comparator<Object> comparator) {_		assertEquals(expected.size(), actual.size())___		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,queue,object,expected,queue,object,actual,comparator,object,comparator,assert,equals,expected,size,actual,size,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator);1472663401;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator) {_		assertEquals(Iterables.size(expected), Iterables.size(actual))___		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,iterable,object,expected,iterable,object,actual,comparator,object,comparator,assert,equals,iterables,size,expected,iterables,size,actual,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator);1485250954;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator) {_		assertEquals(Iterables.size(expected), Iterables.size(actual))___		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,iterable,object,expected,iterable,object,actual,comparator,object,comparator,assert,equals,iterables,size,expected,iterables,size,actual,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator);1493195810;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator) {_		assertEquals(Iterables.size(expected), Iterables.size(actual))___		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,iterable,object,expected,iterable,object,actual,comparator,object,comparator,assert,equals,iterables,size,expected,iterables,size,actual,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator);1495484544;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator) {_		assertEquals(Iterables.size(expected), Iterables.size(actual))___		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,iterable,object,expected,iterable,object,actual,comparator,object,comparator,assert,equals,iterables,size,expected,iterables,size,actual,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator);1502726910;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator) {_		assertEquals(Iterables.size(expected), Iterables.size(actual))___		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,iterable,object,expected,iterable,object,actual,comparator,object,comparator,assert,equals,iterables,size,expected,iterables,size,actual,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator);1506259751;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator) {_		assertEquals(Iterables.size(expected), Iterables.size(actual))___		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,iterable,object,expected,iterable,object,actual,comparator,object,comparator,assert,equals,iterables,size,expected,iterables,size,actual,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator);1530798703;Compare the two queues containing operator/task output by converting them to an array first.;public static void assertOutputEqualsSorted(String message, Iterable<Object> expected, Iterable<Object> actual, Comparator<Object> comparator) {_		assertEquals(Iterables.size(expected), Iterables.size(actual))___		_		Iterator<Object> exIt = expected.iterator()__		Iterator<Object> actIt = actual.iterator()__		while (exIt.hasNext()) {_			Object nextEx = exIt.next()__			Object nextAct = actIt.next()__			if (nextEx instanceof Watermark) {_				assertEquals(nextEx, nextAct)__			}_		}__		List<Object> expectedRecords = new ArrayList<>()__		List<Object> actualRecords = new ArrayList<>()___		for (Object ex: expected) {_			if (ex instanceof StreamRecord) {_				expectedRecords.add(ex)__			}_		}__		for (Object act: actual) {_			if (act instanceof StreamRecord) {_				actualRecords.add(act)__			}_		}__		Object[] sortedExpected = expectedRecords.toArray()__		Object[] sortedActual = actualRecords.toArray()___		Arrays.sort(sortedExpected, comparator)__		Arrays.sort(sortedActual, comparator)___		Assert.assertArrayEquals(message, sortedExpected, sortedActual)___	};compare,the,two,queues,containing,operator,task,output,by,converting,them,to,an,array,first;public,static,void,assert,output,equals,sorted,string,message,iterable,object,expected,iterable,object,actual,comparator,object,comparator,assert,equals,iterables,size,expected,iterables,size,actual,iterator,object,ex,it,expected,iterator,iterator,object,act,it,actual,iterator,while,ex,it,has,next,object,next,ex,ex,it,next,object,next,act,act,it,next,if,next,ex,instanceof,watermark,assert,equals,next,ex,next,act,list,object,expected,records,new,array,list,list,object,actual,records,new,array,list,for,object,ex,expected,if,ex,instanceof,stream,record,expected,records,add,ex,for,object,act,actual,if,act,instanceof,stream,record,actual,records,add,act,object,sorted,expected,expected,records,to,array,object,sorted,actual,actual,records,to,array,arrays,sort,sorted,expected,comparator,arrays,sort,sorted,actual,comparator,assert,assert,array,equals,message,sorted,expected,sorted,actual
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1445418103;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<OUT>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1445608082;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<OUT>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1445608190;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<OUT>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1459869538;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<OUT>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1472663401;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<OUT>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1485250954;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1493195810;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1495484544;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1502726910;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1506259751;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output);1530798703;Extracts the raw elements from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<OUT> getRawElementsFromOutput(Queue<Object> output) {_		List<OUT> resultElements = new LinkedList<>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add(((StreamRecord<OUT>) e).getValue())__			}_		}_		return resultElements__	};extracts,the,raw,elements,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,out,get,raw,elements,from,output,queue,object,output,list,out,result,elements,new,linked,list,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,get,value,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output);1445418103;Extracts the StreamRecords from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output) {_		List<StreamRecord<OUT>> resultElements = new LinkedList<StreamRecord<OUT>>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};extracts,the,stream,records,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,stream,record,out,get,stream,records,from,output,list,object,output,list,stream,record,out,result,elements,new,linked,list,stream,record,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output);1445608082;Extracts the StreamRecords from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output) {_		List<StreamRecord<OUT>> resultElements = new LinkedList<StreamRecord<OUT>>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};extracts,the,stream,records,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,stream,record,out,get,stream,records,from,output,list,object,output,list,stream,record,out,result,elements,new,linked,list,stream,record,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output);1445608190;Extracts the StreamRecords from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output) {_		List<StreamRecord<OUT>> resultElements = new LinkedList<StreamRecord<OUT>>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};extracts,the,stream,records,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,stream,record,out,get,stream,records,from,output,list,object,output,list,stream,record,out,result,elements,new,linked,list,stream,record,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output);1459869538;Extracts the StreamRecords from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output) {_		List<StreamRecord<OUT>> resultElements = new LinkedList<StreamRecord<OUT>>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};extracts,the,stream,records,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,stream,record,out,get,stream,records,from,output,list,object,output,list,stream,record,out,result,elements,new,linked,list,stream,record,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
TestHarnessUtil -> @SuppressWarnings("unchecked") 	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output);1472663401;Extracts the StreamRecords from the given output list.;@SuppressWarnings("unchecked")_	public static <OUT> List<StreamRecord<OUT>> getStreamRecordsFromOutput(List<Object> output) {_		List<StreamRecord<OUT>> resultElements = new LinkedList<StreamRecord<OUT>>()__		for (Object e: output) {_			if (e instanceof StreamRecord) {_				resultElements.add((StreamRecord<OUT>) e)__			}_		}_		return resultElements__	};extracts,the,stream,records,from,the,given,output,list;suppress,warnings,unchecked,public,static,out,list,stream,record,out,get,stream,records,from,output,list,object,output,list,stream,record,out,result,elements,new,linked,list,stream,record,out,for,object,e,output,if,e,instanceof,stream,record,result,elements,add,stream,record,out,e,return,result,elements
