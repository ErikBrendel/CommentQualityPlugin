# id;timestamp;commentText;codeText;commentWords;codeWords
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1472663071;Tests that the max parallelism and the key group partitioner is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			 new KeySelector<Integer, Integer>() {_				 private static final long serialVersionUID = -6908614081449363419L___				 @Override_				 public Integer getKey(Integer value) throws Exception {_					 return value__				 }_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()___		HashKeyGroupAssigner<?> hashKeyGroupAssigner1 = extractHashKeyGroupAssigner(streamPartitioner1)__		assertEquals(maxParallelism, hashKeyGroupAssigner1.getNumberKeyGroups())___		HashKeyGroupAssigner<?> hashKeyGroupAssigner2 = extractHashKeyGroupAssigner(streamPartitioner2)__		assertEquals(maxParallelism, hashKeyGroupAssigner2.getNumberKeyGroups())__	};tests,that,the,max,parallelism,and,the,key,group,partitioner,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner,hash,key,group,assigner,hash,key,group,assigner1,extract,hash,key,group,assigner,stream,partitioner1,assert,equals,max,parallelism,hash,key,group,assigner1,get,number,key,groups,hash,key,group,assigner,hash,key,group,assigner2,extract,hash,key,group,assigner,stream,partitioner2,assert,equals,max,parallelism,hash,key,group,assigner2,get,number,key,groups
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1472663401;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			 new KeySelector<Integer, Integer>() {_				 private static final long serialVersionUID = -6908614081449363419L___				 @Override_				 public Integer getKey(Integer value) throws Exception {_					 return value__				 }_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1472663402;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			 new KeySelector<Integer, Integer>() {_				 private static final long serialVersionUID = -6908614081449363419L___				 @Override_				 public Integer getKey(Integer value) throws Exception {_					 return value__				 }_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1476448412;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			 new KeySelector<Integer, Integer>() {_				 private static final long serialVersionUID = -6908614081449363419L___				 @Override_				 public Integer getKey(Integer value) throws Exception {_					 return value__				 }_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1485269495;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			 new KeySelector<Integer, Integer>() {_				 private static final long serialVersionUID = -6908614081449363419L___				 @Override_				 public Integer getKey(Integer value) throws Exception {_					 return value__				 }_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1489782894;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.setParallelism(12)__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			 new KeySelector<Integer, Integer>() {_				 private static final long serialVersionUID = -6908614081449363419L___				 @Override_				 public Integer getKey(Integer value) throws Exception {_					 return value__				 }_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,set,parallelism,12,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1492530130;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			 new KeySelector<Integer, Integer>() {_				 private static final long serialVersionUID = -6908614081449363419L___				 @Override_				 public Integer getKey(Integer value) throws Exception {_					 return value__				 }_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1495484544;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = -6908614081449363419L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1525267086;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1.connect(input2).keyBy(_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = -6908614081449363419L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			},_			new KeySelector<Integer, Integer>() {_				private static final long serialVersionUID = 3195683453223164931L___				@Override_				public Integer getKey(Integer value) throws Exception {_					return value__				}_			}).map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,6908614081449363419l,override,public,integer,get,key,integer,value,throws,exception,return,value,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,3195683453223164931l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1526630738;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1_				.connect(input2)_				.keyBy(value -> value, value -> value)_				.map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,value,value,value,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1526630738;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1_				.connect(input2)_				.keyBy(value -> value, value -> value)_				.map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,value,value,value,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismWithConnectedKeyedStream();1547905886;Tests that the max parallelism is properly set for connected_streams.;@Test_	public void testMaxParallelismWithConnectedKeyedStream() {_		int maxParallelism = 42___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> input1 = env.fromElements(1, 2, 3, 4).setMaxParallelism(128)__		DataStream<Integer> input2 = env.fromElements(1, 2, 3, 4).setMaxParallelism(129)___		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult = input1_				.connect(input2)_				.keyBy(value -> value, value -> value)_				.map(new NoOpIntCoMap())___		keyedResult.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner1 = keyedResultNode.getInEdges().get(0).getPartitioner()__		StreamPartitioner<?> streamPartitioner2 = keyedResultNode.getInEdges().get(1).getPartitioner()__	};tests,that,the,max,parallelism,is,properly,set,for,connected,streams;test,public,void,test,max,parallelism,with,connected,keyed,stream,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,input1,env,from,elements,1,2,3,4,set,max,parallelism,128,data,stream,integer,input2,env,from,elements,1,2,3,4,set,max,parallelism,129,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result,input1,connect,input2,key,by,value,value,value,value,map,new,no,op,int,co,map,keyed,result,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner1,keyed,result,node,get,in,edges,get,0,get,partitioner,stream,partitioner,stream,partitioner2,keyed,result,node,get,in,edges,get,1,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1445418103;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1452526242;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1453730836;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1456508941;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1456778239;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1467726666;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1472663071;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1472663401;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1472663402;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1476448412;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1485269495;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1489782894;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1492530130;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1495484544;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1525267086;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.__@throws Exception;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<Integer>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info,throws,exception;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,integer,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1526630738;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1526630738;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception;1547905886;Test whether an {@link OutputTypeConfigurable} implementation gets called with the correct_output type. In this test case the output type must be BasicTypeInfo.INT_TYPE_INFO.;@Test_	public void testOutputTypeConfigurationWithOneInputTransformation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		OutputTypeConfigurableOperationWithOneInput outputTypeConfigurableOperation = new OutputTypeConfigurableOperationWithOneInput()___		DataStream<Integer> result = source.transform(_			"Single input and output type configurable operation",_			BasicTypeInfo.INT_TYPE_INFO,_			outputTypeConfigurableOperation)___		result.addSink(new DiscardingSink<>())___		env.getStreamGraph()___		assertEquals(BasicTypeInfo.INT_TYPE_INFO, outputTypeConfigurableOperation.getTypeInformation())__	};test,whether,an,link,output,type,configurable,implementation,gets,called,with,the,correct,output,type,in,this,test,case,the,output,type,must,be,basic,type,info;test,public,void,test,output,type,configuration,with,one,input,transformation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,output,type,configurable,operation,with,one,input,output,type,configurable,operation,new,output,type,configurable,operation,with,one,input,data,stream,integer,result,source,transform,single,input,and,output,type,configurable,operation,basic,type,info,output,type,configurable,operation,result,add,sink,new,discarding,sink,env,get,stream,graph,assert,equals,basic,type,info,output,type,configurable,operation,get,type,information
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1472663071;Tests that the global and operator-wide max parallelism setting is respected;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1472663401;Tests that the global and operator-wide max parallelism setting is respected;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1472663402;Tests that the global and operator-wide max parallelism setting is respected;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1476448412;Tests that the global and operator-wide max parallelism setting is respected;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1485269495;Tests that the global and operator-wide max parallelism setting is respected;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1489782894;Tests that the global and operator-wide max parallelism setting is respected;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setParallelism(12)__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,parallelism,12,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1492530130;Tests that the global and operator-wide max parallelism setting is respected;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1495484544;Tests that the global and operator-wide max parallelism setting is respected.;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1525267086;Tests that the global and operator-wide max parallelism setting is respected.;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1526630738;Tests that the global and operator-wide max parallelism setting is respected.;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(value -> value).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1_				.keyBy(value -> value)_				.map(new NoOpIntMap())_					.setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,value,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1526630738;Tests that the global and operator-wide max parallelism setting is respected.;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(value -> value).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1_				.keyBy(value -> value)_				.map(new NoOpIntMap())_					.setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,value,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testMaxParallelismForwarding();1547905886;Tests that the global and operator-wide max parallelism setting is respected.;@Test_	public void testMaxParallelismForwarding() {_		int globalMaxParallelism = 42__		int keyedResult2MaxParallelism = 17___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(globalMaxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(value -> value).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1_				.keyBy(value -> value)_				.map(new NoOpIntMap())_					.setMaxParallelism(keyedResult2MaxParallelism)___		keyedResult2.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())___		assertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism())__	};tests,that,the,global,and,operator,wide,max,parallelism,setting,is,respected;test,public,void,test,max,parallelism,forwarding,int,global,max,parallelism,42,int,keyed,result2max,parallelism,17,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,global,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,value,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,keyed,result2max,parallelism,keyed,result2,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,assert,equals,global,max,parallelism,keyed,result1node,get,max,parallelism,assert,equals,keyed,result2max,parallelism,keyed,result2node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testSinkIdComparison();1525267086;Tests that the json generated by JSONGenerator shall meet with 2 requirements:_1. sink nodes are at the back_2. if both two nodes are sink nodes or neither of them is sink node, then sort by its id.;@Test_	public void testSinkIdComparison() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> source = env.fromElements(1, 2, 3)__		for (int i = 0_ i < 32_ i++) {_			if (i % 2 == 0) {_				source.addSink(new SinkFunction<Integer>() {_					@Override_					public void invoke(Integer value) throws Exception {}_				})__			} else {_				source.map(x -> x + 1)__			}_		}_		_		env.getStreamGraph().getStreamingPlanAsJSON()__	};tests,that,the,json,generated,by,jsongenerator,shall,meet,with,2,requirements,1,sink,nodes,are,at,the,back,2,if,both,two,nodes,are,sink,nodes,or,neither,of,them,is,sink,node,then,sort,by,its,id;test,public,void,test,sink,id,comparison,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,2,3,for,int,i,0,i,32,i,if,i,2,0,source,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,else,source,map,x,x,1,env,get,stream,graph,get,streaming,plan,as,json
StreamGraphGeneratorTest -> @Test 	public void testSinkIdComparison();1526630738;Tests that the json generated by JSONGenerator shall meet with 2 requirements:_1. sink nodes are at the back_2. if both two nodes are sink nodes or neither of them is sink node, then sort by its id.;@Test_	public void testSinkIdComparison() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> source = env.fromElements(1, 2, 3)__		for (int i = 0_ i < 32_ i++) {_			if (i % 2 == 0) {_				source.addSink(new SinkFunction<Integer>() {_					@Override_					public void invoke(Integer value, Context ctx) throws Exception {}_				})__			} else {_				source.map(x -> x + 1)__			}_		}_		_		env.getStreamGraph().getStreamingPlanAsJSON()__	};tests,that,the,json,generated,by,jsongenerator,shall,meet,with,2,requirements,1,sink,nodes,are,at,the,back,2,if,both,two,nodes,are,sink,nodes,or,neither,of,them,is,sink,node,then,sort,by,its,id;test,public,void,test,sink,id,comparison,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,2,3,for,int,i,0,i,32,i,if,i,2,0,source,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,context,ctx,throws,exception,else,source,map,x,x,1,env,get,stream,graph,get,streaming,plan,as,json
StreamGraphGeneratorTest -> @Test 	public void testSinkIdComparison();1526630738;Tests that the json generated by JSONGenerator shall meet with 2 requirements:_1. sink nodes are at the back_2. if both two nodes are sink nodes or neither of them is sink node, then sort by its id.;@Test_	public void testSinkIdComparison() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> source = env.fromElements(1, 2, 3)__		for (int i = 0_ i < 32_ i++) {_			if (i % 2 == 0) {_				source.addSink(new SinkFunction<Integer>() {_					@Override_					public void invoke(Integer value, Context ctx) throws Exception {}_				})__			} else {_				source.map(x -> x + 1)__			}_		}_		_		env.getStreamGraph().getStreamingPlanAsJSON()__	};tests,that,the,json,generated,by,jsongenerator,shall,meet,with,2,requirements,1,sink,nodes,are,at,the,back,2,if,both,two,nodes,are,sink,nodes,or,neither,of,them,is,sink,node,then,sort,by,its,id;test,public,void,test,sink,id,comparison,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,2,3,for,int,i,0,i,32,i,if,i,2,0,source,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,context,ctx,throws,exception,else,source,map,x,x,1,env,get,stream,graph,get,streaming,plan,as,json
StreamGraphGeneratorTest -> @Test 	public void testSinkIdComparison();1547905886;Tests that the json generated by JSONGenerator shall meet with 2 requirements:_1. sink nodes are at the back_2. if both two nodes are sink nodes or neither of them is sink node, then sort by its id.;@Test_	public void testSinkIdComparison() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Integer> source = env.fromElements(1, 2, 3)__		for (int i = 0_ i < 32_ i++) {_			if (i % 2 == 0) {_				source.addSink(new SinkFunction<Integer>() {_					@Override_					public void invoke(Integer value, Context ctx) throws Exception {}_				})__			} else {_				source.map(x -> x + 1)__			}_		}_		_		env.getStreamGraph().getStreamingPlanAsJSON()__	};tests,that,the,json,generated,by,jsongenerator,shall,meet,with,2,requirements,1,sink,nodes,are,at,the,back,2,if,both,two,nodes,are,sink,nodes,or,neither,of,them,is,sink,node,then,sort,by,its,id;test,public,void,test,sink,id,comparison,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,2,3,for,int,i,0,i,32,i,if,i,2,0,source,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,context,ctx,throws,exception,else,source,map,x,x,1,env,get,stream,graph,get,streaming,plan,as,json
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1472663071;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()___		HashKeyGroupAssigner<?> hashKeyGroupAssigner = extractHashKeyGroupAssigner(streamPartitioner)___		assertEquals(maxParallelism, hashKeyGroupAssigner.getNumberKeyGroups())__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner,hash,key,group,assigner,hash,key,group,assigner,extract,hash,key,group,assigner,stream,partitioner,assert,equals,max,parallelism,hash,key,group,assigner,get,number,key,groups
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1472663401;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1472663402;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1476448412;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1485269495;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1489782894;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setParallelism(12)__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,parallelism,12,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1492530130;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1495484544;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1525267086;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1526630738;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(value -> value).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,value,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1526630738;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(value -> value).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,value,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testSetupOfKeyGroupPartitioner();1547905886;Tests that the KeyGroupStreamPartitioner are properly set up with the correct value of_maximum parallelism.;@Test_	public void testSetupOfKeyGroupPartitioner() {_		int maxParallelism = 42__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.getConfig().setMaxParallelism(maxParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult = source.keyBy(value -> value).map(new NoOpIntMap())___		keyedResult.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResultNode = graph.getStreamNode(keyedResult.getId())___		StreamPartitioner<?> streamPartitioner = keyedResultNode.getInEdges().get(0).getPartitioner()__	};tests,that,the,key,group,stream,partitioner,are,properly,set,up,with,the,correct,value,of,maximum,parallelism;test,public,void,test,setup,of,key,group,partitioner,int,max,parallelism,42,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,get,config,set,max,parallelism,max,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result,source,key,by,value,value,map,new,no,op,int,map,keyed,result,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result,node,graph,get,stream,node,keyed,result,get,id,stream,partitioner,stream,partitioner,keyed,result,node,get,in,edges,get,0,get,partitioner
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1445418103;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer, ?> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1452526242;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer, ?> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1453730836;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer, ?> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1456508941;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer, ?> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1456778239;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1467726666;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1472663071;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1472663401;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1472663402;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1476448412;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1485269495;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1489782894;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1492530130;This tests whether virtual Transformations behave correctly.__Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1495484544;This tests whether virtual Transformations behave correctly.__<p>Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,p,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1525267086;This tests whether virtual Transformations behave correctly.__<p>Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,p,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1526630738;This tests whether virtual Transformations behave correctly.__<p>Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,p,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1526630738;This tests whether virtual Transformations behave correctly.__<p>Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,p,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations2() throws Exception;1547905886;This tests whether virtual Transformations behave correctly.__<p>Checks whether output selector, partitioning works correctly when applied on a union.;@Test_	public void testVirtualTransformations2() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		DataStream<Integer> map1 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = rebalanceMap_				.map(new NoOpIntMap())___		EvenOddOutputSelector selector = new EvenOddOutputSelector()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.broadcast()_				.split(selector)_				.select("foo")_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map1.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map2.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map2.getId()).getOutputSelectors().contains(selector))___		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map3.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("foo"))__		assertTrue(graph.getStreamNode(map3.getId()).getOutputSelectors().contains(selector))___	};this,tests,whether,virtual,transformations,behave,correctly,p,checks,whether,output,selector,partitioning,works,correctly,when,applied,on,a,union;test,public,void,test,virtual,transformations2,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,map1,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,rebalance,map,map,new,no,op,int,map,even,odd,output,selector,selector,new,even,odd,output,selector,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,broadcast,split,selector,select,foo,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map1,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map2,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map2,get,id,get,output,selectors,contains,selector,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map3,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,foo,assert,true,graph,get,stream,node,map3,get,id,get,output,selectors,contains,selector
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1472663071;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())__		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(globalParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(mapParallelism, keyedResult2Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,global,parallelism,keyed,result1node,get,max,parallelism,assert,equals,map,parallelism,keyed,result2node,get,max,parallelism,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1472663401;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())__		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(globalParallelism, keyedResult1Node.getMaxParallelism())__		assertEquals(mapParallelism, keyedResult2Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,global,parallelism,keyed,result1node,get,max,parallelism,assert,equals,map,parallelism,keyed,result2node,get,max,parallelism,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1472663402;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())__		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM, keyedResult1Node.getMaxParallelism())__		assertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM, keyedResult2Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,key,group,range,assignment,keyed,result1node,get,max,parallelism,assert,equals,key,group,range,assignment,keyed,result2node,get,max,parallelism,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1476448412;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId())__		StreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId())__		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM, keyedResult1Node.getMaxParallelism())__		assertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM, keyedResult2Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result1node,graph,get,stream,node,keyed,result1,get,id,stream,node,keyed,result2node,graph,get,stream,node,keyed,result2,get,id,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,key,group,range,assignment,keyed,result1node,get,max,parallelism,assert,equals,key,group,range,assignment,keyed,result2node,get,max,parallelism,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1485269495;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1489782894;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1492530130;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1495484544;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1525267086;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 9205556348021992189L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {_			private static final long serialVersionUID = 1250168178707154838L___			@Override_			public Integer getKey(Integer value) throws Exception {_				return value__			}_		}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,9205556348021992189l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1250168178707154838l,override,public,integer,get,key,integer,value,throws,exception,return,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1526630738;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(value -> value).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(value -> value).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(value -> value).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(value -> value).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,value,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,value,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1526630738;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(value -> value).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(value -> value).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(value -> value).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(value -> value).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,value,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,value,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testAutoMaxParallelism();1547905886;Tests that the max parallelism is automatically set to the parallelism if it has not been_specified.;@Test_	public void testAutoMaxParallelism() {_		int globalParallelism = 42__		int mapParallelism = 17__		int maxParallelism = 21__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(globalParallelism)___		DataStream<Integer> source = env.fromElements(1, 2, 3)___		DataStream<Integer> keyedResult1 = source.keyBy(value -> value).map(new NoOpIntMap())___		DataStream<Integer> keyedResult2 = keyedResult1.keyBy(value -> value).map(new NoOpIntMap()).setParallelism(mapParallelism)___		DataStream<Integer> keyedResult3 = keyedResult2.keyBy(value -> value).map(new NoOpIntMap()).setMaxParallelism(maxParallelism)___		DataStream<Integer> keyedResult4 = keyedResult3.keyBy(value -> value).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism)___		keyedResult4.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		StreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId())__		StreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId())___		assertEquals(maxParallelism, keyedResult3Node.getMaxParallelism())__		assertEquals(maxParallelism, keyedResult4Node.getMaxParallelism())__	};tests,that,the,max,parallelism,is,automatically,set,to,the,parallelism,if,it,has,not,been,specified;test,public,void,test,auto,max,parallelism,int,global,parallelism,42,int,map,parallelism,17,int,max,parallelism,21,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,global,parallelism,data,stream,integer,source,env,from,elements,1,2,3,data,stream,integer,keyed,result1,source,key,by,value,value,map,new,no,op,int,map,data,stream,integer,keyed,result2,keyed,result1,key,by,value,value,map,new,no,op,int,map,set,parallelism,map,parallelism,data,stream,integer,keyed,result3,keyed,result2,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,data,stream,integer,keyed,result4,keyed,result3,key,by,value,value,map,new,no,op,int,map,set,max,parallelism,max,parallelism,set,parallelism,map,parallelism,keyed,result4,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,stream,node,keyed,result3node,graph,get,stream,node,keyed,result3,get,id,stream,node,keyed,result4node,graph,get,stream,node,keyed,result4,get,id,assert,equals,max,parallelism,keyed,result3node,get,max,parallelism,assert,equals,max,parallelism,keyed,result4node,get,max,parallelism
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1445418103;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new NoOpSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer, ?> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,no,op,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1452526242;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new NoOpSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer, ?> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,no,op,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1453730836;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new NoOpSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer, ?> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,no,op,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1456508941;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new NoOpSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer, ?> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,no,op,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1456778239;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new NoOpSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new NoOpSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,no,op,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,no,op,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1467726666;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1472663071;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1472663401;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1472663402;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1476448412;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1485269495;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1489782894;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1492530130;This tests whether virtual Transformations behave correctly.__<p>_Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()____		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1495484544;This tests whether virtual Transformations behave correctly.__<p>Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1525267086;This tests whether virtual Transformations behave correctly.__<p>Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<Integer>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<Integer>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,integer,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,integer,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1526630738;This tests whether virtual Transformations behave correctly.__<p>Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1526630738;This tests whether virtual Transformations behave correctly.__<p>Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getSourceVertex().getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,source,vertex,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
StreamGraphGeneratorTest -> @Test 	public void testVirtualTransformations() throws Exception;1547905886;This tests whether virtual Transformations behave correctly.__<p>Verifies that partitioning, output selector, selected names are correctly set in the_StreamGraph when they are intermixed.;@Test_	public void testVirtualTransformations() throws Exception {__		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.fromElements(1, 10)___		DataStream<Integer> rebalanceMap = source.rebalance().map(new NoOpIntMap())___		_		DataStream<Integer> broadcastMap = rebalanceMap_				.forward()_				.global()_				.broadcast()_				.map(new NoOpIntMap())___		broadcastMap.addSink(new DiscardingSink<>())___		_		EvenOddOutputSelector selector1 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector2 = new EvenOddOutputSelector()__		EvenOddOutputSelector selector3 = new EvenOddOutputSelector()___		DataStream<Integer> map1Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map1 = map1Operator_				.broadcast()_				.split(selector1)_				.select("even")___		DataStream<Integer> map2Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map2 = map2Operator_				.split(selector2)_				.select("odd")_				.global()___		DataStream<Integer> map3Operator = rebalanceMap_				.map(new NoOpIntMap())___		DataStream<Integer> map3 = map3Operator_				.global()_				.split(selector3)_				.select("even")_				.shuffle()___		SingleOutputStreamOperator<Integer> unionedMap = map1.union(map2).union(map3)_				.map(new NoOpIntMap())___		unionedMap.addSink(new DiscardingSink<>())___		StreamGraph graph = env.getStreamGraph()___		_		assertTrue(graph.getStreamNode(rebalanceMap.getId()).getInEdges().get(0).getPartitioner() instanceof RebalancePartitioner)___		_		assertTrue(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertEquals(rebalanceMap.getId(), graph.getSourceVertex(graph.getStreamNode(broadcastMap.getId()).getInEdges().get(0)).getId())___		_		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof BroadcastPartitioner)__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map1Operator.getId()).getOutputSelectors().contains(selector1))___		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof GlobalPartitioner)__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("odd"))__		assertTrue(graph.getStreamNode(map2Operator.getId()).getOutputSelectors().contains(selector2))___		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getPartitioner() instanceof ShufflePartitioner)__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutEdges().get(0).getSelectedNames().get(0).equals("even"))__		assertTrue(graph.getStreamNode(map3Operator.getId()).getOutputSelectors().contains(selector3))__	};this,tests,whether,virtual,transformations,behave,correctly,p,verifies,that,partitioning,output,selector,selected,names,are,correctly,set,in,the,stream,graph,when,they,are,intermixed;test,public,void,test,virtual,transformations,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,from,elements,1,10,data,stream,integer,rebalance,map,source,rebalance,map,new,no,op,int,map,data,stream,integer,broadcast,map,rebalance,map,forward,global,broadcast,map,new,no,op,int,map,broadcast,map,add,sink,new,discarding,sink,even,odd,output,selector,selector1,new,even,odd,output,selector,even,odd,output,selector,selector2,new,even,odd,output,selector,even,odd,output,selector,selector3,new,even,odd,output,selector,data,stream,integer,map1operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map1,map1operator,broadcast,split,selector1,select,even,data,stream,integer,map2operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map2,map2operator,split,selector2,select,odd,global,data,stream,integer,map3operator,rebalance,map,map,new,no,op,int,map,data,stream,integer,map3,map3operator,global,split,selector3,select,even,shuffle,single,output,stream,operator,integer,unioned,map,map1,union,map2,union,map3,map,new,no,op,int,map,unioned,map,add,sink,new,discarding,sink,stream,graph,graph,env,get,stream,graph,assert,true,graph,get,stream,node,rebalance,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,rebalance,partitioner,assert,true,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,equals,rebalance,map,get,id,graph,get,source,vertex,graph,get,stream,node,broadcast,map,get,id,get,in,edges,get,0,get,id,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,broadcast,partitioner,assert,true,graph,get,stream,node,map1operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map1operator,get,id,get,output,selectors,contains,selector1,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,global,partitioner,assert,true,graph,get,stream,node,map2operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,odd,assert,true,graph,get,stream,node,map2operator,get,id,get,output,selectors,contains,selector2,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,partitioner,instanceof,shuffle,partitioner,assert,true,graph,get,stream,node,map3operator,get,id,get,out,edges,get,0,get,selected,names,get,0,equals,even,assert,true,graph,get,stream,node,map3operator,get,id,get,output,selectors,contains,selector3
