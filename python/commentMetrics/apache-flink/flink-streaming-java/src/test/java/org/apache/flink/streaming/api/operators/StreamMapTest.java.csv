commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public String map(Integer value) throws Exception {     return "+" + (value + 1). }
false;public;0;23;;@Test public void testMap() throws Exception {     StreamMap<Integer, String> operator = new StreamMap<Integer, String>(new Map()).     OneInputStreamOperatorTestHarness<Integer, String> testHarness = new OneInputStreamOperatorTestHarness<Integer, String>(operator).     long initialTime = 0L.     ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>().     testHarness.open().     testHarness.processElement(new StreamRecord<Integer>(1, initialTime + 1)).     testHarness.processElement(new StreamRecord<Integer>(2, initialTime + 2)).     testHarness.processWatermark(new Watermark(initialTime + 2)).     testHarness.processElement(new StreamRecord<Integer>(3, initialTime + 3)).     expectedOutput.add(new StreamRecord<String>("+2", initialTime + 1)).     expectedOutput.add(new StreamRecord<String>("+3", initialTime + 2)).     expectedOutput.add(new Watermark(initialTime + 2)).     expectedOutput.add(new StreamRecord<String>("+4", initialTime + 3)).     TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput()). }
false;public;0;17;;@Test public void testOpenClose() throws Exception {     StreamMap<String, String> operator = new StreamMap<String, String>(new TestOpenCloseMapFunction()).     OneInputStreamOperatorTestHarness<String, String> testHarness = new OneInputStreamOperatorTestHarness<String, String>(operator).     long initialTime = 0L.     testHarness.open().     testHarness.processElement(new StreamRecord<String>("Hello", initialTime)).     testHarness.close().     Assert.assertTrue("RichFunction methods where not called.", TestOpenCloseMapFunction.closeCalled).     Assert.assertTrue("Output contains no elements.", testHarness.getOutput().size() > 0). }
false;public;1;8;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     if (closeCalled) {         Assert.fail("Close called before open.").     }     openCalled = true. }
false;public;0;8;;@Override public void close() throws Exception {     super.close().     if (!openCalled) {         Assert.fail("Open was not called before close.").     }     closeCalled = true. }
false;public;1;7;;@Override public String map(String value) throws Exception {     if (!openCalled) {         Assert.fail("Open was not called before run.").     }     return value. }
