commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;5;;public static <T> Matcher<StreamRecord<? extends T>> isStreamRecord(T value) {     return isStreamRecord(Matchers.equalTo(value)). }
false;public,static;2;6;;public static <T> Matcher<StreamRecord<? extends T>> isStreamRecord(T value, long timestamp) {     return isStreamRecord(Matchers.equalTo(value), Matchers.equalTo(timestamp)). }
false;public,static;1;4;;public static <T> Matcher<StreamRecord<? extends T>> isStreamRecord(Matcher<? super T> valueMatcher) {     return new StreamRecordMatcher<>(valueMatcher, Matchers.anything()). }
false;public,static;2;4;;public static <T> Matcher<StreamRecord<? extends T>> isStreamRecord(Matcher<? super T> valueMatcher, Matcher<? super Long> timestampMatcher) {     return new StreamRecordMatcher<>(valueMatcher, timestampMatcher). }
false;public,static;2;3;;public static Matcher<TimeWindow> timeWindow(long start, long end) {     return Matchers.equalTo(new TimeWindow(start, end)). }
false;public,static;1;5;;@SuppressWarnings({ "unchecked", "rawtypes" }) @SafeVarargs public static <W extends Window> Matcher<Iterable<W>> ofWindows(Matcher<W>... windows) {     return (Matcher) Matchers.containsInAnyOrder(windows). }
false;public,static;1;4;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(T value) {     return isWindowedValue(Matchers.equalTo(value)). }
false;public,static;2;5;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(T value, long timestamp) {     return isWindowedValue(Matchers.equalTo(value), Matchers.equalTo(timestamp)). }
false;public,static;3;6;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(T value, long timestamp, W window) {     return isWindowedValue(Matchers.equalTo(value), Matchers.equalTo(timestamp), Matchers.equalTo(window)). }
false;public,static;2;4;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(Matcher<? super T> valueMatcher, long timestamp) {     return new WindowedValueMatcher<>(valueMatcher, Matchers.equalTo(timestamp), Matchers.anything()). }
false;public,static;3;4;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(Matcher<? super T> valueMatcher, long timestamp, W window) {     return new WindowedValueMatcher<>(valueMatcher, Matchers.equalTo(timestamp), Matchers.equalTo(window)). }
false;public,static;1;4;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(Matcher<? super T> valueMatcher) {     return new WindowedValueMatcher<>(valueMatcher, Matchers.anything(), Matchers.anything()). }
false;public,static;2;4;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(Matcher<? super T> valueMatcher, Matcher<? super Long> timestampMatcher) {     return new WindowedValueMatcher<>(valueMatcher, timestampMatcher, Matchers.anything()). }
false;public,static;3;4;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(Matcher<? super T> valueMatcher, long timestamp, Matcher<? super W> windowMatcher) {     return new WindowedValueMatcher<>(valueMatcher, Matchers.equalTo(timestamp), windowMatcher). }
false;public,static;3;4;;public static <T, W extends Window> Matcher<StreamRecord<? extends WindowedValue<? extends T, ? extends W>>> isWindowedValue(Matcher<? super T> valueMatcher, Matcher<? super Long> timestampMatcher, Matcher<? super W> windowMatcher) {     return new WindowedValueMatcher<>(valueMatcher, timestampMatcher, windowMatcher). }
false;public;1;7;;@Override public void describeTo(Description description) {     description.appendText("a StreamRecordValue(").appendValue(valueMatcher).appendText(", ").appendValue(timestampMatcher).appendText(")"). }
false;protected;1;5;;@Override protected boolean matchesSafely(StreamRecord<? extends T> streamRecord) {     return valueMatcher.matches(streamRecord.getValue()) && timestampMatcher.matches(streamRecord.getTimestamp()). }
false;public;1;8;;@Override public void describeTo(Description description) {     description.appendText("a WindowedValue(").appendValue(valueMatcher).appendText(", ").appendValue(timestampMatcher).appendText(", ").appendValue(timestampMatcher).appendText(")"). }
false;protected;1;6;;@Override protected boolean matchesSafely(StreamRecord<? extends WindowedValue<? extends T, ? extends W>> streamRecord) {     return valueMatcher.matches(streamRecord.getValue().value()) && timestampMatcher.matches(streamRecord.getTimestamp()) && windowMatcher.matches(streamRecord.getValue().window()). }
