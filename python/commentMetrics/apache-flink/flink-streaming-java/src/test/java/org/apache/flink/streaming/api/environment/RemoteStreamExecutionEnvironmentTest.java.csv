# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteStreamExecutionEnvironmentTest -> @Test 	public void testPortForwarding() throws Exception;1536322889;Verifies that the port passed to the RemoteStreamEnvironment is used for connecting to the cluster.;@Test_	public void testPortForwarding() throws Exception {_		final Configuration clientConfiguration = new Configuration()__		clientConfiguration.setInteger(RestOptions.RETRY_MAX_ATTEMPTS, 0)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_			flink.getRestAddress().getHost(),_			flink.getRestAddress().getPort(),_			clientConfiguration)___		final DataStream<Integer> resultStream = env.fromElements(1)_			.map(x -> x * 2)___		final Iterator<Integer> result = DataStreamUtils.collect(resultStream)__		Assert.assertTrue(result.hasNext())__		Assert.assertEquals(2, result.next().intValue())__		Assert.assertFalse(result.hasNext())__	};verifies,that,the,port,passed,to,the,remote,stream,environment,is,used,for,connecting,to,the,cluster;test,public,void,test,port,forwarding,throws,exception,final,configuration,client,configuration,new,configuration,client,configuration,set,integer,rest,options,0,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,flink,get,rest,address,get,host,flink,get,rest,address,get,port,client,configuration,final,data,stream,integer,result,stream,env,from,elements,1,map,x,x,2,final,iterator,integer,result,data,stream,utils,collect,result,stream,assert,assert,true,result,has,next,assert,assert,equals,2,result,next,int,value,assert,assert,false,result,has,next
RemoteStreamExecutionEnvironmentTest -> @Test 	public void testPortForwarding() throws Exception;1540389860;Verifies that the port passed to the RemoteStreamEnvironment is used for connecting to the cluster.;@Test_	public void testPortForwarding() throws Exception {_		final Configuration clientConfiguration = new Configuration()__		clientConfiguration.setInteger(RestOptions.RETRY_MAX_ATTEMPTS, 0)___		final MiniCluster miniCluster = MINI_CLUSTER_RESOURCE.getMiniCluster()__		final StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_			miniCluster.getRestAddress().getHost(),_			miniCluster.getRestAddress().getPort(),_			clientConfiguration)___		final DataStream<Integer> resultStream = env.fromElements(1)_			.map(x -> x * 2)___		final Iterator<Integer> result = DataStreamUtils.collect(resultStream)__		Assert.assertTrue(result.hasNext())__		Assert.assertEquals(2, result.next().intValue())__		Assert.assertFalse(result.hasNext())__	};verifies,that,the,port,passed,to,the,remote,stream,environment,is,used,for,connecting,to,the,cluster;test,public,void,test,port,forwarding,throws,exception,final,configuration,client,configuration,new,configuration,client,configuration,set,integer,rest,options,0,final,mini,cluster,mini,cluster,get,mini,cluster,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,mini,cluster,get,rest,address,get,host,mini,cluster,get,rest,address,get,port,client,configuration,final,data,stream,integer,result,stream,env,from,elements,1,map,x,x,2,final,iterator,integer,result,data,stream,utils,collect,result,stream,assert,assert,true,result,has,next,assert,assert,equals,2,result,next,int,value,assert,assert,false,result,has,next
RemoteStreamExecutionEnvironmentTest -> @Test 	public void testPortForwarding() throws Exception;1545345745;Verifies that the port passed to the RemoteStreamEnvironment is used for connecting to the cluster.;@Test_	public void testPortForwarding() throws Exception {__		String host = "fakeHost"__		int port = 99__		JobExecutionResult expectedResult = new JobExecutionResult(null, 0, null)___		RestClusterClient mockedClient = Mockito.mock(RestClusterClient.class)__		when(mockedClient.run(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))_			.thenReturn(expectedResult)___		PowerMockito.whenNew(RestClusterClient.class).withAnyArguments().thenAnswer((invocation) -> {_				Object[] args = invocation.getArguments()__				Configuration config = (Configuration) args[0]___				Assert.assertEquals(host, config.getString(RestOptions.ADDRESS))__				Assert.assertEquals(port, config.getInteger(RestOptions.PORT))__				return mockedClient__			}_		)___		final Configuration clientConfiguration = new Configuration()__		final StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_			host, port, clientConfiguration)__		env.fromElements(1).map(x -> x * 2)__		JobExecutionResult actualResult = env.execute("fakeJobName")__		Assert.assertEquals(expectedResult, actualResult)__	};verifies,that,the,port,passed,to,the,remote,stream,environment,is,used,for,connecting,to,the,cluster;test,public,void,test,port,forwarding,throws,exception,string,host,fake,host,int,port,99,job,execution,result,expected,result,new,job,execution,result,null,0,null,rest,cluster,client,mocked,client,mockito,mock,rest,cluster,client,class,when,mocked,client,run,mockito,any,mockito,any,mockito,any,mockito,any,mockito,any,then,return,expected,result,power,mockito,when,new,rest,cluster,client,class,with,any,arguments,then,answer,invocation,object,args,invocation,get,arguments,configuration,config,configuration,args,0,assert,assert,equals,host,config,get,string,rest,options,address,assert,assert,equals,port,config,get,integer,rest,options,port,return,mocked,client,final,configuration,client,configuration,new,configuration,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,host,port,client,configuration,env,from,elements,1,map,x,x,2,job,execution,result,actual,result,env,execute,fake,job,name,assert,assert,equals,expected,result,actual,result
RemoteStreamExecutionEnvironmentTest -> @Test 	public void testPortForwarding() throws Exception;1550757917;Verifies that the port passed to the RemoteStreamEnvironment is used for connecting to the cluster.;@Test_	public void testPortForwarding() throws Exception {__		String host = "fakeHost"__		int port = 99__		JobExecutionResult expectedResult = new JobExecutionResult(null, 0, null)___		RestClusterClient mockedClient = Mockito.mock(RestClusterClient.class)__		when(mockedClient.run(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))_			.thenReturn(expectedResult)___		PowerMockito.whenNew(RestClusterClient.class).withAnyArguments().thenAnswer((invocation) -> {_				Object[] args = invocation.getArguments()__				Configuration config = (Configuration) args[0]___				Assert.assertEquals(host, config.getString(RestOptions.ADDRESS))__				Assert.assertEquals(port, config.getInteger(RestOptions.PORT))__				return mockedClient__			}_		)___		final Configuration clientConfiguration = new Configuration()__		final StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_			host, port, clientConfiguration)__		env.fromElements(1).map(x -> x * 2)__		JobExecutionResult actualResult = env.execute("fakeJobName")__		Assert.assertEquals(expectedResult, actualResult)__	};verifies,that,the,port,passed,to,the,remote,stream,environment,is,used,for,connecting,to,the,cluster;test,public,void,test,port,forwarding,throws,exception,string,host,fake,host,int,port,99,job,execution,result,expected,result,new,job,execution,result,null,0,null,rest,cluster,client,mocked,client,mockito,mock,rest,cluster,client,class,when,mocked,client,run,mockito,any,mockito,any,mockito,any,mockito,any,mockito,any,then,return,expected,result,power,mockito,when,new,rest,cluster,client,class,with,any,arguments,then,answer,invocation,object,args,invocation,get,arguments,configuration,config,configuration,args,0,assert,assert,equals,host,config,get,string,rest,options,address,assert,assert,equals,port,config,get,integer,rest,options,port,return,mocked,client,final,configuration,client,configuration,new,configuration,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,host,port,client,configuration,env,from,elements,1,map,x,x,2,job,execution,result,actual,result,env,execute,fake,job,name,assert,assert,equals,expected,result,actual,result
