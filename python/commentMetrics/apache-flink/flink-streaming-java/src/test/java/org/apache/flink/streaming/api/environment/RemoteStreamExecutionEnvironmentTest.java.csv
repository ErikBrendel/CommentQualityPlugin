commented;modifiers;parameterAmount;loc;comment;code
true;public;0;28;/**  * Verifies that the port passed to the RemoteStreamEnvironment is used for connecting to the cluster.  */ ;/**  * Verifies that the port passed to the RemoteStreamEnvironment is used for connecting to the cluster.  */ @Test public void testPortForwarding() throws Exception {     String host = "fakeHost".     int port = 99.     JobExecutionResult expectedResult = new JobExecutionResult(null, 0, null).     RestClusterClient mockedClient = Mockito.mock(RestClusterClient.class).     when(mockedClient.run(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(expectedResult).     PowerMockito.whenNew(RestClusterClient.class).withAnyArguments().thenAnswer((invocation) -> {         Object[] args = invocation.getArguments().         Configuration config = (Configuration) args[0].         Assert.assertEquals(host, config.getString(RestOptions.ADDRESS)).         Assert.assertEquals(port, config.getInteger(RestOptions.PORT)).         return mockedClient.     }).     final Configuration clientConfiguration = new Configuration().     final StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host, port, clientConfiguration).     env.fromElements(1).map(x -> x * 2).     JobExecutionResult actualResult = env.execute("fakeJobName").     Assert.assertEquals(expectedResult, actualResult). }
false;public;0;17;;@Test public void testRemoteExecutionWithSavepoint() throws Exception {     SavepointRestoreSettings restoreSettings = SavepointRestoreSettings.forPath("fakePath").     RemoteStreamEnvironment env = new RemoteStreamEnvironment("fakeHost", 1, null, new String[] {}, null, restoreSettings).     env.fromElements(1).map(x -> x * 2).     RestClusterClient mockedClient = Mockito.mock(RestClusterClient.class).     JobExecutionResult expectedResult = new JobExecutionResult(null, 0, null).     PowerMockito.whenNew(RestClusterClient.class).withAnyArguments().thenReturn(mockedClient).     when(mockedClient.run(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.eq(restoreSettings))).thenReturn(expectedResult).     JobExecutionResult actualResult = env.execute("fakeJobName").     Assert.assertEquals(expectedResult, actualResult). }
