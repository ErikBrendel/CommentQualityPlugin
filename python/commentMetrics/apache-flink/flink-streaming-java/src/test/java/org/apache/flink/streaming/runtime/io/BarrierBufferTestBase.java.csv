commented;modifiers;parameterAmount;loc;comment;code
false;abstract;1;1;;abstract BarrierBuffer createBarrierHandler(InputGate gate) throws IOException.
false;abstract;2;1;;abstract void validateAlignmentBuffered(long actualBytesBuffered, BufferOrEvent... sequence).
true;public;0;21;/**  * Validates that the buffer behaves correctly if no checkpoint barriers come,  * for a single input channel.  */ ;// ------------------------------------------------------------------------ // Tests // ------------------------------------------------------------------------ /**  * Validates that the buffer behaves correctly if no checkpoint barriers come,  * for a single input channel.  */ @Test public void testSingleChannelNoBarriers() throws Exception {     BufferOrEvent[] sequence = { createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 1, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     for (BufferOrEvent boe : sequence) {         assertEquals(boe, buffer.getNextNonBlocked()).     }     assertEquals(0L, buffer.getAlignmentDurationNanos()).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
true;public;0;23;/**  * Validates that the buffer behaves correctly if no checkpoint barriers come,  * for an input with multiple input channels.  */ ;/**  * Validates that the buffer behaves correctly if no checkpoint barriers come,  * for an input with multiple input channels.  */ @Test public void testMultiChannelNoBarriers() throws Exception {     BufferOrEvent[] sequence = { createBuffer(2, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createEndOfPartition(0), createBuffer(3, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createEndOfPartition(3), createBuffer(1, PAGE_SIZE), createEndOfPartition(1), createBuffer(2, PAGE_SIZE), createEndOfPartition(2) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 4, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     for (BufferOrEvent boe : sequence) {         assertEquals(boe, buffer.getNextNonBlocked()).     }     assertEquals(0L, buffer.getAlignmentDurationNanos()).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
true;public;0;30;/**  * Validates that the buffer preserved the order of elements for a  * input with a single input channel, and checkpoint events.  */ ;/**  * Validates that the buffer preserved the order of elements for a  * input with a single input channel, and checkpoint events.  */ @Test public void testSingleChannelWithBarriers() throws Exception {     BufferOrEvent[] sequence = { createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 0), createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(2, 0), createBarrier(3, 0), createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(4, 0), createBarrier(5, 0), createBarrier(6, 0), createBuffer(0, PAGE_SIZE), createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 1, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler().     buffer.registerCheckpointEventHandler(handler).     handler.setNextExpectedCheckpointId(1L).     for (BufferOrEvent boe : sequence) {         if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {             assertEquals(boe, buffer.getNextNonBlocked()).         }     }     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
true;public;0;122;/**  * Validates that the buffer correctly aligns the streams for inputs with  * multiple input channels, by buffering and blocking certain inputs.  */ ;/**  * Validates that the buffer correctly aligns the streams for inputs with  * multiple input channels, by buffering and blocking certain inputs.  */ @Test public void testMultiChannelWithBarriers() throws Exception {     BufferOrEvent[] sequence = { // checkpoint with blocked data     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 1), createBarrier(1, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 0), // checkpoint without blocked data     createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(2, 0), createBarrier(2, 1), createBarrier(2, 2), // checkpoint with data only from one channel     createBuffer(2, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(3, 2), createBuffer(2, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(3, 0), createBarrier(3, 1), // empty checkpoint     createBarrier(4, 1), createBarrier(4, 2), createBarrier(4, 0), // checkpoint with blocked data in mixed order     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(5, 1), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBarrier(5, 2), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBarrier(5, 0), // some trailing data     createBuffer(0, PAGE_SIZE), createEndOfPartition(0), createEndOfPartition(1), createEndOfPartition(2) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler().     buffer.registerCheckpointEventHandler(handler).     handler.setNextExpectedCheckpointId(1L).     // pre checkpoint 1     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(1L, handler.getNextExpectedCheckpointId()).     long startTs = System.nanoTime().     // blocking while aligning for checkpoint 1     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(1L, handler.getNextExpectedCheckpointId()).     // checkpoint 1 done, returning buffered data     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, handler.getNextExpectedCheckpointId()).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     validateAlignmentBuffered(handler.getLastReportedBytesBufferedInAlignment(), sequence[5], sequence[6]).     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     // pre checkpoint 2     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[11], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, handler.getNextExpectedCheckpointId()).     // checkpoint 2 barriers come together     startTs = System.nanoTime().     check(sequence[17], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(3L, handler.getNextExpectedCheckpointId()).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     validateAlignmentBuffered(handler.getLastReportedBytesBufferedInAlignment()).     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 3 starts, data buffered     check(sequence[20], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentBuffered(handler.getLastReportedBytesBufferedInAlignment(), sequence[20], sequence[21]).     assertEquals(4L, handler.getNextExpectedCheckpointId()).     check(sequence[21], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 4 happens without extra data     // pre checkpoint 5     check(sequence[27], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentBuffered(handler.getLastReportedBytesBufferedInAlignment()).     assertEquals(5L, handler.getNextExpectedCheckpointId()).     check(sequence[28], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[29], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 5 aligning     check(sequence[31], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[32], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[33], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[37], buffer.getNextNonBlocked(), PAGE_SIZE).     // buffered data from checkpoint 5 alignment     check(sequence[34], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[36], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[38], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[39], buffer.getNextNonBlocked(), PAGE_SIZE).     // remaining data     check(sequence[41], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[42], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[43], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[44], buffer.getNextNonBlocked(), PAGE_SIZE).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     validateAlignmentBuffered(handler.getLastReportedBytesBufferedInAlignment(), sequence[34], sequence[36], sequence[38], sequence[39]).     buffer.cleanup(). }
false;public;0;52;;@Test public void testMultiChannelTrailingBlockedData() throws Exception {     BufferOrEvent[] sequence = { createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(1, 1), createBarrier(1, 2), createBarrier(1, 0), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(2, 1), createBuffer(1, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createEndOfPartition(1), createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(2, 2), createBuffer(2, PAGE_SIZE), createEndOfPartition(2), createBuffer(0, PAGE_SIZE), createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler().     buffer.registerCheckpointEventHandler(handler).     handler.setNextExpectedCheckpointId(1L).     // pre-checkpoint 1     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(1L, handler.getNextExpectedCheckpointId()).     // pre-checkpoint 2     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, handler.getNextExpectedCheckpointId()).     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[8], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 2 alignment     long startTs = System.nanoTime().     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[14], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[19], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     // end of stream: remaining buffered contents     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[11], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[17], buffer.getNextNonBlocked(), PAGE_SIZE).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
true;public;0;110;/**  * Validates that the buffer correctly aligns the streams in cases  * where some channels receive barriers from multiple successive checkpoints  * before the pending checkpoint is complete.  */ ;/**  * Validates that the buffer correctly aligns the streams in cases  * where some channels receive barriers from multiple successive checkpoints  * before the pending checkpoint is complete.  */ @Test public void testMultiChannelWithQueuedFutureBarriers() throws Exception {     BufferOrEvent[] sequence = { // checkpoint 1 - with blocked data     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 1), createBarrier(1, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 0), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), // the current checkpoint is complete     createBarrier(2, 1), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(2, 0), createBarrier(3, 0), createBuffer(0, PAGE_SIZE), createBarrier(3, 1), createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(4, 1), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), // complete checkpoint 2, send a barrier for checkpoints 4 and 5     createBarrier(2, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(4, 0), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(5, 1), // complete checkpoint 3     createBarrier(3, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(6, 1), // complete checkpoint 4, checkpoint 5 remains not fully triggered     createBarrier(4, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createEndOfPartition(1), createBuffer(2, PAGE_SIZE), createEndOfPartition(2), createBuffer(0, PAGE_SIZE), createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler().     buffer.registerCheckpointEventHandler(handler).     handler.setNextExpectedCheckpointId(1L).     // around checkpoint 1     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, handler.getNextExpectedCheckpointId()).     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     // alignment of checkpoint 2 - buffering also some barriers for     // checkpoints 3 and 4     long startTs = System.nanoTime().     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[20], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[23], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 2 completed     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     check(sequence[25], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[27], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[30], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[32], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 3 completed (emit buffered)     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[19], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[28], buffer.getNextNonBlocked(), PAGE_SIZE).     // past checkpoint 3     check(sequence[36], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[38], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 4 completed (emit buffered)     check(sequence[22], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[26], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[31], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[33], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[39], buffer.getNextNonBlocked(), PAGE_SIZE).     // past checkpoint 4, alignment for checkpoint 5     check(sequence[42], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[45], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[46], buffer.getNextNonBlocked(), PAGE_SIZE).     // abort checkpoint 5 (end of partition)     check(sequence[37], buffer.getNextNonBlocked(), PAGE_SIZE).     // start checkpoint 6 alignment     check(sequence[47], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[48], buffer.getNextNonBlocked(), PAGE_SIZE).     // end of input, emit remainder     check(sequence[43], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[44], buffer.getNextNonBlocked(), PAGE_SIZE).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
true;public;0;83;/**  * Validates that the buffer skips over the current checkpoint if it  * receives a barrier from a later checkpoint on a non-blocked input.  */ ;/**  * Validates that the buffer skips over the current checkpoint if it  * receives a barrier from a later checkpoint on a non-blocked input.  */ @Test public void testMultiChannelSkippingCheckpoints() throws Exception {     BufferOrEvent[] sequence = { // checkpoint 1 - with blocked data     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 1), createBarrier(1, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 0), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), // checkpoint 2 will not complete: pre-mature barrier from checkpoint 3     createBarrier(2, 1), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(2, 0), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(3, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createEndOfPartition(1), createBuffer(2, PAGE_SIZE), createEndOfPartition(2), createBuffer(0, PAGE_SIZE), createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     AbstractInvokable toNotify = mock(AbstractInvokable.class).     buffer.registerCheckpointEventHandler(toNotify).     long startTs.     // initial data     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     // align checkpoint 1     startTs = System.nanoTime().     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(1L, buffer.getCurrentCheckpointId()).     // checkpoint done - replay buffered     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     verify(toNotify).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(1L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     // alignment of checkpoint 2     startTs = System.nanoTime().     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[15], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 2 aborted, checkpoint 3 started     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(3L, buffer.getCurrentCheckpointId()).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     verify(toNotify).abortCheckpointOnBarrier(eq(2L), isA(CheckpointDeclineSubsumedException.class)).     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 3 alignment in progress     check(sequence[19], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 3 aborted (end of partition)     check(sequence[20], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify).abortCheckpointOnBarrier(eq(3L), isA(InputEndOfStreamException.class)).     // replay buffered data from checkpoint 3     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     // all the remaining messages     check(sequence[21], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[22], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[23], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[24], buffer.getNextNonBlocked(), PAGE_SIZE).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
true;public;0;80;/**  * Validates that the buffer skips over the current checkpoint if it  * receives a barrier from a later checkpoint on a non-blocked input.  */ ;/**  * Validates that the buffer skips over the current checkpoint if it  * receives a barrier from a later checkpoint on a non-blocked input.  */ @Test public void testMultiChannelJumpingOverCheckpoint() throws Exception {     BufferOrEvent[] sequence = { // checkpoint 1 - with blocked data     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 1), createBarrier(1, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 0), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), // checkpoint 2 will not complete: pre-mature barrier from checkpoint 3     createBarrier(2, 1), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(2, 0), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(3, 1), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(3, 0), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(4, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createEndOfPartition(1), createBuffer(2, PAGE_SIZE), createEndOfPartition(2), createBuffer(0, PAGE_SIZE), createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler().     buffer.registerCheckpointEventHandler(handler).     handler.setNextExpectedCheckpointId(1L).     // checkpoint 1     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(1L, buffer.getCurrentCheckpointId()).     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     // alignment of checkpoint 2     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, buffer.getCurrentCheckpointId()).     check(sequence[15], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[19], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[21], buffer.getNextNonBlocked(), PAGE_SIZE).     long startTs = System.nanoTime().     // checkpoint 2 aborted, checkpoint 4 started. replay buffered     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(4L, buffer.getCurrentCheckpointId()).     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[22], buffer.getNextNonBlocked(), PAGE_SIZE).     // align checkpoint 4 remainder     check(sequence[25], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[26], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     // checkpoint 4 aborted (due to end of partition)     check(sequence[24], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[27], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[28], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[29], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[30], buffer.getNextNonBlocked(), PAGE_SIZE).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
true;public;0;88;/**  * Validates that the buffer skips over a later checkpoint if it  * receives a barrier from an even later checkpoint on a blocked input.  */ ;/**  * Validates that the buffer skips over a later checkpoint if it  * receives a barrier from an even later checkpoint on a blocked input.  */ @Test public void testMultiChannelSkippingCheckpointsViaBlockedInputs() throws Exception {     BufferOrEvent[] sequence = { // checkpoint 1 - with blocked data     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 1), createBarrier(1, 2), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(1, 0), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), // checkpoint 2 will not complete: pre-mature barrier from checkpoint 3     createBarrier(2, 1), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(2, 0), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), // queued barrier on blocked input     createBarrier(3, 0), createBuffer(0, PAGE_SIZE), // pre-mature barrier on blocked input     createBarrier(4, 1), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), // complete checkpoint 2     createBarrier(2, 2), createBuffer(0, PAGE_SIZE), // should be ignored     createBarrier(3, 2), createBuffer(2, PAGE_SIZE), createBarrier(4, 0), createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(4, 2), createBuffer(1, PAGE_SIZE), createEndOfPartition(1), createBuffer(2, PAGE_SIZE), createEndOfPartition(2), createBuffer(0, PAGE_SIZE), createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     // checkpoint 1     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(1L, buffer.getCurrentCheckpointId()).     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     // alignment of checkpoint 2     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[22], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, buffer.getCurrentCheckpointId()).     // checkpoint 2 completed     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[15], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 3 skipped, alignment for 4 started     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(4L, buffer.getCurrentCheckpointId()).     check(sequence[21], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[24], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[26], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[30], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 4 completed     check(sequence[20], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[28], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[29], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[32], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[33], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[34], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[35], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[36], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[37], buffer.getNextNonBlocked(), PAGE_SIZE).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
false;public;0;42;;@Test public void testEarlyCleanup() throws Exception {     BufferOrEvent[] sequence = { createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(1, 1), createBarrier(1, 2), createBarrier(1, 0), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(2, 1), createBuffer(1, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createEndOfPartition(1), createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBarrier(2, 2), createBuffer(2, PAGE_SIZE), createEndOfPartition(2), createBuffer(0, PAGE_SIZE), createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler().     buffer.registerCheckpointEventHandler(handler).     handler.setNextExpectedCheckpointId(1L).     // pre-checkpoint 1     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(1L, handler.getNextExpectedCheckpointId()).     // pre-checkpoint 2     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, handler.getNextExpectedCheckpointId()).     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[8], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 2 alignment     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[14], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[19], buffer.getNextNonBlocked(), PAGE_SIZE).     // end of stream: remaining buffered contents     buffer.getNextNonBlocked().     buffer.cleanup(). }
false;public;0;68;;@Test public void testStartAlignmentWithClosedChannels() throws Exception {     BufferOrEvent[] sequence = { // close some channels immediately     createEndOfPartition(2), createEndOfPartition(1), // checkpoint without blocked data     createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(3, PAGE_SIZE), createBarrier(2, 3), createBarrier(2, 0), // checkpoint with blocked data     createBuffer(3, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(3, 3), createBuffer(3, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBarrier(3, 0), // empty checkpoint     createBarrier(4, 0), createBarrier(4, 3), // some data, one channel closes     createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(3, PAGE_SIZE), createEndOfPartition(0), // checkpoint on last remaining channel     createBuffer(3, PAGE_SIZE), createBarrier(5, 3), createBuffer(3, PAGE_SIZE), createEndOfPartition(3) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 4, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     // pre checkpoint 2     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[3], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[4], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 3 alignment     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, buffer.getCurrentCheckpointId()).     check(sequence[8], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[11], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint 3 buffered     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(3L, buffer.getCurrentCheckpointId()).     // after checkpoint 4     check(sequence[15], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(4L, buffer.getCurrentCheckpointId()).     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[17], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[19], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[21], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(5L, buffer.getCurrentCheckpointId()).     check(sequence[22], buffer.getNextNonBlocked(), PAGE_SIZE).     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
false;public;0;48;;@Test public void testEndOfStreamWhileCheckpoint() throws Exception {     BufferOrEvent[] sequence = { // one checkpoint     createBarrier(1, 0), createBarrier(1, 1), createBarrier(1, 2), // some buffers     createBuffer(0, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), // start the checkpoint that will be incomplete     createBarrier(2, 2), createBarrier(2, 0), createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), // close one after the barrier one before the barrier     createEndOfPartition(2), createEndOfPartition(1), createBuffer(0, PAGE_SIZE), // final end of stream     createEndOfPartition(0) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     // data after first checkpoint     check(sequence[3], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[4], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(1L, buffer.getCurrentCheckpointId()).     // alignment of second checkpoint     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(2L, buffer.getCurrentCheckpointId()).     // first end-of-partition encountered: checkpoint will not be completed     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[8], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[11], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[14], buffer.getNextNonBlocked(), PAGE_SIZE).     // all done     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
false;public;0;39;;@Test public void testSingleChannelAbortCheckpoint() throws Exception {     BufferOrEvent[] sequence = { createBuffer(0, PAGE_SIZE), createBarrier(1, 0), createBuffer(0, PAGE_SIZE), createBarrier(2, 0), createCancellationBarrier(4, 0), createBarrier(5, 0), createBuffer(0, PAGE_SIZE), createCancellationBarrier(6, 0), createBuffer(0, PAGE_SIZE) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 1, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     AbstractInvokable toNotify = mock(AbstractInvokable.class).     buffer.registerCheckpointEventHandler(toNotify).     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(1L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     assertEquals(0L, buffer.getAlignmentDurationNanos()).     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(5L, buffer.getCurrentCheckpointId()).     verify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(2L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     verify(toNotify, times(1)).abortCheckpointOnBarrier(eq(4L), any(CheckpointDeclineOnCancellationBarrierException.class)).     verify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(5L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     assertEquals(0L, buffer.getAlignmentDurationNanos()).     check(sequence[8], buffer.getNextNonBlocked(), PAGE_SIZE).     assertEquals(6L, buffer.getCurrentCheckpointId()).     verify(toNotify, times(1)).abortCheckpointOnBarrier(eq(6L), any(CheckpointDeclineOnCancellationBarrierException.class)).     assertEquals(0L, buffer.getAlignmentDurationNanos()).     buffer.cleanup(). }
false;public;0;101;;@Test public void testMultiChannelAbortCheckpoint() throws Exception {     BufferOrEvent[] sequence = { /* 0 */     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), /* 3 */     createBarrier(1, 1), createBarrier(1, 2), /* 5 */     createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), /* 7 */     createBarrier(1, 0), /* 8 */     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), /* 10 */     createBarrier(2, 0), createBarrier(2, 2), /* 12 */     createBuffer(0, PAGE_SIZE), createBuffer(2, PAGE_SIZE), /* 14 */     createCancellationBarrier(2, 1), /* 15 */     createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), /* 17 */     createBarrier(3, 1), createBarrier(3, 2), createBarrier(3, 0), /* 20 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), /* 22 */     createCancellationBarrier(4, 1), createBarrier(4, 2), /* 24 */     createBuffer(0, PAGE_SIZE), /* 25 */     createBarrier(4, 0), /* 26 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), /* 29 */     createBarrier(5, 2), createBarrier(5, 1), createBarrier(5, 0), /* 32 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), /* 34 */     createCancellationBarrier(6, 1), createCancellationBarrier(6, 2), /* 36 */     createBarrier(6, 0), /* 37 */     createBuffer(0, PAGE_SIZE) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     AbstractInvokable toNotify = mock(AbstractInvokable.class).     buffer.registerCheckpointEventHandler(toNotify).     long startTs.     // successful first checkpoint, with some aligned buffers     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[1], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     startTs = System.nanoTime().     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(1L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[8], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     // canceled checkpoint on last barrier     startTs = System.nanoTime().     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).abortCheckpointOnBarrier(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class)).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     // one more successful checkpoint     check(sequence[15], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     startTs = System.nanoTime().     check(sequence[20], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(3L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     check(sequence[21], buffer.getNextNonBlocked(), PAGE_SIZE).     // this checkpoint gets immediately canceled     check(sequence[24], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).abortCheckpointOnBarrier(eq(4L), any(CheckpointDeclineOnCancellationBarrierException.class)).     assertEquals(0L, buffer.getAlignmentDurationNanos()).     // some buffers     check(sequence[26], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[27], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[28], buffer.getNextNonBlocked(), PAGE_SIZE).     // a simple successful checkpoint     startTs = System.nanoTime().     check(sequence[32], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(5L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     check(sequence[33], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[37], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).abortCheckpointOnBarrier(eq(6L), any(CheckpointDeclineOnCancellationBarrierException.class)).     assertEquals(0L, buffer.getAlignmentDurationNanos()).     // all done     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
false;public;0;77;;@Test public void testAbortViaQueuedBarriers() throws Exception {     BufferOrEvent[] sequence = { /* 0 */     createBuffer(1, PAGE_SIZE), /* 1 */     createBarrier(1, 1), createBarrier(1, 2), /* 3 */     createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), /* 6 */     createCancellationBarrier(2, 2), /* 7 */     createBarrier(2, 1), /* 8 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), /* 11 */     createBarrier(1, 0), /* 12 */     createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), /* 15 */     createBarrier(2, 0), /* 16 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     AbstractInvokable toNotify = mock(AbstractInvokable.class).     buffer.registerCheckpointEventHandler(toNotify).     long startTs.     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     // starting first checkpoint     startTs = System.nanoTime().     check(sequence[4], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[8], buffer.getNextNonBlocked(), PAGE_SIZE).     // finished first checkpoint     check(sequence[3], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(1L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     // re-read the queued cancellation barriers     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).abortCheckpointOnBarrier(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class)).     assertEquals(0L, buffer.getAlignmentDurationNanos()).     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[14], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[17], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     // no further alignment should have happened     assertEquals(0L, buffer.getAlignmentDurationNanos()).     // no further checkpoint (abort) notifications     verify(toNotify, times(1)).triggerCheckpointOnBarrier(any(CheckpointMetaData.class), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     verify(toNotify, times(1)).abortCheckpointOnBarrier(anyLong(), any(CheckpointDeclineOnCancellationBarrierException.class)).     // all done     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup(). }
true;public;0;85;/**  * This tests the where a replay of queued checkpoint barriers meets  * a canceled checkpoint.  *  * <p>The replayed newer checkpoint barrier must not try to cancel the  * already canceled checkpoint.  */ ;/**  * This tests the where a replay of queued checkpoint barriers meets  * a canceled checkpoint.  *  * <p>The replayed newer checkpoint barrier must not try to cancel the  * already canceled checkpoint.  */ @Test public void testAbortWhileHavingQueuedBarriers() throws Exception {     BufferOrEvent[] sequence = { /*  0 */     createBuffer(1, PAGE_SIZE), /*  1 */     createBarrier(1, 1), /*  2 */     createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), /*  5 */     createBarrier(2, 1), /*  6 */     createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), /*  8 */     createCancellationBarrier(1, 0), /*  9 */     createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), /* 12 */     createBarrier(1, 2), /* 13 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), /* 16 */     createBarrier(2, 0), createBarrier(2, 2), /* 18 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     AbstractInvokable toNotify = mock(AbstractInvokable.class).     buffer.registerCheckpointEventHandler(toNotify).     long startTs.     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     // starting first checkpoint     startTs = System.nanoTime().     check(sequence[2], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[3], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[6], buffer.getNextNonBlocked(), PAGE_SIZE).     // cancelled by cancellation barrier     check(sequence[4], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     verify(toNotify).abortCheckpointOnBarrier(eq(1L), any(CheckpointDeclineOnCancellationBarrierException.class)).     // the next checkpoint alignment starts now     startTs = System.nanoTime().     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[11], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[15], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint done     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     verify(toNotify).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(2L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     // queued data     check(sequence[10], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[14], buffer.getNextNonBlocked(), PAGE_SIZE).     // trailing data     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[19], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[20], buffer.getNextNonBlocked(), PAGE_SIZE).     // all done     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup().     // check overall notifications     verify(toNotify, times(1)).triggerCheckpointOnBarrier(any(CheckpointMetaData.class), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     verify(toNotify, times(1)).abortCheckpointOnBarrier(anyLong(), any(Throwable.class)). }
true;public;0;75;/**  * This tests the where a cancellation barrier is received for a checkpoint already  * canceled due to receiving a newer checkpoint barrier.  */ ;/**  * This tests the where a cancellation barrier is received for a checkpoint already  * canceled due to receiving a newer checkpoint barrier.  */ @Test public void testIgnoreCancelBarrierIfCheckpointSubsumed() throws Exception {     BufferOrEvent[] sequence = { /*  0 */     createBuffer(2, PAGE_SIZE), /*  1 */     createBarrier(3, 1), createBarrier(3, 0), /*  3 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE), /*  6 */     createBarrier(5, 2), /*  7 */     createBuffer(2, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(0, PAGE_SIZE), /* 10 */     createCancellationBarrier(3, 2), /* 11 */     createBuffer(2, PAGE_SIZE), createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), /* 14 */     createBarrier(5, 0), createBarrier(5, 1), /* 16 */     createBuffer(0, PAGE_SIZE), createBuffer(1, PAGE_SIZE), createBuffer(2, PAGE_SIZE) }.     MockInputGate gate = new MockInputGate(PAGE_SIZE, 3, Arrays.asList(sequence)).     BarrierBuffer buffer = createBarrierHandler(gate).     AbstractInvokable toNotify = mock(AbstractInvokable.class).     buffer.registerCheckpointEventHandler(toNotify).     long startTs.     // validate the sequence     check(sequence[0], buffer.getNextNonBlocked(), PAGE_SIZE).     // beginning of first checkpoint     check(sequence[5], buffer.getNextNonBlocked(), PAGE_SIZE).     // future barrier aborts checkpoint     startTs = System.nanoTime().     check(sequence[3], buffer.getNextNonBlocked(), PAGE_SIZE).     verify(toNotify, times(1)).abortCheckpointOnBarrier(eq(3L), any(CheckpointDeclineSubsumedException.class)).     check(sequence[4], buffer.getNextNonBlocked(), PAGE_SIZE).     // alignment of next checkpoint     check(sequence[8], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[9], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[12], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[13], buffer.getNextNonBlocked(), PAGE_SIZE).     // checkpoint finished     check(sequence[7], buffer.getNextNonBlocked(), PAGE_SIZE).     validateAlignmentTime(startTs, buffer.getAlignmentDurationNanos()).     verify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(5L)), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     check(sequence[11], buffer.getNextNonBlocked(), PAGE_SIZE).     // remaining data     check(sequence[16], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[17], buffer.getNextNonBlocked(), PAGE_SIZE).     check(sequence[18], buffer.getNextNonBlocked(), PAGE_SIZE).     // all done     assertNull(buffer.getNextNonBlocked()).     assertNull(buffer.getNextNonBlocked()).     buffer.cleanup().     // check overall notifications     verify(toNotify, times(1)).triggerCheckpointOnBarrier(any(CheckpointMetaData.class), any(CheckpointOptions.class), any(CheckpointMetrics.class)).     verify(toNotify, times(1)).abortCheckpointOnBarrier(anyLong(), any(Throwable.class)). }
false;private,static;2;4;;// ------------------------------------------------------------------------ // Utils // ------------------------------------------------------------------------ private static BufferOrEvent createBarrier(long checkpointId, int channel) {     return new BufferOrEvent(new CheckpointBarrier(checkpointId, System.currentTimeMillis(), CheckpointOptions.forCheckpointWithDefaultLocation()), channel). }
false;private,static;2;3;;private static BufferOrEvent createCancellationBarrier(long checkpointId, int channel) {     return new BufferOrEvent(new CancelCheckpointMarker(checkpointId), channel). }
false;private,static;2;16;;private static BufferOrEvent createBuffer(int channel, int pageSize) {     final int size = sizeCounter++.     byte[] bytes = new byte[size].     RND.nextBytes(bytes).     MemorySegment memory = MemorySegmentFactory.allocateUnpooledSegment(pageSize).     memory.put(0, bytes).     Buffer buf = new NetworkBuffer(memory, FreeingBufferRecycler.INSTANCE).     buf.setSize(size).     // retain an additional time so it does not get disposed after being read by the input gate     buf.retainBuffer().     return new BufferOrEvent(buf, channel). }
false;private,static;1;3;;private static BufferOrEvent createEndOfPartition(int channel) {     return new BufferOrEvent(EndOfPartitionEvent.INSTANCE, channel). }
false;private,static;3;15;;private static void check(BufferOrEvent expected, BufferOrEvent present, int pageSize) {     assertNotNull(expected).     assertNotNull(present).     assertEquals(expected.isBuffer(), present.isBuffer()).     if (expected.isBuffer()) {         assertEquals(expected.getBuffer().getMaxCapacity(), present.getBuffer().getMaxCapacity()).         assertEquals(expected.getBuffer().getSize(), present.getBuffer().getSize()).         MemorySegment expectedMem = expected.getBuffer().getMemorySegment().         MemorySegment presentMem = present.getBuffer().getMemorySegment().         assertTrue("memory contents differs", expectedMem.compare(presentMem, 0, 0, pageSize) == 0).     } else {         assertEquals(expected.getEvent(), present.getEvent()).     } }
false;private,static;2;4;;private static void validateAlignmentTime(long startTimestamp, long alignmentDuration) {     final long elapsed = System.nanoTime() - startTimestamp.     assertTrue("wrong alignment time", alignmentDuration <= elapsed). }
false;public;1;3;;public void setNextExpectedCheckpointId(long nextExpectedCheckpointId) {     this.nextExpectedCheckpointId = nextExpectedCheckpointId. }
false;public;0;3;;public long getNextExpectedCheckpointId() {     return nextExpectedCheckpointId. }
false;;0;3;;long getLastReportedBytesBufferedInAlignment() {     return lastReportedBytesBufferedInAlignment. }
false;public;0;4;;@Override public void invoke() {     throw new UnsupportedOperationException(). }
false;public;2;6;;@Override public boolean triggerCheckpoint(CheckpointMetaData checkpointMetaData, CheckpointOptions checkpointOptions) throws Exception {     throw new UnsupportedOperationException("should never be called"). }
false;public;3;15;;@Override public void triggerCheckpointOnBarrier(CheckpointMetaData checkpointMetaData, CheckpointOptions checkpointOptions, CheckpointMetrics checkpointMetrics) throws Exception {     assertTrue("wrong checkpoint id", nextExpectedCheckpointId == -1L || nextExpectedCheckpointId == checkpointMetaData.getCheckpointId()).     assertTrue(checkpointMetaData.getTimestamp() > 0).     assertTrue(checkpointMetrics.getBytesBufferedInAlignment() >= 0).     assertTrue(checkpointMetrics.getAlignmentDurationNanos() >= 0).     nextExpectedCheckpointId++.     lastReportedBytesBufferedInAlignment = checkpointMetrics.getBytesBufferedInAlignment(). }
false;public;2;2;;@Override public void abortCheckpointOnBarrier(long checkpointId, Throwable cause) { }
false;public;1;4;;@Override public void notifyCheckpointComplete(long checkpointId) throws Exception {     throw new UnsupportedOperationException("should never be called"). }
false;public;1;6;;@Override public boolean matches(Object o) {     return o != null && o.getClass() == CheckpointMetaData.class && ((CheckpointMetaData) o).getCheckpointId() == checkpointId. }
false;public;1;4;;@Override public void describeTo(Description description) {     description.appendText("CheckpointMetaData - id = " + checkpointId). }
