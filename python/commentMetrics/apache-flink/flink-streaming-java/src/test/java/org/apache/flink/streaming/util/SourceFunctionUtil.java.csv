commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;8;;public static <T extends Serializable> List<T> runSourceFunction(SourceFunction<T> sourceFunction) throws Exception {     if (sourceFunction instanceof RichFunction) {         return runRichSourceFunction(sourceFunction).     } else {         return runNonRichSourceFunction(sourceFunction).     } }
false;private,static;1;22;;private static <T extends Serializable> List<T> runRichSourceFunction(SourceFunction<T> sourceFunction) throws Exception {     try (MockEnvironment environment = new MockEnvironmentBuilder().setTaskName("MockTask").setMemorySize(3 * 1024 * 1024).setInputSplitProvider(new MockInputSplitProvider()).setBufferSize(1024).build()) {         AbstractStreamOperator<?> operator = mock(AbstractStreamOperator.class).         when(operator.getExecutionConfig()).thenReturn(new ExecutionConfig()).         RuntimeContext runtimeContext = new StreamingRuntimeContext(operator, environment, new HashMap<>()).         ((RichFunction) sourceFunction).setRuntimeContext(runtimeContext).         ((RichFunction) sourceFunction).open(new Configuration()).         return runNonRichSourceFunction(sourceFunction).     } }
false;private,static;1;10;;private static <T extends Serializable> List<T> runNonRichSourceFunction(SourceFunction<T> sourceFunction) {     final List<T> outputs = new ArrayList<>().     try {         SourceFunction.SourceContext<T> ctx = new CollectingSourceContext<T>(new Object(), outputs).         sourceFunction.run(ctx).     } catch (Exception e) {         throw new RuntimeException("Cannot invoke source.", e).     }     return outputs. }
