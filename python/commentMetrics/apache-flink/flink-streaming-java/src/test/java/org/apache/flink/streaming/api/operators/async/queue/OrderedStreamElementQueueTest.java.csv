# id;timestamp;commentText;codeText;commentWords;codeWords
OrderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1482206691;Tests that only the head element is pulled from the ordered queue if it has been_completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4, executor, operatorActions)___		StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))___		List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1, entry2, entry3, entry4)___		for (StreamElementQueueEntry<?> entry : expected) {_			queue.put(entry)__		}__		Future<List<AsyncResult>> pollOperation = FlinkFuture.supplyAsync(new Callable<List<AsyncResult>>() {_			@Override_			public List<AsyncResult> call() throws Exception {_				List<AsyncResult> result = new ArrayList<>(4)__				while (!queue.isEmpty()) {_					result.add(queue.poll())__				}__				return result__			}_		}, executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		entry2.collect(Collections.<Integer>emptyList())___		entry4.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertEquals(4, queue.size())___		entry1.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(expected, pollOperation.get())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,the,head,element,is,pulled,from,the,ordered,queue,if,it,has,been,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,ordered,stream,element,queue,queue,new,ordered,stream,element,queue,4,executor,operator,actions,stream,record,queue,entry,integer,entry1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,entry2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,entry3,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,entry4,new,stream,record,queue,entry,new,stream,record,3,3l,list,stream,element,queue,entry,expected,arrays,as,list,entry1,entry2,entry3,entry4,for,stream,element,queue,entry,entry,expected,queue,put,entry,future,list,async,result,poll,operation,flink,future,supply,async,new,callable,list,async,result,override,public,list,async,result,call,throws,exception,list,async,result,result,new,array,list,4,while,queue,is,empty,result,add,queue,poll,return,result,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,entry2,collect,collections,integer,empty,list,entry4,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,equals,4,queue,size,entry1,collect,collections,integer,empty,list,assert,assert,equals,expected,poll,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
OrderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1495484544;Tests that only the head element is pulled from the ordered queue if it has been_completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4, executor, operatorActions)___		StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))___		List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1, entry2, entry3, entry4)___		for (StreamElementQueueEntry<?> entry : expected) {_			queue.put(entry)__		}__		Future<List<AsyncResult>> pollOperation = FlinkFuture.supplyAsync(new Callable<List<AsyncResult>>() {_			@Override_			public List<AsyncResult> call() throws Exception {_				List<AsyncResult> result = new ArrayList<>(4)__				while (!queue.isEmpty()) {_					result.add(queue.poll())__				}__				return result__			}_		}, executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		entry2.collect(Collections.<Integer>emptyList())___		entry4.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertEquals(4, queue.size())___		entry1.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(expected, pollOperation.get())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,the,head,element,is,pulled,from,the,ordered,queue,if,it,has,been,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,ordered,stream,element,queue,queue,new,ordered,stream,element,queue,4,executor,operator,actions,stream,record,queue,entry,integer,entry1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,entry2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,entry3,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,entry4,new,stream,record,queue,entry,new,stream,record,3,3l,list,stream,element,queue,entry,expected,arrays,as,list,entry1,entry2,entry3,entry4,for,stream,element,queue,entry,entry,expected,queue,put,entry,future,list,async,result,poll,operation,flink,future,supply,async,new,callable,list,async,result,override,public,list,async,result,call,throws,exception,list,async,result,result,new,array,list,4,while,queue,is,empty,result,add,queue,poll,return,result,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,entry2,collect,collections,integer,empty,list,entry4,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,equals,4,queue,size,entry1,collect,collections,integer,empty,list,assert,assert,equals,expected,poll,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
OrderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1501760738;Tests that only the head element is pulled from the ordered queue if it has been_completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4, executor, operatorActions)___		StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))___		List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1, entry2, entry3, entry4)___		for (StreamElementQueueEntry<?> entry : expected) {_			queue.put(entry)__		}__		CompletableFuture<List<AsyncResult>> pollOperation = CompletableFuture.supplyAsync(_			() -> {_				List<AsyncResult> result = new ArrayList<>(4)__				while (!queue.isEmpty()) {_					try {_						result.add(queue.poll())__					} catch (InterruptedException e) {_						throw new FlinkFutureException(e)__					}_				}__				return result__			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		entry2.collect(Collections.<Integer>emptyList())___		entry4.collect(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertEquals(4, queue.size())___		entry1.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(expected, pollOperation.get())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,the,head,element,is,pulled,from,the,ordered,queue,if,it,has,been,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,ordered,stream,element,queue,queue,new,ordered,stream,element,queue,4,executor,operator,actions,stream,record,queue,entry,integer,entry1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,entry2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,entry3,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,entry4,new,stream,record,queue,entry,new,stream,record,3,3l,list,stream,element,queue,entry,expected,arrays,as,list,entry1,entry2,entry3,entry4,for,stream,element,queue,entry,entry,expected,queue,put,entry,completable,future,list,async,result,poll,operation,completable,future,supply,async,list,async,result,result,new,array,list,4,while,queue,is,empty,try,result,add,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,return,result,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,entry2,collect,collections,integer,empty,list,entry4,collect,collections,integer,empty,list,thread,sleep,10l,assert,assert,equals,4,queue,size,entry1,collect,collections,integer,empty,list,assert,assert,equals,expected,poll,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
OrderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1503407113;Tests that only the head element is pulled from the ordered queue if it has been_completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4, executor, operatorActions)___		StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))___		List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1, entry2, entry3, entry4)___		for (StreamElementQueueEntry<?> entry : expected) {_			queue.put(entry)__		}__		CompletableFuture<List<AsyncResult>> pollOperation = CompletableFuture.supplyAsync(_			() -> {_				List<AsyncResult> result = new ArrayList<>(4)__				while (!queue.isEmpty()) {_					try {_						result.add(queue.poll())__					} catch (InterruptedException e) {_						throw new FlinkFutureException(e)__					}_				}__				return result__			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		entry2.complete(Collections.<Integer>emptyList())___		entry4.complete(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertEquals(4, queue.size())___		entry1.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(expected, pollOperation.get())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,the,head,element,is,pulled,from,the,ordered,queue,if,it,has,been,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,ordered,stream,element,queue,queue,new,ordered,stream,element,queue,4,executor,operator,actions,stream,record,queue,entry,integer,entry1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,entry2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,entry3,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,entry4,new,stream,record,queue,entry,new,stream,record,3,3l,list,stream,element,queue,entry,expected,arrays,as,list,entry1,entry2,entry3,entry4,for,stream,element,queue,entry,entry,expected,queue,put,entry,completable,future,list,async,result,poll,operation,completable,future,supply,async,list,async,result,result,new,array,list,4,while,queue,is,empty,try,result,add,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,return,result,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,entry2,complete,collections,integer,empty,list,entry4,complete,collections,integer,empty,list,thread,sleep,10l,assert,assert,equals,4,queue,size,entry1,complete,collections,integer,empty,list,assert,assert,equals,expected,poll,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
OrderedStreamElementQueueTest -> @Test 	public void testCompletionOrder() throws Exception;1506417942;Tests that only the head element is pulled from the ordered queue if it has been_completed.;@Test_	public void testCompletionOrder() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4, executor, operatorActions)___		StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__		StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__		WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))__		StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 3L))___		List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1, entry2, entry3, entry4)___		for (StreamElementQueueEntry<?> entry : expected) {_			queue.put(entry)__		}__		CompletableFuture<List<AsyncResult>> pollOperation = CompletableFuture.supplyAsync(_			() -> {_				List<AsyncResult> result = new ArrayList<>(4)__				while (!queue.isEmpty()) {_					try {_						result.add(queue.poll())__					} catch (InterruptedException e) {_						throw new CompletionException(e)__					}_				}__				return result__			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		entry2.complete(Collections.<Integer>emptyList())___		entry4.complete(Collections.<Integer>emptyList())___		Thread.sleep(10L)___		Assert.assertEquals(4, queue.size())___		entry1.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(expected, pollOperation.get())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,only,the,head,element,is,pulled,from,the,ordered,queue,if,it,has,been,completed;test,public,void,test,completion,order,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,ordered,stream,element,queue,queue,new,ordered,stream,element,queue,4,executor,operator,actions,stream,record,queue,entry,integer,entry1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,entry2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,entry3,new,watermark,queue,entry,new,watermark,2l,stream,record,queue,entry,integer,entry4,new,stream,record,queue,entry,new,stream,record,3,3l,list,stream,element,queue,entry,expected,arrays,as,list,entry1,entry2,entry3,entry4,for,stream,element,queue,entry,entry,expected,queue,put,entry,completable,future,list,async,result,poll,operation,completable,future,supply,async,list,async,result,result,new,array,list,4,while,queue,is,empty,try,result,add,queue,poll,catch,interrupted,exception,e,throw,new,completion,exception,e,return,result,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,entry2,complete,collections,integer,empty,list,entry4,complete,collections,integer,empty,list,thread,sleep,10l,assert,assert,equals,4,queue,size,entry1,complete,collections,integer,empty,list,assert,assert,equals,expected,poll,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
