commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     RESTORED_OPERATORS.clear(). }
false;public;0;26;;@Test public void testRestore() throws Exception {     OperatorID headOperatorID = new OperatorID(42L, 42L).     OperatorID tailOperatorID = new OperatorID(44L, 44L).     JobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(headOperatorID, new CounterOperator(), tailOperatorID, new CounterOperator(), Optional.empty()).     TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot().     assertEquals(2, stateHandles.getSubtaskStateMappings().size()).     createRunAndCheckpointOperatorChain(headOperatorID, new CounterOperator(), tailOperatorID, new CounterOperator(), Optional.of(restore)).     assertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS). }
false;public;0;25;;@Test public void testRestoreHeadWithNewId() throws Exception {     OperatorID tailOperatorID = new OperatorID(44L, 44L).     JobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(new OperatorID(42L, 42L), new CounterOperator(), tailOperatorID, new CounterOperator(), Optional.empty()).     TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot().     assertEquals(2, stateHandles.getSubtaskStateMappings().size()).     createRunAndCheckpointOperatorChain(new OperatorID(4242L, 4242L), new CounterOperator(), tailOperatorID, new CounterOperator(), Optional.of(restore)).     assertEquals(Collections.singleton(tailOperatorID), RESTORED_OPERATORS). }
false;public;0;23;;@Test public void testRestoreTailWithNewId() throws Exception {     OperatorID headOperatorID = new OperatorID(42L, 42L).     JobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(headOperatorID, new CounterOperator(), new OperatorID(44L, 44L), new CounterOperator(), Optional.empty()).     TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot().     assertEquals(2, stateHandles.getSubtaskStateMappings().size()).     createRunAndCheckpointOperatorChain(headOperatorID, new CounterOperator(), new OperatorID(4444L, 4444L), new CounterOperator(), Optional.of(restore)).     assertEquals(Collections.singleton(headOperatorID), RESTORED_OPERATORS). }
false;public;0;35;;@Test public void testRestoreAfterScaleUp() throws Exception {     OperatorID headOperatorID = new OperatorID(42L, 42L).     OperatorID tailOperatorID = new OperatorID(44L, 44L).     JobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(headOperatorID, new CounterOperator(), tailOperatorID, new CounterOperator(), Optional.empty()).     TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot().     assertEquals(2, stateHandles.getSubtaskStateMappings().size()).     // test empty state in case of scale up     OperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(new OperatorInstanceID(0, headOperatorID), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap()).     stateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState).     createRunAndCheckpointOperatorChain(headOperatorID, new CounterOperator(), tailOperatorID, new CounterOperator(), Optional.of(restore)).     assertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS). }
false;public;0;24;;@Test public void testRestoreWithoutState() throws Exception {     OperatorID headOperatorID = new OperatorID(42L, 42L).     OperatorID tailOperatorID = new OperatorID(44L, 44L).     JobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(headOperatorID, new StatelessOperator(), tailOperatorID, new CounterOperator(), Optional.empty()).     TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot().     assertEquals(2, stateHandles.getSubtaskStateMappings().size()).     createRunAndCheckpointOperatorChain(headOperatorID, new StatelessOperator(), tailOperatorID, new CounterOperator(), Optional.of(restore)).     assertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS). }
false;private;5;52;;private JobManagerTaskRestore createRunAndCheckpointOperatorChain(OperatorID headId, OneInputStreamOperator<String, String> headOperator, OperatorID tailId, OneInputStreamOperator<String, String> tailOperator, Optional<JobManagerTaskRestore> restore) throws Exception {     final OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, 1, 1, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO).     testHarness.setupOperatorChain(headId, headOperator).chain(tailId, tailOperator, StringSerializer.INSTANCE).finish().     if (restore.isPresent()) {         JobManagerTaskRestore taskRestore = restore.get().         testHarness.setTaskStateSnapshot(taskRestore.getRestoreCheckpointId(), taskRestore.getTaskStateSnapshot()).     }     StreamMockEnvironment environment = new StreamMockEnvironment(testHarness.jobConfig, testHarness.taskConfig, testHarness.executionConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, testHarness.taskStateManager).     testHarness.invoke(environment).     testHarness.waitForTaskRunning().     OneInputStreamTask<String, String> streamTask = testHarness.getTask().     processRecords(testHarness).     triggerCheckpoint(testHarness, streamTask).     TestTaskStateManager taskStateManager = testHarness.taskStateManager.     JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(taskStateManager.getReportedCheckpointId(), taskStateManager.getLastJobManagerTaskStateSnapshot()).     testHarness.endInput().     testHarness.waitForTaskCompletion().     return jobManagerTaskRestore. }
false;private;2;16;;private void triggerCheckpoint(OneInputStreamTaskTestHarness<String, String> testHarness, OneInputStreamTask<String, String> streamTask) throws Exception {     long checkpointId = 1L.     CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, 1L).     testHarness.taskStateManager.setWaitForReportLatch(new OneShotLatch()).     while (!streamTask.triggerCheckpoint(checkpointMetaData, CheckpointOptions.forCheckpointWithDefaultLocation())) {     }     testHarness.taskStateManager.getWaitForReportLatch().await().     long reportedCheckpointId = testHarness.taskStateManager.getReportedCheckpointId().     assertEquals(checkpointId, reportedCheckpointId). }
false;private;1;14;;private void processRecords(OneInputStreamTaskTestHarness<String, String> testHarness) throws Exception {     ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>().     testHarness.processElement(new StreamRecord<>("10"), 0, 0).     testHarness.processElement(new StreamRecord<>("20"), 0, 0).     testHarness.processElement(new StreamRecord<>("30"), 0, 0).     testHarness.waitForInputProcessing().     expectedOutput.add(new StreamRecord<>("10")).     expectedOutput.add(new StreamRecord<>("20")).     expectedOutput.add(new StreamRecord<>("30")).     TestHarnessUtil.assertOutputEquals("Output was not correct.", expectedOutput, testHarness.getOutput()). }
false;public;1;6;;@Override public void initializeState(StateInitializationContext context) throws Exception {     if (context.isRestored()) {         RESTORED_OPERATORS.add(getOperatorID()).     } }
false;public;1;5;;@Override public void processElement(StreamRecord<String> element) throws Exception {     counter++.     output.collect(element). }
false;public;1;15;;@Override public void initializeState(StateInitializationContext context) throws Exception {     super.initializeState(context).     counterState = context.getOperatorStateStore().getListState(new ListStateDescriptor<>("counter-state", LongSerializer.INSTANCE)).     if (context.isRestored()) {         for (Long value : counterState.get()) {             counter += value.         }         counterState.clear().     } }
false;public;1;4;;@Override public void snapshotState(StateSnapshotContext context) throws Exception {     counterState.add(counter). }
false;public;1;4;;@Override public void processElement(StreamRecord<String> element) throws Exception {     output.collect(element). }
false;public;1;3;;@Override public void snapshotState(StateSnapshotContext context) throws Exception { }
