commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testSideOutputAfterSelectIsForbidden() {     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     SingleOutputStreamOperator<String> processInput = env.fromElements("foo").process(new DummyProcessFunction()).     processInput.split(Collections::singleton).     try {         processInput.getSideOutput(outputTag).         Assert.fail("Should have failed early with an exception.").     } catch (UnsupportedOperationException expected) {     // expected     } }
false;public;0;16;;@Test public void testSelectAfterSideOutputIsForbidden() {     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     SingleOutputStreamOperator<String> processInput = env.fromElements("foo").process(new DummyProcessFunction()).     processInput.getSideOutput(outputTag).     try {         processInput.split(Collections::singleton).         Assert.fail("Should have failed early with an exception.").     } catch (UnsupportedOperationException expected) {     // expected     } }
false;public;3;3;;@Override public void processElement(String value, Context ctx, Collector<String> out) throws Exception { }
