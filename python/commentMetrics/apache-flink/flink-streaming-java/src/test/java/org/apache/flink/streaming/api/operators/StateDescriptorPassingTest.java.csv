commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public File fold(File a, String e) {     return null. }
false;public;1;4;;@Override public String getKey(String value) {     return null. }
false;public;0;26;;@Test public void testFoldWindowState() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.registerTypeWithKryoSerializer(File.class, JavaSerializer.class).     DataStream<String> src = env.fromElements("abc").     SingleOutputStreamOperator<?> result = src.keyBy(new KeySelector<String, String>() {          @Override         public String getKey(String value) {             return null.         }     }).timeWindow(Time.milliseconds(1000)).fold(new File("/"), new FoldFunction<String, File>() {          @Override         public File fold(File a, String e) {             return null.         }     }).     validateStateDescriptorConfigured(result). }
false;public;2;4;;@Override public File reduce(File value1, File value2) {     return null. }
false;public;1;4;;@Override public String getKey(File value) {     return null. }
false;public;0;26;;@Test public void testReduceWindowState() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.registerTypeWithKryoSerializer(File.class, JavaSerializer.class).     DataStream<File> src = env.fromElements(new File("/")).     SingleOutputStreamOperator<?> result = src.keyBy(new KeySelector<File, String>() {          @Override         public String getKey(File value) {             return null.         }     }).timeWindow(Time.milliseconds(1000)).reduce(new ReduceFunction<File>() {          @Override         public File reduce(File value1, File value2) {             return null.         }     }).     validateStateDescriptorConfigured(result). }
false;public;4;3;;@Override public void apply(String s, TimeWindow window, Iterable<File> input, Collector<String> out) { }
false;public;1;4;;@Override public String getKey(File value) {     return null. }
false;public;0;24;;@Test public void testApplyWindowState() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.registerTypeWithKryoSerializer(File.class, JavaSerializer.class).     DataStream<File> src = env.fromElements(new File("/")).     SingleOutputStreamOperator<?> result = src.keyBy(new KeySelector<File, String>() {          @Override         public String getKey(File value) {             return null.         }     }).timeWindow(Time.milliseconds(1000)).apply(new WindowFunction<File, String, String, TimeWindow>() {          @Override         public void apply(String s, TimeWindow window, Iterable<File> input, Collector<String> out) {         }     }).     validateListStateDescriptorConfigured(result). }
false;public;4;3;;@Override public void process(String s, Context ctx, Iterable<File> input, Collector<String> out) { }
false;public;1;4;;@Override public String getKey(File value) {     return null. }
false;public;0;24;;@Test public void testProcessWindowState() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.registerTypeWithKryoSerializer(File.class, JavaSerializer.class).     DataStream<File> src = env.fromElements(new File("/")).     SingleOutputStreamOperator<?> result = src.keyBy(new KeySelector<File, String>() {          @Override         public String getKey(File value) {             return null.         }     }).timeWindow(Time.milliseconds(1000)).process(new ProcessWindowFunction<File, String, String, TimeWindow>() {          @Override         public void process(String s, Context ctx, Iterable<File> input, Collector<String> out) {         }     }).     validateListStateDescriptorConfigured(result). }
false;public;3;2;;@Override public void process(Context ctx, Iterable<File> input, Collector<String> out) { }
false;public;0;17;;@Test public void testProcessAllWindowState() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.registerTypeWithKryoSerializer(File.class, JavaSerializer.class).     DataStream<File> src = env.fromElements(new File("/")).     SingleOutputStreamOperator<?> result = src.timeWindowAll(Time.milliseconds(1000)).process(new ProcessAllWindowFunction<File, String, TimeWindow>() {          @Override         public void process(Context ctx, Iterable<File> input, Collector<String> out) {         }     }).     validateListStateDescriptorConfigured(result). }
false;public;2;4;;@Override public File fold(File a, String e) {     return null. }
false;public;0;20;;@Test public void testFoldWindowAllState() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.registerTypeWithKryoSerializer(File.class, JavaSerializer.class).     DataStream<String> src = env.fromElements("abc").     SingleOutputStreamOperator<?> result = src.timeWindowAll(Time.milliseconds(1000)).fold(new File("/"), new FoldFunction<String, File>() {          @Override         public File fold(File a, String e) {             return null.         }     }).     validateStateDescriptorConfigured(result). }
false;public;2;4;;@Override public File reduce(File value1, File value2) {     return null. }
false;public;0;20;;@Test public void testReduceWindowAllState() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.registerTypeWithKryoSerializer(File.class, JavaSerializer.class).     DataStream<File> src = env.fromElements(new File("/")).     SingleOutputStreamOperator<?> result = src.timeWindowAll(Time.milliseconds(1000)).reduce(new ReduceFunction<File>() {          @Override         public File reduce(File value1, File value2) {             return null.         }     }).     validateStateDescriptorConfigured(result). }
false;public;3;2;;@Override public void apply(TimeWindow window, Iterable<File> input, Collector<String> out) { }
false;public;0;17;;@Test public void testApplyWindowAllState() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime).     env.registerTypeWithKryoSerializer(File.class, JavaSerializer.class).     DataStream<File> src = env.fromElements(new File("/")).     SingleOutputStreamOperator<?> result = src.timeWindowAll(Time.milliseconds(1000)).apply(new AllWindowFunction<File, String, TimeWindow>() {          @Override         public void apply(TimeWindow window, Iterable<File> input, Collector<String> out) {         }     }).     validateListStateDescriptorConfigured(result). }
false;private;1;14;;// ------------------------------------------------------------------------ // generic validation // ------------------------------------------------------------------------ private void validateStateDescriptorConfigured(SingleOutputStreamOperator<?> result) {     OneInputTransformation<?, ?> transform = (OneInputTransformation<?, ?>) result.getTransformation().     WindowOperator<?, ?, ?, ?, ?> op = (WindowOperator<?, ?, ?, ?, ?>) transform.getOperator().     StateDescriptor<?, ?> descr = op.getStateDescriptor().     // this would be the first statement to fail if state descriptors were not properly initialized     TypeSerializer<?> serializer = descr.getSerializer().     assertTrue(serializer instanceof KryoSerializer).     Kryo kryo = ((KryoSerializer<?>) serializer).getKryo().     assertTrue("serializer registration was not properly passed on", kryo.getSerializer(File.class) instanceof JavaSerializer). }
false;private;1;21;;private void validateListStateDescriptorConfigured(SingleOutputStreamOperator<?> result) {     OneInputTransformation<?, ?> transform = (OneInputTransformation<?, ?>) result.getTransformation().     WindowOperator<?, ?, ?, ?, ?> op = (WindowOperator<?, ?, ?, ?, ?>) transform.getOperator().     StateDescriptor<?, ?> descr = op.getStateDescriptor().     assertTrue(descr instanceof ListStateDescriptor).     ListStateDescriptor<?> listDescr = (ListStateDescriptor<?>) descr.     // this would be the first statement to fail if state descriptors were not properly initialized     TypeSerializer<?> serializer = listDescr.getSerializer().     assertTrue(serializer instanceof ListSerializer).     TypeSerializer<?> elementSerializer = listDescr.getElementSerializer().     assertTrue(elementSerializer instanceof KryoSerializer).     Kryo kryo = ((KryoSerializer<?>) elementSerializer).getKryo().     assertTrue("serializer registration was not properly passed on", kryo.getSerializer(File.class) instanceof JavaSerializer). }
