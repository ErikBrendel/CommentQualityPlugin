commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public String getKey(Tuple2<String, Integer> value) throws Exception {     return value.getField(0). }
false;public;0;13;;@Before public void setPartitioner() {     keyGroupPartitioner = new KeyGroupStreamPartitioner<>(new KeySelector<Tuple2<String, Integer>, String>() {          private static final long serialVersionUID = 1L.          @Override         public String getKey(Tuple2<String, Integer> value) throws Exception {             return value.getField(0).         }     }, 1024). }
false;public;0;9;;@Test public void testSelectChannelsGrouping() {     serializationDelegate1.setInstance(streamRecord1).     serializationDelegate2.setInstance(streamRecord2).     assertEquals(selectChannels(serializationDelegate1, 1), selectChannels(serializationDelegate2, 1)).     assertEquals(selectChannels(serializationDelegate1, 2), selectChannels(serializationDelegate2, 2)).     assertEquals(selectChannels(serializationDelegate1, 1024), selectChannels(serializationDelegate2, 1024)). }
false;private;2;6;;private int selectChannels(SerializationDelegate<StreamRecord<Tuple2<String, Integer>>> serializationDelegate, int numberOfChannels) {     keyGroupPartitioner.setup(numberOfChannels).     return keyGroupPartitioner.selectChannel(serializationDelegate). }
