# id;timestamp;commentText;codeText;commentWords;codeWords
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1445418103;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1446112342;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1449062271;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1453902315;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1454960195;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1456247173;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1456347641;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1457737669;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1466089084;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1467040572;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1472663071;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1474635666;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1474635666;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1477066248;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1477069384;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1478257462;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1478636134;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1480624969;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1482206647;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1486732842;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1489819457;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1493236605;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1495484544;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1502801814;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1508850403;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1513094459;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1513102157;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1513102158;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1515519059;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1516626397;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1519039285;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1519568061;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element);1531381123;Sends the element to input gate 0 on channel 0.;@SuppressWarnings("unchecked")_	public void processElement(Object element) {_		inputGates[0].sendElement(element, 0)__	};sends,the,element,to,input,gate,0,on,channel,0;suppress,warnings,unchecked,public,void,process,element,object,element,input,gates,0,send,element,element,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1445418103;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1446112342;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1449062271;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1453902315;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1454960195;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1456247173;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1456347641;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1457737669;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1466089084;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1467040572;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1472663071;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1474635666;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1474635666;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1477066248;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1477069384;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1478257462;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1478636134;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1480624969;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1482206647;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1486732842;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1489819457;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1493236605;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1495484544;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1502801814;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1508850403;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1513094459;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1513102157;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1513102158;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1515519059;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1516626397;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1519039285;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1519568061;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void processEvent(AbstractEvent event, int inputGate, int channel);1531381123;Sends the event to the specified channel on the specified input gate.;public void processEvent(AbstractEvent event, int inputGate, int channel) {_		inputGates[inputGate].sendEvent(event, channel)__	};sends,the,event,to,the,specified,channel,on,the,specified,input,gate;public,void,process,event,abstract,event,event,int,input,gate,int,channel,input,gates,input,gate,send,event,event,channel
StreamTaskTestHarness -> public void endInput();1445418103;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1446112342;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1449062271;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1453902315;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1454960195;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1456247173;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1456347641;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1457737669;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1466089084;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1467040572;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1472663071;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1474635666;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1474635666;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1477066248;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1477069384;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1478257462;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1478636134;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1480624969;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1482206647;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1486732842;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1489819457;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1493236605;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1495484544;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1502801814;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1508850403;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1513094459;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1513102157;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1513102158;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1515519059;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1516626397;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1519039285;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1519568061;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void endInput();1531381123;Notifies all input channels on all input gates that no more input will arrive. This_will usually make the Task exit from his internal loop.;public void endInput() {_		for (int i = 0_ i < numInputGates_ i++) {_			inputGates[i].endInput()__		}_	};notifies,all,input,channels,on,all,input,gates,that,no,more,input,will,arrive,this,will,usually,make,the,task,exit,from,his,internal,loop;public,void,end,input,for,int,i,0,i,num,input,gates,i,input,gates,i,end,input
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1449062271;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		task.registerInputOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,register,input,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1453902315;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1454960195;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1456247173;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1456347641;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1457737669;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1466089084;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1467040572;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1472663071;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1474635666;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1474635666;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1477066248;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1477069384;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1478257462;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1478636134;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1480624969;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1482206647;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1486732842;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1489819457;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1493236605;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1495484544;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1502801814;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1508850403;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1513094459;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1513102157;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1513102158;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = mockEnv___		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,mock,env,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1515519059;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.__<p>Variant for providing a custom environment but no initial state.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		invoke(mockEnv, null)__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running,p,variant,for,providing,a,custom,environment,but,no,initial,state;public,void,invoke,stream,mock,environment,mock,env,throws,exception,invoke,mock,env,null
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1516626397;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = checkNotNull(mockEnv)__		this.task = taskFactory.apply(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,check,not,null,mock,env,this,task,task,factory,apply,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1519039285;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = checkNotNull(mockEnv)___		initializeInputs()__		initializeOutput()___		this.task = taskFactory.apply(mockEnv)___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,check,not,null,mock,env,initialize,inputs,initialize,output,this,task,task,factory,apply,mock,env,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1519568061;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = checkNotNull(mockEnv)___		initializeInputs()__		initializeOutput()___		this.task = taskFactory.apply(mockEnv)___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,check,not,null,mock,env,initialize,inputs,initialize,output,this,task,task,factory,apply,mock,env,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke(StreamMockEnvironment mockEnv) throws Exception;1531381123;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke(StreamMockEnvironment mockEnv) throws Exception {_		this.mockEnv = checkNotNull(mockEnv)___		initializeInputs()__		initializeOutput()___		this.task = taskFactory.apply(mockEnv)___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,stream,mock,environment,mock,env,throws,exception,this,mock,env,check,not,null,mock,env,initialize,inputs,initialize,output,this,task,task,factory,apply,mock,env,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1478636134;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1480624969;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1482206647;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1486732842;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1489819457;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1493236605;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1495484544;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1502801814;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1508850403;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1513094459;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1513102157;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1513102158;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1515519059;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1516626397;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1519039285;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1519568061;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing() throws Exception;1531381123;This only returns after all input queues are empty.;public void waitForInputProcessing() throws Exception {__		while (true) {_			Throwable error = taskThread.getError()__			if (error != null) {_				throw new Exception("Exception in the task thread", error)__			}__			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}__			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,throws,exception,while,true,throwable,error,task,thread,get,error,if,error,null,throw,new,exception,exception,in,the,task,thread,error,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1486732842;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>()))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1489819457;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1493236605;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1495484544;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1502801814;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1508850403;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1513094459;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1513102157;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		Preconditions.checkState(!setupCalled, "This harness was already setup.")__		setupCalled = true__		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,preconditions,check,state,setup,called,this,harness,was,already,setup,setup,called,true,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1513102158;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		Preconditions.checkState(!setupCalled, "This harness was already setup.")__		setupCalled = true__		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,preconditions,check,state,setup,called,this,harness,was,already,setup,setup,called,true,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1515519059;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		Preconditions.checkState(!setupCalled, "This harness was already setup.")__		setupCalled = true__		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,preconditions,check,state,setup,called,this,harness,was,already,setup,setup,called,true,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1516626397;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		Preconditions.checkState(!setupCalled, "This harness was already setup.")__		setupCalled = true__		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,preconditions,check,state,setup,called,this,harness,was,already,setup,setup,called,true,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1519039285;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		Preconditions.checkState(!setupCalled, "This harness was already setup.")__		setupCalled = true__		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,preconditions,check,state,setup,called,this,harness,was,already,setup,setup,called,true,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1519568061;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		Preconditions.checkState(!setupCalled, "This harness was already setup.")__		setupCalled = true__		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,preconditions,check,state,setup,called,this,harness,was,already,setup,setup,called,true,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> public void setupOutputForSingletonOperatorChain();1531381123;Users of the test harness can call this utility method to setup the stream config_if there will only be a single operator to be tested. The method will setup the_outgoing network connection for the operator.__<p>For more advanced test cases such as testing chains of multiple operators with the harness,_please manually configure the stream config.;public void setupOutputForSingletonOperatorChain() {_		Preconditions.checkState(!setupCalled, "This harness was already setup.")__		setupCalled = true__		streamConfig.setChainStart()__		streamConfig.setBufferTimeout(0)__		streamConfig.setTimeCharacteristic(TimeCharacteristic.EventTime)__		streamConfig.setOutputSelectors(Collections.<OutputSelector<?>>emptyList())__		streamConfig.setNumberOfOutputs(1)__		streamConfig.setTypeSerializerOut(outputSerializer)__		streamConfig.setVertexID(0)__		streamConfig.setOperatorID(new OperatorID(4711L, 123L))___		StreamOperator<OUT> dummyOperator = new AbstractStreamOperator<OUT>() {_			private static final long serialVersionUID = 1L__		}___		List<StreamEdge> outEdgesInOrder = new LinkedList<StreamEdge>()__		StreamNode sourceVertexDummy = new StreamNode(null, 0, "group", null, dummyOperator, "source dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)__		StreamNode targetVertexDummy = new StreamNode(null, 1, "group", null, dummyOperator, "target dummy", new LinkedList<OutputSelector<?>>(), SourceStreamTask.class)___		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>(), null ))___		streamConfig.setOutEdgesInOrder(outEdgesInOrder)__		streamConfig.setNonChainedOutputs(outEdgesInOrder)__	};users,of,the,test,harness,can,call,this,utility,method,to,setup,the,stream,config,if,there,will,only,be,a,single,operator,to,be,tested,the,method,will,setup,the,outgoing,network,connection,for,the,operator,p,for,more,advanced,test,cases,such,as,testing,chains,of,multiple,operators,with,the,harness,please,manually,configure,the,stream,config;public,void,setup,output,for,singleton,operator,chain,preconditions,check,state,setup,called,this,harness,was,already,setup,setup,called,true,stream,config,set,chain,start,stream,config,set,buffer,timeout,0,stream,config,set,time,characteristic,time,characteristic,event,time,stream,config,set,output,selectors,collections,output,selector,empty,list,stream,config,set,number,of,outputs,1,stream,config,set,type,serializer,out,output,serializer,stream,config,set,vertex,id,0,stream,config,set,operator,id,new,operator,id,4711l,123l,stream,operator,out,dummy,operator,new,abstract,stream,operator,out,private,static,final,long,serial,version,uid,1l,list,stream,edge,out,edges,in,order,new,linked,list,stream,edge,stream,node,source,vertex,dummy,new,stream,node,null,0,group,null,dummy,operator,source,dummy,new,linked,list,output,selector,source,stream,task,class,stream,node,target,vertex,dummy,new,stream,node,null,1,group,null,dummy,operator,target,dummy,new,linked,list,output,selector,source,stream,task,class,out,edges,in,order,add,new,stream,edge,source,vertex,dummy,target,vertex,dummy,0,new,linked,list,string,new,broadcast,partitioner,object,null,stream,config,set,out,edges,in,order,out,edges,in,order,stream,config,set,non,chained,outputs,out,edges,in,order
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1445418103;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1446112342;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1449062271;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1453902315;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1454960195;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1456247173;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1456347641;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1457737669;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1466089084;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1467040572;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1472663071;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1474635666;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1474635666;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1477066248;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1477069384;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1478257462;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1478636134;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1480624969;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1482206647;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1486732842;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1489819457;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1493236605;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1495484544;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1502801814;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1508850403;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1513094459;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1513102157;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1513102158;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1515519059;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1516626397;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1519039285;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1519568061;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> protected void initializeInputs() throws IOException, InterruptedException;1531381123;This must be overwritten for OneInputStreamTask or TwoInputStreamTask test harnesses.;protected void initializeInputs() throws IOException, InterruptedException {};this,must,be,overwritten,for,one,input,stream,task,or,two,input,stream,task,test,harnesses;protected,void,initialize,inputs,throws,ioexception,interrupted,exception
StreamTaskTestHarness -> public void waitForInputProcessing();1445418103;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1446112342;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1449062271;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1453902315;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1454960195;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1456247173;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1456347641;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1457737669;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1466089084;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1467040572;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1472663071;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1474635666;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1474635666;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1477066248;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1477069384;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public void waitForInputProcessing();1478257462;This only returns after all input queues are empty.;public void waitForInputProcessing() {___		_		try {_			Thread.sleep(1)__		} catch (InterruptedException ignored) {}_		_		while (true) {_			boolean allEmpty = true__			for (int i = 0_ i < numInputGates_ i++) {_				if (!inputGates[i].allQueuesEmpty()) {_					allEmpty = false__				}_			}_			try {_				Thread.sleep(10)__			} catch (InterruptedException ignored) {}_			_			if (allEmpty) {_				break__			}_		}__		_		_		_		while (true) {_			Thread.State state = taskThread.getState()__			if (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||_					state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {_				break__			}__			try {_				Thread.sleep(1)__			} catch (InterruptedException ignored) {}_		}_	};this,only,returns,after,all,input,queues,are,empty;public,void,wait,for,input,processing,try,thread,sleep,1,catch,interrupted,exception,ignored,while,true,boolean,all,empty,true,for,int,i,0,i,num,input,gates,i,if,input,gates,i,all,queues,empty,all,empty,false,try,thread,sleep,10,catch,interrupted,exception,ignored,if,all,empty,break,while,true,thread,state,state,task,thread,get,state,if,state,thread,state,blocked,state,thread,state,terminated,state,thread,state,waiting,state,thread,state,break,try,thread,sleep,1,catch,interrupted,exception,ignored
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1445418103;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1446112342;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1449062271;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1453902315;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1454960195;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1456247173;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1456347641;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1457737669;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1466089084;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1467040572;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1472663071;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1474635666;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1474635666;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1477066248;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1477069384;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1478257462;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1478636134;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1480624969;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1482206647;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1486732842;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public ConcurrentLinkedQueue<Object> getOutput();1489819457;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public ConcurrentLinkedQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,concurrent,linked,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1472663071;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1474635666;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1474635666;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1477066248;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1477069384;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1478257462;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1478636134;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1480624969;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1482206647;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1486732842;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1489819457;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1493236605;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1495484544;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1502801814;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1508850403;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1513094459;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1513102157;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1513102158;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1515519059;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1516626397;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1519039285;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1519568061;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskRunning() throws Exception;1531381123;Waits for the task to be running.__@throws Exception;public void waitForTaskRunning() throws Exception {_		waitForTaskRunning(Long.MAX_VALUE)__	};waits,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,throws,exception,wait,for,task,running,long
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1472663071;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1474635666;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1474635666;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1477066248;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1477069384;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1478257462;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1478636134;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1480624969;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1482206647;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1486732842;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1489819457;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1493236605;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1495484544;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1502801814;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1508850403;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1513094459;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1513102157;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1513102158;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1515519059;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1516626397;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1519039285;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1519568061;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public void waitForTaskCompletion(long timeout) throws Exception;1531381123;Waits for the task completion. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task completion_@throws Exception;public void waitForTaskCompletion(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}__		taskThread.join(timeout)__		if (taskThread.getError() != null) {_			throw new Exception("error in task", taskThread.getError())__		}_	};waits,for,the,task,completion,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,task,thread,join,timeout,if,task,thread,get,error,null,throw,new,exception,error,in,task,task,thread,get,error
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1493236605;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1495484544;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1502801814;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1508850403;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1513094459;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1513102157;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1513102158;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1515519059;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1516626397;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1519039285;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1519568061;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public LinkedBlockingQueue<Object> getOutput();1531381123;Get all the output from the task. This contains StreamRecords and Events interleaved. Use_{@link org.apache.flink.streaming.util.TestHarnessUtil#getRawElementsFromOutput(java.util.Queue)}}_to extract only the StreamRecords.;public LinkedBlockingQueue<Object> getOutput() {_		return outputList__	};get,all,the,output,from,the,task,this,contains,stream,records,and,events,interleaved,use,link,org,apache,flink,streaming,util,test,harness,util,get,raw,elements,from,output,java,util,queue,to,extract,only,the,stream,records;public,linked,blocking,queue,object,get,output,return,output,list
StreamTaskTestHarness -> public void invoke() throws Exception;1445418103;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		task.registerInputOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,register,input,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1446112342;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		task.registerInputOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,register,input,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1449062271;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		task.registerInputOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,register,input,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1453902315;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1454960195;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1456247173;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1456347641;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1457737669;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1466089084;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1467040572;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1472663071;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1474635666;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1474635666;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1477066248;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1477069384;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1478257462;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		mockEnv = new StreamMockEnvironment(jobConfig, taskConfig, executionConfig,_			memorySize, new MockInputSplitProvider(), bufferSize)__		task.setEnvironment(mockEnv)___		initializeInputs()__		initializeOutput()___		taskThread = new TaskThread(task)__		taskThread.start()__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,mock,env,new,stream,mock,environment,job,config,task,config,execution,config,memory,size,new,mock,input,split,provider,buffer,size,task,set,environment,mock,env,initialize,inputs,initialize,output,task,thread,new,task,thread,task,task,thread,start
StreamTaskTestHarness -> public void invoke() throws Exception;1478636134;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1480624969;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1482206647;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1486732842;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1489819457;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1493236605;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1495484544;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1502801814;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1508850403;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1513094459;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1513102157;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1513102158;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1515519059;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment(), null)__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment,null
StreamTaskTestHarness -> public void invoke() throws Exception;1516626397;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1519039285;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1519568061;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void invoke() throws Exception;1531381123;Invoke the Task. This resets the output of any previous invocation. This will start a new_Thread to execute the Task in. Use {@link #waitForTaskCompletion()} to wait for the_Task thread to finish running.;public void invoke() throws Exception {_		invoke(createEnvironment())__	};invoke,the,task,this,resets,the,output,of,any,previous,invocation,this,will,start,a,new,thread,to,execute,the,task,in,use,link,wait,for,task,completion,to,wait,for,the,task,thread,to,finish,running;public,void,invoke,throws,exception,invoke,create,environment
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1445418103;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1446112342;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1449062271;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1453902315;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1454960195;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1456247173;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1456347641;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1457737669;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1466089084;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1467040572;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1472663071;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1474635666;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1474635666;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1477066248;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1477069384;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1478257462;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1478636134;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1480624969;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1482206647;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1486732842;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1489819457;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1493236605;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1495484544;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1502801814;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1508850403;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1513094459;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1513102157;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1513102158;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1515519059;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1516626397;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1519039285;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1519568061;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void processEvent(AbstractEvent event);1531381123;Sends the event to input gate 0 on channel 0.;public void processEvent(AbstractEvent event) {_		inputGates[0].sendEvent(event, 0)__	};sends,the,event,to,input,gate,0,on,channel,0;public,void,process,event,abstract,event,event,input,gates,0,send,event,event,0
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1472663071;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1474635666;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1474635666;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1477066248;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1477069384;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1478257462;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1478636134;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1480624969;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1482206647;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1486732842;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1489819457;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1493236605;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1495484544;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1502801814;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1508850403;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1513094459;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1513102157;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1513102158;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1515519059;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1516626397;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1519039285;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1519568061;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskCompletion() throws Exception;1531381123;Waits for the task completion.__@throws Exception;public void waitForTaskCompletion() throws Exception {_		waitForTaskCompletion(Long.MAX_VALUE)__	};waits,for,the,task,completion,throws,exception;public,void,wait,for,task,completion,throws,exception,wait,for,task,completion,long
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1472663071;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				long base = System.currentTimeMillis()__				long now = 0___				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(100)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,long,base,system,current,time,millis,long,now,0,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,100,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1474635666;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				long base = System.currentTimeMillis()__				long now = 0___				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(100)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,long,base,system,current,time,millis,long,now,0,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,100,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1474635666;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(100)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,100,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1477066248;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(100)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,100,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1477069384;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(100)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,100,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1478257462;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(100)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,100,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1478636134;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1480624969;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1482206647;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1486732842;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1489819457;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1493236605;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1495484544;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1502801814;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1508850403;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1513094459;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1513102157;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1513102158;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1515519059;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1516626397;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1519039285;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1519568061;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> public void waitForTaskRunning(long timeout) throws Exception;1531381123;Waits fro the task to be running. If this does not happen within the timeout, then a_TimeoutException is thrown.__@param timeout Timeout for the task to be running._@throws Exception;public void waitForTaskRunning(long timeout) throws Exception {_		if (taskThread == null) {_			throw new IllegalStateException("Task thread was not started.")__		}_		else {_			if (taskThread.task instanceof StreamTask) {_				StreamTask<?, ?> streamTask = (StreamTask<?, ?>) taskThread.task__				while (!streamTask.isRunning()) {_					Thread.sleep(10)__					if (!taskThread.isAlive()) {_						if (taskThread.getError() != null) {_							throw new Exception("Task Thread failed due to an error.", taskThread.getError())__						} else {_							throw new Exception("Task Thread unexpectedly shut down.")__						}_					}_				}_			}_			else {_				throw new IllegalStateException("Not a StreamTask")__			}_		}_	};waits,fro,the,task,to,be,running,if,this,does,not,happen,within,the,timeout,then,a,timeout,exception,is,thrown,param,timeout,timeout,for,the,task,to,be,running,throws,exception;public,void,wait,for,task,running,long,timeout,throws,exception,if,task,thread,null,throw,new,illegal,state,exception,task,thread,was,not,started,else,if,task,thread,task,instanceof,stream,task,stream,task,stream,task,stream,task,task,thread,task,while,stream,task,is,running,thread,sleep,10,if,task,thread,is,alive,if,task,thread,get,error,null,throw,new,exception,task,thread,failed,due,to,an,error,task,thread,get,error,else,throw,new,exception,task,thread,unexpectedly,shut,down,else,throw,new,illegal,state,exception,not,a,stream,task
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1445418103;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1446112342;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1449062271;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1453902315;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1454960195;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1456247173;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1456347641;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1457737669;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1466089084;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1467040572;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1472663071;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1474635666;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1474635666;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1477066248;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1477069384;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1478257462;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1478636134;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1480624969;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1482206647;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1486732842;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1489819457;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1493236605;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1495484544;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1502801814;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1508850403;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1513094459;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1513102157;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1513102158;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1515519059;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1516626397;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1519039285;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1519568061;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
StreamTaskTestHarness -> @SuppressWarnings("unchecked") 	public void processElement(Object element, int inputGate, int channel);1531381123;Sends the element to the specified channel on the specified input gate.;@SuppressWarnings("unchecked")_	public void processElement(Object element, int inputGate, int channel) {_		inputGates[inputGate].sendElement(element, channel)__	};sends,the,element,to,the,specified,channel,on,the,specified,input,gate;suppress,warnings,unchecked,public,void,process,element,object,element,int,input,gate,int,channel,input,gates,input,gate,send,element,element,channel
