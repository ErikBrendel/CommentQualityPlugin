commented;modifiers;parameterAmount;loc;comment;code
false;public;3;5;;@Override public Collection<TimeWindow> assignWindows(Object element, long timestamp, WindowAssignerContext context) {     long currentProcessingTime = context.getCurrentProcessingTime().     return Collections.singletonList(new TimeWindow(currentProcessingTime, currentProcessingTime + sessionTimeout)). }
false;public;1;4;;@Override public Trigger<Object, TimeWindow> getDefaultTrigger(StreamExecutionEnvironment env) {     return ProcessingTimeTrigger.create(). }
false;public;0;4;;@Override public String toString() {     return "ProcessingTimeSessionWindows(" + sessionTimeout + ")". }
true;public,static;1;3;/**  * Creates a new {@code SessionWindows} {@link WindowAssigner} that assigns  * elements to sessions based on the element timestamp.  *  * @param size The session timeout, i.e. the time gap between sessions  * @return The policy.  */ ;/**  * Creates a new {@code SessionWindows} {@link WindowAssigner} that assigns  * elements to sessions based on the element timestamp.  *  * @param size The session timeout, i.e. the time gap between sessions  * @return The policy.  */ public static ProcessingTimeSessionWindows withGap(Time size) {     return new ProcessingTimeSessionWindows(size.toMilliseconds()). }
true;public,static;1;4;/**  * Creates a new {@code SessionWindows} {@link WindowAssigner} that assigns  * elements to sessions based on the element timestamp.  *  * @param sessionWindowTimeGapExtractor The extractor to use to extract the time gap from the input elements  * @return The policy.  */ ;/**  * Creates a new {@code SessionWindows} {@link WindowAssigner} that assigns  * elements to sessions based on the element timestamp.  *  * @param sessionWindowTimeGapExtractor The extractor to use to extract the time gap from the input elements  * @return The policy.  */ @PublicEvolving public static <T> DynamicProcessingTimeSessionWindows<T> withDynamicGap(SessionWindowTimeGapExtractor<T> sessionWindowTimeGapExtractor) {     return new DynamicProcessingTimeSessionWindows<>(sessionWindowTimeGapExtractor). }
false;public;1;4;;@Override public TypeSerializer<TimeWindow> getWindowSerializer(ExecutionConfig executionConfig) {     return new TimeWindow.Serializer(). }
false;public;0;4;;@Override public boolean isEventTime() {     return false. }
true;public;2;4;/**  * Merge overlapping {@link TimeWindow}s.  */ ;/**  * Merge overlapping {@link TimeWindow}s.  */ @Override public void mergeWindows(Collection<TimeWindow> windows, MergeCallback<TimeWindow> c) {     TimeWindow.mergeWindows(windows, c). }
