commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void open(Configuration parameters) throws Exception {     RuntimeContext context = getRuntimeContext().     format.configure(parameters).     int indexInSubtaskGroup = context.getIndexOfThisSubtask().     int currentNumberOfSubtasks = context.getNumberOfParallelSubtasks().     format.open(indexInSubtaskGroup, currentNumberOfSubtasks). }
false;public;1;7;;@Override public void setRuntimeContext(RuntimeContext context) {     super.setRuntimeContext(context).     if (format instanceof RichOutputFormat) {         ((RichOutputFormat) format).setRuntimeContext(context).     } }
false;public;2;7;;@Override public void setInputType(TypeInformation<?> type, ExecutionConfig executionConfig) {     if (format instanceof InputTypeConfigurable) {         InputTypeConfigurable itc = (InputTypeConfigurable) format.         itc.setInputType(type, executionConfig).     } }
false;public;1;9;;@Override public void invoke(IN record) throws Exception {     try {         format.writeRecord(record).     } catch (Exception ex) {         cleanup().         throw ex.     } }
false;public;0;9;;@Override public void close() throws IOException {     try {         format.close().     } catch (Exception ex) {         cleanup().         throw ex.     } }
false;private;0;10;;private void cleanup() {     try {         if (!cleanupCalled && format instanceof CleanupWhenUnsuccessful) {             cleanupCalled = true.             ((CleanupWhenUnsuccessful) format).tryCleanupOnError().         }     } catch (Throwable t) {         LOG.error("Cleanup on error failed.", t).     } }
