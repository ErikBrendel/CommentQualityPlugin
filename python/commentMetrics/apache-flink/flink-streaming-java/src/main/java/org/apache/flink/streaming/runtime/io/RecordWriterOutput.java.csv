commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void collect(StreamRecord<OUT> record) {     if (this.outputTag != null) {         // we are only responsible for emitting to the main input         return.     }     pushToRecordWriter(record). }
false;public;2;10;;@Override public <X> void collect(OutputTag<X> outputTag, StreamRecord<X> record) {     if (this.outputTag == null || !this.outputTag.equals(outputTag)) {         // OutputTag.         return.     }     pushToRecordWriter(record). }
false;private;1;10;;private <X> void pushToRecordWriter(StreamRecord<X> record) {     serializationDelegate.setInstance(record).     try {         recordWriter.emit(serializationDelegate).     } catch (Exception e) {         throw new RuntimeException(e.getMessage(), e).     } }
false;public;1;13;;@Override public void emitWatermark(Watermark mark) {     watermarkGauge.setCurrentWatermark(mark.getTimestamp()).     serializationDelegate.setInstance(mark).     if (streamStatusProvider.getStreamStatus().isActive()) {         try {             recordWriter.broadcastEmit(serializationDelegate).         } catch (Exception e) {             throw new RuntimeException(e.getMessage(), e).         }     } }
false;public;1;10;;public void emitStreamStatus(StreamStatus streamStatus) {     serializationDelegate.setInstance(streamStatus).     try {         recordWriter.broadcastEmit(serializationDelegate).     } catch (Exception e) {         throw new RuntimeException(e.getMessage(), e).     } }
false;public;1;11;;@Override public void emitLatencyMarker(LatencyMarker latencyMarker) {     serializationDelegate.setInstance(latencyMarker).     try {         recordWriter.randomEmit(serializationDelegate).     } catch (Exception e) {         throw new RuntimeException(e.getMessage(), e).     } }
false;public;1;3;;public void broadcastEvent(AbstractEvent event) throws IOException {     recordWriter.broadcastEvent(event). }
false;public;0;3;;public void flush() throws IOException {     recordWriter.flushAll(). }
false;public;0;4;;@Override public void close() {     recordWriter.close(). }
false;public;0;4;;@Override public Gauge<Long> getWatermarkGauge() {     return watermarkGauge. }
