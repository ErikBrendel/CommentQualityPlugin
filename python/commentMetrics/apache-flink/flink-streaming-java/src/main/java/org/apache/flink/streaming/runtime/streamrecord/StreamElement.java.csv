commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Checks whether this element is a watermark.  * @return True, if this element is a watermark, false otherwise.  */ ;/**  * Checks whether this element is a watermark.  * @return True, if this element is a watermark, false otherwise.  */ public final boolean isWatermark() {     return getClass() == Watermark.class. }
true;public,final;0;3;/**  * Checks whether this element is a stream status.  * @return True, if this element is a stream status, false otherwise.  */ ;/**  * Checks whether this element is a stream status.  * @return True, if this element is a stream status, false otherwise.  */ public final boolean isStreamStatus() {     return getClass() == StreamStatus.class. }
true;public,final;0;3;/**  * Checks whether this element is a record.  * @return True, if this element is a record, false otherwise.  */ ;/**  * Checks whether this element is a record.  * @return True, if this element is a record, false otherwise.  */ public final boolean isRecord() {     return getClass() == StreamRecord.class. }
true;public,final;0;3;/**  * Checks whether this element is a record.  * @return True, if this element is a record, false otherwise.  */ ;/**  * Checks whether this element is a record.  * @return True, if this element is a record, false otherwise.  */ public final boolean isLatencyMarker() {     return getClass() == LatencyMarker.class. }
true;public,final;0;4;/**  * Casts this element into a StreamRecord.  * @return This element as a stream record.  * @throws java.lang.ClassCastException Thrown, if this element is actually not a stream record.  */ ;/**  * Casts this element into a StreamRecord.  * @return This element as a stream record.  * @throws java.lang.ClassCastException Thrown, if this element is actually not a stream record.  */ @SuppressWarnings("unchecked") public final <E> StreamRecord<E> asRecord() {     return (StreamRecord<E>) this. }
true;public,final;0;3;/**  * Casts this element into a Watermark.  * @return This element as a Watermark.  * @throws java.lang.ClassCastException Thrown, if this element is actually not a Watermark.  */ ;/**  * Casts this element into a Watermark.  * @return This element as a Watermark.  * @throws java.lang.ClassCastException Thrown, if this element is actually not a Watermark.  */ public final Watermark asWatermark() {     return (Watermark) this. }
true;public,final;0;3;/**  * Casts this element into a StreamStatus.  * @return This element as a StreamStatus.  * @throws java.lang.ClassCastException Thrown, if this element is actually not a Stream Status.  */ ;/**  * Casts this element into a StreamStatus.  * @return This element as a StreamStatus.  * @throws java.lang.ClassCastException Thrown, if this element is actually not a Stream Status.  */ public final StreamStatus asStreamStatus() {     return (StreamStatus) this. }
true;public,final;0;3;/**  * Casts this element into a LatencyMarker.  * @return This element as a LatencyMarker.  * @throws java.lang.ClassCastException Thrown, if this element is actually not a LatencyMarker.  */ ;/**  * Casts this element into a LatencyMarker.  * @return This element as a LatencyMarker.  * @throws java.lang.ClassCastException Thrown, if this element is actually not a LatencyMarker.  */ public final LatencyMarker asLatencyMarker() {     return (LatencyMarker) this. }
