commented;modifiers;parameterAmount;loc;comment;code
true;default;1;2;/**  * @deprecated Use {@link #invoke(Object, Context)}.  */ ;/**  * @deprecated Use {@link #invoke(Object, Context)}.  */ @Deprecated default void invoke(IN value) throws Exception { }
true;default;2;3;/**  * Writes the given value to the sink. This function is called for every record.  *  * <p>You have to override this method when implementing a {@code SinkFunction}, this is a  * {@code default} method for backward compatibility with the old-style method only.  *  * @param value The input record.  * @param context Additional context about the input record.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ ;/**  * Writes the given value to the sink. This function is called for every record.  *  * <p>You have to override this method when implementing a {@code SinkFunction}, this is a  * {@code default} method for backward compatibility with the old-style method only.  *  * @param value The input record.  * @param context Additional context about the input record.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ default void invoke(IN value, Context context) throws Exception {     invoke(value). }
true;;0;1;/**  * Returns the current processing time.  */ ;/**  * Returns the current processing time.  */ long currentProcessingTime().
true;;0;1;/**  * Returns the current event-time watermark.  */ ;/**  * Returns the current event-time watermark.  */ long currentWatermark().
true;;0;1;/**  * Returns the timestamp of the current input record or {@code null} if the element does not  * have an assigned timestamp.  */ ;/**  * Returns the timestamp of the current input record or {@code null} if the element does not  * have an assigned timestamp.  */ Long timestamp().
