commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Sets the checkpoint trigger through which the source can trigger the checkpoint.  *  * @param checkpointTrigger The checkpoint trigger to set  */ ;/**  * Sets the checkpoint trigger through which the source can trigger the checkpoint.  *  * @param checkpointTrigger The checkpoint trigger to set  */ void setCheckpointTrigger(CheckpointTrigger checkpointTrigger).
true;;1;1;/**  * Triggers a checkpoint. This method should be called by the source  * when it sees the event that indicates that a checkpoint should be triggered.  *  * <p>When this method is called, the parallel operator instance in which the  * calling source function runs will perform its checkpoint and insert the  * checkpoint barrier into the data stream.  *  * @param checkpointId The ID that identifies the checkpoint.  *  * @throws FlinkException Thrown when the checkpoint could not be triggered, for example  *                        because of an invalid state or errors when storing the  *                        checkpoint state.  */ ;/**  * Triggers a checkpoint. This method should be called by the source  * when it sees the event that indicates that a checkpoint should be triggered.  *  * <p>When this method is called, the parallel operator instance in which the  * calling source function runs will perform its checkpoint and insert the  * checkpoint barrier into the data stream.  *  * @param checkpointId The ID that identifies the checkpoint.  *  * @throws FlinkException Thrown when the checkpoint could not be triggered, for example  *                        because of an invalid state or errors when storing the  *                        checkpoint state.  */ void triggerCheckpoint(long checkpointId) throws FlinkException.
