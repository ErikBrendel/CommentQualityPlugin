commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Timestamp of the element currently being processed or timestamp of a firing timer.  *  * <p>This might be {@code null}, for example if the time characteristic of your program  * is set to {@link org.apache.flink.streaming.api.TimeCharacteristic#ProcessingTime}.  */ ;/**  * Timestamp of the element currently being processed or timestamp of a firing timer.  *  * <p>This might be {@code null}, for example if the time characteristic of your program  * is set to {@link org.apache.flink.streaming.api.TimeCharacteristic#ProcessingTime}.  */ public abstract Long timestamp().
true;public,abstract;2;1;/**  * Emits a record to the side output identified by the {@link OutputTag}.  *  * @param outputTag the {@code OutputTag} that identifies the side output to emit to.  * @param value The record to emit.  */ ;/**  * Emits a record to the side output identified by the {@link OutputTag}.  *  * @param outputTag the {@code OutputTag} that identifies the side output to emit to.  * @param value The record to emit.  */ public abstract <X> void output(final OutputTag<X> outputTag, final X value).
true;public,abstract;0;1;/**  * Returns the current processing time.  */ ;/**  * Returns the current processing time.  */ public abstract long currentProcessingTime().
true;public,abstract;0;1;/**  * Returns the current event-time watermark.  */ ;/**  * Returns the current event-time watermark.  */ public abstract long currentWatermark().
true;public,abstract;1;1;/**  * Fetches the {@link BroadcastState} with the specified name.  *  * @param stateDescriptor the {@link MapStateDescriptor} of the state to be fetched.  * @return The required {@link BroadcastState broadcast state}.  */ ;/**  * Fetches the {@link BroadcastState} with the specified name.  *  * @param stateDescriptor the {@link MapStateDescriptor} of the state to be fetched.  * @return The required {@link BroadcastState broadcast state}.  */ public abstract <K, V> BroadcastState<K, V> getBroadcastState(final MapStateDescriptor<K, V> stateDescriptor).
true;public,abstract;1;1;/**  * Fetches a read-only view of the broadcast state with the specified name.  *  * @param stateDescriptor the {@link MapStateDescriptor} of the state to be fetched.  * @return The required read-only view of the broadcast state.  */ ;/**  * Fetches a read-only view of the broadcast state with the specified name.  *  * @param stateDescriptor the {@link MapStateDescriptor} of the state to be fetched.  * @return The required read-only view of the broadcast state.  */ public abstract <K, V> ReadOnlyBroadcastState<K, V> getBroadcastState(final MapStateDescriptor<K, V> stateDescriptor).
