# id;timestamp;commentText;codeText;commentWords;codeWords
FeedbackTransformation -> public FeedbackTransformation(StreamTransformation<T> input, Long waitTime);1445418103;Creates a new {@code FeedbackTransformation} from the given input.__@param input The input {@code StreamTransformation}_@param waitTime The wait time of the feedback operator. After the time expires_the operation will close and not receive any more feedback elements.;public FeedbackTransformation(StreamTransformation<T> input, Long waitTime) {_		super("Feedback", input.getOutputType(), input.getParallelism())__		this.input = input__		this.waitTime = waitTime__		this.feedbackEdges = Lists.newArrayList()__	};creates,a,new,code,feedback,transformation,from,the,given,input,param,input,the,input,code,stream,transformation,param,wait,time,the,wait,time,of,the,feedback,operator,after,the,time,expires,the,operation,will,close,and,not,receive,any,more,feedback,elements;public,feedback,transformation,stream,transformation,t,input,long,wait,time,super,feedback,input,get,output,type,input,get,parallelism,this,input,input,this,wait,time,wait,time,this,feedback,edges,lists,new,array,list
FeedbackTransformation -> public FeedbackTransformation(StreamTransformation<T> input, Long waitTime);1455486690;Creates a new {@code FeedbackTransformation} from the given input.__@param input The input {@code StreamTransformation}_@param waitTime The wait time of the feedback operator. After the time expires_the operation will close and not receive any more feedback elements.;public FeedbackTransformation(StreamTransformation<T> input, Long waitTime) {_		super("Feedback", input.getOutputType(), input.getParallelism())__		this.input = input__		this.waitTime = waitTime__		this.feedbackEdges = Lists.newArrayList()__	};creates,a,new,code,feedback,transformation,from,the,given,input,param,input,the,input,code,stream,transformation,param,wait,time,the,wait,time,of,the,feedback,operator,after,the,time,expires,the,operation,will,close,and,not,receive,any,more,feedback,elements;public,feedback,transformation,stream,transformation,t,input,long,wait,time,super,feedback,input,get,output,type,input,get,parallelism,this,input,input,this,wait,time,wait,time,this,feedback,edges,lists,new,array,list
FeedbackTransformation -> public FeedbackTransformation(StreamTransformation<T> input, Long waitTime);1493195810;Creates a new {@code FeedbackTransformation} from the given input.__@param input The input {@code StreamTransformation}_@param waitTime The wait time of the feedback operator. After the time expires_the operation will close and not receive any more feedback elements.;public FeedbackTransformation(StreamTransformation<T> input, Long waitTime) {_		super("Feedback", input.getOutputType(), input.getParallelism())__		this.input = input__		this.waitTime = waitTime__		this.feedbackEdges = Lists.newArrayList()__	};creates,a,new,code,feedback,transformation,from,the,given,input,param,input,the,input,code,stream,transformation,param,wait,time,the,wait,time,of,the,feedback,operator,after,the,time,expires,the,operation,will,close,and,not,receive,any,more,feedback,elements;public,feedback,transformation,stream,transformation,t,input,long,wait,time,super,feedback,input,get,output,type,input,get,parallelism,this,input,input,this,wait,time,wait,time,this,feedback,edges,lists,new,array,list
FeedbackTransformation -> public FeedbackTransformation(StreamTransformation<T> input, Long waitTime);1493195810;Creates a new {@code FeedbackTransformation} from the given input.__@param input The input {@code StreamTransformation}_@param waitTime The wait time of the feedback operator. After the time expires_the operation will close and not receive any more feedback elements.;public FeedbackTransformation(StreamTransformation<T> input, Long waitTime) {_		super("Feedback", input.getOutputType(), input.getParallelism())__		this.input = input__		this.waitTime = waitTime__		this.feedbackEdges = Lists.newArrayList()__	};creates,a,new,code,feedback,transformation,from,the,given,input,param,input,the,input,code,stream,transformation,param,wait,time,the,wait,time,of,the,feedback,operator,after,the,time,expires,the,operation,will,close,and,not,receive,any,more,feedback,elements;public,feedback,transformation,stream,transformation,t,input,long,wait,time,super,feedback,input,get,output,type,input,get,parallelism,this,input,input,this,wait,time,wait,time,this,feedback,edges,lists,new,array,list
FeedbackTransformation -> public FeedbackTransformation(StreamTransformation<T> input, Long waitTime);1495484544;Creates a new {@code FeedbackTransformation} from the given input.__@param input The input {@code StreamTransformation}_@param waitTime The wait time of the feedback operator. After the time expires_the operation will close and not receive any more feedback elements.;public FeedbackTransformation(StreamTransformation<T> input, Long waitTime) {_		super("Feedback", input.getOutputType(), input.getParallelism())__		this.input = input__		this.waitTime = waitTime__		this.feedbackEdges = Lists.newArrayList()__	};creates,a,new,code,feedback,transformation,from,the,given,input,param,input,the,input,code,stream,transformation,param,wait,time,the,wait,time,of,the,feedback,operator,after,the,time,expires,the,operation,will,close,and,not,receive,any,more,feedback,elements;public,feedback,transformation,stream,transformation,t,input,long,wait,time,super,feedback,input,get,output,type,input,get,parallelism,this,input,input,this,wait,time,wait,time,this,feedback,edges,lists,new,array,list
FeedbackTransformation -> public FeedbackTransformation(StreamTransformation<T> input, Long waitTime);1502726910;Creates a new {@code FeedbackTransformation} from the given input.__@param input The input {@code StreamTransformation}_@param waitTime The wait time of the feedback operator. After the time expires_the operation will close and not receive any more feedback elements.;public FeedbackTransformation(StreamTransformation<T> input, Long waitTime) {_		super("Feedback", input.getOutputType(), input.getParallelism())__		this.input = input__		this.waitTime = waitTime__		this.feedbackEdges = Lists.newArrayList()__	};creates,a,new,code,feedback,transformation,from,the,given,input,param,input,the,input,code,stream,transformation,param,wait,time,the,wait,time,of,the,feedback,operator,after,the,time,expires,the,operation,will,close,and,not,receive,any,more,feedback,elements;public,feedback,transformation,stream,transformation,t,input,long,wait,time,super,feedback,input,get,output,type,input,get,parallelism,this,input,input,this,wait,time,wait,time,this,feedback,edges,lists,new,array,list
FeedbackTransformation -> public FeedbackTransformation(StreamTransformation<T> input, Long waitTime);1506071790;Creates a new {@code FeedbackTransformation} from the given input.__@param input The input {@code StreamTransformation}_@param waitTime The wait time of the feedback operator. After the time expires_the operation will close and not receive any more feedback elements.;public FeedbackTransformation(StreamTransformation<T> input, Long waitTime) {_		super("Feedback", input.getOutputType(), input.getParallelism())__		this.input = input__		this.waitTime = waitTime__		this.feedbackEdges = Lists.newArrayList()__	};creates,a,new,code,feedback,transformation,from,the,given,input,param,input,the,input,code,stream,transformation,param,wait,time,the,wait,time,of,the,feedback,operator,after,the,time,expires,the,operation,will,close,and,not,receive,any,more,feedback,elements;public,feedback,transformation,stream,transformation,t,input,long,wait,time,super,feedback,input,get,output,type,input,get,parallelism,this,input,input,this,wait,time,wait,time,this,feedback,edges,lists,new,array,list
FeedbackTransformation -> public List<StreamTransformation<T>> getFeedbackEdges();1445418103;Returns the list of feedback {@code StreamTransformations}.;public List<StreamTransformation<T>> getFeedbackEdges() {_		return feedbackEdges__	};returns,the,list,of,feedback,code,stream,transformations;public,list,stream,transformation,t,get,feedback,edges,return,feedback,edges
FeedbackTransformation -> public List<StreamTransformation<T>> getFeedbackEdges();1455486690;Returns the list of feedback {@code StreamTransformations}.;public List<StreamTransformation<T>> getFeedbackEdges() {_		return feedbackEdges__	};returns,the,list,of,feedback,code,stream,transformations;public,list,stream,transformation,t,get,feedback,edges,return,feedback,edges
FeedbackTransformation -> public List<StreamTransformation<T>> getFeedbackEdges();1493195810;Returns the list of feedback {@code StreamTransformations}.;public List<StreamTransformation<T>> getFeedbackEdges() {_		return feedbackEdges__	};returns,the,list,of,feedback,code,stream,transformations;public,list,stream,transformation,t,get,feedback,edges,return,feedback,edges
FeedbackTransformation -> public List<StreamTransformation<T>> getFeedbackEdges();1493195810;Returns the list of feedback {@code StreamTransformations}.;public List<StreamTransformation<T>> getFeedbackEdges() {_		return feedbackEdges__	};returns,the,list,of,feedback,code,stream,transformations;public,list,stream,transformation,t,get,feedback,edges,return,feedback,edges
FeedbackTransformation -> public List<StreamTransformation<T>> getFeedbackEdges();1495484544;Returns the list of feedback {@code StreamTransformations}.;public List<StreamTransformation<T>> getFeedbackEdges() {_		return feedbackEdges__	};returns,the,list,of,feedback,code,stream,transformations;public,list,stream,transformation,t,get,feedback,edges,return,feedback,edges
FeedbackTransformation -> public List<StreamTransformation<T>> getFeedbackEdges();1502726910;Returns the list of feedback {@code StreamTransformations}.;public List<StreamTransformation<T>> getFeedbackEdges() {_		return feedbackEdges__	};returns,the,list,of,feedback,code,stream,transformations;public,list,stream,transformation,t,get,feedback,edges,return,feedback,edges
FeedbackTransformation -> public List<StreamTransformation<T>> getFeedbackEdges();1506071790;Returns the list of feedback {@code StreamTransformations}.;public List<StreamTransformation<T>> getFeedbackEdges() {_		return feedbackEdges__	};returns,the,list,of,feedback,code,stream,transformations;public,list,stream,transformation,t,get,feedback,edges,return,feedback,edges
FeedbackTransformation -> public Long getWaitTime();1445418103;Returns the wait time. This is the amount of time that the feedback operator keeps listening_for feedback elements. Once the time expires the operation will close and will not receive_further elements.;public Long getWaitTime() {_		return waitTime__	};returns,the,wait,time,this,is,the,amount,of,time,that,the,feedback,operator,keeps,listening,for,feedback,elements,once,the,time,expires,the,operation,will,close,and,will,not,receive,further,elements;public,long,get,wait,time,return,wait,time
FeedbackTransformation -> public Long getWaitTime();1455486690;Returns the wait time. This is the amount of time that the feedback operator keeps listening_for feedback elements. Once the time expires the operation will close and will not receive_further elements.;public Long getWaitTime() {_		return waitTime__	};returns,the,wait,time,this,is,the,amount,of,time,that,the,feedback,operator,keeps,listening,for,feedback,elements,once,the,time,expires,the,operation,will,close,and,will,not,receive,further,elements;public,long,get,wait,time,return,wait,time
FeedbackTransformation -> public Long getWaitTime();1493195810;Returns the wait time. This is the amount of time that the feedback operator keeps listening_for feedback elements. Once the time expires the operation will close and will not receive_further elements.;public Long getWaitTime() {_		return waitTime__	};returns,the,wait,time,this,is,the,amount,of,time,that,the,feedback,operator,keeps,listening,for,feedback,elements,once,the,time,expires,the,operation,will,close,and,will,not,receive,further,elements;public,long,get,wait,time,return,wait,time
FeedbackTransformation -> public Long getWaitTime();1493195810;Returns the wait time. This is the amount of time that the feedback operator keeps listening_for feedback elements. Once the time expires the operation will close and will not receive_further elements.;public Long getWaitTime() {_		return waitTime__	};returns,the,wait,time,this,is,the,amount,of,time,that,the,feedback,operator,keeps,listening,for,feedback,elements,once,the,time,expires,the,operation,will,close,and,will,not,receive,further,elements;public,long,get,wait,time,return,wait,time
FeedbackTransformation -> public Long getWaitTime();1495484544;Returns the wait time. This is the amount of time that the feedback operator keeps listening_for feedback elements. Once the time expires the operation will close and will not receive_further elements.;public Long getWaitTime() {_		return waitTime__	};returns,the,wait,time,this,is,the,amount,of,time,that,the,feedback,operator,keeps,listening,for,feedback,elements,once,the,time,expires,the,operation,will,close,and,will,not,receive,further,elements;public,long,get,wait,time,return,wait,time
FeedbackTransformation -> public Long getWaitTime();1502726910;Returns the wait time. This is the amount of time that the feedback operator keeps listening_for feedback elements. Once the time expires the operation will close and will not receive_further elements.;public Long getWaitTime() {_		return waitTime__	};returns,the,wait,time,this,is,the,amount,of,time,that,the,feedback,operator,keeps,listening,for,feedback,elements,once,the,time,expires,the,operation,will,close,and,will,not,receive,further,elements;public,long,get,wait,time,return,wait,time
FeedbackTransformation -> public Long getWaitTime();1506071790;Returns the wait time. This is the amount of time that the feedback operator keeps listening_for feedback elements. Once the time expires the operation will close and will not receive_further elements.;public Long getWaitTime() {_		return waitTime__	};returns,the,wait,time,this,is,the,amount,of,time,that,the,feedback,operator,keeps,listening,for,feedback,elements,once,the,time,expires,the,operation,will,close,and,will,not,receive,further,elements;public,long,get,wait,time,return,wait,time
FeedbackTransformation -> public StreamTransformation<T> getInput();1445418103;Returns the input {@code StreamTransformation} of this {@code FeedbackTransformation}.;public StreamTransformation<T> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,feedback,transformation;public,stream,transformation,t,get,input,return,input
FeedbackTransformation -> public StreamTransformation<T> getInput();1455486690;Returns the input {@code StreamTransformation} of this {@code FeedbackTransformation}.;public StreamTransformation<T> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,feedback,transformation;public,stream,transformation,t,get,input,return,input
FeedbackTransformation -> public StreamTransformation<T> getInput();1493195810;Returns the input {@code StreamTransformation} of this {@code FeedbackTransformation}.;public StreamTransformation<T> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,feedback,transformation;public,stream,transformation,t,get,input,return,input
FeedbackTransformation -> public StreamTransformation<T> getInput();1493195810;Returns the input {@code StreamTransformation} of this {@code FeedbackTransformation}.;public StreamTransformation<T> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,feedback,transformation;public,stream,transformation,t,get,input,return,input
FeedbackTransformation -> public StreamTransformation<T> getInput();1495484544;Returns the input {@code StreamTransformation} of this {@code FeedbackTransformation}.;public StreamTransformation<T> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,feedback,transformation;public,stream,transformation,t,get,input,return,input
FeedbackTransformation -> public StreamTransformation<T> getInput();1502726910;Returns the input {@code StreamTransformation} of this {@code FeedbackTransformation}.;public StreamTransformation<T> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,feedback,transformation;public,stream,transformation,t,get,input,return,input
FeedbackTransformation -> public StreamTransformation<T> getInput();1506071790;Returns the input {@code StreamTransformation} of this {@code FeedbackTransformation}.;public StreamTransformation<T> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,feedback,transformation;public,stream,transformation,t,get,input,return,input
FeedbackTransformation -> public void addFeedbackEdge(StreamTransformation<T> transform);1445418103;Adds a feedback edge. The parallelism of the {@code StreamTransformation} must match_the parallelism of the input {@code StreamTransformation} of this_{@code FeedbackTransformation}__@param transform The new feedback {@code StreamTransformation}.;public void addFeedbackEdge(StreamTransformation<T> transform) {__		if (transform.getParallelism() != this.getParallelism()) {_			throw new UnsupportedOperationException(_					"Parallelism of the feedback stream must match the parallelism of the original" +_							" stream. Parallelism of original stream: " + this.getParallelism() +_							"_ parallelism of feedback stream: " + transform.getParallelism())__		}__		feedbackEdges.add(transform)__	};adds,a,feedback,edge,the,parallelism,of,the,code,stream,transformation,must,match,the,parallelism,of,the,input,code,stream,transformation,of,this,code,feedback,transformation,param,transform,the,new,feedback,code,stream,transformation;public,void,add,feedback,edge,stream,transformation,t,transform,if,transform,get,parallelism,this,get,parallelism,throw,new,unsupported,operation,exception,parallelism,of,the,feedback,stream,must,match,the,parallelism,of,the,original,stream,parallelism,of,original,stream,this,get,parallelism,parallelism,of,feedback,stream,transform,get,parallelism,feedback,edges,add,transform
FeedbackTransformation -> public void addFeedbackEdge(StreamTransformation<T> transform);1455486690;Adds a feedback edge. The parallelism of the {@code StreamTransformation} must match_the parallelism of the input {@code StreamTransformation} of this_{@code FeedbackTransformation}__@param transform The new feedback {@code StreamTransformation}.;public void addFeedbackEdge(StreamTransformation<T> transform) {__		if (transform.getParallelism() != this.getParallelism()) {_			throw new UnsupportedOperationException(_					"Parallelism of the feedback stream must match the parallelism of the original" +_							" stream. Parallelism of original stream: " + this.getParallelism() +_							"_ parallelism of feedback stream: " + transform.getParallelism())__		}__		feedbackEdges.add(transform)__	};adds,a,feedback,edge,the,parallelism,of,the,code,stream,transformation,must,match,the,parallelism,of,the,input,code,stream,transformation,of,this,code,feedback,transformation,param,transform,the,new,feedback,code,stream,transformation;public,void,add,feedback,edge,stream,transformation,t,transform,if,transform,get,parallelism,this,get,parallelism,throw,new,unsupported,operation,exception,parallelism,of,the,feedback,stream,must,match,the,parallelism,of,the,original,stream,parallelism,of,original,stream,this,get,parallelism,parallelism,of,feedback,stream,transform,get,parallelism,feedback,edges,add,transform
FeedbackTransformation -> public void addFeedbackEdge(StreamTransformation<T> transform);1493195810;Adds a feedback edge. The parallelism of the {@code StreamTransformation} must match_the parallelism of the input {@code StreamTransformation} of this_{@code FeedbackTransformation}__@param transform The new feedback {@code StreamTransformation}.;public void addFeedbackEdge(StreamTransformation<T> transform) {__		if (transform.getParallelism() != this.getParallelism()) {_			throw new UnsupportedOperationException(_					"Parallelism of the feedback stream must match the parallelism of the original" +_							" stream. Parallelism of original stream: " + this.getParallelism() +_							"_ parallelism of feedback stream: " + transform.getParallelism())__		}__		feedbackEdges.add(transform)__	};adds,a,feedback,edge,the,parallelism,of,the,code,stream,transformation,must,match,the,parallelism,of,the,input,code,stream,transformation,of,this,code,feedback,transformation,param,transform,the,new,feedback,code,stream,transformation;public,void,add,feedback,edge,stream,transformation,t,transform,if,transform,get,parallelism,this,get,parallelism,throw,new,unsupported,operation,exception,parallelism,of,the,feedback,stream,must,match,the,parallelism,of,the,original,stream,parallelism,of,original,stream,this,get,parallelism,parallelism,of,feedback,stream,transform,get,parallelism,feedback,edges,add,transform
FeedbackTransformation -> public void addFeedbackEdge(StreamTransformation<T> transform);1493195810;Adds a feedback edge. The parallelism of the {@code StreamTransformation} must match_the parallelism of the input {@code StreamTransformation} of this_{@code FeedbackTransformation}__@param transform The new feedback {@code StreamTransformation}.;public void addFeedbackEdge(StreamTransformation<T> transform) {__		if (transform.getParallelism() != this.getParallelism()) {_			throw new UnsupportedOperationException(_					"Parallelism of the feedback stream must match the parallelism of the original" +_							" stream. Parallelism of original stream: " + this.getParallelism() +_							"_ parallelism of feedback stream: " + transform.getParallelism())__		}__		feedbackEdges.add(transform)__	};adds,a,feedback,edge,the,parallelism,of,the,code,stream,transformation,must,match,the,parallelism,of,the,input,code,stream,transformation,of,this,code,feedback,transformation,param,transform,the,new,feedback,code,stream,transformation;public,void,add,feedback,edge,stream,transformation,t,transform,if,transform,get,parallelism,this,get,parallelism,throw,new,unsupported,operation,exception,parallelism,of,the,feedback,stream,must,match,the,parallelism,of,the,original,stream,parallelism,of,original,stream,this,get,parallelism,parallelism,of,feedback,stream,transform,get,parallelism,feedback,edges,add,transform
FeedbackTransformation -> public void addFeedbackEdge(StreamTransformation<T> transform);1495484544;Adds a feedback edge. The parallelism of the {@code StreamTransformation} must match_the parallelism of the input {@code StreamTransformation} of this_{@code FeedbackTransformation}__@param transform The new feedback {@code StreamTransformation}.;public void addFeedbackEdge(StreamTransformation<T> transform) {__		if (transform.getParallelism() != this.getParallelism()) {_			throw new UnsupportedOperationException(_					"Parallelism of the feedback stream must match the parallelism of the original" +_							" stream. Parallelism of original stream: " + this.getParallelism() +_							"_ parallelism of feedback stream: " + transform.getParallelism())__		}__		feedbackEdges.add(transform)__	};adds,a,feedback,edge,the,parallelism,of,the,code,stream,transformation,must,match,the,parallelism,of,the,input,code,stream,transformation,of,this,code,feedback,transformation,param,transform,the,new,feedback,code,stream,transformation;public,void,add,feedback,edge,stream,transformation,t,transform,if,transform,get,parallelism,this,get,parallelism,throw,new,unsupported,operation,exception,parallelism,of,the,feedback,stream,must,match,the,parallelism,of,the,original,stream,parallelism,of,original,stream,this,get,parallelism,parallelism,of,feedback,stream,transform,get,parallelism,feedback,edges,add,transform
FeedbackTransformation -> public void addFeedbackEdge(StreamTransformation<T> transform);1502726910;Adds a feedback edge. The parallelism of the {@code StreamTransformation} must match_the parallelism of the input {@code StreamTransformation} of this_{@code FeedbackTransformation}__@param transform The new feedback {@code StreamTransformation}.;public void addFeedbackEdge(StreamTransformation<T> transform) {__		if (transform.getParallelism() != this.getParallelism()) {_			throw new UnsupportedOperationException(_					"Parallelism of the feedback stream must match the parallelism of the original" +_							" stream. Parallelism of original stream: " + this.getParallelism() +_							"_ parallelism of feedback stream: " + transform.getParallelism())__		}__		feedbackEdges.add(transform)__	};adds,a,feedback,edge,the,parallelism,of,the,code,stream,transformation,must,match,the,parallelism,of,the,input,code,stream,transformation,of,this,code,feedback,transformation,param,transform,the,new,feedback,code,stream,transformation;public,void,add,feedback,edge,stream,transformation,t,transform,if,transform,get,parallelism,this,get,parallelism,throw,new,unsupported,operation,exception,parallelism,of,the,feedback,stream,must,match,the,parallelism,of,the,original,stream,parallelism,of,original,stream,this,get,parallelism,parallelism,of,feedback,stream,transform,get,parallelism,feedback,edges,add,transform
FeedbackTransformation -> public void addFeedbackEdge(StreamTransformation<T> transform);1506071790;Adds a feedback edge. The parallelism of the {@code StreamTransformation} must match_the parallelism of the input {@code StreamTransformation} of this_{@code FeedbackTransformation}__@param transform The new feedback {@code StreamTransformation}.;public void addFeedbackEdge(StreamTransformation<T> transform) {__		if (transform.getParallelism() != this.getParallelism()) {_			throw new UnsupportedOperationException(_					"Parallelism of the feedback stream must match the parallelism of the original" +_							" stream. Parallelism of original stream: " + this.getParallelism() +_							"_ parallelism of feedback stream: " + transform.getParallelism() +_							". Parallelism can be modified using DataStream#setParallelism() method")__		}__		feedbackEdges.add(transform)__	};adds,a,feedback,edge,the,parallelism,of,the,code,stream,transformation,must,match,the,parallelism,of,the,input,code,stream,transformation,of,this,code,feedback,transformation,param,transform,the,new,feedback,code,stream,transformation;public,void,add,feedback,edge,stream,transformation,t,transform,if,transform,get,parallelism,this,get,parallelism,throw,new,unsupported,operation,exception,parallelism,of,the,feedback,stream,must,match,the,parallelism,of,the,original,stream,parallelism,of,original,stream,this,get,parallelism,parallelism,of,feedback,stream,transform,get,parallelism,parallelism,can,be,modified,using,data,stream,set,parallelism,method,feedback,edges,add,transform
