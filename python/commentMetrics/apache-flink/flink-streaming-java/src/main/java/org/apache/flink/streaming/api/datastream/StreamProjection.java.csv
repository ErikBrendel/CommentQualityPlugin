# id;timestamp;commentText;codeText;commentWords;codeWords
StreamProjection -> public <T0> SingleOutputStreamOperator<Tuple1<T0>> projectTuple1();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0> SingleOutputStreamOperator<Tuple1<T0>> projectTuple1() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple1<T0>>(_				fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,single,output,stream,operator,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple1,t0,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0> SingleOutputStreamOperator<Tuple1<T0>> projectTuple1();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0> SingleOutputStreamOperator<Tuple1<T0>> projectTuple1() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple1<T0>>(_				fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,single,output,stream,operator,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple1,t0,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0> SingleOutputStreamOperator<Tuple1<T0>> projectTuple1();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0> SingleOutputStreamOperator<Tuple1<T0>> projectTuple1() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple1<T0>>(_				fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,single,output,stream,operator,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple1,t0,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0> SingleOutputStreamOperator<Tuple1<T0>> projectTuple1();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0> SingleOutputStreamOperator<Tuple1<T0>> projectTuple1() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple1<T0>>(_				fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,single,output,stream,operator,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple1,t0,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, ?> projectTuple13();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, ?> projectTuple13() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,single,output,stream,operator,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, ?> projectTuple13();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, ?> projectTuple13() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,single,output,stream,operator,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>, ?> projectTuple18();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>, ?> projectTuple18() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,single,output,stream,operator,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>, ?> projectTuple18();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>, ?> projectTuple18() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,single,output,stream,operator,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> @SuppressWarnings("unchecked") 	public <OUT extends Tuple> SingleOutputStreamOperator<OUT> projectTupleX();1456778239;Chooses a projectTupleX according to the length of_{@link org.apache.flink.streaming.api.datastream.StreamProjection#fieldIndexes}__@return The projected DataStream._@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_	public <OUT extends Tuple> SingleOutputStreamOperator<OUT> projectTupleX() {_		SingleOutputStreamOperator<OUT> projOperator = null___		switch (fieldIndexes.length) {_			case 1: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple1()_ break__			case 2: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple2()_ break__			case 3: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple3()_ break__			case 4: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple4()_ break__			case 5: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple5()_ break__			case 6: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple6()_ break__			case 7: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple7()_ break__			case 8: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple8()_ break__			case 9: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple9()_ break__			case 10: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple10()_ break__			case 11: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple11()_ break__			case 12: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple12()_ break__			case 13: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple13()_ break__			case 14: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple14()_ break__			case 15: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple15()_ break__			case 16: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple16()_ break__			case 17: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple17()_ break__			case 18: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple18()_ break__			case 19: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple19()_ break__			case 20: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple20()_ break__			case 21: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple21()_ break__			case 22: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple22()_ break__			case 23: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple23()_ break__			case 24: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple24()_ break__			case 25: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple25()_ break__			default:_				throw new IllegalStateException("Excessive arity in tuple.")__		}__		return projOperator__	};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,streaming,api,datastream,stream,projection,field,indexes,return,the,projected,data,stream,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,single,output,stream,operator,out,project,tuple,x,single,output,stream,operator,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,single,output,stream,operator,out,project,tuple1,break,case,2,proj,operator,single,output,stream,operator,out,project,tuple2,break,case,3,proj,operator,single,output,stream,operator,out,project,tuple3,break,case,4,proj,operator,single,output,stream,operator,out,project,tuple4,break,case,5,proj,operator,single,output,stream,operator,out,project,tuple5,break,case,6,proj,operator,single,output,stream,operator,out,project,tuple6,break,case,7,proj,operator,single,output,stream,operator,out,project,tuple7,break,case,8,proj,operator,single,output,stream,operator,out,project,tuple8,break,case,9,proj,operator,single,output,stream,operator,out,project,tuple9,break,case,10,proj,operator,single,output,stream,operator,out,project,tuple10,break,case,11,proj,operator,single,output,stream,operator,out,project,tuple11,break,case,12,proj,operator,single,output,stream,operator,out,project,tuple12,break,case,13,proj,operator,single,output,stream,operator,out,project,tuple13,break,case,14,proj,operator,single,output,stream,operator,out,project,tuple14,break,case,15,proj,operator,single,output,stream,operator,out,project,tuple15,break,case,16,proj,operator,single,output,stream,operator,out,project,tuple16,break,case,17,proj,operator,single,output,stream,operator,out,project,tuple17,break,case,18,proj,operator,single,output,stream,operator,out,project,tuple18,break,case,19,proj,operator,single,output,stream,operator,out,project,tuple19,break,case,20,proj,operator,single,output,stream,operator,out,project,tuple20,break,case,21,proj,operator,single,output,stream,operator,out,project,tuple21,break,case,22,proj,operator,single,output,stream,operator,out,project,tuple22,break,case,23,proj,operator,single,output,stream,operator,out,project,tuple23,break,case,24,proj,operator,single,output,stream,operator,out,project,tuple24,break,case,25,proj,operator,single,output,stream,operator,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
StreamProjection -> @SuppressWarnings("unchecked") 	public <OUT extends Tuple> SingleOutputStreamOperator<OUT> projectTupleX();1465991918;Chooses a projectTupleX according to the length of_{@link org.apache.flink.streaming.api.datastream.StreamProjection#fieldIndexes}__@return The projected DataStream._@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_	public <OUT extends Tuple> SingleOutputStreamOperator<OUT> projectTupleX() {_		SingleOutputStreamOperator<OUT> projOperator = null___		switch (fieldIndexes.length) {_			case 1: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple1()_ break__			case 2: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple2()_ break__			case 3: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple3()_ break__			case 4: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple4()_ break__			case 5: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple5()_ break__			case 6: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple6()_ break__			case 7: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple7()_ break__			case 8: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple8()_ break__			case 9: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple9()_ break__			case 10: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple10()_ break__			case 11: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple11()_ break__			case 12: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple12()_ break__			case 13: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple13()_ break__			case 14: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple14()_ break__			case 15: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple15()_ break__			case 16: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple16()_ break__			case 17: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple17()_ break__			case 18: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple18()_ break__			case 19: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple19()_ break__			case 20: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple20()_ break__			case 21: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple21()_ break__			case 22: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple22()_ break__			case 23: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple23()_ break__			case 24: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple24()_ break__			case 25: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple25()_ break__			default:_				throw new IllegalStateException("Excessive arity in tuple.")__		}__		return projOperator__	};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,streaming,api,datastream,stream,projection,field,indexes,return,the,projected,data,stream,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,single,output,stream,operator,out,project,tuple,x,single,output,stream,operator,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,single,output,stream,operator,out,project,tuple1,break,case,2,proj,operator,single,output,stream,operator,out,project,tuple2,break,case,3,proj,operator,single,output,stream,operator,out,project,tuple3,break,case,4,proj,operator,single,output,stream,operator,out,project,tuple4,break,case,5,proj,operator,single,output,stream,operator,out,project,tuple5,break,case,6,proj,operator,single,output,stream,operator,out,project,tuple6,break,case,7,proj,operator,single,output,stream,operator,out,project,tuple7,break,case,8,proj,operator,single,output,stream,operator,out,project,tuple8,break,case,9,proj,operator,single,output,stream,operator,out,project,tuple9,break,case,10,proj,operator,single,output,stream,operator,out,project,tuple10,break,case,11,proj,operator,single,output,stream,operator,out,project,tuple11,break,case,12,proj,operator,single,output,stream,operator,out,project,tuple12,break,case,13,proj,operator,single,output,stream,operator,out,project,tuple13,break,case,14,proj,operator,single,output,stream,operator,out,project,tuple14,break,case,15,proj,operator,single,output,stream,operator,out,project,tuple15,break,case,16,proj,operator,single,output,stream,operator,out,project,tuple16,break,case,17,proj,operator,single,output,stream,operator,out,project,tuple17,break,case,18,proj,operator,single,output,stream,operator,out,project,tuple18,break,case,19,proj,operator,single,output,stream,operator,out,project,tuple19,break,case,20,proj,operator,single,output,stream,operator,out,project,tuple20,break,case,21,proj,operator,single,output,stream,operator,out,project,tuple21,break,case,22,proj,operator,single,output,stream,operator,out,project,tuple22,break,case,23,proj,operator,single,output,stream,operator,out,project,tuple23,break,case,24,proj,operator,single,output,stream,operator,out,project,tuple24,break,case,25,proj,operator,single,output,stream,operator,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
StreamProjection -> @SuppressWarnings("unchecked") 	public <OUT extends Tuple> SingleOutputStreamOperator<OUT> projectTupleX();1493195810;Chooses a projectTupleX according to the length of_{@link org.apache.flink.streaming.api.datastream.StreamProjection#fieldIndexes}.__@return The projected DataStream._@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_	public <OUT extends Tuple> SingleOutputStreamOperator<OUT> projectTupleX() {_		SingleOutputStreamOperator<OUT> projOperator = null___		switch (fieldIndexes.length) {_			case 1: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple1()_ break__			case 2: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple2()_ break__			case 3: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple3()_ break__			case 4: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple4()_ break__			case 5: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple5()_ break__			case 6: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple6()_ break__			case 7: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple7()_ break__			case 8: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple8()_ break__			case 9: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple9()_ break__			case 10: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple10()_ break__			case 11: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple11()_ break__			case 12: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple12()_ break__			case 13: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple13()_ break__			case 14: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple14()_ break__			case 15: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple15()_ break__			case 16: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple16()_ break__			case 17: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple17()_ break__			case 18: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple18()_ break__			case 19: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple19()_ break__			case 20: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple20()_ break__			case 21: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple21()_ break__			case 22: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple22()_ break__			case 23: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple23()_ break__			case 24: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple24()_ break__			case 25: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple25()_ break__			default:_				throw new IllegalStateException("Excessive arity in tuple.")__		}__		return projOperator__	};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,streaming,api,datastream,stream,projection,field,indexes,return,the,projected,data,stream,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,single,output,stream,operator,out,project,tuple,x,single,output,stream,operator,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,single,output,stream,operator,out,project,tuple1,break,case,2,proj,operator,single,output,stream,operator,out,project,tuple2,break,case,3,proj,operator,single,output,stream,operator,out,project,tuple3,break,case,4,proj,operator,single,output,stream,operator,out,project,tuple4,break,case,5,proj,operator,single,output,stream,operator,out,project,tuple5,break,case,6,proj,operator,single,output,stream,operator,out,project,tuple6,break,case,7,proj,operator,single,output,stream,operator,out,project,tuple7,break,case,8,proj,operator,single,output,stream,operator,out,project,tuple8,break,case,9,proj,operator,single,output,stream,operator,out,project,tuple9,break,case,10,proj,operator,single,output,stream,operator,out,project,tuple10,break,case,11,proj,operator,single,output,stream,operator,out,project,tuple11,break,case,12,proj,operator,single,output,stream,operator,out,project,tuple12,break,case,13,proj,operator,single,output,stream,operator,out,project,tuple13,break,case,14,proj,operator,single,output,stream,operator,out,project,tuple14,break,case,15,proj,operator,single,output,stream,operator,out,project,tuple15,break,case,16,proj,operator,single,output,stream,operator,out,project,tuple16,break,case,17,proj,operator,single,output,stream,operator,out,project,tuple17,break,case,18,proj,operator,single,output,stream,operator,out,project,tuple18,break,case,19,proj,operator,single,output,stream,operator,out,project,tuple19,break,case,20,proj,operator,single,output,stream,operator,out,project,tuple20,break,case,21,proj,operator,single,output,stream,operator,out,project,tuple21,break,case,22,proj,operator,single,output,stream,operator,out,project,tuple22,break,case,23,proj,operator,single,output,stream,operator,out,project,tuple23,break,case,24,proj,operator,single,output,stream,operator,out,project,tuple24,break,case,25,proj,operator,single,output,stream,operator,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
StreamProjection -> @SuppressWarnings("unchecked") 	public <OUT extends Tuple> SingleOutputStreamOperator<OUT> projectTupleX();1493195810;Chooses a projectTupleX according to the length of_{@link org.apache.flink.streaming.api.datastream.StreamProjection#fieldIndexes}.__@return The projected DataStream._@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_	public <OUT extends Tuple> SingleOutputStreamOperator<OUT> projectTupleX() {_		SingleOutputStreamOperator<OUT> projOperator = null___		switch (fieldIndexes.length) {_			case 1: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple1()_ break__			case 2: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple2()_ break__			case 3: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple3()_ break__			case 4: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple4()_ break__			case 5: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple5()_ break__			case 6: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple6()_ break__			case 7: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple7()_ break__			case 8: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple8()_ break__			case 9: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple9()_ break__			case 10: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple10()_ break__			case 11: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple11()_ break__			case 12: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple12()_ break__			case 13: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple13()_ break__			case 14: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple14()_ break__			case 15: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple15()_ break__			case 16: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple16()_ break__			case 17: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple17()_ break__			case 18: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple18()_ break__			case 19: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple19()_ break__			case 20: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple20()_ break__			case 21: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple21()_ break__			case 22: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple22()_ break__			case 23: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple23()_ break__			case 24: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple24()_ break__			case 25: projOperator = (SingleOutputStreamOperator<OUT>) projectTuple25()_ break__			default:_				throw new IllegalStateException("Excessive arity in tuple.")__		}__		return projOperator__	};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,streaming,api,datastream,stream,projection,field,indexes,return,the,projected,data,stream,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,single,output,stream,operator,out,project,tuple,x,single,output,stream,operator,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,single,output,stream,operator,out,project,tuple1,break,case,2,proj,operator,single,output,stream,operator,out,project,tuple2,break,case,3,proj,operator,single,output,stream,operator,out,project,tuple3,break,case,4,proj,operator,single,output,stream,operator,out,project,tuple4,break,case,5,proj,operator,single,output,stream,operator,out,project,tuple5,break,case,6,proj,operator,single,output,stream,operator,out,project,tuple6,break,case,7,proj,operator,single,output,stream,operator,out,project,tuple7,break,case,8,proj,operator,single,output,stream,operator,out,project,tuple8,break,case,9,proj,operator,single,output,stream,operator,out,project,tuple9,break,case,10,proj,operator,single,output,stream,operator,out,project,tuple10,break,case,11,proj,operator,single,output,stream,operator,out,project,tuple11,break,case,12,proj,operator,single,output,stream,operator,out,project,tuple12,break,case,13,proj,operator,single,output,stream,operator,out,project,tuple13,break,case,14,proj,operator,single,output,stream,operator,out,project,tuple14,break,case,15,proj,operator,single,output,stream,operator,out,project,tuple15,break,case,16,proj,operator,single,output,stream,operator,out,project,tuple16,break,case,17,proj,operator,single,output,stream,operator,out,project,tuple17,break,case,18,proj,operator,single,output,stream,operator,out,project,tuple18,break,case,19,proj,operator,single,output,stream,operator,out,project,tuple19,break,case,20,proj,operator,single,output,stream,operator,out,project,tuple20,break,case,21,proj,operator,single,output,stream,operator,out,project,tuple21,break,case,22,proj,operator,single,output,stream,operator,out,project,tuple22,break,case,23,proj,operator,single,output,stream,operator,out,project,tuple23,break,case,24,proj,operator,single,output,stream,operator,out,project,tuple24,break,case,25,proj,operator,single,output,stream,operator,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,single,output,stream,operator,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,single,output,stream,operator,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,single,output,stream,operator,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,single,output,stream,operator,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>> projectTuple4();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>> projectTuple4() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple4<T0, T1, T2, T3>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,single,output,stream,operator,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple4,t0,t1,t2,t3,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>> projectTuple4();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>> projectTuple4() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple4<T0, T1, T2, T3>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,single,output,stream,operator,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple4,t0,t1,t2,t3,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>> projectTuple4();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>> projectTuple4() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple4<T0, T1, T2, T3>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,single,output,stream,operator,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple4,t0,t1,t2,t3,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>> projectTuple4();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>> projectTuple4() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple4<T0, T1, T2, T3>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,single,output,stream,operator,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple4,t0,t1,t2,t3,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>> projectTuple3();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>> projectTuple3() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple3<T0, T1, T2>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,single,output,stream,operator,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple3,t0,t1,t2,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>> projectTuple3();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>> projectTuple3() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple3<T0, T1, T2>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,single,output,stream,operator,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple3,t0,t1,t2,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>> projectTuple3();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>> projectTuple3() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple3<T0, T1, T2>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,single,output,stream,operator,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple3,t0,t1,t2,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>> projectTuple3();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>> projectTuple3() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple3<T0, T1, T2>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,single,output,stream,operator,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple3,t0,t1,t2,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>, ?> projectTuple10();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>, ?> projectTuple10() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,single,output,stream,operator,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>, ?> projectTuple10();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>, ?> projectTuple10() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,single,output,stream,operator,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple6<T0, T1, T2, T3, T4, T5>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,single,output,stream,operator,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple6,t0,t1,t2,t3,t4,t5,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple6<T0, T1, T2, T3, T4, T5>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,single,output,stream,operator,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple6,t0,t1,t2,t3,t4,t5,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple6<T0, T1, T2, T3, T4, T5>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,single,output,stream,operator,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple6,t0,t1,t2,t3,t4,t5,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple6<T0, T1, T2, T3, T4, T5>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,single,output,stream,operator,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple6,t0,t1,t2,t3,t4,t5,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,single,output,stream,operator,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,single,output,stream,operator,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,single,output,stream,operator,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> SingleOutputStreamOperator<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,single,output,stream,operator,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> @SuppressWarnings("unchecked") 	public <OUT extends Tuple> SingleOutputStreamOperator<OUT, ?> projectTupleX();1445418103;Chooses a projectTupleX according to the length of_{@link org.apache.flink.streaming.api.datastream.StreamProjection#fieldIndexes}__@return The projected DataStream._@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_	public <OUT extends Tuple> SingleOutputStreamOperator<OUT, ?> projectTupleX() {_		SingleOutputStreamOperator<OUT, ?> projOperator = null___		switch (fieldIndexes.length) {_			case 1: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple1()_ break__			case 2: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple2()_ break__			case 3: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple3()_ break__			case 4: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple4()_ break__			case 5: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple5()_ break__			case 6: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple6()_ break__			case 7: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple7()_ break__			case 8: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple8()_ break__			case 9: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple9()_ break__			case 10: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple10()_ break__			case 11: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple11()_ break__			case 12: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple12()_ break__			case 13: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple13()_ break__			case 14: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple14()_ break__			case 15: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple15()_ break__			case 16: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple16()_ break__			case 17: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple17()_ break__			case 18: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple18()_ break__			case 19: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple19()_ break__			case 20: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple20()_ break__			case 21: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple21()_ break__			case 22: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple22()_ break__			case 23: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple23()_ break__			case 24: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple24()_ break__			case 25: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple25()_ break__			default:_				throw new IllegalStateException("Excessive arity in tuple.")__		}__		return projOperator__	};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,streaming,api,datastream,stream,projection,field,indexes,return,the,projected,data,stream,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,single,output,stream,operator,out,project,tuple,x,single,output,stream,operator,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,single,output,stream,operator,out,project,tuple1,break,case,2,proj,operator,single,output,stream,operator,out,project,tuple2,break,case,3,proj,operator,single,output,stream,operator,out,project,tuple3,break,case,4,proj,operator,single,output,stream,operator,out,project,tuple4,break,case,5,proj,operator,single,output,stream,operator,out,project,tuple5,break,case,6,proj,operator,single,output,stream,operator,out,project,tuple6,break,case,7,proj,operator,single,output,stream,operator,out,project,tuple7,break,case,8,proj,operator,single,output,stream,operator,out,project,tuple8,break,case,9,proj,operator,single,output,stream,operator,out,project,tuple9,break,case,10,proj,operator,single,output,stream,operator,out,project,tuple10,break,case,11,proj,operator,single,output,stream,operator,out,project,tuple11,break,case,12,proj,operator,single,output,stream,operator,out,project,tuple12,break,case,13,proj,operator,single,output,stream,operator,out,project,tuple13,break,case,14,proj,operator,single,output,stream,operator,out,project,tuple14,break,case,15,proj,operator,single,output,stream,operator,out,project,tuple15,break,case,16,proj,operator,single,output,stream,operator,out,project,tuple16,break,case,17,proj,operator,single,output,stream,operator,out,project,tuple17,break,case,18,proj,operator,single,output,stream,operator,out,project,tuple18,break,case,19,proj,operator,single,output,stream,operator,out,project,tuple19,break,case,20,proj,operator,single,output,stream,operator,out,project,tuple20,break,case,21,proj,operator,single,output,stream,operator,out,project,tuple21,break,case,22,proj,operator,single,output,stream,operator,out,project,tuple22,break,case,23,proj,operator,single,output,stream,operator,out,project,tuple23,break,case,24,proj,operator,single,output,stream,operator,out,project,tuple24,break,case,25,proj,operator,single,output,stream,operator,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
StreamProjection -> @SuppressWarnings("unchecked") 	public <OUT extends Tuple> SingleOutputStreamOperator<OUT, ?> projectTupleX();1455486690;Chooses a projectTupleX according to the length of_{@link org.apache.flink.streaming.api.datastream.StreamProjection#fieldIndexes}__@return The projected DataStream._@see org.apache.flink.api.java.operators.ProjectOperator.Projection;@SuppressWarnings("unchecked")_	public <OUT extends Tuple> SingleOutputStreamOperator<OUT, ?> projectTupleX() {_		SingleOutputStreamOperator<OUT, ?> projOperator = null___		switch (fieldIndexes.length) {_			case 1: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple1()_ break__			case 2: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple2()_ break__			case 3: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple3()_ break__			case 4: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple4()_ break__			case 5: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple5()_ break__			case 6: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple6()_ break__			case 7: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple7()_ break__			case 8: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple8()_ break__			case 9: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple9()_ break__			case 10: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple10()_ break__			case 11: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple11()_ break__			case 12: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple12()_ break__			case 13: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple13()_ break__			case 14: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple14()_ break__			case 15: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple15()_ break__			case 16: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple16()_ break__			case 17: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple17()_ break__			case 18: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple18()_ break__			case 19: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple19()_ break__			case 20: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple20()_ break__			case 21: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple21()_ break__			case 22: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple22()_ break__			case 23: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple23()_ break__			case 24: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple24()_ break__			case 25: projOperator = (SingleOutputStreamOperator<OUT, ?>) projectTuple25()_ break__			default:_				throw new IllegalStateException("Excessive arity in tuple.")__		}__		return projOperator__	};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,streaming,api,datastream,stream,projection,field,indexes,return,the,projected,data,stream,see,org,apache,flink,api,java,operators,project,operator,projection;suppress,warnings,unchecked,public,out,extends,tuple,single,output,stream,operator,out,project,tuple,x,single,output,stream,operator,out,proj,operator,null,switch,field,indexes,length,case,1,proj,operator,single,output,stream,operator,out,project,tuple1,break,case,2,proj,operator,single,output,stream,operator,out,project,tuple2,break,case,3,proj,operator,single,output,stream,operator,out,project,tuple3,break,case,4,proj,operator,single,output,stream,operator,out,project,tuple4,break,case,5,proj,operator,single,output,stream,operator,out,project,tuple5,break,case,6,proj,operator,single,output,stream,operator,out,project,tuple6,break,case,7,proj,operator,single,output,stream,operator,out,project,tuple7,break,case,8,proj,operator,single,output,stream,operator,out,project,tuple8,break,case,9,proj,operator,single,output,stream,operator,out,project,tuple9,break,case,10,proj,operator,single,output,stream,operator,out,project,tuple10,break,case,11,proj,operator,single,output,stream,operator,out,project,tuple11,break,case,12,proj,operator,single,output,stream,operator,out,project,tuple12,break,case,13,proj,operator,single,output,stream,operator,out,project,tuple13,break,case,14,proj,operator,single,output,stream,operator,out,project,tuple14,break,case,15,proj,operator,single,output,stream,operator,out,project,tuple15,break,case,16,proj,operator,single,output,stream,operator,out,project,tuple16,break,case,17,proj,operator,single,output,stream,operator,out,project,tuple17,break,case,18,proj,operator,single,output,stream,operator,out,project,tuple18,break,case,19,proj,operator,single,output,stream,operator,out,project,tuple19,break,case,20,proj,operator,single,output,stream,operator,out,project,tuple20,break,case,21,proj,operator,single,output,stream,operator,out,project,tuple21,break,case,22,proj,operator,single,output,stream,operator,out,project,tuple22,break,case,23,proj,operator,single,output,stream,operator,out,project,tuple23,break,case,24,proj,operator,single,output,stream,operator,out,project,tuple24,break,case,25,proj,operator,single,output,stream,operator,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,proj,operator
StreamProjection -> public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>, ?> projectTuple6();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>, ?> projectTuple6() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple6<T0, T1, T2, T3, T4, T5>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,single,output,stream,operator,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple6,t0,t1,t2,t3,t4,t5,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>, ?> projectTuple6();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5> SingleOutputStreamOperator<Tuple6<T0, T1, T2, T3, T4, T5>, ?> projectTuple6() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple6<T0, T1, T2, T3, T4, T5>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,single,output,stream,operator,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple6,t0,t1,t2,t3,t4,t5,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, ?> projectTuple17();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, ?> projectTuple17() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,single,output,stream,operator,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, ?> projectTuple17();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, ?> projectTuple17() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,single,output,stream,operator,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,single,output,stream,operator,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,single,output,stream,operator,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,single,output,stream,operator,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,single,output,stream,operator,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,single,output,stream,operator,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,single,output,stream,operator,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,single,output,stream,operator,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,single,output,stream,operator,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>> projectTuple2();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>> projectTuple2() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple2<T0, T1>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,single,output,stream,operator,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple2,t0,t1,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>> projectTuple2();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>> projectTuple2() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple2<T0, T1>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,single,output,stream,operator,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple2,t0,t1,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>> projectTuple2();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>> projectTuple2() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple2<T0, T1>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,single,output,stream,operator,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple2,t0,t1,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>> projectTuple2();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>> projectTuple2() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple2<T0, T1>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,single,output,stream,operator,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple2,t0,t1,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>, ?> projectTuple8();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>, ?> projectTuple8() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,single,output,stream,operator,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>, ?> projectTuple8();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>, ?> projectTuple8() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,single,output,stream,operator,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, ?> projectTuple16();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, ?> projectTuple16() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,single,output,stream,operator,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, ?> projectTuple16();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SingleOutputStreamOperator<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, ?> projectTuple16() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,single,output,stream,operator,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,single,output,stream,operator,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,single,output,stream,operator,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,single,output,stream,operator,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,single,output,stream,operator,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,single,output,stream,operator,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,single,output,stream,operator,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,single,output,stream,operator,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SingleOutputStreamOperator<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,single,output,stream,operator,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0> SingleOutputStreamOperator<Tuple1<T0>, ?> projectTuple1();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0> SingleOutputStreamOperator<Tuple1<T0>, ?> projectTuple1() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple1<T0>>(_				fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,single,output,stream,operator,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple1,t0,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0> SingleOutputStreamOperator<Tuple1<T0>, ?> projectTuple1();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0> SingleOutputStreamOperator<Tuple1<T0>, ?> projectTuple1() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple1<T0>>(_				fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,single,output,stream,operator,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple1,t0,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, ?> projectTuple12();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, ?> projectTuple12() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,single,output,stream,operator,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, ?> projectTuple12();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, ?> projectTuple12() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,single,output,stream,operator,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,single,output,stream,operator,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,single,output,stream,operator,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,single,output,stream,operator,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SingleOutputStreamOperator<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,single,output,stream,operator,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,single,output,stream,operator,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,single,output,stream,operator,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,single,output,stream,operator,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,single,output,stream,operator,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,single,output,stream,operator,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,single,output,stream,operator,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,single,output,stream,operator,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,single,output,stream,operator,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,single,output,stream,operator,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,single,output,stream,operator,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,single,output,stream,operator,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7> SingleOutputStreamOperator<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,single,output,stream,operator,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, ?> projectTuple11();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, ?> projectTuple11() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,single,output,stream,operator,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, ?> projectTuple11();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, ?> projectTuple11() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,single,output,stream,operator,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple5<T0, T1, T2, T3, T4>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,single,output,stream,operator,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple5,t0,t1,t2,t3,t4,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple5<T0, T1, T2, T3, T4>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,single,output,stream,operator,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple5,t0,t1,t2,t3,t4,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple5<T0, T1, T2, T3, T4>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,single,output,stream,operator,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple5,t0,t1,t2,t3,t4,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple5<T0, T1, T2, T3, T4>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,single,output,stream,operator,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple5,t0,t1,t2,t3,t4,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>, ?> projectTuple7();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>, ?> projectTuple7() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,single,output,stream,operator,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple7,t0,t1,t2,t3,t4,t5,t6,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>, ?> projectTuple7();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>, ?> projectTuple7() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,single,output,stream,operator,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple7,t0,t1,t2,t3,t4,t5,t6,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>, ?> projectTuple23();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>, ?> projectTuple23() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,single,output,stream,operator,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>, ?> projectTuple23();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>, ?> projectTuple23() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,single,output,stream,operator,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>, ?> projectTuple25();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>, ?> projectTuple25() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,single,output,stream,operator,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>, ?> projectTuple25();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> SingleOutputStreamOperator<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>, ?> projectTuple25() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,single,output,stream,operator,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>, ?> projectTuple24();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>, ?> projectTuple24() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,single,output,stream,operator,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>, ?> projectTuple24();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>, ?> projectTuple24() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,single,output,stream,operator,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, ?> projectTuple15();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, ?> projectTuple15() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,single,output,stream,operator,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, ?> projectTuple15();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SingleOutputStreamOperator<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, ?> projectTuple15() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,single,output,stream,operator,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,single,output,stream,operator,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,single,output,stream,operator,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,single,output,stream,operator,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,single,output,stream,operator,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,single,output,stream,operator,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,single,output,stream,operator,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,single,output,stream,operator,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> SingleOutputStreamOperator<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,single,output,stream,operator,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,single,output,stream,operator,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,single,output,stream,operator,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,single,output,stream,operator,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> SingleOutputStreamOperator<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,single,output,stream,operator,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,single,output,stream,operator,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple7,t0,t1,t2,t3,t4,t5,t6,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,single,output,stream,operator,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple7,t0,t1,t2,t3,t4,t5,t6,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,single,output,stream,operator,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple7,t0,t1,t2,t3,t4,t5,t6,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6> SingleOutputStreamOperator<Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,single,output,stream,operator,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple7,t0,t1,t2,t3,t4,t5,t6,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,single,output,stream,operator,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,single,output,stream,operator,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,single,output,stream,operator,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SingleOutputStreamOperator<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,single,output,stream,operator,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,single,output,stream,operator,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,single,output,stream,operator,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,single,output,stream,operator,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SingleOutputStreamOperator<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,single,output,stream,operator,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>, ?> projectTuple4();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>, ?> projectTuple4() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple4<T0, T1, T2, T3>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,single,output,stream,operator,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple4,t0,t1,t2,t3,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>, ?> projectTuple4();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3> SingleOutputStreamOperator<Tuple4<T0, T1, T2, T3>, ?> projectTuple4() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple4<T0, T1, T2, T3>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,single,output,stream,operator,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple4,t0,t1,t2,t3,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,single,output,stream,operator,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,single,output,stream,operator,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,single,output,stream,operator,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,single,output,stream,operator,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,single,output,stream,operator,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,single,output,stream,operator,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,single,output,stream,operator,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,single,output,stream,operator,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>, ?> projectTuple9();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>, ?> projectTuple9() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,single,output,stream,operator,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>, ?> projectTuple9();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> SingleOutputStreamOperator<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>, ?> projectTuple9() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,single,output,stream,operator,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>, ?> projectTuple20();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>, ?> projectTuple20() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,single,output,stream,operator,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>, ?> projectTuple20();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> SingleOutputStreamOperator<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>, ?> projectTuple20() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,single,output,stream,operator,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>, ?> projectTuple21();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>, ?> projectTuple21() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,single,output,stream,operator,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>, ?> projectTuple21();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> SingleOutputStreamOperator<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>, ?> projectTuple21() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,single,output,stream,operator,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, ?> projectTuple14();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, ?> projectTuple14() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,single,output,stream,operator,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, ?> projectTuple14();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SingleOutputStreamOperator<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, ?> projectTuple14() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,single,output,stream,operator,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>, ?> projectTuple3();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>, ?> projectTuple3() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple3<T0, T1, T2>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,single,output,stream,operator,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple3,t0,t1,t2,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>, ?> projectTuple3();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2> SingleOutputStreamOperator<Tuple3<T0, T1, T2>, ?> projectTuple3() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple3<T0, T1, T2>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,single,output,stream,operator,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple3,t0,t1,t2,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1456778239;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,single,output,stream,operator,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1465991918;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,single,output,stream,operator,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,single,output,stream,operator,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1493195810;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> SingleOutputStreamOperator<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,single,output,stream,operator,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>, ?> projectTuple22();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>, ?> projectTuple22() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,single,output,stream,operator,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>, ?> projectTuple22();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> SingleOutputStreamOperator<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>, ?> projectTuple22() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,single,output,stream,operator,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>, ?> projectTuple5();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>, ?> projectTuple5() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple5<T0, T1, T2, T3, T4>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,single,output,stream,operator,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple5,t0,t1,t2,t3,t4,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>, ?> projectTuple5();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4> SingleOutputStreamOperator<Tuple5<T0, T1, T2, T3, T4>, ?> projectTuple5() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple5<T0, T1, T2, T3, T4>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,single,output,stream,operator,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple5,t0,t1,t2,t3,t4,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>, ?> projectTuple19();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>, ?> projectTuple19() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,single,output,stream,operator,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>, ?> projectTuple19();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> SingleOutputStreamOperator<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>, ?> projectTuple19() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,single,output,stream,operator,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>, ?> projectTuple2();1445418103;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>, ?> projectTuple2() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple2<T0, T1>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,single,output,stream,operator,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple2,t0,t1,field,indexes,t,type,create,serializer,data,stream,get,execution,config
StreamProjection -> public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>, ?> projectTuple2();1455486690;Projects a {@link Tuple} {@link DataStream} to the previously selected fields.__@return The projected DataStream._@see Tuple_@see DataStream;public <T0, T1> SingleOutputStreamOperator<Tuple2<T0, T1>, ?> projectTuple2() {_		TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, dataStream.getType())__		TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___		return dataStream.transform("Projection", tType, new StreamProject<IN, Tuple2<T0, T1>>(fieldIndexes, tType.createSerializer(dataStream.getExecutionConfig())))__	};projects,a,link,tuple,link,data,stream,to,the,previously,selected,fields,return,the,projected,data,stream,see,tuple,see,data,stream;public,t0,t1,single,output,stream,operator,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,data,stream,get,type,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,data,stream,transform,projection,t,type,new,stream,project,in,tuple2,t0,t1,field,indexes,t,type,create,serializer,data,stream,get,execution,config
