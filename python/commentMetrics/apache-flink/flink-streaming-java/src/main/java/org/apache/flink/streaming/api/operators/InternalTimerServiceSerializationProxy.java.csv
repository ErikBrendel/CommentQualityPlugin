commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;0;4;;@Override public int[] getCompatibleVersions() {     return new int[] { VERSION, 1 }. }
false;public;1;22;;@Override @SuppressWarnings("unchecked") public void write(DataOutputView out) throws IOException {     super.write(out).     final Map<String, InternalTimerServiceImpl<K, ?>> registeredTimerServices = timerServicesManager.getRegisteredTimerServices().     out.writeInt(registeredTimerServices.size()).     for (Map.Entry<String, InternalTimerServiceImpl<K, ?>> entry : registeredTimerServices.entrySet()) {         String serviceName = entry.getKey().         InternalTimerServiceImpl<K, ?> timerService = entry.getValue().         out.writeUTF(serviceName).         InternalTimersSnapshotReaderWriters.getWriterForVersion(VERSION, timerService.snapshotTimersForKeyGroup(keyGroupIdx), timerService.getKeySerializer(), (TypeSerializer) timerService.getNamespaceSerializer()).writeTimersSnapshot(out).     } }
false;protected;2;19;;@Override protected void read(DataInputView in, boolean wasVersioned) throws IOException {     int noOfTimerServices = in.readInt().     for (int i = 0. i < noOfTimerServices. i++) {         String serviceName = in.readUTF().         int readerVersion = wasVersioned ? getReadVersion() : InternalTimersSnapshotReaderWriters.NO_VERSION.         InternalTimersSnapshot<?, ?> restoredTimersSnapshot = InternalTimersSnapshotReaderWriters.getReaderForVersion(readerVersion, userCodeClassLoader).readTimersSnapshot(in).         InternalTimerServiceImpl<K, ?> timerService = registerOrGetTimerService(serviceName, restoredTimersSnapshot).         timerService.restoreTimersForKeyGroup(restoredTimersSnapshot, keyGroupIdx).     } }
false;private;2;8;;@SuppressWarnings("unchecked") private <N> InternalTimerServiceImpl<K, N> registerOrGetTimerService(String serviceName, InternalTimersSnapshot<?, ?> restoredTimersSnapshot) {     final TypeSerializer<K> keySerializer = (TypeSerializer<K>) restoredTimersSnapshot.getKeySerializerSnapshot().restoreSerializer().     final TypeSerializer<N> namespaceSerializer = (TypeSerializer<N>) restoredTimersSnapshot.getNamespaceSerializerSnapshot().restoreSerializer().     TimerSerializer<K, N> timerSerializer = new TimerSerializer<>(keySerializer, namespaceSerializer).     return timerServicesManager.registerOrGetTimerService(serviceName, timerSerializer). }
