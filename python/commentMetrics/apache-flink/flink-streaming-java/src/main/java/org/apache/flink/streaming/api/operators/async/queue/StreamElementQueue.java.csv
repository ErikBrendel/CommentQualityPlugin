commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Put the given element in the queue if capacity is left. If not, then block until this is  * the case.  *  * @param streamElementQueueEntry to be put into the queue  * @param <T> Type of the entries future value  * @throws InterruptedException if the calling thread has been interrupted while waiting to  * 	insert the given element  */ ;/**  * Put the given element in the queue if capacity is left. If not, then block until this is  * the case.  *  * @param streamElementQueueEntry to be put into the queue  * @param <T> Type of the entries future value  * @throws InterruptedException if the calling thread has been interrupted while waiting to  * 	insert the given element  */ <T> void put(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException.
true;;1;1;/**  * Try to put the given element in the queue. This operation succeeds if the queue has capacity  * left and fails if the queue is full.  *  * @param streamElementQueueEntry to be inserted  * @param <T> Type of the entries future value  * @return True if the entry could be inserted. otherwise false  * @throws InterruptedException if the calling thread has been interrupted while waiting to  * 	insert the given element  */ ;/**  * Try to put the given element in the queue. This operation succeeds if the queue has capacity  * left and fails if the queue is full.  *  * @param streamElementQueueEntry to be inserted  * @param <T> Type of the entries future value  * @return True if the entry could be inserted. otherwise false  * @throws InterruptedException if the calling thread has been interrupted while waiting to  * 	insert the given element  */ <T> boolean tryPut(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException.
true;;0;1;/**  * Peek at the head of the queue and return the first completed {@link AsyncResult}. This  * operation is a blocking operation and only returns once a completed async result has been  * found.  *  * @return Completed {@link AsyncResult}  * @throws InterruptedException if the current thread has been interrupted while waiting for a  * 	completed async result.  */ ;/**  * Peek at the head of the queue and return the first completed {@link AsyncResult}. This  * operation is a blocking operation and only returns once a completed async result has been  * found.  *  * @return Completed {@link AsyncResult}  * @throws InterruptedException if the current thread has been interrupted while waiting for a  * 	completed async result.  */ AsyncResult peekBlockingly() throws InterruptedException.
true;;0;1;/**  * Poll the first completed {@link AsyncResult} from the head of this queue. This operation is  * blocking and only returns once a completed async result has been found.  *  * @return Completed {@link AsyncResult} which has been removed from the queue  * @throws InterruptedException if the current thread has been interrupted while waiting for a  * 	completed async result.  */ ;/**  * Poll the first completed {@link AsyncResult} from the head of this queue. This operation is  * blocking and only returns once a completed async result has been found.  *  * @return Completed {@link AsyncResult} which has been removed from the queue  * @throws InterruptedException if the current thread has been interrupted while waiting for a  * 	completed async result.  */ AsyncResult poll() throws InterruptedException.
true;;0;1;/**  * Return the collection of {@link StreamElementQueueEntry} currently contained in this queue.  *  * @return Collection of currently contained {@link StreamElementQueueEntry}.  * @throws InterruptedException if the current thread has been interrupted while retrieving the  * 	stream element queue entries of this queue.  */ ;/**  * Return the collection of {@link StreamElementQueueEntry} currently contained in this queue.  *  * @return Collection of currently contained {@link StreamElementQueueEntry}.  * @throws InterruptedException if the current thread has been interrupted while retrieving the  * 	stream element queue entries of this queue.  */ Collection<StreamElementQueueEntry<?>> values() throws InterruptedException.
true;;0;1;/**  * True if the queue is empty. otherwise false.  *  * @return True if the queue is empty. otherwise false.  */ ;/**  * True if the queue is empty. otherwise false.  *  * @return True if the queue is empty. otherwise false.  */ boolean isEmpty().
true;;0;1;/**  * Return the size of the queue.  *  * @return The number of elements contained in this queue.  */ ;/**  * Return the size of the queue.  *  * @return The number of elements contained in this queue.  */ int size().
