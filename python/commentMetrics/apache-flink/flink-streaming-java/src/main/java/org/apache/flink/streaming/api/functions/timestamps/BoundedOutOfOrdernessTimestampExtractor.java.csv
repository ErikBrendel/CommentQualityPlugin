commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long getMaxOutOfOrdernessInMillis() {     return maxOutOfOrderness. }
true;public,abstract;1;1;/**  * Extracts the timestamp from the given element.  *  * @param element The element that the timestamp is extracted from.  * @return The new timestamp.  */ ;/**  * Extracts the timestamp from the given element.  *  * @param element The element that the timestamp is extracted from.  * @return The new timestamp.  */ public abstract long extractTimestamp(T element).
false;public,final;0;9;;@Override public final Watermark getCurrentWatermark() {     // this guarantees that the watermark never goes backwards.     long potentialWM = currentMaxTimestamp - maxOutOfOrderness.     if (potentialWM >= lastEmittedWatermark) {         lastEmittedWatermark = potentialWM.     }     return new Watermark(lastEmittedWatermark). }
false;public,final;2;8;;@Override public final long extractTimestamp(T element, long previousElementTimestamp) {     long timestamp = extractTimestamp(element).     if (timestamp > currentMaxTimestamp) {         currentMaxTimestamp = timestamp.     }     return timestamp. }
