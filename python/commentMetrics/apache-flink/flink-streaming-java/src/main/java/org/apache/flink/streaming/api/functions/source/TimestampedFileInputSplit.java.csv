commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Sets the state of the split. This information is used when restoring from a checkpoint and  * allows to resume reading the underlying file from the point we left off.  *  * <p>* This is applicable to  * {@link org.apache.flink.api.common.io.FileInputFormat FileInputFormats} that implement the  * {@link org.apache.flink.api.common.io.CheckpointableInputFormat} interface.  */ ;/**  * Sets the state of the split. This information is used when restoring from a checkpoint and  * allows to resume reading the underlying file from the point we left off.  *  * <p>* This is applicable to  * {@link org.apache.flink.api.common.io.FileInputFormat FileInputFormats} that implement the  * {@link org.apache.flink.api.common.io.CheckpointableInputFormat} interface.  */ public void setSplitState(Serializable state) {     this.splitState = state. }
true;public;0;3;/**  * Sets the state of the split to {@code null}.  */ ;/**  * Sets the state of the split to {@code null}.  */ public void resetSplitState() {     this.setSplitState(null). }
true;public;0;3;/**  * @return the state of the split.  */ ;/**  * @return the state of the split.  */ public Serializable getSplitState() {     return this.splitState. }
true;public;0;3;/**  * @return The modification time of the file this split belongs to.  */ ;/**  * @return The modification time of the file this split belongs to.  */ public long getModificationTime() {     return this.modificationTime. }
false;public;1;20;;@Override public int compareTo(TimestampedFileInputSplit o) {     int modTimeComp = Long.compare(this.modificationTime, o.modificationTime).     if (modTimeComp != 0L) {         return modTimeComp.     }     // the file input split does not prevent null paths.     if (this.getPath() == null && o.getPath() != null) {         return 1.     } else if (this.getPath() != null && o.getPath() == null) {         return -1.     }     int pathComp = this.getPath() == o.getPath() ? 0 : this.getPath().compareTo(o.getPath()).     return pathComp != 0 ? pathComp : this.getSplitNumber() - o.getSplitNumber(). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     } else if (o instanceof TimestampedFileInputSplit && super.equals(o)) {         TimestampedFileInputSplit that = (TimestampedFileInputSplit) o.         return this.modificationTime == that.modificationTime.     }     return false. }
false;public;0;5;;@Override public int hashCode() {     int res = 37 * (int) (this.modificationTime ^ (this.modificationTime >>> 32)).     return 37 * res + super.hashCode(). }
false;public;0;5;;@Override public String toString() {     return "[" + getSplitNumber() + "] " + getPath() + " mod@ " + modificationTime + " : " + getStart() + " + " + getLength(). }
