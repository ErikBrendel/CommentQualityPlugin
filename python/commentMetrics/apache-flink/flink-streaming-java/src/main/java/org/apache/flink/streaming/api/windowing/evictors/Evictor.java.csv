# id;timestamp;commentText;codeText;commentWords;codeWords
Evictor -> void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1479200724;Optionally evicts elements. Called before windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,before,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,before,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1479217936;Optionally evicts elements. Called before windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,before,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,before,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1479220806;Optionally evicts elements. Called before windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,before,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,before,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1493195810;Optionally evicts elements. Called before windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,before,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,before,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1493195810;Optionally evicts elements. Called before windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,before,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,before,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1495484544;Optionally evicts elements. Called before windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,before,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,before,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> int evict(Iterable<StreamRecord<T>> elements, int size, W window)_;1445418103;Computes how many elements should be removed from the pane. The result specifies how_many elements should be removed from the beginning.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window};int evict(Iterable<StreamRecord<T>> elements, int size, W window)_;computes,how,many,elements,should,be,removed,from,the,pane,the,result,specifies,how,many,elements,should,be,removed,from,the,beginning,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window;int,evict,iterable,stream,record,t,elements,int,size,w,window
Evictor -> int evict(Iterable<StreamRecord<T>> elements, int size, W window)_;1455486690;Computes how many elements should be removed from the pane. The result specifies how_many elements should be removed from the beginning.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window};int evict(Iterable<StreamRecord<T>> elements, int size, W window)_;computes,how,many,elements,should,be,removed,from,the,pane,the,result,specifies,how,many,elements,should,be,removed,from,the,beginning,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window;int,evict,iterable,stream,record,t,elements,int,size,w,window
Evictor -> EvictorContext -> long getCurrentWatermark()_;1479217936;Returns the current watermark time.;long getCurrentWatermark()_;returns,the,current,watermark,time;long,get,current,watermark
Evictor -> EvictorContext -> long getCurrentWatermark()_;1479220806;Returns the current watermark time.;long getCurrentWatermark()_;returns,the,current,watermark,time;long,get,current,watermark
Evictor -> EvictorContext -> long getCurrentWatermark()_;1493195810;Returns the current watermark time.;long getCurrentWatermark()_;returns,the,current,watermark,time;long,get,current,watermark
Evictor -> EvictorContext -> long getCurrentWatermark()_;1493195810;Returns the current watermark time.;long getCurrentWatermark()_;returns,the,current,watermark,time;long,get,current,watermark
Evictor -> EvictorContext -> long getCurrentWatermark()_;1495484544;Returns the current watermark time.;long getCurrentWatermark()_;returns,the,current,watermark,time;long,get,current,watermark
Evictor -> void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1479200724;Optionally evicts elements. Called after windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,after,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,after,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1479217936;Optionally evicts elements. Called after windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,after,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,after,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1479220806;Optionally evicts elements. Called after windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,after,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,after,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1493195810;Optionally evicts elements. Called after windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,after,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,after,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1493195810;Optionally evicts elements. Called after windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,after,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,after,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;1495484544;Optionally evicts elements. Called after windowing function.__@param elements The elements currently in the pane._@param size The current number of elements in the pane._@param window The {@link Window}_@param evictorContext The context for the Evictor;void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext evictorContext)_;optionally,evicts,elements,called,after,windowing,function,param,elements,the,elements,currently,in,the,pane,param,size,the,current,number,of,elements,in,the,pane,param,window,the,link,window,param,evictor,context,the,context,for,the,evictor;void,evict,after,iterable,timestamped,value,t,elements,int,size,w,window,evictor,context,evictor,context
Evictor -> EvictorContext -> long getCurrentProcessingTime()_;1479200724;Returns the current processing time, as returned by_the {@link ProcessingTimeService#getCurrentProcessingTime}.;long getCurrentProcessingTime()_;returns,the,current,processing,time,as,returned,by,the,link,processing,time,service,get,current,processing,time;long,get,current,processing,time
Evictor -> EvictorContext -> long getCurrentProcessingTime()_;1479217936;Returns the current processing time.;long getCurrentProcessingTime()_;returns,the,current,processing,time;long,get,current,processing,time
Evictor -> EvictorContext -> long getCurrentProcessingTime()_;1479220806;Returns the current processing time.;long getCurrentProcessingTime()_;returns,the,current,processing,time;long,get,current,processing,time
Evictor -> EvictorContext -> long getCurrentProcessingTime()_;1493195810;Returns the current processing time.;long getCurrentProcessingTime()_;returns,the,current,processing,time;long,get,current,processing,time
Evictor -> EvictorContext -> long getCurrentProcessingTime()_;1493195810;Returns the current processing time.;long getCurrentProcessingTime()_;returns,the,current,processing,time;long,get,current,processing,time
Evictor -> EvictorContext -> long getCurrentProcessingTime()_;1495484544;Returns the current processing time.;long getCurrentProcessingTime()_;returns,the,current,processing,time;long,get,current,processing,time
Evictor -> EvictorContext -> MetricGroup getMetricGroup()_;1479200724;Returns the metric group for this {@link Evictor}. This is the same metric_group that would be returned from {@link RuntimeContext#getMetricGroup()} in a user_function.__<p>You must not call methods that create metric objects_(such as {@link MetricGroup#counter(int)} multiple times but instead call once_and store the metric object in a field.;MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,link,evictor,this,is,the,same,metric,group,that,would,be,returned,from,link,runtime,context,get,metric,group,in,a,user,function,p,you,must,not,call,methods,that,create,metric,objects,such,as,link,metric,group,counter,int,multiple,times,but,instead,call,once,and,store,the,metric,object,in,a,field;metric,group,get,metric,group
Evictor -> EvictorContext -> MetricGroup getMetricGroup()_;1479217936;Returns the metric group for this {@link Evictor}. This is the same metric_group that would be returned from {@link RuntimeContext#getMetricGroup()} in a user_function.__<p>You must not call methods that create metric objects_(such as {@link MetricGroup#counter(int)} multiple times but instead call once_and store the metric object in a field.;MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,link,evictor,this,is,the,same,metric,group,that,would,be,returned,from,link,runtime,context,get,metric,group,in,a,user,function,p,you,must,not,call,methods,that,create,metric,objects,such,as,link,metric,group,counter,int,multiple,times,but,instead,call,once,and,store,the,metric,object,in,a,field;metric,group,get,metric,group
Evictor -> EvictorContext -> MetricGroup getMetricGroup()_;1479220806;Returns the metric group for this {@link Evictor}. This is the same metric_group that would be returned from {@link RuntimeContext#getMetricGroup()} in a user_function.__<p>You must not call methods that create metric objects_(such as {@link MetricGroup#counter(int)} multiple times but instead call once_and store the metric object in a field.;MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,link,evictor,this,is,the,same,metric,group,that,would,be,returned,from,link,runtime,context,get,metric,group,in,a,user,function,p,you,must,not,call,methods,that,create,metric,objects,such,as,link,metric,group,counter,int,multiple,times,but,instead,call,once,and,store,the,metric,object,in,a,field;metric,group,get,metric,group
Evictor -> EvictorContext -> MetricGroup getMetricGroup()_;1493195810;Returns the metric group for this {@link Evictor}. This is the same metric_group that would be returned from {@link RuntimeContext#getMetricGroup()} in a user_function.__<p>You must not call methods that create metric objects_(such as {@link MetricGroup#counter(int)} multiple times but instead call once_and store the metric object in a field.;MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,link,evictor,this,is,the,same,metric,group,that,would,be,returned,from,link,runtime,context,get,metric,group,in,a,user,function,p,you,must,not,call,methods,that,create,metric,objects,such,as,link,metric,group,counter,int,multiple,times,but,instead,call,once,and,store,the,metric,object,in,a,field;metric,group,get,metric,group
Evictor -> EvictorContext -> MetricGroup getMetricGroup()_;1493195810;Returns the metric group for this {@link Evictor}. This is the same metric_group that would be returned from {@link RuntimeContext#getMetricGroup()} in a user_function.__<p>You must not call methods that create metric objects_(such as {@link MetricGroup#counter(int)} multiple times but instead call once_and store the metric object in a field.;MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,link,evictor,this,is,the,same,metric,group,that,would,be,returned,from,link,runtime,context,get,metric,group,in,a,user,function,p,you,must,not,call,methods,that,create,metric,objects,such,as,link,metric,group,counter,int,multiple,times,but,instead,call,once,and,store,the,metric,object,in,a,field;metric,group,get,metric,group
Evictor -> EvictorContext -> MetricGroup getMetricGroup()_;1495484544;Returns the metric group for this {@link Evictor}. This is the same metric_group that would be returned from {@link RuntimeContext#getMetricGroup()} in a user_function.__<p>You must not call methods that create metric objects_(such as {@link MetricGroup#counter(int)} multiple times but instead call once_and store the metric object in a field.;MetricGroup getMetricGroup()_;returns,the,metric,group,for,this,link,evictor,this,is,the,same,metric,group,that,would,be,returned,from,link,runtime,context,get,metric,group,in,a,user,function,p,you,must,not,call,methods,that,create,metric,objects,such,as,link,metric,group,counter,int,multiple,times,but,instead,call,once,and,store,the,metric,object,in,a,field;metric,group,get,metric,group
