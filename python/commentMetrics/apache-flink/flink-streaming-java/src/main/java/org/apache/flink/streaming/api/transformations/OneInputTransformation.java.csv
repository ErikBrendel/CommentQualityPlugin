commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.  */ ;/**  * Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.  */ public StreamTransformation<IN> getInput() {     return input. }
true;public;0;3;/**  * Returns the {@code TypeInformation} for the elements of the input.  */ ;/**  * Returns the {@code TypeInformation} for the elements of the input.  */ public TypeInformation<IN> getInputType() {     return input.getOutputType(). }
true;public;0;3;/**  * Returns the {@code TwoInputStreamOperator} of this Transformation.  */ ;/**  * Returns the {@code TwoInputStreamOperator} of this Transformation.  */ public OneInputStreamOperator<IN, OUT> getOperator() {     return operator. }
true;public;1;3;/**  * Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.  *  * @param stateKeySelector The {@code KeySelector} to set  */ ;/**  * Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.  *  * @param stateKeySelector The {@code KeySelector} to set  */ public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {     this.stateKeySelector = stateKeySelector. }
true;public;0;3;/**  * Returns the {@code KeySelector} that must be used for partitioning keyed state in this  * Operation.  *  * @see #setStateKeySelector  */ ;/**  * Returns the {@code KeySelector} that must be used for partitioning keyed state in this  * Operation.  *  * @see #setStateKeySelector  */ public KeySelector<IN, ?> getStateKeySelector() {     return stateKeySelector. }
false;public;1;3;;public void setStateKeyType(TypeInformation<?> stateKeyType) {     this.stateKeyType = stateKeyType. }
false;public;0;3;;public TypeInformation<?> getStateKeyType() {     return stateKeyType. }
false;public;0;7;;@Override public Collection<StreamTransformation<?>> getTransitivePredecessors() {     List<StreamTransformation<?>> result = Lists.newArrayList().     result.add(this).     result.addAll(input.getTransitivePredecessors()).     return result. }
false;public,final;1;4;;@Override public final void setChainingStrategy(ChainingStrategy strategy) {     operator.setChainingStrategy(strategy). }
