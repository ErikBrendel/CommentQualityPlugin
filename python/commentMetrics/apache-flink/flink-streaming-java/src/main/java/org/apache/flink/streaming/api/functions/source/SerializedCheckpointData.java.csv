commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the checkpointId of the checkpoint.  * @return The checkpointId of the checkpoint.  */ ;/**  * Gets the checkpointId of the checkpoint.  * @return The checkpointId of the checkpoint.  */ public long getCheckpointId() {     return checkpointId. }
true;public;0;3;/**  * Gets the binary data for the serialized elements.  * @return The binary data for the serialized elements.  */ ;/**  * Gets the binary data for the serialized elements.  * @return The binary data for the serialized elements.  */ public byte[] getSerializedData() {     return serializedData. }
true;public;0;3;/**  * Gets the number of IDs in the checkpoint.  * @return The number of IDs in the checkpoint.  */ ;/**  * Gets the number of IDs in the checkpoint.  * @return The number of IDs in the checkpoint.  */ public int getNumIds() {     return numIds. }
true;public,static;2;5;/**  * Converts a list of checkpoints with elements into an array of SerializedCheckpointData.  *  * @param checkpoints The checkpoints to be converted into IdsCheckpointData.  * @param serializer The serializer to serialize the IDs.  * @param <T> The type of the ID.  * @return An array of serializable SerializedCheckpointData, one per entry in the queue.  *  * @throws IOException Thrown, if the serialization fails.  */ ;// ------------------------------------------------------------------------ // Serialize to Checkpoint // ------------------------------------------------------------------------ /**  * Converts a list of checkpoints with elements into an array of SerializedCheckpointData.  *  * @param checkpoints The checkpoints to be converted into IdsCheckpointData.  * @param serializer The serializer to serialize the IDs.  * @param <T> The type of the ID.  * @return An array of serializable SerializedCheckpointData, one per entry in the queue.  *  * @throws IOException Thrown, if the serialization fails.  */ public static <T> SerializedCheckpointData[] fromDeque(ArrayDeque<Tuple2<Long, Set<T>>> checkpoints, TypeSerializer<T> serializer) throws IOException {     return fromDeque(checkpoints, serializer, new DataOutputSerializer(128)). }
true;public,static;3;22;/**  * Converts a list of checkpoints into an array of SerializedCheckpointData.  *  * @param checkpoints The checkpoints to be converted into IdsCheckpointData.  * @param serializer The serializer to serialize the IDs.  * @param outputBuffer The reusable serialization buffer.  * @param <T> The type of the ID.  * @return An array of serializable SerializedCheckpointData, one per entry in the queue.  *  * @throws IOException Thrown, if the serialization fails.  */ ;/**  * Converts a list of checkpoints into an array of SerializedCheckpointData.  *  * @param checkpoints The checkpoints to be converted into IdsCheckpointData.  * @param serializer The serializer to serialize the IDs.  * @param outputBuffer The reusable serialization buffer.  * @param <T> The type of the ID.  * @return An array of serializable SerializedCheckpointData, one per entry in the queue.  *  * @throws IOException Thrown, if the serialization fails.  */ public static <T> SerializedCheckpointData[] fromDeque(ArrayDeque<Tuple2<Long, Set<T>>> checkpoints, TypeSerializer<T> serializer, DataOutputSerializer outputBuffer) throws IOException {     SerializedCheckpointData[] serializedCheckpoints = new SerializedCheckpointData[checkpoints.size()].     int pos = 0.     for (Tuple2<Long, Set<T>> checkpoint : checkpoints) {         outputBuffer.clear().         Set<T> checkpointIds = checkpoint.f1.         for (T id : checkpointIds) {             serializer.serialize(id, outputBuffer).         }         serializedCheckpoints[pos++] = new SerializedCheckpointData(checkpoint.f0, outputBuffer.getCopyOfBuffer(), checkpointIds.size()).     }     return serializedCheckpoints. }
true;public,static;2;28;/**  * De-serializes an array of SerializedCheckpointData back into an ArrayDeque of element checkpoints.  *  * @param data The data to be deserialized.  * @param serializer The serializer used to deserialize the data.  * @param <T> The type of the elements.  * @return An ArrayDeque of element checkpoints.  *  * @throws IOException Thrown, if the serialization fails.  */ ;// ------------------------------------------------------------------------ // De-Serialize from Checkpoint // ------------------------------------------------------------------------ /**  * De-serializes an array of SerializedCheckpointData back into an ArrayDeque of element checkpoints.  *  * @param data The data to be deserialized.  * @param serializer The serializer used to deserialize the data.  * @param <T> The type of the elements.  * @return An ArrayDeque of element checkpoints.  *  * @throws IOException Thrown, if the serialization fails.  */ public static <T> ArrayDeque<Tuple2<Long, Set<T>>> toDeque(SerializedCheckpointData[] data, TypeSerializer<T> serializer) throws IOException {     ArrayDeque<Tuple2<Long, Set<T>>> deque = new ArrayDeque<>(data.length).     DataInputDeserializer deser = null.     for (SerializedCheckpointData checkpoint : data) {         byte[] serializedData = checkpoint.getSerializedData().         if (deser == null) {             deser = new DataInputDeserializer(serializedData, 0, serializedData.length).         } else {             deser.setBuffer(serializedData).         }         final Set<T> ids = new HashSet<>(checkpoint.getNumIds()).         final int numIds = checkpoint.getNumIds().         for (int i = 0. i < numIds. i++) {             ids.add(serializer.deserialize(deser)).         }         deque.addLast(new Tuple2<Long, Set<T>>(checkpoint.checkpointId, ids)).     }     return deque. }
