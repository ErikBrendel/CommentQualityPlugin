# id;timestamp;commentText;codeText;commentWords;codeWords
ConnectedStreams -> public TypeInformation<IN2> getType2();1445418103;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1454527671;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1454679829;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1455101486;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1455718153;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1455718153;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1456778239;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1478532357;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1480354709;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1488799576;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1488799576;Gets the type of the second input__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1493195810;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1493195810;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1493195810;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1495484544;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1496911361;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> public TypeInformation<IN2> getType2();1532066767;Gets the type of the second input.__@return The type of the second input;public TypeInformation<IN2> getType2() {_		return inputStream2.getType()__	};gets,the,type,of,the,second,input,return,the,type,of,the,second,input;public,type,information,in2,get,type2,return,input,stream2,get,type
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1480354709;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichCoProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		if (!(inputStream1 instanceof KeyedStream) || !(inputStream2 instanceof KeyedStream)) {_			throw new UnsupportedOperationException("A CoProcessFunction can only be applied" +_					"when both input streams are keyed.")__		}__		CoProcessOperator<Object, IN1, IN2, R> operator = new CoProcessOperator<>(_				inputStream1.clean(coProcessFunction))___		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,co,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,throw,new,unsupported,operation,exception,a,co,process,function,can,only,be,applied,when,both,input,streams,are,keyed,co,process,operator,object,in1,in2,r,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1488799576;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		if (!(inputStream1 instanceof KeyedStream) || !(inputStream2 instanceof KeyedStream)) {_			throw new UnsupportedOperationException("A CoProcessFunction can only be applied" +_					"when both input streams are keyed.")__		}__		CoProcessOperator<Object, IN1, IN2, R> operator = new CoProcessOperator<>(_				inputStream1.clean(coProcessFunction))___		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,throw,new,unsupported,operation,exception,a,co,process,function,can,only,be,applied,when,both,input,streams,are,keyed,co,process,operator,object,in1,in2,r,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1488799576;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		TwoInputStreamOperator<IN1, IN2, R> operator___		if ((inputStream1 instanceof KeyedStream) && (inputStream2 instanceof KeyedStream)) {_			operator = new KeyedCoProcessOperator<>(inputStream1.clean(coProcessFunction))__		} else {_			operator = new CoProcessOperator<>(inputStream1.clean(coProcessFunction))__		}__		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,two,input,stream,operator,in1,in2,r,operator,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,operator,new,keyed,co,process,operator,input,stream1,clean,co,process,function,else,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		TwoInputStreamOperator<IN1, IN2, R> operator___		if ((inputStream1 instanceof KeyedStream) && (inputStream2 instanceof KeyedStream)) {_			operator = new KeyedCoProcessOperator<>(inputStream1.clean(coProcessFunction))__		} else {_			operator = new CoProcessOperator<>(inputStream1.clean(coProcessFunction))__		}__		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,two,input,stream,operator,in1,in2,r,operator,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,operator,new,keyed,co,process,operator,input,stream1,clean,co,process,function,else,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		TwoInputStreamOperator<IN1, IN2, R> operator___		if ((inputStream1 instanceof KeyedStream) && (inputStream2 instanceof KeyedStream)) {_			operator = new KeyedCoProcessOperator<>(inputStream1.clean(coProcessFunction))__		} else {_			operator = new CoProcessOperator<>(inputStream1.clean(coProcessFunction))__		}__		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,two,input,stream,operator,in1,in2,r,operator,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,operator,new,keyed,co,process,operator,input,stream1,clean,co,process,function,else,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		TwoInputStreamOperator<IN1, IN2, R> operator___		if ((inputStream1 instanceof KeyedStream) && (inputStream2 instanceof KeyedStream)) {_			operator = new KeyedCoProcessOperator<>(inputStream1.clean(coProcessFunction))__		} else {_			operator = new CoProcessOperator<>(inputStream1.clean(coProcessFunction))__		}__		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,two,input,stream,operator,in1,in2,r,operator,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,operator,new,keyed,co,process,operator,input,stream1,clean,co,process,function,else,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1495484544;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		TwoInputStreamOperator<IN1, IN2, R> operator___		if ((inputStream1 instanceof KeyedStream) && (inputStream2 instanceof KeyedStream)) {_			operator = new KeyedCoProcessOperator<>(inputStream1.clean(coProcessFunction))__		} else {_			operator = new CoProcessOperator<>(inputStream1.clean(coProcessFunction))__		}__		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,two,input,stream,operator,in1,in2,r,operator,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,operator,new,keyed,co,process,operator,input,stream1,clean,co,process,function,else,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1496911361;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		TwoInputStreamOperator<IN1, IN2, R> operator___		if ((inputStream1 instanceof KeyedStream) && (inputStream2 instanceof KeyedStream)) {_			operator = new KeyedCoProcessOperator<>(inputStream1.clean(coProcessFunction))__		} else {_			operator = new CoProcessOperator<>(inputStream1.clean(coProcessFunction))__		}__		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,two,input,stream,operator,in1,in2,r,operator,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,operator,new,keyed,co,process,operator,input,stream1,clean,co,process,function,else,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction, 			TypeInformation<R> outputType);1532066767;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function,_this function can also query the time and set timers. When reacting to the firing of set_timers the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction,_			TypeInformation<R> outputType) {__		TwoInputStreamOperator<IN1, IN2, R> operator___		if ((inputStream1 instanceof KeyedStream) && (inputStream2 instanceof KeyedStream)) {_			operator = new KeyedCoProcessOperator<>(inputStream1.clean(coProcessFunction))__		} else {_			operator = new CoProcessOperator<>(inputStream1.clean(coProcessFunction))__		}__		return transform("Co-Process", outputType, operator)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,output,type,two,input,stream,operator,in1,in2,r,operator,if,input,stream1,instanceof,keyed,stream,input,stream2,instanceof,keyed,stream,operator,new,keyed,co,process,operator,input,stream1,clean,co,process,function,else,operator,new,co,process,operator,input,stream1,clean,co,process,function,return,transform,co,process,output,type,operator
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2);1445418103;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPosition1),_				inputStream2.partitionByHash(keyPosition2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,position1,int,key,position2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,position1,input,stream2,partition,by,hash,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2);1454527671;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPosition1),_				inputStream2.partitionByHash(keyPosition2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,position1,int,key,position2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,position1,input,stream2,partition,by,hash,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2);1454679829;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPosition1),_				inputStream2.partitionByHash(keyPosition2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,position1,int,key,position2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,position1,input,stream2,partition,by,hash,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2);1455101486;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPosition1),_				inputStream2.partitionByHash(keyPosition2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,position1,int,key,position2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,position1,input,stream2,partition,by,hash,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2);1455718153;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPosition1),_				inputStream2.partitionByHash(keyPosition2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,position1,int,key,position2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,position1,input,stream2,partition,by,hash,key,position2
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1456778239;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1478532357;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1480354709;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1488799576;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1488799576;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1493195810;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1493195810;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1493195810;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1495484544;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1496911361;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_			coFlatMapper,_			CoFlatMapFunction.class,_			0,_			1,_			2,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType1(),_			getType2(),_			Utils.getCallLocationName(),_			true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,0,1,2,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> flatMap( 			CoFlatMapFunction<IN1, IN2, R> coFlatMapper);1532066767;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> flatMap(_			CoFlatMapFunction<IN1, IN2, R> coFlatMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_			coFlatMapper,_			CoFlatMapFunction.class,_			0,_			1,_			2,_			TypeExtractor.NO_INDEX,_			getType1(),_			getType2(),_			Utils.getCallLocationName(),_			true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,co,flat,map,function,in1,in2,r,co,flat,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,0,1,2,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1445418103;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1454527671;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1454679829;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1455101486;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1455718153;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1455718153;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1456778239;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1478532357;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1480354709;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1488799576;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1488799576;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1495484544;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1496911361;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1532066767;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for grouping the first input_@param keySelector2_The {@link KeySelector} used for grouping the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keySelector1),_				inputStream2.keyBy(keySelector2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,grouping,the,first,input,param,key,selector2,the,link,key,selector,used,for,grouping,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,key,by,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,key,by,key,selector1,input,stream2,key,by,key,selector2
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1480354709;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__<p>A {@link RichCoProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coProcessFunction,_				CoProcessFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,co,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1488799576;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coProcessFunction,_				CoProcessFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1488799576;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coProcessFunction,_				CoProcessFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1493195810;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coProcessFunction,_				CoProcessFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1493195810;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coProcessFunction,_				CoProcessFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1493195810;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coProcessFunction,_				CoProcessFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1495484544;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coProcessFunction,_				CoProcessFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1496911361;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_			coProcessFunction,_			CoProcessFunction.class,_			0,_			1,_			2,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType1(),_			getType2(),_			Utils.getCallLocationName(),_			true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,0,1,2,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process( 			CoProcessFunction<IN1, IN2, R> coProcessFunction);1532066767;Applies the given {@link CoProcessFunction} on the connected input streams,_thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero or_more output elements. Contrary to the {@link #flatMap(CoFlatMapFunction)} function, this_function can also query the time and set timers. When reacting to the firing of set timers_the function can directly emit elements and/or register yet more timers.__@param coProcessFunction The {@link CoProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code CoProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(_			CoProcessFunction<IN1, IN2, R> coProcessFunction) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_			coProcessFunction,_			CoProcessFunction.class,_			0,_			1,_			2,_			TypeExtractor.NO_INDEX,_			getType1(),_			getType2(),_			Utils.getCallLocationName(),_			true)___		return process(coProcessFunction, outTypeInfo)__	};applies,the,given,link,co,process,function,on,the,connected,input,streams,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,flat,map,co,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,co,process,function,the,link,co,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,co,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,co,process,function,in1,in2,r,co,process,function,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,process,function,co,process,function,class,0,1,2,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,process,co,process,function,out,type,info
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1456778239;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1478532357;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1480354709;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1488799576;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1488799576;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1493195810;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1493195810;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1493195810;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1495484544;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1496911361;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_			coMapper,_			CoMapFunction.class,_			0,_			1,_			2,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType1(),_			getType2(),_			Utils.getCallLocationName(),_			true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,0,1,2,type,extractor,type,extractor,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper);1532066767;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <R> SingleOutputStreamOperator<R> map(CoMapFunction<IN1, IN2, R> coMapper) {__		TypeInformation<R> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(_			coMapper,_			CoMapFunction.class,_			0,_			1,_			2,_			TypeExtractor.NO_INDEX,_			getType1(),_			getType2(),_			Utils.getCallLocationName(),_			true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,co,map,function,in1,in2,r,co,mapper,type,information,r,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,0,1,2,type,extractor,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1445418103;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1454527671;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1454679829;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1455101486;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1455718153;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1455718153;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1456778239;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1478532357;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1480354709;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1488799576;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1488799576;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1493195810;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1493195810;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1493195810;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1495484544;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1496911361;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2);1532066767;KeyBy operation for connected data stream using key expressions. Assigns keys to_the elements of input1 and input2 according to field1 and field2. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field1_The grouping expression for the first input_@param field2_The grouping expression for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(field1),_				inputStream2.keyBy(field2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,assigns,keys,to,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,grouping,expression,for,the,first,input,param,field2,the,grouping,expression,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,key,by,field1,input,stream2,key,by,field2
ConnectedStreams -> public TypeInformation<IN1> getType1();1445418103;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1454527671;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1454679829;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1455101486;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1455718153;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1455718153;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1456778239;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1478532357;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1480354709;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1488799576;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1488799576;Gets the type of the first input__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1493195810;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1493195810;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1493195810;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1495484544;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1496911361;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public TypeInformation<IN1> getType1();1532066767;Gets the type of the first input.__@return The type of the first input;public TypeInformation<IN1> getType1() {_		return inputStream1.getType()__	};gets,the,type,of,the,first,input,return,the,type,of,the,first,input;public,type,information,in1,get,type1,return,input,stream1,get,type
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2);1445418103;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param fields1_The partitioning expressions for the first input_@param fields2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(fields1),_				inputStream2.partitionByHash(fields2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,partitioning,expressions,for,the,first,input,param,fields2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,partition,by,hash,fields1,input,stream2,partition,by,hash,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2);1454527671;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param fields1_The partitioning expressions for the first input_@param fields2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(fields1),_				inputStream2.partitionByHash(fields2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,partitioning,expressions,for,the,first,input,param,fields2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,partition,by,hash,fields1,input,stream2,partition,by,hash,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2);1454679829;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param fields1_The partitioning expressions for the first input_@param fields2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(fields1),_				inputStream2.partitionByHash(fields2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,partitioning,expressions,for,the,first,input,param,fields2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,partition,by,hash,fields1,input,stream2,partition,by,hash,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2);1455101486;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param fields1_The partitioning expressions for the first input_@param fields2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(fields1),_				inputStream2.partitionByHash(fields2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,partitioning,expressions,for,the,first,input,param,fields2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,partition,by,hash,fields1,input,stream2,partition,by,hash,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2);1455718153;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param fields1_The partitioning expressions for the first input_@param fields2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(fields1),_				inputStream2.partitionByHash(fields2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,partitioning,expressions,for,the,first,input,param,fields2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,partition,by,hash,fields1,input,stream2,partition,by,hash,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1445418103;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1454527671;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1454679829;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1455101486;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1455718153;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1455718153;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1456778239;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1478532357;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1480354709;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1488799576;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1488799576;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1493195810;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1493195810;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1493195810;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1495484544;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1496911361;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2);1532066767;KeyBy operation for connected data stream using key expressions._the elements of input1 and input2 according to fields1 and fields2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}S underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }___@param fields1_The grouping expressions for the first input_@param fields2_The grouping expressions for the second input_@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(String[] fields1, String[] fields2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(fields1),_				inputStream2.keyBy(fields2))__	};key,by,operation,for,connected,data,stream,using,key,expressions,the,elements,of,input1,and,input2,according,to,fields1,and,fields2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields1,the,grouping,expressions,for,the,first,input,param,fields2,the,grouping,expressions,for,the,second,input,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,string,fields1,string,fields2,return,new,connected,streams,environment,input,stream1,key,by,fields1,input,stream2,key,by,fields2
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap( 			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper);1445418103;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap(_			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,flat,map,co,flat,map,function,in1,in2,out,co,flat,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap( 			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper);1454527671;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap(_			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,flat,map,co,flat,map,function,in1,in2,out,co,flat,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap( 			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper);1454679829;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap(_			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,flat,map,co,flat,map,function,in1,in2,out,co,flat,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap( 			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper);1455101486;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap(_			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,flat,map,co,flat,map,function,in1,in2,out,co,flat,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap( 			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper);1455718153;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap(_			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,flat,map,co,flat,map,function,in1,in2,out,co,flat,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap( 			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper);1455718153;Applies a CoFlatMap transformation on a {@link ConnectedStreams} and_maps the output to a common type. The transformation calls a_{@link CoFlatMapFunction#flatMap1} for each element of the first input_and {@link CoFlatMapFunction#flatMap2} for each element of the second_input. Each CoFlatMapFunction call returns any number of elements_including none.__@param coFlatMapper_The CoFlatMapFunction used to jointly transform the two input_DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> flatMap(_			CoFlatMapFunction<IN1, IN2, OUT> coFlatMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coFlatMapper,_				CoFlatMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Flat Map", outTypeInfo, new CoStreamFlatMap<>(inputStream1.clean(coFlatMapper)))__	};applies,a,co,flat,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,flat,map,function,flat,map1,for,each,element,of,the,first,input,and,link,co,flat,map,function,flat,map2,for,each,element,of,the,second,input,each,co,flat,map,function,call,returns,any,number,of,elements,including,none,param,co,flat,mapper,the,co,flat,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,flat,map,co,flat,map,function,in1,in2,out,co,flat,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,flat,mapper,co,flat,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,flat,map,out,type,info,new,co,stream,flat,map,input,stream1,clean,co,flat,mapper
ConnectedStreams -> public DataStream<IN1> getFirstInput();1445418103;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1454527671;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1454679829;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1455101486;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1455718153;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1455718153;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1456778239;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1478532357;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1480354709;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1488799576;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1488799576;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1493195810;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1493195810;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1493195810;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1495484544;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1496911361;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public DataStream<IN1> getFirstInput();1532066767;Returns the first {@link DataStream}.__@return The first DataStream.;public DataStream<IN1> getFirstInput() {_		return inputStream1__	};returns,the,first,link,data,stream,return,the,first,data,stream;public,data,stream,in1,get,first,input,return,input,stream1
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1445418103;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for partitioning the first input_@param keySelector2_The {@link KeySelector} used for partitioning the second input_@return @return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keySelector1),_				inputStream2.partitionByHash(keySelector2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,partitioning,the,first,input,param,key,selector2,the,link,key,selector,used,for,partitioning,the,second,input,return,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,selector1,input,stream2,partition,by,hash,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1454527671;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for partitioning the first input_@param keySelector2_The {@link KeySelector} used for partitioning the second input_@return @return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keySelector1),_				inputStream2.partitionByHash(keySelector2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,partitioning,the,first,input,param,key,selector2,the,link,key,selector,used,for,partitioning,the,second,input,return,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,selector1,input,stream2,partition,by,hash,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1454679829;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for partitioning the first input_@param keySelector2_The {@link KeySelector} used for partitioning the second input_@return @return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keySelector1),_				inputStream2.partitionByHash(keySelector2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,partitioning,the,first,input,param,key,selector2,the,link,key,selector,used,for,partitioning,the,second,input,return,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,selector1,input,stream2,partition,by,hash,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1455101486;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for partitioning the first input_@param keySelector2_The {@link KeySelector} used for partitioning the second input_@return @return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keySelector1),_				inputStream2.partitionByHash(keySelector2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,partitioning,the,first,input,param,key,selector2,the,link,key,selector,used,for,partitioning,the,second,input,return,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,selector1,input,stream2,partition,by,hash,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2);1455718153;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 using keySelector1 and keySelector2.__@param keySelector1_The {@link KeySelector} used for partitioning the first input_@param keySelector2_The {@link KeySelector} used for partitioning the second input_@return @return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(KeySelector<IN1, ?> keySelector1, KeySelector<IN2, ?> keySelector2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keySelector1),_				inputStream2.partitionByHash(keySelector2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,using,key,selector1,and,key,selector2,param,key,selector1,the,link,key,selector,used,for,partitioning,the,first,input,param,key,selector2,the,link,key,selector,used,for,partitioning,the,second,input,return,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,key,selector,in1,key,selector1,key,selector,in2,key,selector2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,selector1,input,stream2,partition,by,hash,key,selector2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1445418103;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1454527671;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1454679829;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1455101486;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1455718153;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1455718153;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1456778239;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1478532357;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1480354709;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1488799576;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1488799576;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1495484544;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1496911361;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2);1532066767;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPosition1 and keyPosition2.__@param keyPosition1_The field used to compute the hashcode of the elements in the_first input stream._@param keyPosition2_The field used to compute the hashcode of the elements in the_second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int keyPosition1, int keyPosition2) {_		return new ConnectedStreams<>(this.environment, inputStream1.keyBy(keyPosition1),_				inputStream2.keyBy(keyPosition2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,position1,and,key,position2,param,key,position1,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,first,input,stream,param,key,position2,the,field,used,to,compute,the,hashcode,of,the,elements,in,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,position1,int,key,position2,return,new,connected,streams,this,environment,input,stream1,key,by,key,position1,input,stream2,key,by,key,position2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1445418103;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1454527671;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1454679829;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1455101486;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1455718153;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1455718153;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1456778239;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1478532357;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1480354709;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1488799576;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1488799576;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1493195810;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1495484544;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1496911361;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2);1532066767;KeyBy operation for connected data stream. Assigns keys to the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The grouped {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> keyBy(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.keyBy(keyPositions1),_				inputStream2.keyBy(keyPositions2))__	};key,by,operation,for,connected,data,stream,assigns,keys,to,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,grouped,link,connected,streams;public,connected,streams,in1,in2,key,by,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,key,by,key,positions1,input,stream2,key,by,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2);1445418103;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPositions1),_				inputStream2.partitionByHash(keyPositions2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,positions1,input,stream2,partition,by,hash,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2);1454527671;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPositions1),_				inputStream2.partitionByHash(keyPositions2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,positions1,input,stream2,partition,by,hash,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2);1454679829;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPositions1),_				inputStream2.partitionByHash(keyPositions2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,positions1,input,stream2,partition,by,hash,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2);1455101486;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPositions1),_				inputStream2.partitionByHash(keyPositions2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,positions1,input,stream2,partition,by,hash,key,positions2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2);1455718153;PartitionBy operation for connected data stream. Partitions the elements of_input1 and input2 according to keyPositions1 and keyPositions2.__@param keyPositions1_The fields used to group the first input stream._@param keyPositions2_The fields used to group the second input stream._@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(int[] keyPositions1, int[] keyPositions2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(keyPositions1),_				inputStream2.partitionByHash(keyPositions2))__	};partition,by,operation,for,connected,data,stream,partitions,the,elements,of,input1,and,input2,according,to,key,positions1,and,key,positions2,param,key,positions1,the,fields,used,to,group,the,first,input,stream,param,key,positions2,the,fields,used,to,group,the,second,input,stream,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,int,key,positions1,int,key,positions2,return,new,connected,streams,environment,input,stream1,partition,by,hash,key,positions1,input,stream2,partition,by,hash,key,positions2
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper);1445418103;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,map,co,map,function,in1,in2,out,co,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper);1454527671;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,map,co,map,function,in1,in2,out,co,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper);1454679829;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,map,co,map,function,in1,in2,out,co,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper);1455101486;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,map,co,map,function,in1,in2,out,co,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper);1455718153;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,map,co,map,function,in1,in2,out,co,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper);1455718153;Applies a CoMap transformation on a {@link ConnectedStreams} and maps_the output to a common type. The transformation calls a_{@link CoMapFunction#map1} for each element of the first input and_{@link CoMapFunction#map2} for each element of the second input. Each_CoMapFunction call returns exactly one element.__@param coMapper The CoMapFunction used to jointly transform the two input DataStreams_@return The transformed {@link DataStream};public <OUT> SingleOutputStreamOperator<OUT, ?> map(CoMapFunction<IN1, IN2, OUT> coMapper) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getBinaryOperatorReturnType(coMapper,_				CoMapFunction.class, false, true, getType1(), getType2(),_				Utils.getCallLocationName(), true)___		return transform("Co-Map", outTypeInfo, new CoStreamMap<>(inputStream1.clean(coMapper)))___	};applies,a,co,map,transformation,on,a,link,connected,streams,and,maps,the,output,to,a,common,type,the,transformation,calls,a,link,co,map,function,map1,for,each,element,of,the,first,input,and,link,co,map,function,map2,for,each,element,of,the,second,input,each,co,map,function,call,returns,exactly,one,element,param,co,mapper,the,co,map,function,used,to,jointly,transform,the,two,input,data,streams,return,the,transformed,link,data,stream;public,out,single,output,stream,operator,out,map,co,map,function,in1,in2,out,co,mapper,type,information,out,out,type,info,type,extractor,get,binary,operator,return,type,co,mapper,co,map,function,class,false,true,get,type1,get,type2,utils,get,call,location,name,true,return,transform,co,map,out,type,info,new,co,stream,map,input,stream1,clean,co,mapper
ConnectedStreams -> public DataStream<IN2> getSecondInput();1445418103;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1454527671;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1454679829;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1455101486;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1455718153;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1455718153;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1456778239;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1478532357;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1480354709;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1488799576;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1488799576;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1493195810;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1493195810;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1493195810;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1495484544;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1496911361;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public DataStream<IN2> getSecondInput();1532066767;Returns the second {@link DataStream}.__@return The second DataStream.;public DataStream<IN2> getSecondInput() {_		return inputStream2__	};returns,the,second,link,data,stream,return,the,second,data,stream;public,data,stream,in2,get,second,input,return,input,stream2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2);1445418103;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to field1 and field2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param field1_The partitioning expressions for the first input_@param field2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(field1),_				inputStream2.partitionByHash(field2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,partitioning,expressions,for,the,first,input,param,field2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,partition,by,hash,field1,input,stream2,partition,by,hash,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2);1454527671;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to field1 and field2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param field1_The partitioning expressions for the first input_@param field2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(field1),_				inputStream2.partitionByHash(field2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,partitioning,expressions,for,the,first,input,param,field2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,partition,by,hash,field1,input,stream2,partition,by,hash,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2);1454679829;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to field1 and field2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param field1_The partitioning expressions for the first input_@param field2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(field1),_				inputStream2.partitionByHash(field2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,partitioning,expressions,for,the,first,input,param,field2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,partition,by,hash,field1,input,stream2,partition,by,hash,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2);1455101486;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to field1 and field2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param field1_The partitioning expressions for the first input_@param field2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(field1),_				inputStream2.partitionByHash(field2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,partitioning,expressions,for,the,first,input,param,field2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,partition,by,hash,field1,input,stream2,partition,by,hash,field2
ConnectedStreams -> public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2);1455718153;PartitionBy operation for connected data stream using key expressions. Partitions_the elements of input1 and input2 according to field1 and field2. A_field expression is either the name of a public field or a getter method_with parentheses of the {@link DataStream}s underlying type. A dot can be_used to drill down into objects, as in {@code "field1.getInnerField2()" }__@param field1_The partitioning expressions for the first input_@param field2_The partitioning expressions for the second input_@return The partitioned {@link ConnectedStreams};public ConnectedStreams<IN1, IN2> partitionByHash(String field1, String field2) {_		return new ConnectedStreams<>(environment, inputStream1.partitionByHash(field1),_				inputStream2.partitionByHash(field2))__	};partition,by,operation,for,connected,data,stream,using,key,expressions,partitions,the,elements,of,input1,and,input2,according,to,field1,and,field2,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field1,the,partitioning,expressions,for,the,first,input,param,field2,the,partitioning,expressions,for,the,second,input,return,the,partitioned,link,connected,streams;public,connected,streams,in1,in2,partition,by,hash,string,field1,string,field2,return,new,connected,streams,environment,input,stream1,partition,by,hash,field1,input,stream2,partition,by,hash,field2
