# id;timestamp;commentText;codeText;commentWords;codeWords
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeHint<F> feedbackTypeHint);1525452496;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeHint_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeHint<F> feedbackTypeHint) {_		return withFeedbackType(TypeInformation.of(feedbackTypeHint))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,hint,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,hint,f,feedback,type,hint,return,with,feedback,type,type,information,of,feedback,type,hint
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeHint<F> feedbackTypeHint);1532066767;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeHint_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeHint<F> feedbackTypeHint) {_		return withFeedbackType(TypeInformation.of(feedbackTypeHint))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,hint,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,hint,f,feedback,type,hint,return,with,feedback,type,type,information,of,feedback,type,hint
IterativeStream -> ConnectedIterativeStreams -> public DataStream<F> closeWith(DataStream<F> feedbackStream);1456778239;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> public DataStream<F> closeWith(DataStream<F> feedbackStream);1493195810;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> public DataStream<F> closeWith(DataStream<F> feedbackStream);1493195810;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> public DataStream<F> closeWith(DataStream<F> feedbackStream);1493195810;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> public DataStream<F> closeWith(DataStream<F> feedbackStream);1493195810;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> public DataStream<F> closeWith(DataStream<F> feedbackStream);1495484544;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> public DataStream<F> closeWith(DataStream<F> feedbackStream);1525452496;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> public DataStream<F> closeWith(DataStream<F> feedbackStream);1532066767;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1445418103;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1454679829;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1455101486;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1455718153;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1456778239;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1495484544;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeExtractor.getForClass(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,extractor,get,for,class,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1525452496;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeInformation.of(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,information,of,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass);1532066767;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeClass_Class of the elements in the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(Class<F> feedbackTypeClass) {_		return withFeedbackType(TypeInformation.of(feedbackTypeClass))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,class,class,of,the,elements,in,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,class,f,feedback,type,class,return,with,feedback,type,type,information,of,feedback,type,class
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1445418103;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1454679829;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1455101486;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1455718153;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1456778239;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString);1495484544;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackTypeString_String describing the type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(String feedbackTypeString) {_		return withFeedbackType(TypeInfoParser.<F> parse(feedbackTypeString))__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,string,string,describing,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,string,feedback,type,string,return,with,feedback,type,type,info,parser,f,parse,feedback,type,string
IterativeStream -> ConnectedIterativeStreams -> @SuppressWarnings({ "rawtypes", "unchecked" }) 		public DataStream<F> closeWith(DataStream<F> feedbackStream);1445418103;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;@SuppressWarnings({ "rawtypes", "unchecked" })_		public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,rawtypes,unchecked,public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> @SuppressWarnings({ "rawtypes", "unchecked" }) 		public DataStream<F> closeWith(DataStream<F> feedbackStream);1454679829;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;@SuppressWarnings({ "rawtypes", "unchecked" })_		public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,rawtypes,unchecked,public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> @SuppressWarnings({ "rawtypes", "unchecked" }) 		public DataStream<F> closeWith(DataStream<F> feedbackStream);1455101486;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;@SuppressWarnings({ "rawtypes", "unchecked" })_		public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,rawtypes,unchecked,public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> ConnectedIterativeStreams -> @SuppressWarnings({ "rawtypes", "unchecked" }) 		public DataStream<F> closeWith(DataStream<F> feedbackStream);1455718153;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration as_the second input in the {@link ConnectedStreams}.__@param feedbackStream_{@link DataStream} that will be used as second input to_the iteration head._@return The feedback stream.;@SuppressWarnings({ "rawtypes", "unchecked" })_		public DataStream<F> closeWith(DataStream<F> feedbackStream) {__			Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___			if (!predecessors.contains(this.coFeedbackTransformation)) {_				throw new UnsupportedOperationException(_						"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__			}__			coFeedbackTransformation.addFeedbackEdge(feedbackStream.getTransformation())___			return feedbackStream__		};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,as,the,second,input,in,the,link,connected,streams,param,feedback,stream,link,data,stream,that,will,be,used,as,second,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,rawtypes,unchecked,public,data,stream,f,close,with,data,stream,f,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,co,feedback,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,co,feedback,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1445418103;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<T, F>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,t,f,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1454679829;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<T, F>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,t,f,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1455101486;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<T, F>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,t,f,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1455718153;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<T, F>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,t,f,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1456778239;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>_For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1493195810;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1495484544;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1525452496;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,original,input,feedback,type,max,wait,time
IterativeStream -> public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType);1532066767;Changes the feedback type of the iteration and allows the user to apply_co-transformations on the input and feedback stream, as in a_{@link ConnectedStreams}.__<p>For type safety the user needs to define the feedback type__@param feedbackType_The type information of the feedback stream._@return A {@link ConnectedIterativeStreams}.;public <F> ConnectedIterativeStreams<T, F> withFeedbackType(TypeInformation<F> feedbackType) {_		return new ConnectedIterativeStreams<>(originalInput, feedbackType, maxWaitTime)__	};changes,the,feedback,type,of,the,iteration,and,allows,the,user,to,apply,co,transformations,on,the,input,and,feedback,stream,as,in,a,link,connected,streams,p,for,type,safety,the,user,needs,to,define,the,feedback,type,param,feedback,type,the,type,information,of,the,feedback,stream,return,a,link,connected,iterative,streams;public,f,connected,iterative,streams,t,f,with,feedback,type,type,information,f,feedback,type,return,new,connected,iterative,streams,original,input,feedback,type,max,wait,time
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1445418103;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1454679829;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1455101486;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1455718153;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1456778239;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1493195810;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1493195810;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1493195810;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1493195810;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1495484544;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1525452496;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
IterativeStream -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public DataStream<T> closeWith(DataStream<T> feedbackStream);1532066767;Closes the iteration. This method defines the end of the iterative_program part that will be fed back to the start of the iteration.__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link DataStream#split(org.apache.flink.streaming.api.collector.selector.OutputSelector)}_for more information.__@param feedbackStream_{@link DataStream} that will be used as input to the iteration_head.__@return The feedback stream.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public DataStream<T> closeWith(DataStream<T> feedbackStream) {__		Collection<StreamTransformation<?>> predecessors = feedbackStream.getTransformation().getTransitivePredecessors()___		if (!predecessors.contains(this.transformation)) {_			throw new UnsupportedOperationException(_					"Cannot close an iteration with a feedback DataStream that does not originate from said iteration.")__		}__		((FeedbackTransformation) getTransformation()).addFeedbackEdge(feedbackStream.getTransformation())___		return feedbackStream__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,that,will,be,fed,back,to,the,start,of,the,iteration,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,data,stream,split,org,apache,flink,streaming,api,collector,selector,output,selector,for,more,information,param,feedback,stream,link,data,stream,that,will,be,used,as,input,to,the,iteration,head,return,the,feedback,stream;suppress,warnings,unchecked,rawtypes,public,data,stream,t,close,with,data,stream,t,feedback,stream,collection,stream,transformation,predecessors,feedback,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,throw,new,unsupported,operation,exception,cannot,close,an,iteration,with,a,feedback,data,stream,that,does,not,originate,from,said,iteration,feedback,transformation,get,transformation,add,feedback,edge,feedback,stream,get,transformation,return,feedback,stream
