commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the input {@code StreamTransformation} of this {@code SinkTransformation}.  */ ;/**  * Returns the input {@code StreamTransformation} of this {@code SinkTransformation}.  */ public StreamTransformation<T> getInput() {     return input. }
true;public;0;3;/**  * Returns the {@code StreamPartitioner} that must be used for partitioning the elements  * of the input {@code StreamTransformation}.  */ ;/**  * Returns the {@code StreamPartitioner} that must be used for partitioning the elements  * of the input {@code StreamTransformation}.  */ public StreamPartitioner<T> getPartitioner() {     return partitioner. }
false;public;0;7;;@Override public Collection<StreamTransformation<?>> getTransitivePredecessors() {     List<StreamTransformation<?>> result = Lists.newArrayList().     result.add(this).     result.addAll(input.getTransitivePredecessors()).     return result. }
false;public,final;1;4;;@Override public final void setChainingStrategy(ChainingStrategy strategy) {     throw new UnsupportedOperationException("Cannot set chaining strategy on Union Transformation."). }
