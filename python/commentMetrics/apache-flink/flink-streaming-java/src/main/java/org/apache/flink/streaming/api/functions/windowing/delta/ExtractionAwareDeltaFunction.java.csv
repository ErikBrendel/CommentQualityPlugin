commented;modifiers;parameterAmount;loc;comment;code
true;public;2;13;/**  * This method takes the two data point and runs the set extractor on it.  * The delta function implemented at {@link #getNestedDelta} is then called  * with the extracted data. In case no extractor is set the input data gets  * passes to {@link #getNestedDelta} as-is. The return value is just  * forwarded from {@link #getNestedDelta}.  *  * @param oldDataPoint  *            the older data point as raw data (before extraction).  * @param newDataPoint  *            the new data point as raw data (before extraction).  * @return the delta between the two points.  */ ;/**  * This method takes the two data point and runs the set extractor on it.  * The delta function implemented at {@link #getNestedDelta} is then called  * with the extracted data. In case no extractor is set the input data gets  * passes to {@link #getNestedDelta} as-is. The return value is just  * forwarded from {@link #getNestedDelta}.  *  * @param oldDataPoint  *            the older data point as raw data (before extraction).  * @param newDataPoint  *            the new data point as raw data (before extraction).  * @return the delta between the two points.  */ @SuppressWarnings("unchecked") @Override public double getDelta(DATA oldDataPoint, DATA newDataPoint) {     if (converter == null) {         // => Therefore, "unchecked" warning is suppressed for this method.         return getNestedDelta((TO) oldDataPoint, (TO) newDataPoint).     } else {         return getNestedDelta(converter.extract(oldDataPoint), converter.extract(newDataPoint)).     } }
true;public,abstract;2;1;/**  * This method is exactly the same as  * {@link DeltaFunction#getDelta(Object, Object)} except that it gets the  * result of the previously done extractions as input. Therefore, this  * method only does the actual calculation of the delta but no data  * extraction or conversion.  *  * @param oldDataPoint  *            the older data point.  * @param newDataPoint  *            the new data point.  * @return the delta between the two points.  */ ;/**  * This method is exactly the same as  * {@link DeltaFunction#getDelta(Object, Object)} except that it gets the  * result of the previously done extractions as input. Therefore, this  * method only does the actual calculation of the delta but no data  * extraction or conversion.  *  * @param oldDataPoint  *            the older data point.  * @param newDataPoint  *            the new data point.  * @return the delta between the two points.  */ public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint).
