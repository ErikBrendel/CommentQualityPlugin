commented;modifiers;parameterAmount;loc;comment;code
false;public;4;5;;@Override public TriggerResult onElement(Object element, long timestamp, TimeWindow window, TriggerContext ctx) {     ctx.registerProcessingTimeTimer(window.maxTimestamp()).     return TriggerResult.CONTINUE. }
false;public;3;4;;@Override public TriggerResult onEventTime(long time, TimeWindow window, TriggerContext ctx) throws Exception {     return TriggerResult.CONTINUE. }
false;public;3;4;;@Override public TriggerResult onProcessingTime(long time, TimeWindow window, TriggerContext ctx) {     return TriggerResult.FIRE. }
false;public;2;4;;@Override public void clear(TimeWindow window, TriggerContext ctx) throws Exception {     ctx.deleteProcessingTimeTimer(window.maxTimestamp()). }
false;public;0;4;;@Override public boolean canMerge() {     return true. }
false;public;2;11;;@Override public void onMerge(TimeWindow window, OnMergeContext ctx) {     // only register a timer if the time is not yet past the end of the merged window     // this is in line with the logic in onElement(). If the time is past the end of     // the window onElement() will fire and setting a timer here would fire the window twice.     long windowMaxTimestamp = window.maxTimestamp().     if (windowMaxTimestamp > ctx.getCurrentProcessingTime()) {         ctx.registerProcessingTimeTimer(windowMaxTimestamp).     } }
false;public;0;4;;@Override public String toString() {     return "ProcessingTimeTrigger()". }
true;public,static;0;3;/**  * Creates a new trigger that fires once system time passes the end of the window.  */ ;/**  * Creates a new trigger that fires once system time passes the end of the window.  */ public static ProcessingTimeTrigger create() {     return new ProcessingTimeTrigger(). }
