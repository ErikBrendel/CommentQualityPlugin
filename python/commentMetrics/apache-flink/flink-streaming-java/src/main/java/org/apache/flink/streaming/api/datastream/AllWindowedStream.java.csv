# id;timestamp;commentText;codeText;commentWords;codeWords
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The process window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalAggregateProcessAllWindowFunction<>(aggregateFunction, windowFunction),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_					windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(windowFunction),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,process,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,aggregate,process,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,process,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,process,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,process,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,process,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,process,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,process,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1479832867;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,apply,reduce,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,apply,reduce,function,function,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1456778239;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1459866414;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1459869538;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1466504046;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1469525562;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1471362593;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1474473213;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1477066248;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1479832867;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1485255695;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1485274811;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1485274811;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1485370583;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1487868265;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1487931040;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1487941225;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1488286976;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1489819457;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493894636;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493894636;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1494363409;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1495484544;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1496911361;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1497693649;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1506329783;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1532066767;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1544532203;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1549467949;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1456778239;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1459866414;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1459869538;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1466504046;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1469525562;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1471362593;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1474473213;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1477066248;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1479832867;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1485255695;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1485274811;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1485274811;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1485370583;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1487868265;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1487931040;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1487941225;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1488286976;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1489819457;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493894636;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493894636;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1494363409;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1495484544;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1496911361;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1497693649;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1506329783;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1532066767;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1544532203;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1549467949;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1485370583;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1487868265;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1487931040;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1456778239;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1459866414;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1459869538;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1466504046;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1469525562;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1471362593;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1474473213;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1477066248;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1479832867;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1485255695;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1485274811;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1485274811;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1485370583;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1487868265;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1487931040;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1487941225;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1488286976;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1489819457;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493195810;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493195810;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493195810;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493894636;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493894636;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1494363409;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1495484544;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1496911361;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1497693649;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1506329783;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1532066767;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1544532203;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1549467949;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1456778239;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1459866414;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1459869538;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1466504046;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1469525562;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1471362593;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1474473213;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1477066248;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1479832867;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1485255695;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1485274811;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1485274811;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1485370583;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1487868265;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1487931040;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1487941225;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1488286976;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1489819457;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493894636;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493894636;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1494363409;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1495484544;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1496911361;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1497693649;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1506329783;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1532066767;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1544532203;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1549467949;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1479832867;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1494363409;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction, TypeInformation, TypeInformation)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1495484544;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction, TypeInformation, TypeInformation)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1496911361;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction, TypeInformation, TypeInformation)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1497693649;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction, TypeInformation, TypeInformation)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1506329783;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction, TypeInformation, TypeInformation)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1532066767;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction, TypeInformation, TypeInformation)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1544532203;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction, TypeInformation, TypeInformation)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1549467949;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction, TypeInformation, TypeInformation)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1445418103;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1447162450;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1454527671;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1454679829;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1455101486;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1455299461;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1455703064;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1456528025;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1456528720;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1445418103;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1447162450;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1454527671;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1454679829;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1455101486;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1455299461;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1455703064;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1456528025;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1456528720;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1445418103;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, R, W> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,r,w,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1447162450;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, R, W> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,r,w,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1456528025;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, R, W> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,r,w,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1456528720;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, T, R, W> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new ListWindowBuffer.Factory<>(getInputType().createSerializer(getExecutionEnvironment().getConfig())),_					function,_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new ListWindowBuffer.Factory<>(getInputType().createSerializer(getExecutionEnvironment().getConfig())),_					function,_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,t,r,w,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,list,window,buffer,factory,get,input,type,create,serializer,get,execution,environment,get,config,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,list,window,buffer,factory,get,input,type,create,serializer,get,execution,environment,get,config,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,result,type
AllWindowedStream -> public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1485370583;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1487868265;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1487931040;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1459866414;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1459869538;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1466504046;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1469525562;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1471362593;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1474473213;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1477066248;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,reduce,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1456778239;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<R> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, T, R, W> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new ListWindowBuffer.Factory<>(getInputType().createSerializer(getExecutionEnvironment().getConfig())),_					function,_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new ListWindowBuffer.Factory<>(getInputType().createSerializer(getExecutionEnvironment().getConfig())),_					function,_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,t,r,w,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,list,window,buffer,factory,get,input,type,create,serializer,get,execution,environment,get,config,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,list,window,buffer,factory,get,input,type,create,serializer,get,execution,environment,get,config,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1459866414;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1459869538;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1466504046;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1469525562;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1471362593;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1474473213;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1477066248;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1479832867;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		WindowOperator<Byte, T, Iterable<T>, R, W> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ListStateDescriptor<T> stateDesc = new ListStateDescriptor<>("window-contents",_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,window,operator,byte,t,iterable,t,r,w,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,evictor,allowed,lateness,else,list,state,descriptor,t,state,desc,new,list,state,descriptor,window,contents,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Note that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,note,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1445418103;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1447162450;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1454527671;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1454679829;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1455101486;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1455299461;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1455703064;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1456528025;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function);1456528720;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(preAggregator, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,pre,aggregator,function,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1445418103;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1447162450;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1454527671;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1454679829;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1455101486;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1455299461;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1455703064;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1456528025;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1456528720;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1456778239;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1459866414;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1459869538;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1466504046;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1469525562;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1471362593;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1474473213;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1477066248;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1479832867;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1485255695;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1485274811;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1485274811;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1485370583;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1487868265;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1487931040;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1487941225;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1488286976;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1489819457;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493195810;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493195810;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493195810;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493894636;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493894636;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1494363409;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1495484544;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1496911361;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1497693649;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1506329783;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1532066767;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1544532203;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1549467949;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Note that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,note,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,type,information,r,result,type,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function, 			TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function,_			TypeInformation<R> resultType) {__		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function, 			TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function,_			TypeInformation<R> resultType) {__		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function, 			TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function,_			TypeInformation<R> resultType) {__		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function, 			TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function,_			TypeInformation<R> resultType) {__		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1445418103;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)__		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1447162450;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)__		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1454527671;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)__		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1454679829;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)__		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1455101486;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)__		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1455299461;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1455703064;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1456528025;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1456528720;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType);1454527671;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, R, W> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,r,w,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType);1454679829;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, R, W> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,r,w,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType);1455101486;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, R, W> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,r,w,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType);1455299461;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, R, W> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,r,w,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType);1455703064;Applies the given window function to each window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<R, ?> result = createFastTimeOperatorIfValid(function, resultType, udfName)__		if (result != null) {_			return result__		}___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		NonKeyedWindowOperator<T, R, W> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,r,result,create,fast,time,operator,if,valid,function,result,type,udf,name,if,result,null,return,result,string,op,name,trigger,window,window,assigner,trigger,udf,name,non,keyed,window,operator,t,r,w,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1456778239;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1459866414;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1459869538;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1466504046;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1469525562;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1471362593;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1474473213;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1477066248;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1445418103;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1447162450;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1454527671;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1445418103;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1447162450;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1454527671;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1454679829;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1455101486;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1455299461;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1455703064;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1456528025;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1456528720;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, ProcessAllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,process,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,process,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,process,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,process,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,process,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,process,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			ProcessAllWindowFunction<V, R, W> windowFunction);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The process window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			ProcessAllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(windowFunction, aggResultType)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,process,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,get,process,all,window,function,return,type,window,function,agg,result,type,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1445418103;Sets the {@code Trigger} that should be used to trigger window emission.;public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1447162450;Sets the {@code Trigger} that should be used to trigger window emission.;public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1454527671;Sets the {@code Trigger} that should be used to trigger window emission.;public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1456778239;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1459866414;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1459869538;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1466504046;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1469525562;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1471362593;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1474473213;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1477066248;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1479832867;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1485255695;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1485274811;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1485274811;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1485370583;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1487868265;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1487931040;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1487941225;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1488286976;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1489819457;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493894636;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493894636;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1494363409;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1495484544;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1496911361;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1497693649;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1506329783;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1532066767;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1544532203;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1549467949;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1479832867;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #reduce(ReduceFunction, AllWindowFunction, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,reduce,reduce,function,all,window,function,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, ProcessAllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new ReduceApplyProcessAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_				reduceFunction,_				input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,reduce,apply,process,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, input.getType(), null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,input,get,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, input.getType())___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,get,process,all,window,function,return,type,function,input,get,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, input.getType())___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,get,process,all,window,function,return,type,function,input,get,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, input.getType())___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,get,process,all,window,function,return,type,function,input,get,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, input.getType())___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,get,process,all,window,function,return,type,function,input,get,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, input.getType())___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,get,process,all,window,function,return,type,function,input,get,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			ProcessAllWindowFunction<T, R, W> function);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			ProcessAllWindowFunction<T, R, W> function) {__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, input.getType())___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,process,all,window,function,t,r,w,function,type,information,r,result,type,get,process,all,window,function,return,type,function,input,get,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1445418103;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1447162450;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1454527671;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1454679829;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1455101486;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1455299461;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1455703064;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1456528025;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1456528720;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1456778239;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1459866414;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1459869538;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1466504046;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1469525562;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1471362593;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1474473213;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1477066248;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1479832867;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1485255695;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1485274811;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1485274811;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1485370583;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1487868265;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1487931040;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1487941225;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1488286976;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1489819457;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493195810;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493894636;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493894636;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1494363409;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1495484544;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1496911361;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1497693649;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1506329783;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1532066767;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1544532203;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1549467949;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1489819457;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1493195810;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1493195810;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1493195810;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1493894636;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1493894636;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1494363409;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1495484544;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1496911361;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1497693649;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1506329783;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1532066767;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1544532203;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag);1549467949;Send late arriving data to the side output identified by the given {@link OutputTag}. Data_is considered late after the watermark has passed the end of the window plus the allowed_lateness set using {@link #allowedLateness(Time)}.__<p>You can get the stream of late data using_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the windowed operation_with the same {@link OutputTag}.;@PublicEvolving_	public AllWindowedStream<T, W> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		this.lateDataOutputTag = input.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,data,is,considered,late,after,the,watermark,has,passed,the,end,of,the,window,plus,the,allowed,lateness,set,using,link,allowed,lateness,time,p,you,can,get,the,stream,of,late,data,using,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,windowed,operation,with,the,same,link,output,tag;public,evolving,public,all,windowed,stream,t,w,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,this,late,data,output,tag,input,get,execution,environment,clean,output,tag,return,this
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function);1454527671;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function) {_		@SuppressWarnings("unchecked, rawtypes")_		TypeInformation<Iterable<T>> iterTypeInfo = new GenericTypeInfo<>((Class) Iterable.class)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, iterTypeInfo, null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,suppress,warnings,unchecked,rawtypes,type,information,iterable,t,iter,type,info,new,generic,type,info,class,iterable,class,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,iter,type,info,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function);1454679829;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function) {_		@SuppressWarnings("unchecked, rawtypes")_		TypeInformation<Iterable<T>> iterTypeInfo = new GenericTypeInfo<>((Class) Iterable.class)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, iterTypeInfo, null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,suppress,warnings,unchecked,rawtypes,type,information,iterable,t,iter,type,info,new,generic,type,info,class,iterable,class,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,iter,type,info,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function);1455101486;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function) {_		@SuppressWarnings("unchecked, rawtypes")_		TypeInformation<Iterable<T>> iterTypeInfo = new GenericTypeInfo<>((Class) Iterable.class)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, iterTypeInfo, null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,suppress,warnings,unchecked,rawtypes,type,information,iterable,t,iter,type,info,new,generic,type,info,class,iterable,class,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,iter,type,info,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function);1455299461;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function) {_		@SuppressWarnings("unchecked, rawtypes")_		TypeInformation<Iterable<T>> iterTypeInfo = new GenericTypeInfo<>((Class) Iterable.class)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, iterTypeInfo, null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,suppress,warnings,unchecked,rawtypes,type,information,iterable,t,iter,type,info,new,generic,type,info,class,iterable,class,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,iter,type,info,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function);1455703064;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<Iterable<T>, R, W> function) {_		@SuppressWarnings("unchecked, rawtypes")_		TypeInformation<Iterable<T>> iterTypeInfo = new GenericTypeInfo<>((Class) Iterable.class)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, iterTypeInfo, null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,iterable,t,r,w,function,suppress,warnings,unchecked,rawtypes,type,information,iterable,t,iter,type,info,new,generic,type,info,class,iterable,class,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,iter,type,info,null,false,return,apply,function,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1456778239;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new ListWindowBuffer.Factory<>(getInputType().createSerializer(getExecutionEnvironment().getConfig())),_				new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function),_				trigger,_				evictor)___		} else {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + udfName + ")"___			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new FoldingWindowBuffer.Factory<>(foldFunction, initialValue, resultType.createSerializer(getExecutionEnvironment().getConfig())),_				function,_				trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,one,input,stream,operator,t,r,operator,if,evictor,null,op,name,non,parallel,trigger,window,window,assigner,trigger,evictor,udf,name,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,list,window,buffer,factory,get,input,type,create,serializer,get,execution,environment,get,config,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,else,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,folding,window,buffer,factory,fold,function,initial,value,result,type,create,serializer,get,execution,environment,get,config,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1459866414;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {__			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function)),_					trigger,_					evictor)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue,_					foldFunction,_					resultType)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1459869538;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {__			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function)),_					trigger,_					evictor)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue,_					foldFunction,_					resultType)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1466504046;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {__			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue,_					foldFunction,_					resultType)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1469525562;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {__			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue,_					foldFunction,_					resultType)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1471362593;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {__			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue,_					foldFunction,_					resultType)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1474473213;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {__			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1477066248;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1445418103;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1447162450;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1454527671;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1454679829;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1455101486;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1455299461;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1455703064;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1456528025;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1456528720;Applies an aggregation that that gives the maximum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1445418103;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1447162450;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1454527671;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1454679829;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1455101486;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1455299461;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1455703064;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1456528025;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1456528720;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy_The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1455101486;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1455299461;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1455703064;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1456528025;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1456528720;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1456778239;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1459866414;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1459869538;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1466504046;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1469525562;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1471362593;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1474473213;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1477066248;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1479832867;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1485255695;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1485274811;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1485274811;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1485370583;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1487868265;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1487931040;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1487941225;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1488286976;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1489819457;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1493195810;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1493195810;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1493195810;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1493894636;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1493894636;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1494363409;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1495484544;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1496911361;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1497693649;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1506329783;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1532066767;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1544532203;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger);1549467949;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_	public AllWindowedStream<T, W> trigger(Trigger<? super T, ? super W> trigger) {_		if (windowAssigner instanceof MergingWindowAssigner && !trigger.canMerge()) {_			throw new UnsupportedOperationException("A merging window assigner cannot be used with a trigger that does not support merging.")__		}__		this.trigger = trigger__		return this__	};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,all,windowed,stream,t,w,trigger,trigger,super,t,super,w,trigger,if,window,assigner,instanceof,merging,window,assigner,trigger,can,merge,throw,new,unsupported,operation,exception,a,merging,window,assigner,cannot,be,used,with,a,trigger,that,does,not,support,merging,this,trigger,trigger,return,this
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, ProcessAllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,process,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,process,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,process,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,process,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,process,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Note that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The process window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessAllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getProcessAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableProcessAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,note,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,process,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,process,process,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,process,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,process,all,window,function,function,result,type,call,location
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1456778239;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1459866414;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1459869538;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1466504046;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1469525562;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1471362593;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1474473213;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1477066248;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1479832867;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1485255695;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1485274811;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1485274811;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1485370583;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1487868265;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1487931040;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1487941225;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1488286976;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1489819457;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493195810;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493195810;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493195810;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493894636;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493894636;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1494363409;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1495484544;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1496911361;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1497693649;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1506329783;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1532066767;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1544532203;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1549467949;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, ProcessAllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, ProcessAllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,process,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			ProcessAllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The process window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			ProcessAllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableProcessAllWindowFunction<>(new FoldApplyProcessAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueProcessAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,process,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,process,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,process,all,window,function,new,fold,apply,process,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,process,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1445418103;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1447162450;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1454527671;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1454679829;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1455101486;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1455299461;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1455703064;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1456528025;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1456528720;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1445418103;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1447162450;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1454527671;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1454679829;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1455101486;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1455299461;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1455703064;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1456528025;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1456528720;Applies an aggregation that that gives the minimum value of every window_of the data stream at the given position.__@param positionToMin The position to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, input.getType(), AggregationFunction.AggregationType.MIN, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,min,the,position,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,input,get,type,aggregation,function,aggregation,type,min,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1445418103;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1447162450;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1454527671;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1454679829;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1455101486;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1455299461;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1455703064;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1456528025;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1456528720;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMinBy The position to minimize_@param first If true, then the operator return the first element with the minimum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMinBy, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,min,by,the,position,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,min,by,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1456778239;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1459866414;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1459869538;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1466504046;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1469525562;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1471362593;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1474473213;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1477066248;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1479832867;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1485255695;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1485274811;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1485274811;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1485370583;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1487868265;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1487931040;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1487941225;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1488286976;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1489819457;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493195810;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493894636;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493894636;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1494363409;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1495484544;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1496911361;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1497693649;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1506329783;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1532066767;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1544532203;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1549467949;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1445418103;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(preAggregator),_					function,_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,pre,aggregator,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1447162450;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					function,_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(preAggregator),_					function,_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,pre,aggregator,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1454527671;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (preAggregator instanceof RichFunction) {_			throw new UnsupportedOperationException("Pre-aggregator of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceApplyAllWindowFunction<>(preAggregator, function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new PreAggregatingHeapWindowBuffer.Factory<>(preAggregator),_				new ReduceApplyAllWindowFunction<>(preAggregator, function),_				trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,if,pre,aggregator,instanceof,rich,function,throw,new,unsupported,operation,exception,pre,aggregator,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,pre,aggregator,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1454679829;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (preAggregator instanceof RichFunction) {_			throw new UnsupportedOperationException("Pre-aggregator of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceApplyAllWindowFunction<>(preAggregator, function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new PreAggregatingHeapWindowBuffer.Factory<>(preAggregator),_				new ReduceApplyAllWindowFunction<>(preAggregator, function),_				trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,if,pre,aggregator,instanceof,rich,function,throw,new,unsupported,operation,exception,pre,aggregator,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,pre,aggregator,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1455101486;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (preAggregator instanceof RichFunction) {_			throw new UnsupportedOperationException("Pre-aggregator of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowApply at " + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceApplyAllWindowFunction<>(preAggregator, function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new PreAggregatingHeapWindowBuffer.Factory<>(preAggregator),_				new ReduceApplyAllWindowFunction<>(preAggregator, function),_				trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,if,pre,aggregator,instanceof,rich,function,throw,new,unsupported,operation,exception,pre,aggregator,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,window,apply,at,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,pre,aggregator,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1455299461;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (preAggregator instanceof RichFunction) {_			throw new UnsupportedOperationException("Pre-aggregator of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceApplyAllWindowFunction<>(preAggregator, function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new PreAggregatingHeapWindowBuffer.Factory<>(preAggregator),_				new ReduceApplyAllWindowFunction<>(preAggregator, function),_				trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,if,pre,aggregator,instanceof,rich,function,throw,new,unsupported,operation,exception,pre,aggregator,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,pre,aggregator,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1455703064;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (preAggregator instanceof RichFunction) {_			throw new UnsupportedOperationException("Pre-aggregator of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceApplyAllWindowFunction<>(preAggregator, function),_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new PreAggregatingHeapWindowBuffer.Factory<>(preAggregator),_				new ReduceApplyAllWindowFunction<>(preAggregator, function),_				trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,if,pre,aggregator,instanceof,rich,function,throw,new,unsupported,operation,exception,pre,aggregator,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,pre,aggregator,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1456528025;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (preAggregator instanceof RichFunction) {_			throw new UnsupportedOperationException("Pre-aggregator of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceApplyAllWindowFunction<>(preAggregator, function),_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new PreAggregatingHeapWindowBuffer.Factory<>(preAggregator),_				new ReduceApplyAllWindowFunction<>(preAggregator, function),_				trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,if,pre,aggregator,instanceof,rich,function,throw,new,unsupported,operation,exception,pre,aggregator,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,pre,aggregator,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1456528720;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is pre-aggregated using the given pre-aggregation reducer.__@param preAggregator The reduce function that is used for pre-aggregation_@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(ReduceFunction<T> preAggregator, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (preAggregator instanceof RichFunction) {_			throw new UnsupportedOperationException("Pre-aggregator of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		preAggregator = input.getExecutionEnvironment().clean(preAggregator)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName = "TriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new ListWindowBuffer.Factory<>(getInputType().createSerializer(getExecutionEnvironment().getConfig())),_					new ReduceApplyAllWindowFunction<>(preAggregator, function),_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new ReducingWindowBuffer.Factory<>(preAggregator, getInputType().createSerializer(getExecutionEnvironment().getConfig())),_				function,_				trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,pre,aggregated,using,the,given,pre,aggregation,reducer,param,pre,aggregator,the,reduce,function,that,is,used,for,pre,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,pre,aggregator,all,window,function,t,r,w,function,type,information,r,result,type,if,pre,aggregator,instanceof,rich,function,throw,new,unsupported,operation,exception,pre,aggregator,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,pre,aggregator,input,get,execution,environment,clean,pre,aggregator,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,r,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,list,window,buffer,factory,get,input,type,create,serializer,get,execution,environment,get,config,new,reduce,apply,all,window,function,pre,aggregator,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,reducing,window,buffer,factory,pre,aggregator,get,input,type,create,serializer,get,execution,environment,get,config,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1466504046;Sets the allowed lateness to a user-specified value._If not explicitly set, the allowed lateness is {@link Long#MAX_VALUE}._Setting the allowed lateness is only valid for event-time windows._If a value different than 0 is provided with a processing-time_{@link WindowAssigner}, then an exception is thrown.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		long millis = lateness.toMilliseconds()__		if (allowedLateness < 0) {_			throw new IllegalArgumentException("The allowed lateness cannot be negative.")__		} else if (allowedLateness != 0 && !windowAssigner.isEventTime()) {_			throw new IllegalArgumentException("Setting the allowed lateness is only valid for event-time windows.")__		} else {_			this.allowedLateness = millis__		}_		return this__	};sets,the,allowed,lateness,to,a,user,specified,value,if,not,explicitly,set,the,allowed,lateness,is,link,long,setting,the,allowed,lateness,is,only,valid,for,event,time,windows,if,a,value,different,than,0,is,provided,with,a,processing,time,link,window,assigner,then,an,exception,is,thrown;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,long,millis,lateness,to,milliseconds,if,allowed,lateness,0,throw,new,illegal,argument,exception,the,allowed,lateness,cannot,be,negative,else,if,allowed,lateness,0,window,assigner,is,event,time,throw,new,illegal,argument,exception,setting,the,allowed,lateness,is,only,valid,for,event,time,windows,else,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1469525562;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		long millis = lateness.toMilliseconds()__		if (allowedLateness < 0) {_			throw new IllegalArgumentException("The allowed lateness cannot be negative.")__		} else if (allowedLateness != 0 && !windowAssigner.isEventTime()) {_			throw new IllegalArgumentException("Setting the allowed lateness is only valid for event-time windows.")__		} else {_			this.allowedLateness = millis__		}_		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,long,millis,lateness,to,milliseconds,if,allowed,lateness,0,throw,new,illegal,argument,exception,the,allowed,lateness,cannot,be,negative,else,if,allowed,lateness,0,window,assigner,is,event,time,throw,new,illegal,argument,exception,setting,the,allowed,lateness,is,only,valid,for,event,time,windows,else,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1471362593;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		long millis = lateness.toMilliseconds()__		if (allowedLateness < 0) {_			throw new IllegalArgumentException("The allowed lateness cannot be negative.")__		} else if (allowedLateness != 0 && !windowAssigner.isEventTime()) {_			throw new IllegalArgumentException("Setting the allowed lateness is only valid for event-time windows.")__		} else {_			this.allowedLateness = millis__		}_		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,long,millis,lateness,to,milliseconds,if,allowed,lateness,0,throw,new,illegal,argument,exception,the,allowed,lateness,cannot,be,negative,else,if,allowed,lateness,0,window,assigner,is,event,time,throw,new,illegal,argument,exception,setting,the,allowed,lateness,is,only,valid,for,event,time,windows,else,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1474473213;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		long millis = lateness.toMilliseconds()__		if (allowedLateness < 0) {_			throw new IllegalArgumentException("The allowed lateness cannot be negative.")__		} else if (allowedLateness != 0 && !windowAssigner.isEventTime()) {_			throw new IllegalArgumentException("Setting the allowed lateness is only valid for event-time windows.")__		} else {_			this.allowedLateness = millis__		}_		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,long,millis,lateness,to,milliseconds,if,allowed,lateness,0,throw,new,illegal,argument,exception,the,allowed,lateness,cannot,be,negative,else,if,allowed,lateness,0,window,assigner,is,event,time,throw,new,illegal,argument,exception,setting,the,allowed,lateness,is,only,valid,for,event,time,windows,else,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1477066248;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		long millis = lateness.toMilliseconds()__		if (allowedLateness < 0) {_			throw new IllegalArgumentException("The allowed lateness cannot be negative.")__		} else if (allowedLateness != 0 && !windowAssigner.isEventTime()) {_			throw new IllegalArgumentException("Setting the allowed lateness is only valid for event-time windows.")__		} else {_			this.allowedLateness = millis__		}_		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,long,millis,lateness,to,milliseconds,if,allowed,lateness,0,throw,new,illegal,argument,exception,the,allowed,lateness,cannot,be,negative,else,if,allowed,lateness,0,window,assigner,is,event,time,throw,new,illegal,argument,exception,setting,the,allowed,lateness,is,only,valid,for,event,time,windows,else,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1479832867;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		long millis = lateness.toMilliseconds()__		if (allowedLateness < 0) {_			throw new IllegalArgumentException("The allowed lateness cannot be negative.")__		} else if (allowedLateness != 0 && !windowAssigner.isEventTime()) {_			throw new IllegalArgumentException("Setting the allowed lateness is only valid for event-time windows.")__		} else {_			this.allowedLateness = millis__		}_		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,long,millis,lateness,to,milliseconds,if,allowed,lateness,0,throw,new,illegal,argument,exception,the,allowed,lateness,cannot,be,negative,else,if,allowed,lateness,0,window,assigner,is,event,time,throw,new,illegal,argument,exception,setting,the,allowed,lateness,is,only,valid,for,event,time,windows,else,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1485255695;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		long millis = lateness.toMilliseconds()__		if (allowedLateness < 0) {_			throw new IllegalArgumentException("The allowed lateness cannot be negative.")__		} else if (allowedLateness != 0 && !windowAssigner.isEventTime()) {_			throw new IllegalArgumentException("Setting the allowed lateness is only valid for event-time windows.")__		} else {_			this.allowedLateness = millis__		}_		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,long,millis,lateness,to,milliseconds,if,allowed,lateness,0,throw,new,illegal,argument,exception,the,allowed,lateness,cannot,be,negative,else,if,allowed,lateness,0,window,assigner,is,event,time,throw,new,illegal,argument,exception,setting,the,allowed,lateness,is,only,valid,for,event,time,windows,else,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1485274811;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		long millis = lateness.toMilliseconds()__		if (millis < 0) {_			throw new IllegalArgumentException("The allowed lateness cannot be negative.")__		} else if (windowAssigner.isEventTime()) {_			this.allowedLateness = millis__		}_		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,long,millis,lateness,to,milliseconds,if,millis,0,throw,new,illegal,argument,exception,the,allowed,lateness,cannot,be,negative,else,if,window,assigner,is,event,time,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1485274811;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1485370583;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1487868265;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1487931040;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1487941225;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1488286976;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1489819457;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1493195810;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1493195810;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1493195810;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1493894636;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1493894636;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1494363409;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1495484544;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1496911361;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1497693649;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1506329783;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1532066767;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1544532203;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> allowedLateness(Time lateness);1549467949;Sets the time by which elements are allowed to be late. Elements that_arrive behind the watermark by more than the specified time will be dropped._By default, the allowed lateness is {@code 0L}.__<p>Setting an allowed lateness is only valid for event-time windows.;@PublicEvolving_	public AllWindowedStream<T, W> allowedLateness(Time lateness) {_		final long millis = lateness.toMilliseconds()__		checkArgument(millis >= 0, "The allowed lateness cannot be negative.")___		this.allowedLateness = millis__		return this__	};sets,the,time,by,which,elements,are,allowed,to,be,late,elements,that,arrive,behind,the,watermark,by,more,than,the,specified,time,will,be,dropped,by,default,the,allowed,lateness,is,code,0l,p,setting,an,allowed,lateness,is,only,valid,for,event,time,windows;public,evolving,public,all,windowed,stream,t,w,allowed,lateness,time,lateness,final,long,millis,lateness,to,milliseconds,check,argument,millis,0,the,allowed,lateness,cannot,be,negative,this,allowed,lateness,millis,return,this
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, foldAccumulatorType, null, false)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,fold,accumulator,type,null,false,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, ProcessAllWindowFunction)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, FoldFunction<T, ACC> foldFunction, AllWindowFunction<ACC, R, W> function) {__		TypeInformation<ACC> foldAccumulatorType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, foldAccumulatorType)___		return fold(initialValue, foldFunction, function, foldAccumulatorType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,process,all,window,function,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,type,information,r,result,type,get,all,window,function,return,type,function,fold,accumulator,type,return,fold,initial,value,fold,function,function,fold,accumulator,type,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1456778239;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1459866414;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1459869538;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1466504046;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1469525562;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1471362593;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1474473213;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1477066248;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1479832867;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1485255695;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1485274811;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1485274811;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1485370583;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1487868265;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1487931040;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1487941225;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1488286976;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1489819457;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>_A field expression is either_the name of a public field or a getter method with parentheses of the_stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1493195810;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1493195810;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1493195810;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1493894636;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1493894636;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1494363409;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1495484544;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1496911361;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1497693649;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1506329783;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1532066767;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1544532203;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(String field);1549467949;Applies an aggregation that sums every window of the pojo data stream at_the given field for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the stream's underlying type. A dot can be used to drill down into objects,_as in {@code "field1.getInnerField2()" }.__@param field The field to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,pojo,data,stream,at,the,given,field,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,input,get,type,input,get,execution,config
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1455101486;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1455299461;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1455703064;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1456528025;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1456528720;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1456778239;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1459866414;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1459869538;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1466504046;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1469525562;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1471362593;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1474473213;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1477066248;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1479832867;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1485255695;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1485274811;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1485274811;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1485370583;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1487868265;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1487931040;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1487941225;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1488286976;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1489819457;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1493195810;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1493195810;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1493195810;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1493894636;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a merging WindowAssigner with an Evictor.")__		}__		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,merging,window,assigner,with,an,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1493894636;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1494363409;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1495484544;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1496911361;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1497693649;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1506329783;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1532066767;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1544532203;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> @PublicEvolving 	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor);1549467949;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_incremental aggregation of window results cannot be used.;@PublicEvolving_	public AllWindowedStream<T, W> evictor(Evictor<? super T, ? super W> evictor) {_		if (windowAssigner instanceof BaseAlignedWindowAssigner) {_			throw new UnsupportedOperationException("Cannot use a " + windowAssigner.getClass().getSimpleName() + " with an Evictor.")__		}__		this.evictor = evictor__		return this__	};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,incremental,aggregation,of,window,results,cannot,be,used;public,evolving,public,all,windowed,stream,t,w,evictor,evictor,super,t,super,w,evictor,if,window,assigner,instanceof,base,aligned,window,assigner,throw,new,unsupported,operation,exception,cannot,use,a,window,assigner,get,class,get,simple,name,with,an,evictor,this,evictor,evictor,return,this
AllWindowedStream -> public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<V> aggregateResultType, 			TypeInformation<R> resultType);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<V> aggregateResultType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(aggregateResultType, "aggregateResultType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,v,aggregate,result,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,aggregate,result,type,aggregate,result,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, AllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, AllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, AllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, AllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, AllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, AllWindowFunction, TypeInformation, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,all,window,function,type,information,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,all,window,function,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	@Deprecated 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated use {@link #aggregate(AggregateFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead;@PublicEvolving_	@Deprecated_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,all,window,function,type,information,type,information,instead;public,evolving,deprecated,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1479832867;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(R, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,r,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.__@deprecated Use {@link #fold(Object, FoldFunction, AllWindowFunction, TypeInformation, TypeInformation)} instead.;@Deprecated_	public <R> SingleOutputStreamOperator<R> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, resultType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, R> stateDesc = new FoldingStateDescriptor<>("window-contents",_					initialValue, foldFunction, resultType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,deprecated,use,link,fold,object,fold,function,all,window,function,type,information,type,information,instead;deprecated,public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,result,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,r,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,result,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1456778239;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1459866414;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1459869538;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1466504046;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1469525562;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1471362593;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1474473213;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1477066248;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		return apply(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,return,apply,initial,value,function,new,pass,through,all,window,function,w,r,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1479832867;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1485255695;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1485274811;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1485274811;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1485370583;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1487868265;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1487931040;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1487941225;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1488286976;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1489819457;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1493195810;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1493195810;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1493195810;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1493894636;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType);1493894636;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function, TypeInformation<R> resultType) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		return fold(initialValue, function, new PassThroughAllWindowFunction<W, R>(), resultType, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,type,information,r,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,return,fold,initial,value,function,new,pass,through,all,window,function,w,r,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue, 			FoldFunction<T, ACC> foldFunction, 			AllWindowFunction<ACC, R, W> function, 			TypeInformation<ACC> foldAccumulatorType, 			TypeInformation<R> resultType);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param foldAccumulatorType Type information for the result type of the fold function_@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> fold(ACC initialValue,_			FoldFunction<T, ACC> foldFunction,_			AllWindowFunction<ACC, R, W> function,_			TypeInformation<ACC> foldAccumulatorType,_			TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction.")__		}_		if (windowAssigner instanceof MergingWindowAssigner) {_			throw new UnsupportedOperationException("Fold cannot be used with a merging WindowAssigner.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_				(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_				new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function, foldAccumulatorType)),_					trigger,_					evictor,_					allowedLateness,_					lateDataOutputTag)___		} else {_			FoldingStateDescriptor<T, ACC> stateDesc = new FoldingStateDescriptor<>("window-contents",_				initialValue, foldFunction, foldAccumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness,_					lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,fold,accumulator,type,type,information,for,the,result,type,of,the,fold,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,acc,r,single,output,stream,operator,r,fold,acc,initial,value,fold,function,t,acc,fold,function,all,window,function,acc,r,w,function,type,information,acc,fold,accumulator,type,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,if,window,assigner,instanceof,merging,window,assigner,throw,new,unsupported,operation,exception,fold,cannot,be,used,with,a,merging,window,assigner,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,fold,apply,all,window,function,initial,value,fold,function,function,fold,accumulator,type,trigger,evictor,allowed,lateness,late,data,output,tag,else,folding,state,descriptor,t,acc,state,desc,new,folding,state,descriptor,window,contents,initial,value,fold,function,fold,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1445418103;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		_		function = input.getExecutionEnvironment().clean(function)___		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1447162450;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		_		function = input.getExecutionEnvironment().clean(function)___		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1454527671;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		_		function = input.getExecutionEnvironment().clean(function)___		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1454679829;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		_		function = input.getExecutionEnvironment().clean(function)___		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1455101486;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		_		function = input.getExecutionEnvironment().clean(function)___		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return apply(new FoldAllWindowFunction<W, T, R>(initialValue, function), resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,apply,new,fold,all,window,function,w,t,r,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1455299461;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_			Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1455703064;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_			Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1456528025;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_			Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function);1456528720;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_			Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1487941225;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1488286976;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1489819457;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1493195810;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1493195810;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1493195810;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1493894636;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1493894636;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1494363409;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1495484544;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1496911361;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1497693649;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1506329783;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1532066767;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1544532203;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function);1549467949;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the fold function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(AggregateFunction<T, ACC, R> function) {_		checkNotNull(function, "function")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				function, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getAggregateFunctionReturnType(_				function, input.getType(), null, false)___		return aggregate(function, accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,check,not,null,function,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,aggregate,function,return,type,function,input,get,type,null,false,return,aggregate,function,accumulator,type,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1445418103;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1447162450;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1454527671;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1454679829;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1455101486;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1455299461;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1455703064;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1456528025;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1456528720;Applies an aggregation that gives the maximum value of every window of_the data stream at the given position.__@param positionToMax The position to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, input.getType(), AggregationFunction.AggregationType.MAX, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,value,of,every,window,of,the,data,stream,at,the,given,position,param,position,to,max,the,position,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,input,get,type,aggregation,function,aggregation,type,max,input,get,execution,config
AllWindowedStream -> public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggFunction, 			AllWindowFunction<V, R, W> windowFunction);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggFunction The aggregate function that is used for incremental aggregation._@param windowFunction The window function.__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggFunction,_			AllWindowFunction<V, R, W> windowFunction) {__		checkNotNull(aggFunction, "aggFunction")__		checkNotNull(windowFunction, "windowFunction")___		TypeInformation<ACC> accumulatorType = TypeExtractor.getAggregateFunctionAccumulatorType(_				aggFunction, input.getType(), null, false)___		TypeInformation<V> aggResultType = TypeExtractor.getAggregateFunctionReturnType(_				aggFunction, input.getType(), null, false)___		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				windowFunction, AllWindowFunction.class, true, true, aggResultType, null, false)___		return aggregate(aggFunction, windowFunction, accumulatorType, aggResultType, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,agg,function,the,aggregate,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,agg,function,all,window,function,v,r,w,window,function,check,not,null,agg,function,agg,function,check,not,null,window,function,window,function,type,information,acc,accumulator,type,type,extractor,get,aggregate,function,accumulator,type,agg,function,input,get,type,null,false,type,information,v,agg,result,type,type,extractor,get,aggregate,function,return,type,agg,function,input,get,type,null,false,type,information,r,result,type,type,extractor,get,unary,operator,return,type,window,function,all,window,function,class,true,true,agg,result,type,null,false,return,aggregate,agg,function,window,function,accumulator,type,agg,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function);1445418103;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function);1447162450;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, inType, null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function);1456528025;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function) {_		@SuppressWarnings("unchecked, rawtypes")_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,suppress,warnings,unchecked,rawtypes,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function);1456528720;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(AllWindowFunction<T, R, W> function) {_		@SuppressWarnings("unchecked, rawtypes")_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,suppress,warnings,unchecked,rawtypes,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1456778239;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1459866414;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1459869538;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1466504046;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1469525562;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1471362593;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1474473213;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1477066248;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1479832867;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1485255695;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1485274811;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1485274811;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1485370583;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1487868265;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1487931040;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1487941225;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1488286976;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1489819457;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>_A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1493195810;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1493195810;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1493195810;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1493894636;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1493894636;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1494363409;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1495484544;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1496911361;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1497693649;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1506329783;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1532066767;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1544532203;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> min(String field);1549467949;Applies an aggregation that that gives the minimum value of the pojo data_stream at the given field expression for every window.__<p>A field expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MIN, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,p,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,min,false,input,get,execution,config
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1459866414;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1459869538;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1466504046;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1469525562;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1471362593;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1474473213;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			ListStateDescriptor<StreamRecord<T>> stateDesc = new ListStateDescriptor<>("window-contents",_					new StreamRecordSerializer<>(input.getType().createSerializer(getExecutionEnvironment().getConfig())))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,new,stream,record,serializer,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType);1477066248;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(ReduceFunction<T> reduceFunction, AllWindowFunction<T, R, W> function, TypeInformation<R> resultType) {_		if (reduceFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		reduceFunction = input.getExecutionEnvironment().clean(reduceFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		String opName__		KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_				new EvictingWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalIterableAllWindowFunction<>(new ReduceApplyAllWindowFunction<>(reduceFunction, function)),_					trigger,_					evictor,_					allowedLateness)___		} else {_			ReducingStateDescriptor<T> stateDesc = new ReducingStateDescriptor<>("window-contents",_					reduceFunction,_					input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator =_				new WindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					keySel,_					input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_					stateDesc,_					new InternalSingleValueAllWindowFunction<>(function),_					trigger,_					allowedLateness)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,r,result,type,if,reduce,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,reduce,function,input,get,execution,environment,clean,reduce,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,string,op,name,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,reduce,apply,all,window,function,reduce,function,function,trigger,evictor,allowed,lateness,else,reducing,state,descriptor,t,state,desc,new,reducing,state,descriptor,window,contents,reduce,function,input,get,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,function,trigger,allowed,lateness,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1456778239;Applies a window function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the window function is interpreted_as a regular non-windowed stream._<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of pre-aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		@SuppressWarnings("unchecked, rawtypes")_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,a,window,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,pre,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,suppress,warnings,unchecked,rawtypes,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1459866414;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1459869538;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1466504046;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1469525562;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1471362593;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1474473213;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1477066248;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1479832867;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1485255695;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1485274811;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)___		return apply(function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_				function, AllWindowFunction.class, true, true, getInputType(), null, false)__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,get,input,type,null,false,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Not that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,not,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Note that this function requires that all data in the windows is buffered until the window_is evaluated, as the function provides no means of incremental aggregation.__@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R> apply(AllWindowFunction<T, R, W> function) {_		String callLocation = Utils.getCallLocationName()__		function = input.getExecutionEnvironment().clean(function)__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, getInputType())__		return apply(new InternalIterableAllWindowFunction<>(function), resultType, callLocation)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,note,that,this,function,requires,that,all,data,in,the,windows,is,buffered,until,the,window,is,evaluated,as,the,function,provides,no,means,of,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,all,window,function,t,r,w,function,string,call,location,utils,get,call,location,name,function,input,get,execution,environment,clean,function,type,information,r,result,type,get,all,window,function,return,type,function,get,input,type,return,apply,new,internal,iterable,all,window,function,function,result,type,call,location
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1459866414;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return apply(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,apply,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1459869538;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return apply(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,apply,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1466504046;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return apply(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,apply,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1469525562;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return apply(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,apply,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1471362593;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return apply(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,apply,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1474473213;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return apply(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,apply,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1477066248;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return apply(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,apply,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1479832867;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1485255695;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1485274811;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1485274811;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "WindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1485370583;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1487868265;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1487931040;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1487941225;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1488286976;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1489819457;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>_This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1493195810;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1493195810;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1493195810;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1493894636;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1493894636;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1494363409;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1495484544;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1496911361;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1497693649;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1506329783;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1532066767;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1544532203;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @SuppressWarnings("unchecked") 	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function);1549467949;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream.__<p>This window will try and incrementally aggregate data as much as the window policies permit._For example, tumbling time windows can aggregate the data, meaning that only one element per_key is stored. Sliding time windows will aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to incrementally aggregate, or may need to store extra values_in an aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;@SuppressWarnings("unchecked")_	public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_					"Please use reduce(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		return reduce(function, new PassThroughAllWindowFunction<W, T>())__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,incrementally,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,incrementally,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;suppress,warnings,unchecked,public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,reduce,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,return,reduce,function,new,pass,through,all,window,function,w,t
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1485370583;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1487868265;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1487931040;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1487941225;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1488286976;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1489819457;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1493195810;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1493894636;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1494363409;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1495484544;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = TypeExtractor.getUnaryOperatorReturnType(_			function, AllWindowFunction.class, true, true, inType, null, false)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,type,extractor,get,unary,operator,return,type,function,all,window,function,class,true,true,in,type,null,false,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1496911361;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1497693649;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1506329783;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1532066767;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> reduce( 			ReduceFunction<T> reduceFunction, 			AllWindowFunction<T, R, W> function);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given reducer.__@param reduceFunction The reduce function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> reduce(_			ReduceFunction<T> reduceFunction,_			AllWindowFunction<T, R, W> function) {__		TypeInformation<T> inType = input.getType()__		TypeInformation<R> resultType = getAllWindowFunctionReturnType(function, inType)___		return reduce(reduceFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,reducer,param,reduce,function,the,reduce,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,evolving,public,r,single,output,stream,operator,r,reduce,reduce,function,t,reduce,function,all,window,function,t,r,w,function,type,information,t,in,type,input,get,type,type,information,r,result,type,get,all,window,function,return,type,function,in,type,return,reduce,reduce,function,function,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1445418103;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1447162450;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1454527671;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1454679829;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1455101486;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1455299461;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1455703064;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1456528025;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1456528720;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns the first by default.__@param positionToMaxBy_The position to maximize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,the,first,by,default,param,position,to,max,by,the,position,to,maximize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1456778239;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1459866414;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1459869538;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1466504046;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1469525562;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1471362593;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1474473213;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1477066248;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1479832867;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1485255695;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1485274811;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1485274811;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1485370583;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1487868265;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1487931040;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1487941225;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1488286976;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1489819457;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493195810;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493195810;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493195810;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493894636;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493894636;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1494363409;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1495484544;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1496911361;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1497693649;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1506329783;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1532066767;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1544532203;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1549467949;Applies an aggregation that sums every window of the data stream at the_given position.__@param positionToSum The position in the tuple/array to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig()))__	};applies,an,aggregation,that,sums,every,window,of,the,data,stream,at,the,given,position,param,position,to,sum,the,position,in,the,tuple,array,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,input,get,type,input,get,execution,config
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1494363409;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1495484544;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1496911361;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1497693649;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1506329783;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1532066767;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1544532203;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1549467949;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.__@deprecated use {@link #aggregate(AggregateFunction)} instead;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window,deprecated,use,link,aggregate,aggregate,function,instead;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1455299461;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1455703064;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1456528025;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function);1456528720;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function) {_		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(foldFunction, input.getType(),_			Utils.getCallLocationName(), true)___		return apply(initialValue, foldFunction, function, resultType)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,type,extractor,get,fold,return,types,fold,function,input,get,type,utils,get,call,location,name,true,return,apply,initial,value,fold,function,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1455299461;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName___		OneInputStreamOperator<T, R> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new HeapWindowBuffer.Factory<T>(),_				new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function),_				trigger,_				evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + udfName + ")"___			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new HeapWindowBuffer.Factory<T>(),_				new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function),_				trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,one,input,stream,operator,t,r,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,op,name,non,parallel,trigger,window,window,assigner,trigger,evictor,udf,name,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1455703064;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new HeapWindowBuffer.Factory<T>(),_				new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function),_				trigger,_				evictor)___		} else {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + udfName + ")"___			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new HeapWindowBuffer.Factory<T>(),_				new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function),_				trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,one,input,stream,operator,t,r,operator,if,evictor,null,op,name,non,parallel,trigger,window,window,assigner,trigger,evictor,udf,name,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,else,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1456528025;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new HeapWindowBuffer.Factory<T>(),_				new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function),_				trigger,_				evictor)___		} else {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + udfName + ")"___			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new HeapWindowBuffer.Factory<T>(),_				new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function),_				trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,one,input,stream,operator,t,r,operator,if,evictor,null,op,name,non,parallel,trigger,window,window,assigner,trigger,evictor,udf,name,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,else,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType);1456528720;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>_Arriving data is incrementally aggregated using the given fold function.__@param initialValue The initial value of the fold._@param foldFunction The fold function that is used for incremental aggregation._@param function The window function._@param resultType Type information for the result type of the window function_@return The data stream that is the result of applying the window function to the window.;public <R> SingleOutputStreamOperator<R, ?> apply(R initialValue, FoldFunction<T, R> foldFunction, AllWindowFunction<R, R, W> function, TypeInformation<R> resultType) {_		if (foldFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of apply can not be a RichFunction.")__		}__		_		function = input.getExecutionEnvironment().clean(function)__		foldFunction = input.getExecutionEnvironment().clean(foldFunction)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		String opName___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new ListWindowBuffer.Factory<>(getInputType().createSerializer(getExecutionEnvironment().getConfig())),_				new FoldApplyAllWindowFunction<>(initialValue, foldFunction, function),_				trigger,_				evictor)___		} else {_			opName = "NonParallelTriggerWindow(" + windowAssigner  + ", " + trigger + ", " + udfName + ")"___			operator = new NonKeyedWindowOperator<>(windowAssigner,_				windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_				new FoldingWindowBuffer.Factory<>(foldFunction, initialValue, resultType.createSerializer(getExecutionEnvironment().getConfig())),_				function,_				trigger)__		}__		return input.transform(opName, resultType, operator).setParallelism(1)__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,fold,function,param,initial,value,the,initial,value,of,the,fold,param,fold,function,the,fold,function,that,is,used,for,incremental,aggregation,param,function,the,window,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window;public,r,single,output,stream,operator,r,apply,r,initial,value,fold,function,t,r,fold,function,all,window,function,r,r,w,function,type,information,r,result,type,if,fold,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,apply,can,not,be,a,rich,function,function,input,get,execution,environment,clean,function,fold,function,input,get,execution,environment,clean,fold,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,string,op,name,one,input,stream,operator,t,r,operator,if,evictor,null,op,name,non,parallel,trigger,window,window,assigner,trigger,evictor,udf,name,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,list,window,buffer,factory,get,input,type,create,serializer,get,execution,environment,get,config,new,fold,apply,all,window,function,initial,value,fold,function,function,trigger,evictor,else,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,folding,window,buffer,factory,fold,function,initial,value,result,type,create,serializer,get,execution,environment,get,config,function,trigger,return,input,transform,op,name,result,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1456778239;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1459866414;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1459869538;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1466504046;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1469525562;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1471362593;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1474473213;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1477066248;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1479832867;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1485255695;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1485274811;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1485274811;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1485370583;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1487868265;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1487931040;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1487941225;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1488286976;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1489819457;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493195810;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493195810;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493195810;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493894636;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493894636;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1494363409;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1495484544;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1496911361;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1497693649;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1506329783;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1532066767;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1544532203;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> minBy(String field, boolean first);1549467949;Applies an aggregation that that gives the minimum element of the pojo_data stream by the given field expression for every window. A field_expression is either the name of a public field or a getter method with_parentheses of the {@link DataStream DataStreams} underlying type. A dot can be used_to drill down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@param first If True then in case of field equality the first object will be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MINBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,minby,first,input,get,execution,config
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1487941225;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1488286976;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1489819457;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1493195810;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1493894636;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1493894636;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1494363409;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1495484544;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1496911361;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1497693649;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1506329783;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1532066767;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1544532203;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type
AllWindowedStream -> @PublicEvolving 	public <ACC, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, R> function, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1549467949;Applies the given {@code AggregateFunction} to each window. The AggregateFunction_aggregates all elements of a window into a single result element. The stream of these_result elements (one per window) is interpreted as a regular non-windowed stream.__@param function The aggregation function._@return The data stream that is the result of applying the aggregation function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <R> The type of the elements in the resulting stream, equal to the_AggregateFunction's result type;@PublicEvolving_	public <ACC, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, R> function,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(function, "function")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregation function cannot be a RichFunction.")__		}__		return aggregate(function, new PassThroughAllWindowFunction<W, R>(),_				accumulatorType, resultType)__	};applies,the,given,code,aggregate,function,to,each,window,the,aggregate,function,aggregates,all,elements,of,a,window,into,a,single,result,element,the,stream,of,these,result,elements,one,per,window,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,aggregation,function,return,the,data,stream,that,is,the,result,of,applying,the,aggregation,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,aggregate,function,s,result,type;public,evolving,public,acc,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,r,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,function,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregation,function,cannot,be,a,rich,function,return,aggregate,function,new,pass,through,all,window,function,w,r,accumulator,type,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1445418103;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1447162450;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1454527671;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1454679829;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1455101486;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1455299461;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1455703064;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1456528025;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1456528720;Applies an aggregation that gives the minimum element of every window of_the data stream by the given position. If more elements have the same_minimum value the operator returns the first element by default.__@param positionToMinBy The position to minimize by_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,minimum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,minimum,value,the,operator,returns,the,first,element,by,default,param,position,to,min,by,the,position,to,minimize,by,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1445418103;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1447162450;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1454527671;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1454679829;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1455101486;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1455299461;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1455703064;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1456528025;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1456528720;Applies an aggregation that gives the maximum element of every window of_the data stream by the given position. If more elements have the same_maximum value the operator returns either the first or last one depending_on the parameter setting.__@param positionToMaxBy The position to maximize by_@param first If true, then the operator return the first element with the maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, input.getType(), AggregationFunction.AggregationType.MAXBY, first, input.getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,maximum,element,of,every,window,of,the,data,stream,by,the,given,position,if,more,elements,have,the,same,maximum,value,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,setting,param,position,to,max,by,the,position,to,maximize,by,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,input,get,type,aggregation,function,aggregation,type,maxby,first,input,get,execution,config
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1456778239;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_				"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_			Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1459866414;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1459869538;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1466504046;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1469525562;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1471362593;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1474473213;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1477066248;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction can not be a RichFunction. " +_					"Please use apply(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,can,not,be,a,rich,function,please,use,apply,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1479832867;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1485255695;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1485274811;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1485274811;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1485370583;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1487868265;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1487931040;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1487941225;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1488286976;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1489819457;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1493195810;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1493195810;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1493195810;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1493894636;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function);1493894636;Applies the given fold function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the reduce function is_interpreted as a regular non-windowed stream.__@param function The fold function._@return The data stream that is the result of applying the fold function to the window.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("FoldFunction of fold can not be a RichFunction. " +_					"Please use fold(FoldFunction, WindowFunction) instead.")__		}__		TypeInformation<R> resultType = TypeExtractor.getFoldReturnTypes(function, input.getType(),_				Utils.getCallLocationName(), true)___		return fold(initialValue, function, resultType)__	};applies,the,given,fold,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,param,function,the,fold,function,return,the,data,stream,that,is,the,result,of,applying,the,fold,function,to,the,window;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,fold,function,of,fold,can,not,be,a,rich,function,please,use,fold,fold,function,window,function,instead,type,information,r,result,type,type,extractor,get,fold,return,types,function,input,get,type,utils,get,call,location,name,true,return,fold,initial,value,function,result,type
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1445418103;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "Reduce at " + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceAllWindowFunction<W, T>(function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			_			@SuppressWarnings("unchecked")_			ReduceFunction<T> functionCopy = (ReduceFunction<T>) SerializationUtils.clone(function)___			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(functionCopy),_					new ReduceAllWindowFunction<W, T>(function),_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,reduce,at,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,all,window,function,w,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,suppress,warnings,unchecked,reduce,function,t,function,copy,reduce,function,t,serialization,utils,clone,function,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,function,copy,new,reduce,all,window,function,w,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1447162450;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "Reduce at " + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceAllWindowFunction<W, T>(function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(function),_					new ReduceAllWindowFunction<W, T>(function),_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,reduce,at,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,all,window,function,w,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,function,new,reduce,all,window,function,w,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1454527671;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_				"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "Reduce at " + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(function),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,reduce,at,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,iterable,all,window,function,w,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,function,new,reduce,iterable,all,window,function,w,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1454679829;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_				"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "Reduce at " + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(function),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,reduce,at,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,iterable,all,window,function,w,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,function,new,reduce,iterable,all,window,function,w,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1455101486;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_				"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "Reduce at " + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(function),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,reduce,at,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,iterable,all,window,function,w,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,function,new,reduce,iterable,all,window,function,w,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1455299461;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_				"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		boolean setProcessingTime = input.getExecutionEnvironment().getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger,_					evictor).enableSetProcessingTime(setProcessingTime)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(function),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger).enableSetProcessingTime(setProcessingTime)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,boolean,set,processing,time,input,get,execution,environment,get,stream,time,characteristic,time,characteristic,processing,time,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,iterable,all,window,function,w,t,function,trigger,evictor,enable,set,processing,time,set,processing,time,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,function,new,reduce,iterable,all,window,function,w,t,function,trigger,enable,set,processing,time,set,processing,time,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1455703064;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_				"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(function),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,iterable,all,window,function,w,t,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,function,new,reduce,iterable,all,window,function,w,t,function,trigger,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1456528025;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_				"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new HeapWindowBuffer.Factory<T>(),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new PreAggregatingHeapWindowBuffer.Factory<>(function),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,heap,window,buffer,factory,t,new,reduce,iterable,all,window,function,w,t,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,pre,aggregating,heap,window,buffer,factory,function,new,reduce,iterable,all,window,function,w,t,function,trigger,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function);1456528720;Applies a reduce function to the window. The window function is called for each evaluation_of the window for each key individually. The output of the reduce function is interpreted_as a regular non-windowed stream._<p>_This window will try and pre-aggregate data as much as the window policies permit. For example,_tumbling time windows can perfectly pre-aggregate the data, meaning that only one element per_key is stored. Sliding time windows will pre-aggregate on the granularity of the slide interval,_so a few elements are stored per key (one per slide interval)._Custom windows may not be able to pre-aggregate, or may need to store extra values in an_aggregation tree.__@param function The reduce function._@return The data stream that is the result of applying the reduce function to the window.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> function) {_		if (function instanceof RichFunction) {_			throw new UnsupportedOperationException("ReduceFunction of reduce can not be a RichFunction. " +_				"Please use apply(ReduceFunction, WindowFunction) instead.")__		}__		_		function = input.getExecutionEnvironment().clean(function)___		String callLocation = Utils.getCallLocationName()__		String udfName = "AllWindowedStream." + callLocation___		SingleOutputStreamOperator<T, ?> result = createFastTimeOperatorIfValid(function, input.getType(), udfName)__		if (result != null) {_			return result__		}__		String opName = "NonParallelTriggerWindow(" + windowAssigner + ", " + trigger + ", " + udfName + ")"___		OneInputStreamOperator<T, T> operator___		if (evictor != null) {_			operator = new EvictingNonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new ListWindowBuffer.Factory<>(getInputType().createSerializer(getExecutionEnvironment().getConfig())),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger,_					evictor)___		} else {_			operator = new NonKeyedWindowOperator<>(windowAssigner,_					windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_					new ReducingWindowBuffer.Factory<>(function, getInputType().createSerializer(getExecutionEnvironment().getConfig())),_					new ReduceIterableAllWindowFunction<W, T>(function),_					trigger)__		}__		return input.transform(opName, input.getType(), operator).setParallelism(1)__	};applies,a,reduce,function,to,the,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,reduce,function,is,interpreted,as,a,regular,non,windowed,stream,p,this,window,will,try,and,pre,aggregate,data,as,much,as,the,window,policies,permit,for,example,tumbling,time,windows,can,perfectly,pre,aggregate,the,data,meaning,that,only,one,element,per,key,is,stored,sliding,time,windows,will,pre,aggregate,on,the,granularity,of,the,slide,interval,so,a,few,elements,are,stored,per,key,one,per,slide,interval,custom,windows,may,not,be,able,to,pre,aggregate,or,may,need,to,store,extra,values,in,an,aggregation,tree,param,function,the,reduce,function,return,the,data,stream,that,is,the,result,of,applying,the,reduce,function,to,the,window;public,single,output,stream,operator,t,reduce,reduce,function,t,function,if,function,instanceof,rich,function,throw,new,unsupported,operation,exception,reduce,function,of,reduce,can,not,be,a,rich,function,please,use,apply,reduce,function,window,function,instead,function,input,get,execution,environment,clean,function,string,call,location,utils,get,call,location,name,string,udf,name,all,windowed,stream,call,location,single,output,stream,operator,t,result,create,fast,time,operator,if,valid,function,input,get,type,udf,name,if,result,null,return,result,string,op,name,non,parallel,trigger,window,window,assigner,trigger,udf,name,one,input,stream,operator,t,t,operator,if,evictor,null,operator,new,evicting,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,list,window,buffer,factory,get,input,type,create,serializer,get,execution,environment,get,config,new,reduce,iterable,all,window,function,w,t,function,trigger,evictor,else,operator,new,non,keyed,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,new,reducing,window,buffer,factory,function,get,input,type,create,serializer,get,execution,environment,get,config,new,reduce,iterable,all,window,function,w,t,function,trigger,return,input,transform,op,name,input,get,type,operator,set,parallelism,1
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1456778239;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1459866414;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1459869538;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1466504046;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1469525562;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1471362593;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1474473213;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1477066248;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1479832867;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1485255695;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1485274811;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1485274811;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1485370583;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1487868265;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1487931040;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1487941225;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1488286976;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1489819457;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1493195810;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1493195810;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1493195810;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1493894636;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1493894636;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1494363409;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1495484544;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1496911361;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1497693649;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1506329783;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1532066767;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1544532203;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> public SingleOutputStreamOperator<T> max(String field);1549467949;Applies an aggregation that that gives the maximum value of the pojo data_stream at the given field expression for every window. A field expression_is either the name of a public field or a getter method with parentheses_of the {@link DataStream DataStreams} underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param field The field expression based on which the aggregation will be applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, input.getType(), AggregationFunction.AggregationType.MAX, false, input.getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,maximum,value,of,the,pojo,data,stream,at,the,given,field,expression,for,every,window,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,data,streams,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,input,get,type,aggregation,function,aggregation,type,max,false,input,get,execution,config
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1544532203;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
AllWindowedStream -> @PublicEvolving 	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate( 			AggregateFunction<T, ACC, V> aggregateFunction, 			AllWindowFunction<V, R, W> windowFunction, 			TypeInformation<ACC> accumulatorType, 			TypeInformation<R> resultType);1549467949;Applies the given window function to each window. The window function is called for each_evaluation of the window for each key individually. The output of the window function is_interpreted as a regular non-windowed stream.__<p>Arriving data is incrementally aggregated using the given aggregate function. This means_that the window function typically has only a single value to process when called.__@param aggregateFunction The aggregation function that is used for incremental aggregation._@param windowFunction The window function._@param accumulatorType Type information for the internal accumulator type of the aggregation function_@param resultType Type information for the result type of the window function__@return The data stream that is the result of applying the window function to the window.__@param <ACC> The type of the AggregateFunction's accumulator_@param <V> The type of AggregateFunction's result, and the WindowFunction's input_@param <R> The type of the elements in the resulting stream, equal to the_WindowFunction's result type;@PublicEvolving_	public <ACC, V, R> SingleOutputStreamOperator<R> aggregate(_			AggregateFunction<T, ACC, V> aggregateFunction,_			AllWindowFunction<V, R, W> windowFunction,_			TypeInformation<ACC> accumulatorType,_			TypeInformation<R> resultType) {__		checkNotNull(aggregateFunction, "aggregateFunction")__		checkNotNull(windowFunction, "windowFunction")__		checkNotNull(accumulatorType, "accumulatorType")__		checkNotNull(resultType, "resultType")___		if (aggregateFunction instanceof RichFunction) {_			throw new UnsupportedOperationException("This aggregate function cannot be a RichFunction.")__		}__		_		windowFunction = input.getExecutionEnvironment().clean(windowFunction)__		aggregateFunction = input.getExecutionEnvironment().clean(aggregateFunction)___		final String callLocation = Utils.getCallLocationName()__		final String udfName = "AllWindowedStream." + callLocation___		final String opName__		final KeySelector<T, Byte> keySel = input.getKeySelector()___		OneInputStreamOperator<T, R> operator___		if (evictor != null) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TypeSerializer<StreamRecord<T>> streamRecordSerializer =_					(TypeSerializer<StreamRecord<T>>) new StreamElementSerializer(_							input.getType().createSerializer(getExecutionEnvironment().getConfig()))___			ListStateDescriptor<StreamRecord<T>> stateDesc =_					new ListStateDescriptor<>("window-contents", streamRecordSerializer)___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + evictor + ", " + udfName + ")"___			operator =_					new EvictingWindowOperator<>(windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalIterableAllWindowFunction<>(_									new AggregateApplyAllWindowFunction<>(aggregateFunction, windowFunction)),_							trigger,_							evictor,_							allowedLateness,_							lateDataOutputTag)___		} else {_			AggregatingStateDescriptor<T, ACC, V> stateDesc = new AggregatingStateDescriptor<>(_					"window-contents",_					aggregateFunction,_					accumulatorType.createSerializer(getExecutionEnvironment().getConfig()))___			opName = "TriggerWindow(" + windowAssigner + ", " + stateDesc + ", " + trigger + ", " + udfName + ")"___			operator = new WindowOperator<>(_							windowAssigner,_							windowAssigner.getWindowSerializer(getExecutionEnvironment().getConfig()),_							keySel,_							input.getKeyType().createSerializer(getExecutionEnvironment().getConfig()),_							stateDesc,_							new InternalSingleValueAllWindowFunction<>(windowFunction),_							trigger,_							allowedLateness,_							lateDataOutputTag)__		}__		return input.transform(opName, resultType, operator).forceNonParallel()__	};applies,the,given,window,function,to,each,window,the,window,function,is,called,for,each,evaluation,of,the,window,for,each,key,individually,the,output,of,the,window,function,is,interpreted,as,a,regular,non,windowed,stream,p,arriving,data,is,incrementally,aggregated,using,the,given,aggregate,function,this,means,that,the,window,function,typically,has,only,a,single,value,to,process,when,called,param,aggregate,function,the,aggregation,function,that,is,used,for,incremental,aggregation,param,window,function,the,window,function,param,accumulator,type,type,information,for,the,internal,accumulator,type,of,the,aggregation,function,param,result,type,type,information,for,the,result,type,of,the,window,function,return,the,data,stream,that,is,the,result,of,applying,the,window,function,to,the,window,param,acc,the,type,of,the,aggregate,function,s,accumulator,param,v,the,type,of,aggregate,function,s,result,and,the,window,function,s,input,param,r,the,type,of,the,elements,in,the,resulting,stream,equal,to,the,window,function,s,result,type;public,evolving,public,acc,v,r,single,output,stream,operator,r,aggregate,aggregate,function,t,acc,v,aggregate,function,all,window,function,v,r,w,window,function,type,information,acc,accumulator,type,type,information,r,result,type,check,not,null,aggregate,function,aggregate,function,check,not,null,window,function,window,function,check,not,null,accumulator,type,accumulator,type,check,not,null,result,type,result,type,if,aggregate,function,instanceof,rich,function,throw,new,unsupported,operation,exception,this,aggregate,function,cannot,be,a,rich,function,window,function,input,get,execution,environment,clean,window,function,aggregate,function,input,get,execution,environment,clean,aggregate,function,final,string,call,location,utils,get,call,location,name,final,string,udf,name,all,windowed,stream,call,location,final,string,op,name,final,key,selector,t,byte,key,sel,input,get,key,selector,one,input,stream,operator,t,r,operator,if,evictor,null,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,t,stream,record,serializer,type,serializer,stream,record,t,new,stream,element,serializer,input,get,type,create,serializer,get,execution,environment,get,config,list,state,descriptor,stream,record,t,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,op,name,trigger,window,window,assigner,state,desc,trigger,evictor,udf,name,operator,new,evicting,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,iterable,all,window,function,new,aggregate,apply,all,window,function,aggregate,function,window,function,trigger,evictor,allowed,lateness,late,data,output,tag,else,aggregating,state,descriptor,t,acc,v,state,desc,new,aggregating,state,descriptor,window,contents,aggregate,function,accumulator,type,create,serializer,get,execution,environment,get,config,op,name,trigger,window,window,assigner,state,desc,trigger,udf,name,operator,new,window,operator,window,assigner,window,assigner,get,window,serializer,get,execution,environment,get,config,key,sel,input,get,key,type,create,serializer,get,execution,environment,get,config,state,desc,new,internal,single,value,all,window,function,window,function,trigger,allowed,lateness,late,data,output,tag,return,input,transform,op,name,result,type,operator,force,non,parallel
