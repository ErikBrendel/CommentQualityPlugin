commented;modifiers;parameterAmount;loc;comment;code
false;public;4;6;;@Override public void evictBefore(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext ctx) {     if (!doEvictAfter) {         evict(elements, size, ctx).     } }
false;public;4;6;;@Override public void evictAfter(Iterable<TimestampedValue<T>> elements, int size, W window, EvictorContext ctx) {     if (doEvictAfter) {         evict(elements, size, ctx).     } }
false;private;3;9;;private void evict(Iterable<TimestampedValue<T>> elements, int size, EvictorContext ctx) {     TimestampedValue<T> lastElement = Iterables.getLast(elements).     for (Iterator<TimestampedValue<T>> iterator = elements.iterator(). iterator.hasNext(). ) {         TimestampedValue<T> element = iterator.next().         if (deltaFunction.getDelta(element.getValue(), lastElement.getValue()) >= this.threshold) {             iterator.remove().         }     } }
false;public;0;4;;@Override public String toString() {     return "DeltaEvictor(" + deltaFunction + ", " + threshold + ")". }
true;public,static;2;3;/**  * Creates a {@code DeltaEvictor} from the given threshold and {@code DeltaFunction}.  * Eviction is done before the window function.  *  * @param threshold The threshold  * @param deltaFunction The {@code DeltaFunction}  */ ;/**  * Creates a {@code DeltaEvictor} from the given threshold and {@code DeltaFunction}.  * Eviction is done before the window function.  *  * @param threshold The threshold  * @param deltaFunction The {@code DeltaFunction}  */ public static <T, W extends Window> DeltaEvictor<T, W> of(double threshold, DeltaFunction<T> deltaFunction) {     return new DeltaEvictor<>(threshold, deltaFunction). }
true;public,static;3;3;/**  * Creates a {@code DeltaEvictor} from the given threshold, {@code DeltaFunction}.  * Eviction is done before/after the window function based on the value of doEvictAfter.  *  * @param threshold The threshold  * @param deltaFunction The {@code DeltaFunction}  * @param doEvictAfter Whether eviction should be done after window function  */ ;/**  * Creates a {@code DeltaEvictor} from the given threshold, {@code DeltaFunction}.  * Eviction is done before/after the window function based on the value of doEvictAfter.  *  * @param threshold The threshold  * @param deltaFunction The {@code DeltaFunction}  * @param doEvictAfter Whether eviction should be done after window function  */ public static <T, W extends Window> DeltaEvictor<T, W> of(double threshold, DeltaFunction<T> deltaFunction, boolean doEvictAfter) {     return new DeltaEvictor<>(threshold, deltaFunction, doEvictAfter). }
