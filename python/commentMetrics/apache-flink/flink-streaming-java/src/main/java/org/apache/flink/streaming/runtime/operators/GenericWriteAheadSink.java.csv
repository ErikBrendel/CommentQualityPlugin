# id;timestamp;commentText;codeText;commentWords;codeWords
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1479127284;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1481196434;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1485189169;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1493195810;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1495484544;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1499795469;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1510075684;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1511814440;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1516626397;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> private void cleanRestoredHandles() throws Exception;1517489695;Called at {@link #open()} to clean-up the pending handle list._It iterates over all restored pending handles, checks which ones are already_committed to the outside storage system and removes them from the list.;private void cleanRestoredHandles() throws Exception {_		synchronized (pendingCheckpoints) {__			Iterator<PendingCheckpoint> pendingCheckpointIt = pendingCheckpoints.iterator()__			while (pendingCheckpointIt.hasNext()) {_				PendingCheckpoint pendingCheckpoint = pendingCheckpointIt.next()___				if (committer.isCheckpointCommitted(pendingCheckpoint.subtaskId, pendingCheckpoint.checkpointId)) {_					pendingCheckpoint.stateHandle.discardState()__					pendingCheckpointIt.remove()__				}_			}_		}_	};called,at,link,open,to,clean,up,the,pending,handle,list,it,iterates,over,all,restored,pending,handles,checks,which,ones,are,already,committed,to,the,outside,storage,system,and,removes,them,from,the,list;private,void,clean,restored,handles,throws,exception,synchronized,pending,checkpoints,iterator,pending,checkpoint,pending,checkpoint,it,pending,checkpoints,iterator,while,pending,checkpoint,it,has,next,pending,checkpoint,pending,checkpoint,pending,checkpoint,it,next,if,committer,is,checkpoint,committed,pending,checkpoint,subtask,id,pending,checkpoint,checkpoint,id,pending,checkpoint,state,handle,discard,state,pending,checkpoint,it,remove
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;1499795469;Write the given element into the backend.__@param values The values to be written_@param checkpointId The checkpoint ID of the checkpoint to be written_@param timestamp The wall-clock timestamp of the checkpoint__@return true, if the sending was successful, false otherwise__@throws Exception;protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,values,the,values,to,be,written,param,checkpoint,id,the,checkpoint,id,of,the,checkpoint,to,be,written,param,timestamp,the,wall,clock,timestamp,of,the,checkpoint,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,values,long,checkpoint,id,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;1510075684;Write the given element into the backend.__@param values The values to be written_@param checkpointId The checkpoint ID of the checkpoint to be written_@param timestamp The wall-clock timestamp of the checkpoint__@return true, if the sending was successful, false otherwise__@throws Exception;protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,values,the,values,to,be,written,param,checkpoint,id,the,checkpoint,id,of,the,checkpoint,to,be,written,param,timestamp,the,wall,clock,timestamp,of,the,checkpoint,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,values,long,checkpoint,id,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;1511814440;Write the given element into the backend.__@param values The values to be written_@param checkpointId The checkpoint ID of the checkpoint to be written_@param timestamp The wall-clock timestamp of the checkpoint__@return true, if the sending was successful, false otherwise__@throws Exception;protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,values,the,values,to,be,written,param,checkpoint,id,the,checkpoint,id,of,the,checkpoint,to,be,written,param,timestamp,the,wall,clock,timestamp,of,the,checkpoint,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,values,long,checkpoint,id,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;1516626397;Write the given element into the backend.__@param values The values to be written_@param checkpointId The checkpoint ID of the checkpoint to be written_@param timestamp The wall-clock timestamp of the checkpoint__@return true, if the sending was successful, false otherwise__@throws Exception;protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,values,the,values,to,be,written,param,checkpoint,id,the,checkpoint,id,of,the,checkpoint,to,be,written,param,timestamp,the,wall,clock,timestamp,of,the,checkpoint,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,values,long,checkpoint,id,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;1517489695;Write the given element into the backend.__@param values The values to be written_@param checkpointId The checkpoint ID of the checkpoint to be written_@param timestamp The wall-clock timestamp of the checkpoint__@return true, if the sending was successful, false otherwise__@throws Exception;protected abstract boolean sendValues(Iterable<IN> values, long checkpointId, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,values,the,values,to,be,written,param,checkpoint,id,the,checkpoint,id,of,the,checkpoint,to,be,written,param,timestamp,the,wall,clock,timestamp,of,the,checkpoint,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,values,long,checkpoint,id,long,timestamp,throws,exception
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1466089084;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StateHandle<DataInputView> handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,state,handle,data,input,view,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1468339633;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StateHandle<DataInputView> handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,state,handle,data,input,view,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1468339633;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StateHandle<DataInputView> handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,state,handle,data,input,view,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1468523508;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StateHandle<DataInputView> handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,state,handle,data,input,view,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1468595884;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StateHandle<DataInputView> handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,state,handle,data,input,view,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1469451175;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StateHandle<DataInputView> handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,state,handle,data,input,view,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1471362858;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StateHandle<DataInputView> handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,state,handle,data,input,view,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1472663401;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StreamStateHandle handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,stream,state,handle,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1472663401;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StreamStateHandle handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,stream,state,handle,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1475231926;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StreamStateHandle handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,stream,state,handle,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1477069385;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StreamStateHandle handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,stream,state,handle,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1477517188;Saves a handle in the state.__@param checkpointId_@throws IOException;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			StreamStateHandle handle = out.closeAndGetHandle()__			if (state.pendingHandles.containsKey(checkpointId)) {_				_				_				handle.discardState()__			} else {_				state.pendingHandles.put(checkpointId, new Tuple2<>(timestamp, handle))__			}_			out = null__		}_	};saves,a,handle,in,the,state,param,checkpoint,id,throws,ioexception;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,stream,state,handle,handle,out,close,and,get,handle,if,state,pending,handles,contains,key,checkpoint,id,handle,discard,state,else,state,pending,handles,put,checkpoint,id,new,tuple2,timestamp,handle,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1479127284;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {_		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1481196434;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1485189169;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1493195810;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1495484544;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1499795469;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1510075684;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1511814440;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1516626397;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception;1517489695;Called when a checkpoint barrier arrives. It closes any open streams to the backend_and marks them as pending for committing to the external, third-party storage system.__@param checkpointId the id of the latest received checkpoint._@throws IOException in case something went wrong when handling the stream to the backend.;private void saveHandleInState(final long checkpointId, final long timestamp) throws Exception {__		_		if (out != null) {_			int subtaskIdx = getRuntimeContext().getIndexOfThisSubtask()__			StreamStateHandle handle = out.closeAndGetHandle()___			PendingCheckpoint pendingCheckpoint = new PendingCheckpoint(_				checkpointId, subtaskIdx, timestamp, handle)___			if (pendingCheckpoints.contains(pendingCheckpoint)) {_				_				_				handle.discardState()__			} else {_				pendingCheckpoints.add(pendingCheckpoint)__			}_			out = null__		}_	};called,when,a,checkpoint,barrier,arrives,it,closes,any,open,streams,to,the,backend,and,marks,them,as,pending,for,committing,to,the,external,third,party,storage,system,param,checkpoint,id,the,id,of,the,latest,received,checkpoint,throws,ioexception,in,case,something,went,wrong,when,handling,the,stream,to,the,backend;private,void,save,handle,in,state,final,long,checkpoint,id,final,long,timestamp,throws,exception,if,out,null,int,subtask,idx,get,runtime,context,get,index,of,this,subtask,stream,state,handle,handle,out,close,and,get,handle,pending,checkpoint,pending,checkpoint,new,pending,checkpoint,checkpoint,id,subtask,idx,timestamp,handle,if,pending,checkpoints,contains,pending,checkpoint,handle,discard,state,else,pending,checkpoints,add,pending,checkpoint,out,null
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1468339633;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1468339633;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1468523508;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1468595884;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1469451175;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1471362858;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1472663401;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1472663401;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1475231926;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1477069385;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1477517188;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1479127284;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1481196434;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1485189169;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1493195810;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
GenericWriteAheadSink -> protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;1495484544;Write the given element into the backend.__@param value value to be written_@return true, if the sending was successful, false otherwise_@throws Exception;protected abstract boolean sendValues(Iterable<IN> value, long timestamp) throws Exception_;write,the,given,element,into,the,backend,param,value,value,to,be,written,return,true,if,the,sending,was,successful,false,otherwise,throws,exception;protected,abstract,boolean,send,values,iterable,in,value,long,timestamp,throws,exception
