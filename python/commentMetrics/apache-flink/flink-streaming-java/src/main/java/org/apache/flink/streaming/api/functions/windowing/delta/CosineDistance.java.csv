commented;modifiers;parameterAmount;loc;comment;code
false;public;2;22;;@Override public double getNestedDelta(double[] oldDataPoint, double[] newDataPoint) {     if (isNullvector(oldDataPoint, newDataPoint)) {         return 0.     }     if (oldDataPoint.length != newDataPoint.length) {         throw new IllegalArgumentException("The size of two input arrays are not same, can not compute cosine distance").     }     double sum1 = 0.     double sum2 = 0.     for (int i = 0. i < oldDataPoint.length. i++) {         sum1 += oldDataPoint[i] * oldDataPoint[i].         sum2 += newDataPoint[i] * newDataPoint[i].     }     sum1 = Math.sqrt(sum1).     sum2 = Math.sqrt(sum2).     return 1d - (dotProduct(oldDataPoint, newDataPoint) / (sum1 * sum2)). }
false;private;2;7;;private double dotProduct(double[] a, double[] b) {     double result = 0.     for (int i = 0. i < a.length. i++) {         result += a[i] * b[i].     }     return result. }
false;private;1;12;;private boolean isNullvector(double[]... vectors) {     outer: for (double[] v : vectors) {         for (double field : v) {             if (field != 0) {                 continue outer.             }         }         // This position is only reached in case all fields are 0.         return true.     }     return false. }
