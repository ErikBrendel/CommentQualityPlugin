commented;modifiers;parameterAmount;loc;comment;code
false;public;1;28;;@Override public void run(SourceContext<Tuple3<String, Long, Long>> ctx) throws Exception {     FileSystem fileSystem = FileSystem.get(new URI(path)).     while (isRunning) {         List<String> files = listNewFiles(fileSystem).         for (String filePath : files) {             if (watchType == WatchType.ONLY_NEW_FILES || watchType == WatchType.REPROCESS_WITH_APPENDED) {                 ctx.collect(new Tuple3<String, Long, Long>(filePath, 0L, -1L)).                 offsetOfFiles.put(filePath, -1L).             } else if (watchType == WatchType.PROCESS_ONLY_APPENDED) {                 long offset = 0.                 long fileSize = fileSystem.getFileStatus(new Path(filePath)).getLen().                 if (offsetOfFiles.containsKey(filePath)) {                     offset = offsetOfFiles.get(filePath).                 }                 ctx.collect(new Tuple3<String, Long, Long>(filePath, offset, fileSize)).                 offsetOfFiles.put(filePath, fileSize).                 LOG.info("File processed: {}, {}, {}", filePath, offset, fileSize).             }         }         Thread.sleep(interval).     } }
false;private;1;22;;private List<String> listNewFiles(FileSystem fileSystem) throws IOException {     List<String> files = new ArrayList<String>().     FileStatus[] statuses = fileSystem.listStatus(new Path(path)).     if (statuses == null) {         LOG.warn("Path does not exist: {}", path).     } else {         for (FileStatus status : statuses) {             Path filePath = status.getPath().             String fileName = filePath.getName().             long modificationTime = status.getModificationTime().             if (!isFiltered(fileName, modificationTime)) {                 files.add(filePath.toString()).                 modificationTimes.put(fileName, modificationTime).             }         }     }     return files. }
false;private;2;10;;private boolean isFiltered(String fileName, long modificationTime) {     if ((watchType == WatchType.ONLY_NEW_FILES && modificationTimes.containsKey(fileName)) || fileName.startsWith(".") || fileName.contains("_COPYING_")) {         return true.     } else {         Long lastModification = modificationTimes.get(fileName).         return lastModification != null && lastModification >= modificationTime.     } }
false;public;0;4;;@Override public void cancel() {     isRunning = false. }
