commented;modifiers;parameterAmount;loc;comment;code
false;public;3;8;;@Override public Collection<TimeWindow> assignWindows(T element, long timestamp, WindowAssignerContext context) {     long sessionTimeout = sessionWindowTimeGapExtractor.extract(element).     if (sessionTimeout <= 0) {         throw new IllegalArgumentException("Dynamic session time gap must satisfy 0 < gap").     }     return Collections.singletonList(new TimeWindow(timestamp, timestamp + sessionTimeout)). }
false;public;1;5;;@SuppressWarnings("unchecked") @Override public Trigger<T, TimeWindow> getDefaultTrigger(StreamExecutionEnvironment env) {     return (Trigger<T, TimeWindow>) EventTimeTrigger.create(). }
false;public;0;4;;@Override public String toString() {     return "DynamicEventTimeSessionWindows()". }
true;public,static;1;3;/**  * Creates a new {@code SessionWindows} {@link WindowAssigner} that assigns  * elements to sessions based on the element timestamp.  *  * @param sessionWindowTimeGapExtractor The extractor to use to extract the time gap from the input elements  * @return The policy.  */ ;/**  * Creates a new {@code SessionWindows} {@link WindowAssigner} that assigns  * elements to sessions based on the element timestamp.  *  * @param sessionWindowTimeGapExtractor The extractor to use to extract the time gap from the input elements  * @return The policy.  */ public static <T> DynamicEventTimeSessionWindows<T> withDynamicGap(SessionWindowTimeGapExtractor<T> sessionWindowTimeGapExtractor) {     return new DynamicEventTimeSessionWindows<>(sessionWindowTimeGapExtractor). }
false;public;1;4;;@Override public TypeSerializer<TimeWindow> getWindowSerializer(ExecutionConfig executionConfig) {     return new TimeWindow.Serializer(). }
false;public;0;4;;@Override public boolean isEventTime() {     return true. }
true;public;2;4;/**  * Merge overlapping {@link TimeWindow}s.  */ ;/**  * Merge overlapping {@link TimeWindow}s.  */ @Override public void mergeWindows(Collection<TimeWindow> windows, MergeCallback<TimeWindow> c) {     TimeWindow.mergeWindows(windows, c). }
