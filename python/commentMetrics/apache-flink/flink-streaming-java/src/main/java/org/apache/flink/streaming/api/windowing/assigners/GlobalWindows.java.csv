commented;modifiers;parameterAmount;loc;comment;code
false;public;3;4;;@Override public Collection<GlobalWindow> assignWindows(Object element, long timestamp, WindowAssignerContext context) {     return Collections.singletonList(GlobalWindow.get()). }
false;public;1;4;;@Override public Trigger<Object, GlobalWindow> getDefaultTrigger(StreamExecutionEnvironment env) {     return new NeverTrigger(). }
false;public;0;4;;@Override public String toString() {     return "GlobalWindows()". }
true;public,static;0;3;/**  * Creates a new {@code GlobalWindows} {@link WindowAssigner} that assigns  * all elements to the same {@link GlobalWindow}.  *  * @return The global window policy.  */ ;/**  * Creates a new {@code GlobalWindows} {@link WindowAssigner} that assigns  * all elements to the same {@link GlobalWindow}.  *  * @return The global window policy.  */ public static GlobalWindows create() {     return new GlobalWindows(). }
false;public;4;4;;@Override public TriggerResult onElement(Object element, long timestamp, GlobalWindow window, TriggerContext ctx) {     return TriggerResult.CONTINUE. }
false;public;3;4;;@Override public TriggerResult onEventTime(long time, GlobalWindow window, TriggerContext ctx) {     return TriggerResult.CONTINUE. }
false;public;3;4;;@Override public TriggerResult onProcessingTime(long time, GlobalWindow window, TriggerContext ctx) {     return TriggerResult.CONTINUE. }
false;public;2;2;;@Override public void clear(GlobalWindow window, TriggerContext ctx) throws Exception { }
false;public;2;3;;@Override public void onMerge(GlobalWindow window, OnMergeContext ctx) { }
false;public;1;4;;@Override public TypeSerializer<GlobalWindow> getWindowSerializer(ExecutionConfig executionConfig) {     return new GlobalWindow.Serializer(). }
false;public;0;4;;@Override public boolean isEventTime() {     return false. }
