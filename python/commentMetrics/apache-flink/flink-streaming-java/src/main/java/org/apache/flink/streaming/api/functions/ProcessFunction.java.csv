commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;3;1;/**  * Process one element from the input stream.  *  * <p>This function can output zero or more elements using the {@link Collector} parameter  * and also update internal state or set timers using the {@link Context} parameter.  *  * @param value The input value.  * @param ctx A {@link Context} that allows querying the timestamp of the element and getting  *            a {@link TimerService} for registering timers and querying the time. The  *            context is only valid during the invocation of this method, do not store it.  * @param out The collector for returning result values.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ ;/**  * Process one element from the input stream.  *  * <p>This function can output zero or more elements using the {@link Collector} parameter  * and also update internal state or set timers using the {@link Context} parameter.  *  * @param value The input value.  * @param ctx A {@link Context} that allows querying the timestamp of the element and getting  *            a {@link TimerService} for registering timers and querying the time. The  *            context is only valid during the invocation of this method, do not store it.  * @param out The collector for returning result values.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ public abstract void processElement(I value, Context ctx, Collector<O> out) throws Exception.
true;public;3;1;/**  * Called when a timer set using {@link TimerService} fires.  *  * @param timestamp The timestamp of the firing timer.  * @param ctx An {@link OnTimerContext} that allows querying the timestamp of the firing timer,  *            querying the {@link TimeDomain} of the firing timer and getting a  *            {@link TimerService} for registering timers and querying the time.  *            The context is only valid during the invocation of this method, do not store it.  * @param out The collector for returning result values.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ ;/**  * Called when a timer set using {@link TimerService} fires.  *  * @param timestamp The timestamp of the firing timer.  * @param ctx An {@link OnTimerContext} that allows querying the timestamp of the firing timer,  *            querying the {@link TimeDomain} of the firing timer and getting a  *            {@link TimerService} for registering timers and querying the time.  *            The context is only valid during the invocation of this method, do not store it.  * @param out The collector for returning result values.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ public void onTimer(long timestamp, OnTimerContext ctx, Collector<O> out) throws Exception { }
true;public,abstract;0;1;/**  * Timestamp of the element currently being processed or timestamp of a firing timer.  *  * <p>This might be {@code null}, for example if the time characteristic of your program  * is set to {@link org.apache.flink.streaming.api.TimeCharacteristic#ProcessingTime}.  */ ;/**  * Timestamp of the element currently being processed or timestamp of a firing timer.  *  * <p>This might be {@code null}, for example if the time characteristic of your program  * is set to {@link org.apache.flink.streaming.api.TimeCharacteristic#ProcessingTime}.  */ public abstract Long timestamp().
true;public,abstract;0;1;/**  * A {@link TimerService} for querying time and registering timers.  */ ;/**  * A {@link TimerService} for querying time and registering timers.  */ public abstract TimerService timerService().
true;public,abstract;2;1;/**  * Emits a record to the side output identified by the {@link OutputTag}.  *  * @param outputTag the {@code OutputTag} that identifies the side output to emit to.  * @param value The record to emit.  */ ;/**  * Emits a record to the side output identified by the {@link OutputTag}.  *  * @param outputTag the {@code OutputTag} that identifies the side output to emit to.  * @param value The record to emit.  */ public abstract <X> void output(OutputTag<X> outputTag, X value).
true;public,abstract;0;1;/**  * The {@link TimeDomain} of the firing timer.  */ ;/**  * The {@link TimeDomain} of the firing timer.  */ public abstract TimeDomain timeDomain().
