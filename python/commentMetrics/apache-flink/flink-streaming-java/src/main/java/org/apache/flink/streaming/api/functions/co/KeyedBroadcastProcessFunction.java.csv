commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;3;1;/**  * This method is called for each element in the (non-broadcast)  * {@link org.apache.flink.streaming.api.datastream.KeyedStream keyed stream}.  *  * <p>It can output zero or more elements using the {@link Collector} parameter,  * query the current processing/event time, and also query and update the local keyed state.  * In addition, it can get a {@link TimerService} for registering timers and querying the time.  * Finally, it has <b>read-only</b> access to the broadcast state.  * The context is only valid during the invocation of this method, do not store it.  *  * @param value The stream element.  * @param ctx A {@link ReadOnlyContext} that allows querying the timestamp of the element,  *            querying the current processing/event time and iterating the broadcast state  *            with <b>read-only</b> access.  *            The context is only valid during the invocation of this method, do not store it.  * @param out The collector to emit resulting elements to  * @throws Exception The function may throw exceptions which cause the streaming program  *                   to fail and go into recovery.  */ ;/**  * This method is called for each element in the (non-broadcast)  * {@link org.apache.flink.streaming.api.datastream.KeyedStream keyed stream}.  *  * <p>It can output zero or more elements using the {@link Collector} parameter,  * query the current processing/event time, and also query and update the local keyed state.  * In addition, it can get a {@link TimerService} for registering timers and querying the time.  * Finally, it has <b>read-only</b> access to the broadcast state.  * The context is only valid during the invocation of this method, do not store it.  *  * @param value The stream element.  * @param ctx A {@link ReadOnlyContext} that allows querying the timestamp of the element,  *            querying the current processing/event time and iterating the broadcast state  *            with <b>read-only</b> access.  *            The context is only valid during the invocation of this method, do not store it.  * @param out The collector to emit resulting elements to  * @throws Exception The function may throw exceptions which cause the streaming program  *                   to fail and go into recovery.  */ public abstract void processElement(final IN1 value, final ReadOnlyContext ctx, final Collector<OUT> out) throws Exception.
true;public,abstract;3;1;/**  * This method is called for each element in the  * {@link org.apache.flink.streaming.api.datastream.BroadcastStream broadcast stream}.  *  * <p>It can output zero or more elements using the {@link Collector} parameter,  * query the current processing/event time, and also query and update the internal  * {@link org.apache.flink.api.common.state.BroadcastState broadcast state}. In addition, it  * can register a {@link KeyedStateFunction function} to be applied to all keyed states on  * the local partition. These can be done through the provided {@link Context}.  * The context is only valid during the invocation of this method, do not store it.  *  * @param value The stream element.  * @param ctx A {@link Context} that allows querying the timestamp of the element,  *            querying the current processing/event time and updating the broadcast state.  *            In addition, it allows the registration of a {@link KeyedStateFunction function}  *            to be applied to all keyed state with a given {@link StateDescriptor} on the local partition.  *            The context is only valid during the invocation of this method, do not store it.  * @param out The collector to emit resulting elements to  * @throws Exception The function may throw exceptions which cause the streaming program  *                   to fail and go into recovery.  */ ;/**  * This method is called for each element in the  * {@link org.apache.flink.streaming.api.datastream.BroadcastStream broadcast stream}.  *  * <p>It can output zero or more elements using the {@link Collector} parameter,  * query the current processing/event time, and also query and update the internal  * {@link org.apache.flink.api.common.state.BroadcastState broadcast state}. In addition, it  * can register a {@link KeyedStateFunction function} to be applied to all keyed states on  * the local partition. These can be done through the provided {@link Context}.  * The context is only valid during the invocation of this method, do not store it.  *  * @param value The stream element.  * @param ctx A {@link Context} that allows querying the timestamp of the element,  *            querying the current processing/event time and updating the broadcast state.  *            In addition, it allows the registration of a {@link KeyedStateFunction function}  *            to be applied to all keyed state with a given {@link StateDescriptor} on the local partition.  *            The context is only valid during the invocation of this method, do not store it.  * @param out The collector to emit resulting elements to  * @throws Exception The function may throw exceptions which cause the streaming program  *                   to fail and go into recovery.  */ public abstract void processBroadcastElement(final IN2 value, final Context ctx, final Collector<OUT> out) throws Exception.
true;public;3;3;/**  * Called when a timer set using {@link TimerService} fires.  *  * @param timestamp The timestamp of the firing timer.  * @param ctx An {@link OnTimerContext} that allows querying the timestamp of the firing timer,  *            querying the current processing/event time, iterating the broadcast state  *            with <b>read-only</b> access, querying the {@link TimeDomain} of the firing timer  *            and getting a {@link TimerService} for registering timers and querying the time.  *            The context is only valid during the invocation of this method, do not store it.  * @param out The collector for returning result values.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ ;/**  * Called when a timer set using {@link TimerService} fires.  *  * @param timestamp The timestamp of the firing timer.  * @param ctx An {@link OnTimerContext} that allows querying the timestamp of the firing timer,  *            querying the current processing/event time, iterating the broadcast state  *            with <b>read-only</b> access, querying the {@link TimeDomain} of the firing timer  *            and getting a {@link TimerService} for registering timers and querying the time.  *            The context is only valid during the invocation of this method, do not store it.  * @param out The collector for returning result values.  *  * @throws Exception This method may throw exceptions. Throwing an exception will cause the operation  *                   to fail and may trigger recovery.  */ public void onTimer(final long timestamp, final OnTimerContext ctx, final Collector<OUT> out) throws Exception { // the default implementation does nothing. }
true;public,abstract;2;3;/**  * Applies the provided {@code function} to the state  * associated with the provided {@code state descriptor}.  *  * @param stateDescriptor the descriptor of the state to be processed.  * @param function the function to be applied.  */ ;/**  * Applies the provided {@code function} to the state  * associated with the provided {@code state descriptor}.  *  * @param stateDescriptor the descriptor of the state to be processed.  * @param function the function to be applied.  */ public abstract <VS, S extends State> void applyToKeyedState(final StateDescriptor<S, VS> stateDescriptor, final KeyedStateFunction<KS, S> function) throws Exception.
true;public,abstract;0;1;/**  * A {@link TimerService} for querying time and registering timers.  */ ;/**  * A {@link TimerService} for querying time and registering timers.  */ public abstract TimerService timerService().
true;public,abstract;0;1;/**  * Get key of the element being processed.  */ ;/**  * Get key of the element being processed.  */ public abstract KS getCurrentKey().
true;public,abstract;0;1;/**  * The {@link TimeDomain} of the firing timer, i.e. if it is  * event or processing time timer.  */ ;/**  * The {@link TimeDomain} of the firing timer, i.e. if it is  * event or processing time timer.  */ public abstract TimeDomain timeDomain().
true;public,abstract;0;2;/**  * Get the key of the firing timer.  */ ;/**  * Get the key of the firing timer.  */ @Override public abstract KS getCurrentKey().
