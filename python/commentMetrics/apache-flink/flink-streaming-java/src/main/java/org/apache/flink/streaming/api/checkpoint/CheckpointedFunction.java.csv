commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * This method is called when a snapshot for a checkpoint is requested. This acts as a hook to the function to  * ensure that all state is exposed by means previously offered through {@link FunctionInitializationContext} when  * the Function was initialized, or offered now by {@link FunctionSnapshotContext} itself.  *  * @param context the context for drawing a snapshot of the operator  * @throws Exception  */ ;/**  * This method is called when a snapshot for a checkpoint is requested. This acts as a hook to the function to  * ensure that all state is exposed by means previously offered through {@link FunctionInitializationContext} when  * the Function was initialized, or offered now by {@link FunctionSnapshotContext} itself.  *  * @param context the context for drawing a snapshot of the operator  * @throws Exception  */ void snapshotState(FunctionSnapshotContext context) throws Exception.
true;;1;1;/**  * This method is called when the parallel function instance is created during distributed  * execution. Functions typically set up their state storing data structures in this method.  *  * @param context the context for initializing the operator  * @throws Exception  */ ;/**  * This method is called when the parallel function instance is created during distributed  * execution. Functions typically set up their state storing data structures in this method.  *  * @param context the context for initializing the operator  * @throws Exception  */ void initializeState(FunctionInitializationContext context) throws Exception.
