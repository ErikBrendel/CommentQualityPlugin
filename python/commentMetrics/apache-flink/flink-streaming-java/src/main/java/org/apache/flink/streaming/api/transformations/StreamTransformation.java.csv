# id;timestamp;commentText;codeText;commentWords;codeWords
StreamTransformation -> public int getParallelism();1445418103;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1446112342;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1452526242;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1455486690;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1456247173;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1465991918;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1472663071;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1485181339;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1485269495;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1488304750;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1488304750;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1489671807;Returns the parallelism of this {@code StreamTransformation};public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1493195810;Returns the parallelism of this {@code StreamTransformation}.;public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1493195810;Returns the parallelism of this {@code StreamTransformation}.;public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1493195810;Returns the parallelism of this {@code StreamTransformation}.;public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1495484544;Returns the parallelism of this {@code StreamTransformation}.;public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1514902843;Returns the parallelism of this {@code StreamTransformation}.;public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1526630738;Returns the parallelism of this {@code StreamTransformation}.;public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public int getParallelism();1531381123;Returns the parallelism of this {@code StreamTransformation}.;public int getParallelism() {_		return parallelism__	};returns,the,parallelism,of,this,code,stream,transformation;public,int,get,parallelism,return,parallelism
StreamTransformation -> public TypeInformation<T> getOutputType();1445418103;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1446112342;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1452526242;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1455486690;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1456247173;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1465991918;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1472663071;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1485181339;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1485269495;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1488304750;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1488304750;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1489671807;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1493195810;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1493195810;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1493195810;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1495484544;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1514902843;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1526630738;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public TypeInformation<T> getOutputType();1531381123;Returns the output type of this {@code StreamTransformation} as a {@link TypeInformation}. Once_this is used once the output type cannot be changed anymore using {@link #setOutputType}.__@return The output type of this {@code StreamTransformation};public TypeInformation<T> getOutputType() {_		if (outputType instanceof MissingTypeInfo) {_			MissingTypeInfo typeInfo = (MissingTypeInfo) this.outputType__			throw new InvalidTypesException(_					"The return type of function '"_							+ typeInfo.getFunctionName()_							+ "' could not be determined automatically, due to type erasure. "_							+ "You can give type information hints by using the returns(...) "_							+ "method on the result of the transformation call, or by letting "_							+ "your function implement the 'ResultTypeQueryable' "_							+ "interface.", typeInfo.getTypeException())__		}_		typeUsed = true__		return this.outputType__	};returns,the,output,type,of,this,code,stream,transformation,as,a,link,type,information,once,this,is,used,once,the,output,type,cannot,be,changed,anymore,using,link,set,output,type,return,the,output,type,of,this,code,stream,transformation;public,type,information,t,get,output,type,if,output,type,instanceof,missing,type,info,missing,type,info,type,info,missing,type,info,this,output,type,throw,new,invalid,types,exception,the,return,type,of,function,type,info,get,function,name,could,not,be,determined,automatically,due,to,type,erasure,you,can,give,type,information,hints,by,using,the,returns,method,on,the,result,of,the,transformation,call,or,by,letting,your,function,implement,the,result,type,queryable,interface,type,info,get,type,exception,type,used,true,return,this,output,type
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1445418103;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1446112342;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1452526242;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1455486690;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1456247173;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1465991918;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1472663071;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1485181339;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1485269495;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1488304750;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1488304750;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1489671807;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1493195810;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1493195810;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1493195810;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1495484544;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1514902843;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1526630738;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;1531381123;Returns all transitive predecessor {@code StreamTransformation}s of this {@code StreamTransformation}. This_is, for example, used when determining whether a feedback edge of an iteration_actually has the iteration head as a predecessor.__@return The list of transitive predecessors.;public abstract Collection<StreamTransformation<?>> getTransitivePredecessors()_;returns,all,transitive,predecessor,code,stream,transformation,s,of,this,code,stream,transformation,this,is,for,example,used,when,determining,whether,a,feedback,edge,of,an,iteration,actually,has,the,iteration,head,as,a,predecessor,return,the,list,of,transitive,predecessors;public,abstract,collection,stream,transformation,get,transitive,predecessors
StreamTransformation -> public StreamGraph.ResourceStrategy getResourceStrategy();1445418103;Returns the {@code ResourceStrategy} of this {@code StreamTransformation}.__<p>_{@see #setResourceStrategy};public StreamGraph.ResourceStrategy getResourceStrategy() {_		return resourceStrategy__	};returns,the,code,resource,strategy,of,this,code,stream,transformation,p,see,set,resource,strategy;public,stream,graph,resource,strategy,get,resource,strategy,return,resource,strategy
StreamTransformation -> public StreamGraph.ResourceStrategy getResourceStrategy();1446112342;Returns the {@code ResourceStrategy} of this {@code StreamTransformation}.__@see #setResourceStrategy(StreamGraph.ResourceStrategy);public StreamGraph.ResourceStrategy getResourceStrategy() {_		return resourceStrategy__	};returns,the,code,resource,strategy,of,this,code,stream,transformation,see,set,resource,strategy,stream,graph,resource,strategy;public,stream,graph,resource,strategy,get,resource,strategy,return,resource,strategy
StreamTransformation -> public StreamGraph.ResourceStrategy getResourceStrategy();1452526242;Returns the {@code ResourceStrategy} of this {@code StreamTransformation}.__@see #setResourceStrategy(StreamGraph.ResourceStrategy);public StreamGraph.ResourceStrategy getResourceStrategy() {_		return resourceStrategy__	};returns,the,code,resource,strategy,of,this,code,stream,transformation,see,set,resource,strategy,stream,graph,resource,strategy;public,stream,graph,resource,strategy,get,resource,strategy,return,resource,strategy
StreamTransformation -> public StreamGraph.ResourceStrategy getResourceStrategy();1455486690;Returns the {@code ResourceStrategy} of this {@code StreamTransformation}.__@see #setResourceStrategy(StreamGraph.ResourceStrategy);public StreamGraph.ResourceStrategy getResourceStrategy() {_		return resourceStrategy__	};returns,the,code,resource,strategy,of,this,code,stream,transformation,see,set,resource,strategy,stream,graph,resource,strategy;public,stream,graph,resource,strategy,get,resource,strategy,return,resource,strategy
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1445418103;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1446112342;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1452526242;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1455486690;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1456247173;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1465991918;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1472663071;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1485181339;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1485269495;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1488304750;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1488304750;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1489671807;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1493195810;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1493195810;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1493195810;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1495484544;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1514902843;Set the buffer timeout of this {@code StreamTransformation}. The timeout is used when_sending elements over the network. The timeout specifies how long a network buffer_should be kept waiting before sending. A higher timeout means that more elements will_be sent in one buffer, this increases throughput. The latency, however, is negatively_affected by a higher timeout.;public void setBufferTimeout(long bufferTimeout) {_		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,is,used,when,sending,elements,over,the,network,the,timeout,specifies,how,long,a,network,buffer,should,be,kept,waiting,before,sending,a,higher,timeout,means,that,more,elements,will,be,sent,in,one,buffer,this,increases,throughput,the,latency,however,is,negatively,affected,by,a,higher,timeout;public,void,set,buffer,timeout,long,buffer,timeout,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1526630738;Set the buffer timeout of this {@code StreamTransformation}. The timeout defines how long data_may linger in a partially full buffer before being sent over the network.__<p>Lower timeouts lead to lower tail latencies, but may affect throughput._For Flink 1.5+, timeouts of 1ms are feasible for jobs with high parallelism.__<p>A value of -1 means that the default buffer timeout should be used. A value_of zero indicates that no buffering should happen, and all records/events should be_immediately sent through the network, without additional buffering.;public void setBufferTimeout(long bufferTimeout) {_		checkArgument(bufferTimeout >= -1)__		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,defines,how,long,data,may,linger,in,a,partially,full,buffer,before,being,sent,over,the,network,p,lower,timeouts,lead,to,lower,tail,latencies,but,may,affect,throughput,for,flink,1,5,timeouts,of,1ms,are,feasible,for,jobs,with,high,parallelism,p,a,value,of,1,means,that,the,default,buffer,timeout,should,be,used,a,value,of,zero,indicates,that,no,buffering,should,happen,and,all,records,events,should,be,immediately,sent,through,the,network,without,additional,buffering;public,void,set,buffer,timeout,long,buffer,timeout,check,argument,buffer,timeout,1,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setBufferTimeout(long bufferTimeout);1531381123;Set the buffer timeout of this {@code StreamTransformation}. The timeout defines how long data_may linger in a partially full buffer before being sent over the network.__<p>Lower timeouts lead to lower tail latencies, but may affect throughput._For Flink 1.5+, timeouts of 1ms are feasible for jobs with high parallelism.__<p>A value of -1 means that the default buffer timeout should be used. A value_of zero indicates that no buffering should happen, and all records/events should be_immediately sent through the network, without additional buffering.;public void setBufferTimeout(long bufferTimeout) {_		checkArgument(bufferTimeout >= -1)__		this.bufferTimeout = bufferTimeout__	};set,the,buffer,timeout,of,this,code,stream,transformation,the,timeout,defines,how,long,data,may,linger,in,a,partially,full,buffer,before,being,sent,over,the,network,p,lower,timeouts,lead,to,lower,tail,latencies,but,may,affect,throughput,for,flink,1,5,timeouts,of,1ms,are,feasible,for,jobs,with,high,parallelism,p,a,value,of,1,means,that,the,default,buffer,timeout,should,be,used,a,value,of,zero,indicates,that,no,buffering,should,happen,and,all,records,events,should,be,immediately,sent,through,the,network,without,additional,buffering;public,void,set,buffer,timeout,long,buffer,timeout,check,argument,buffer,timeout,1,this,buffer,timeout,buffer,timeout
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1472663071;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1485181339;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1485269495;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1488304750;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1488304750;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1489671807;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1493195810;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1493195810;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1493195810;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1495484544;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1514902843;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1526630738;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setMaxParallelism(int maxParallelism);1531381123;Sets the maximum parallelism for this stream transformation.__@param maxParallelism Maximum parallelism for this stream transformation.;public void setMaxParallelism(int maxParallelism) {_		Preconditions.checkArgument(maxParallelism > 0_						&& maxParallelism <= StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM,_				"Maximum parallelism must be between 1 and " + StreamGraphGenerator.UPPER_BOUND_MAX_PARALLELISM_						+ ". Found: " + maxParallelism)__		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,this,stream,transformation,param,max,parallelism,maximum,parallelism,for,this,stream,transformation;public,void,set,max,parallelism,int,max,parallelism,preconditions,check,argument,max,parallelism,0,max,parallelism,stream,graph,generator,maximum,parallelism,must,be,between,1,and,stream,graph,generator,found,max,parallelism,this,max,parallelism,max,parallelism
StreamTransformation -> public void setName(String name);1445418103;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1446112342;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1452526242;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1455486690;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1456247173;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1465991918;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1472663071;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1485181339;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1485269495;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1488304750;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1488304750;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1489671807;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1493195810;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1493195810;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1493195810;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1495484544;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1514902843;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1526630738;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setName(String name);1531381123;Changes the name of this {@code StreamTransformation}.;public void setName(String name) {_		this.name = name__	};changes,the,name,of,this,code,stream,transformation;public,void,set,name,string,name,this,name,name
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1488304750;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1489671807;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493195810;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493195810;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493195810;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1495484544;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1514902843;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1526630738;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1531381123;Sets the minimum and preferred resources for this stream transformation.__@param minResources The minimum resource of this transformation._@param preferredResources The preferred resource of this transformation.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,this,stream,transformation,param,min,resources,the,minimum,resource,of,this,transformation,param,preferred,resources,the,preferred,resource,of,this,transformation;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
StreamTransformation -> public void setUidHash(String uidHash);1485181339;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1485269495;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1488304750;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1488304750;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1489671807;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1493195810;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1493195810;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1493195810;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1495484544;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1514902843;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1526630738;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public void setUidHash(String uidHash);1531381123;Sets an user provided hash for this operator. This will be used AS IS the create the_JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when_identifying an operator through the default hash mechanics fails (e.g. because of changes_between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting._The provided hash needs to be unique per transformation and job. Otherwise, job submission_will fail. Furthermore, you cannot assign user-specified hash to intermediate nodes in an_operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way_that changes the automatically generated hashes. In this case, providing the previous hashes_directly through this method (e.g. obtained from old logs) can help to reestablish a lost_mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui.;public void setUidHash(String uidHash) {__		Preconditions.checkNotNull(uidHash)__		Preconditions.checkArgument(uidHash.matches("^[0-9A-Fa-f]{32}$"),_				"Node hash must be a 32 character String that describes a hex code. Found: " + uidHash)___		this.userProvidedNodeHash = uidHash__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui;public,void,set,uid,hash,string,uid,hash,preconditions,check,not,null,uid,hash,preconditions,check,argument,uid,hash,matches,0,9a,fa,f,32,node,hash,must,be,a,32,character,string,that,describes,a,hex,code,found,uid,hash,this,user,provided,node,hash,uid,hash
StreamTransformation -> public String getUserProvidedNodeHash();1485181339;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1485269495;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1488304750;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1488304750;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1489671807;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1493195810;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1493195810;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1493195810;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1495484544;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1514902843;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1526630738;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public String getUserProvidedNodeHash();1531381123;Gets the user provided hash.__@return The user provided hash.;public String getUserProvidedNodeHash() {_		return userProvidedNodeHash__	};gets,the,user,provided,hash,return,the,user,provided,hash;public,string,get,user,provided,node,hash,return,user,provided,node,hash
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1445418103;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1446112342;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1452526242;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1455486690;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1456247173;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1465991918;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1472663071;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1485181339;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1485269495;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1488304750;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1488304750;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1489671807;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1493195810;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1493195810;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1493195810;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1495484544;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1514902843;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1526630738;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public abstract void setChainingStrategy(ChainingStrategy strategy)_;1531381123;Sets the chaining strategy of this {@code StreamTransformation}.;public abstract void setChainingStrategy(ChainingStrategy strategy)_;sets,the,chaining,strategy,of,this,code,stream,transformation;public,abstract,void,set,chaining,strategy,chaining,strategy,strategy
StreamTransformation -> public String getUid();1452526242;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1455486690;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1456247173;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1465991918;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1472663071;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1485181339;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1485269495;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1488304750;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1488304750;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1489671807;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1493195810;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1493195810;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1493195810;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1495484544;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1514902843;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1526630738;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public String getUid();1531381123;Returns the user-specified ID of this transformation.__@return The unique user-specified ID of this transformation.;public String getUid() {_		return uid__	};returns,the,user,specified,id,of,this,transformation,return,the,unique,user,specified,id,of,this,transformation;public,string,get,uid,return,uid
StreamTransformation -> public void setUid(String uid);1452526242;Sets an ID for this {@link StreamTransformation}.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1455486690;Sets an ID for this {@link StreamTransformation}.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1456247173;Sets an ID for this {@link StreamTransformation}.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1465991918;Sets an ID for this {@link StreamTransformation}.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1472663071;Sets an ID for this {@link StreamTransformation}.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1485181339;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1485269495;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1488304750;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1488304750;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1489671807;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1493195810;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1493195810;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1493195810;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1495484544;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1514902843;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1526630738;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setUid(String uid);1531381123;Sets an ID for this {@link StreamTransformation}. This is will later be hashed to a uidHash which is then used to_create the JobVertexID (that is shown in logs and the web ui).__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation.;public void setUid(String uid) {_		this.uid = uid__	};sets,an,id,for,this,link,stream,transformation,this,is,will,later,be,hashed,to,a,uid,hash,which,is,then,used,to,create,the,job,vertex,id,that,is,shown,in,logs,and,the,web,ui,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation;public,void,set,uid,string,uid,this,uid,uid
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1456247173;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1465991918;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1472663071;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1485181339;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1485269495;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1488304750;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1488304750;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1489671807;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1493195810;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1493195810;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1493195810;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1495484544;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1514902843;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1526630738;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public void setSlotSharingGroup(String slotSharingGroup);1531381123;Sets the slot sharing group of this transformation. Parallel instances of operations that_are in the same slot sharing group will be co-located in the same TaskManager slot, if_possible.__<p>Initially, an operation is in the default slot sharing group. This can be explicitly_set using {@code setSlotSharingGroup("default")}.__@param slotSharingGroup The slot sharing group name.;public void setSlotSharingGroup(String slotSharingGroup) {_		this.slotSharingGroup = slotSharingGroup__	};sets,the,slot,sharing,group,of,this,transformation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,initially,an,operation,is,in,the,default,slot,sharing,group,this,can,be,explicitly,set,using,code,set,slot,sharing,group,default,param,slot,sharing,group,the,slot,sharing,group,name;public,void,set,slot,sharing,group,string,slot,sharing,group,this,slot,sharing,group,slot,sharing,group
StreamTransformation -> public long getBufferTimeout();1445418103;Returns the buffer timeout of this {@code StreamTransformation}.__<p>_{@see #setBufferTimeout};public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,p,see,set,buffer,timeout;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1446112342;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1452526242;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1455486690;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1456247173;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1465991918;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1472663071;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1485181339;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1485269495;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1488304750;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1488304750;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1489671807;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1493195810;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1493195810;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1493195810;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1495484544;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1514902843;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1526630738;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public long getBufferTimeout();1531381123;Returns the buffer timeout of this {@code StreamTransformation}.__@see #setBufferTimeout(long);public long getBufferTimeout() {_		return bufferTimeout__	};returns,the,buffer,timeout,of,this,code,stream,transformation,see,set,buffer,timeout,long;public,long,get,buffer,timeout,return,buffer,timeout
StreamTransformation -> public void setParallelism(int parallelism);1445418103;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1446112342;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1452526242;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1455486690;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1456247173;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1465991918;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1472663071;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1485181339;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1485269495;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1488304750;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1488304750;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1489671807;Sets the parallelism of this {@code StreamTransformation}_@param parallelism The new parallelism to set on this {@code StreamTransformation};public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1493195810;Sets the parallelism of this {@code StreamTransformation}.__@param parallelism The new parallelism to set on this {@code StreamTransformation}.;public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1493195810;Sets the parallelism of this {@code StreamTransformation}.__@param parallelism The new parallelism to set on this {@code StreamTransformation}.;public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1493195810;Sets the parallelism of this {@code StreamTransformation}.__@param parallelism The new parallelism to set on this {@code StreamTransformation}.;public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1495484544;Sets the parallelism of this {@code StreamTransformation}.__@param parallelism The new parallelism to set on this {@code StreamTransformation}.;public void setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must be bigger than zero.")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,must,be,bigger,than,zero,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1514902843;Sets the parallelism of this {@code StreamTransformation}.__@param parallelism The new parallelism to set on this {@code StreamTransformation}.;public void setParallelism(int parallelism) {_		Preconditions.checkArgument(_				parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_				"The parallelism must be at least one, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,at,least,one,or,execution,config,use,system,default,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1526630738;Sets the parallelism of this {@code StreamTransformation}.__@param parallelism The new parallelism to set on this {@code StreamTransformation}.;public void setParallelism(int parallelism) {_		Preconditions.checkArgument(_				parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_				"The parallelism must be at least one, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,at,least,one,or,execution,config,use,system,default,this,parallelism,parallelism
StreamTransformation -> public void setParallelism(int parallelism);1531381123;Sets the parallelism of this {@code StreamTransformation}.__@param parallelism The new parallelism to set on this {@code StreamTransformation}.;public void setParallelism(int parallelism) {_		Preconditions.checkArgument(_				parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_				"The parallelism must be at least one, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).")__		this.parallelism = parallelism__	};sets,the,parallelism,of,this,code,stream,transformation,param,parallelism,the,new,parallelism,to,set,on,this,code,stream,transformation;public,void,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,must,be,at,least,one,or,execution,config,use,system,default,this,parallelism,parallelism
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1445418103;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1446112342;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1452526242;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1455486690;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1456247173;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1465991918;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1472663071;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1485181339;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1485269495;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1488304750;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1488304750;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1489671807;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1493195810;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1493195810;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1493195810;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1495484544;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1514902843;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1526630738;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism);1531381123;Creates a new {@code StreamTransformation} with the given name, output type and parallelism.__@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param outputType The output type of this {@code StreamTransformation}_@param parallelism The parallelism of this {@code StreamTransformation};public StreamTransformation(String name, TypeInformation<T> outputType, int parallelism) {_		this.id = getNewNodeId()__		this.name = Preconditions.checkNotNull(name)__		this.outputType = outputType__		this.parallelism = parallelism__		this.slotSharingGroup = null__	};creates,a,new,code,stream,transformation,with,the,given,name,output,type,and,parallelism,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,output,type,the,output,type,of,this,code,stream,transformation,param,parallelism,the,parallelism,of,this,code,stream,transformation;public,stream,transformation,string,name,type,information,t,output,type,int,parallelism,this,id,get,new,node,id,this,name,preconditions,check,not,null,name,this,output,type,output,type,this,parallelism,parallelism,this,slot,sharing,group,null
StreamTransformation -> public int getId();1445418103;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1446112342;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1452526242;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1455486690;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1456247173;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1465991918;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1472663071;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1485181339;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1485269495;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1488304750;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1488304750;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1489671807;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1493195810;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1493195810;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1493195810;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1495484544;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1514902843;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1526630738;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public int getId();1531381123;Returns the unique ID of this {@code StreamTransformation}.;public int getId() {_		return id__	};returns,the,unique,id,of,this,code,stream,transformation;public,int,get,id,return,id
StreamTransformation -> public void setResourceStrategy(StreamGraph.ResourceStrategy resourceStrategy);1445418103;Sets the {@link org.apache.flink.streaming.api.graph.StreamGraph.ResourceStrategy} of this_{@code StreamTransformation}. The resource strategy is used when scheduling operations on actual_workers when transforming the StreamTopology to an_{@link org.apache.flink.runtime.executiongraph.ExecutionGraph}.;public void setResourceStrategy(StreamGraph.ResourceStrategy resourceStrategy) {_		this.resourceStrategy = resourceStrategy__	};sets,the,link,org,apache,flink,streaming,api,graph,stream,graph,resource,strategy,of,this,code,stream,transformation,the,resource,strategy,is,used,when,scheduling,operations,on,actual,workers,when,transforming,the,stream,topology,to,an,link,org,apache,flink,runtime,executiongraph,execution,graph;public,void,set,resource,strategy,stream,graph,resource,strategy,resource,strategy,this,resource,strategy,resource,strategy
StreamTransformation -> public void setResourceStrategy(StreamGraph.ResourceStrategy resourceStrategy);1446112342;Sets the {@link org.apache.flink.streaming.api.graph.StreamGraph.ResourceStrategy} of this_{@code StreamTransformation}. The resource strategy is used when scheduling operations on actual_workers when transforming the StreamTopology to an_{@link org.apache.flink.runtime.executiongraph.ExecutionGraph}.;public void setResourceStrategy(StreamGraph.ResourceStrategy resourceStrategy) {_		this.resourceStrategy = resourceStrategy__	};sets,the,link,org,apache,flink,streaming,api,graph,stream,graph,resource,strategy,of,this,code,stream,transformation,the,resource,strategy,is,used,when,scheduling,operations,on,actual,workers,when,transforming,the,stream,topology,to,an,link,org,apache,flink,runtime,executiongraph,execution,graph;public,void,set,resource,strategy,stream,graph,resource,strategy,resource,strategy,this,resource,strategy,resource,strategy
StreamTransformation -> public void setResourceStrategy(StreamGraph.ResourceStrategy resourceStrategy);1452526242;Sets the {@link org.apache.flink.streaming.api.graph.StreamGraph.ResourceStrategy} of this_{@code StreamTransformation}. The resource strategy is used when scheduling operations on actual_workers when transforming the StreamTopology to an_{@link org.apache.flink.runtime.executiongraph.ExecutionGraph}.;public void setResourceStrategy(StreamGraph.ResourceStrategy resourceStrategy) {_		this.resourceStrategy = resourceStrategy__	};sets,the,link,org,apache,flink,streaming,api,graph,stream,graph,resource,strategy,of,this,code,stream,transformation,the,resource,strategy,is,used,when,scheduling,operations,on,actual,workers,when,transforming,the,stream,topology,to,an,link,org,apache,flink,runtime,executiongraph,execution,graph;public,void,set,resource,strategy,stream,graph,resource,strategy,resource,strategy,this,resource,strategy,resource,strategy
StreamTransformation -> public void setResourceStrategy(StreamGraph.ResourceStrategy resourceStrategy);1455486690;Sets the {@link org.apache.flink.streaming.api.graph.StreamGraph.ResourceStrategy} of this_{@code StreamTransformation}. The resource strategy is used when scheduling operations on actual_workers when transforming the StreamTopology to an_{@link org.apache.flink.runtime.executiongraph.ExecutionGraph}.;public void setResourceStrategy(StreamGraph.ResourceStrategy resourceStrategy) {_		this.resourceStrategy = resourceStrategy__	};sets,the,link,org,apache,flink,streaming,api,graph,stream,graph,resource,strategy,of,this,code,stream,transformation,the,resource,strategy,is,used,when,scheduling,operations,on,actual,workers,when,transforming,the,stream,topology,to,an,link,org,apache,flink,runtime,executiongraph,execution,graph;public,void,set,resource,strategy,stream,graph,resource,strategy,resource,strategy,this,resource,strategy,resource,strategy
StreamTransformation -> public String getName();1445418103;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1446112342;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1452526242;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1455486690;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1456247173;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1465991918;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1472663071;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1485181339;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1485269495;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1488304750;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1488304750;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1489671807;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1493195810;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1493195810;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1493195810;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1495484544;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1514902843;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1526630738;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public String getName();1531381123;Returns the name of this {@code StreamTransformation}.;public String getName() {_		return name__	};returns,the,name,of,this,code,stream,transformation;public,string,get,name,return,name
StreamTransformation -> public ResourceSpec getMinResources();1488304750;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public ResourceSpec getMinResources();1489671807;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public ResourceSpec getMinResources();1493195810;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public ResourceSpec getMinResources();1493195810;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public ResourceSpec getMinResources();1493195810;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public ResourceSpec getMinResources();1495484544;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public ResourceSpec getMinResources();1514902843;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public ResourceSpec getMinResources();1526630738;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public ResourceSpec getMinResources();1531381123;Gets the minimum resource of this stream transformation.__@return The minimum resource of this transformation.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,of,this,stream,transformation,return,the,minimum,resource,of,this,transformation;public,resource,spec,get,min,resources,return,min,resources
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1445418103;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1446112342;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1452526242;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1455486690;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1456247173;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1465991918;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1472663071;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1485181339;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1485269495;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1488304750;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1488304750;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1489671807;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1493195810;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1493195810;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1493195810;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1495484544;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1514902843;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1526630738;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public void setOutputType(TypeInformation<T> outputType);1531381123;Tries to fill in the type information. Type information can be filled in_later when the program uses a type hint. This method checks whether the_type information has ever been accessed before and does not allow_modifications if the type was accessed already. This ensures consistency_by making sure different parts of the operation do not assume different_type information.__@param outputType The type information to fill in.__@throws IllegalStateException Thrown, if the type information has been accessed before.;public void setOutputType(TypeInformation<T> outputType) {_		if (typeUsed) {_			throw new IllegalStateException(_					"TypeInformation cannot be filled in for the type after it has been used. "_							+ "Please make sure that the type info hints are the first call after"_							+ " the transformation function, "_							+ "before any access to types or semantic properties, etc.")__		}_		this.outputType = outputType__	};tries,to,fill,in,the,type,information,type,information,can,be,filled,in,later,when,the,program,uses,a,type,hint,this,method,checks,whether,the,type,information,has,ever,been,accessed,before,and,does,not,allow,modifications,if,the,type,was,accessed,already,this,ensures,consistency,by,making,sure,different,parts,of,the,operation,do,not,assume,different,type,information,param,output,type,the,type,information,to,fill,in,throws,illegal,state,exception,thrown,if,the,type,information,has,been,accessed,before;public,void,set,output,type,type,information,t,output,type,if,type,used,throw,new,illegal,state,exception,type,information,cannot,be,filled,in,for,the,type,after,it,has,been,used,please,make,sure,that,the,type,info,hints,are,the,first,call,after,the,transformation,function,before,any,access,to,types,or,semantic,properties,etc,this,output,type,output,type
StreamTransformation -> public int getMaxParallelism();1472663071;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1485181339;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1485269495;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1488304750;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1488304750;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1489671807;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1493195810;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1493195810;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1493195810;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1495484544;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1514902843;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1526630738;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public int getMaxParallelism();1531381123;Gets the maximum parallelism for this stream transformation.__@return Maximum parallelism of this transformation.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,this,stream,transformation,return,maximum,parallelism,of,this,transformation;public,int,get,max,parallelism,return,max,parallelism
StreamTransformation -> public ResourceSpec getPreferredResources();1488304750;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public ResourceSpec getPreferredResources();1489671807;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public ResourceSpec getPreferredResources();1493195810;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public ResourceSpec getPreferredResources();1493195810;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public ResourceSpec getPreferredResources();1493195810;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public ResourceSpec getPreferredResources();1495484544;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public ResourceSpec getPreferredResources();1514902843;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public ResourceSpec getPreferredResources();1526630738;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public ResourceSpec getPreferredResources();1531381123;Gets the preferred resource of this stream transformation.__@return The preferred resource of this transformation.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,of,this,stream,transformation,return,the,preferred,resource,of,this,transformation;public,resource,spec,get,preferred,resources,return,preferred,resources
StreamTransformation -> public String getSlotSharingGroup();1456247173;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1465991918;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1472663071;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1485181339;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1485269495;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1488304750;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1488304750;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1489671807;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1493195810;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1493195810;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1493195810;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1495484544;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1514902843;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1526630738;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
StreamTransformation -> public String getSlotSharingGroup();1531381123;Returns the slot sharing group of this transformation.__@see #setSlotSharingGroup(String);public String getSlotSharingGroup() {_		return slotSharingGroup__	};returns,the,slot,sharing,group,of,this,transformation,see,set,slot,sharing,group,string;public,string,get,slot,sharing,group,return,slot,sharing,group
