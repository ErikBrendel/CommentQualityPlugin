commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;4;1;/**  * Called for every element that gets added to a pane. The result of this will determine  * whether the pane is evaluated to emit results.  *  * @param element The element that arrived.  * @param timestamp The timestamp of the element that arrived.  * @param window The window to which the element is being added.  * @param ctx A context object that can be used to register timer callbacks.  */ ;/**  * Called for every element that gets added to a pane. The result of this will determine  * whether the pane is evaluated to emit results.  *  * @param element The element that arrived.  * @param timestamp The timestamp of the element that arrived.  * @param window The window to which the element is being added.  * @param ctx A context object that can be used to register timer callbacks.  */ public abstract TriggerResult onElement(T element, long timestamp, W window, TriggerContext ctx) throws Exception.
true;public,abstract;3;1;/**  * Called when a processing-time timer that was set using the trigger context fires.  *  * @param time The timestamp at which the timer fired.  * @param window The window for which the timer fired.  * @param ctx A context object that can be used to register timer callbacks.  */ ;/**  * Called when a processing-time timer that was set using the trigger context fires.  *  * @param time The timestamp at which the timer fired.  * @param window The window for which the timer fired.  * @param ctx A context object that can be used to register timer callbacks.  */ public abstract TriggerResult onProcessingTime(long time, W window, TriggerContext ctx) throws Exception.
true;public,abstract;3;1;/**  * Called when an event-time timer that was set using the trigger context fires.  *  * @param time The timestamp at which the timer fired.  * @param window The window for which the timer fired.  * @param ctx A context object that can be used to register timer callbacks.  */ ;/**  * Called when an event-time timer that was set using the trigger context fires.  *  * @param time The timestamp at which the timer fired.  * @param window The window for which the timer fired.  * @param ctx A context object that can be used to register timer callbacks.  */ public abstract TriggerResult onEventTime(long time, W window, TriggerContext ctx) throws Exception.
true;public;0;3;/**  * Returns true if this trigger supports merging of trigger state and can therefore  * be used with a  * {@link org.apache.flink.streaming.api.windowing.assigners.MergingWindowAssigner}.  *  * <p>If this returns {@code true} you must properly implement  * {@link #onMerge(Window, OnMergeContext)}  */ ;/**  * Returns true if this trigger supports merging of trigger state and can therefore  * be used with a  * {@link org.apache.flink.streaming.api.windowing.assigners.MergingWindowAssigner}.  *  * <p>If this returns {@code true} you must properly implement  * {@link #onMerge(Window, OnMergeContext)}  */ public boolean canMerge() {     return false. }
true;public;2;3;/**  * Called when several windows have been merged into one window by the  * {@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}.  *  * @param window The new window that results from the merge.  * @param ctx A context object that can be used to register timer callbacks and access state.  */ ;/**  * Called when several windows have been merged into one window by the  * {@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}.  *  * @param window The new window that results from the merge.  * @param ctx A context object that can be used to register timer callbacks and access state.  */ public void onMerge(W window, OnMergeContext ctx) throws Exception {     throw new UnsupportedOperationException("This trigger does not support merging."). }
true;public,abstract;2;1;/**  * Clears any state that the trigger might still hold for the given window. This is called  * when a window is purged. Timers set using {@link TriggerContext#registerEventTimeTimer(long)}  * and {@link TriggerContext#registerProcessingTimeTimer(long)} should be deleted here as  * well as state acquired using {@link TriggerContext#getPartitionedState(StateDescriptor)}.  */ ;/**  * Clears any state that the trigger might still hold for the given window. This is called  * when a window is purged. Timers set using {@link TriggerContext#registerEventTimeTimer(long)}  * and {@link TriggerContext#registerProcessingTimeTimer(long)} should be deleted here as  * well as state acquired using {@link TriggerContext#getPartitionedState(StateDescriptor)}.  */ public abstract void clear(W window, TriggerContext ctx) throws Exception.
true;;0;1;/**  * Returns the current processing time.  */ ;/**  * Returns the current processing time.  */ long getCurrentProcessingTime().
true;;0;1;/**  * Returns the metric group for this {@link Trigger}. This is the same metric  * group that would be returned from {@link RuntimeContext#getMetricGroup()} in a user  * function.  *  * <p>You must not call methods that create metric objects  * (such as {@link MetricGroup#counter(int)} multiple times but instead call once  * and store the metric object in a field.  */ ;/**  * Returns the metric group for this {@link Trigger}. This is the same metric  * group that would be returned from {@link RuntimeContext#getMetricGroup()} in a user  * function.  *  * <p>You must not call methods that create metric objects  * (such as {@link MetricGroup#counter(int)} multiple times but instead call once  * and store the metric object in a field.  */ MetricGroup getMetricGroup().
true;;0;1;/**  * Returns the current watermark time.  */ ;/**  * Returns the current watermark time.  */ long getCurrentWatermark().
true;;1;1;/**  * Register a system time callback. When the current system time passes the specified  * time {@link Trigger#onProcessingTime(long, Window, TriggerContext)} is called with the time specified here.  *  * @param time The time at which to invoke {@link Trigger#onProcessingTime(long, Window, TriggerContext)}  */ ;/**  * Register a system time callback. When the current system time passes the specified  * time {@link Trigger#onProcessingTime(long, Window, TriggerContext)} is called with the time specified here.  *  * @param time The time at which to invoke {@link Trigger#onProcessingTime(long, Window, TriggerContext)}  */ void registerProcessingTimeTimer(long time).
true;;1;1;/**  * Register an event-time callback. When the current watermark passes the specified  * time {@link Trigger#onEventTime(long, Window, TriggerContext)} is called with the time specified here.  *  * @param time The watermark at which to invoke {@link Trigger#onEventTime(long, Window, TriggerContext)}  * @see org.apache.flink.streaming.api.watermark.Watermark  */ ;/**  * Register an event-time callback. When the current watermark passes the specified  * time {@link Trigger#onEventTime(long, Window, TriggerContext)} is called with the time specified here.  *  * @param time The watermark at which to invoke {@link Trigger#onEventTime(long, Window, TriggerContext)}  * @see org.apache.flink.streaming.api.watermark.Watermark  */ void registerEventTimeTimer(long time).
true;;1;1;/**  * Delete the processing time trigger for the given time.  */ ;/**  * Delete the processing time trigger for the given time.  */ void deleteProcessingTimeTimer(long time).
true;;1;1;/**  * Delete the event-time trigger for the given time.  */ ;/**  * Delete the event-time trigger for the given time.  */ void deleteEventTimeTimer(long time).
true;;1;1;/**  * Retrieves a {@link State} object that can be used to interact with  * fault-tolerant state that is scoped to the window and key of the current  * trigger invocation.  *  * @param stateDescriptor The StateDescriptor that contains the name and type of the  *                        state that is being accessed.  * @param <S>             The type of the state.  * @return The partitioned state object.  * @throws UnsupportedOperationException Thrown, if no partitioned state is available for the  *                                       function (function is not part os a KeyedStream).  */ ;/**  * Retrieves a {@link State} object that can be used to interact with  * fault-tolerant state that is scoped to the window and key of the current  * trigger invocation.  *  * @param stateDescriptor The StateDescriptor that contains the name and type of the  *                        state that is being accessed.  * @param <S>             The type of the state.  * @return The partitioned state object.  * @throws UnsupportedOperationException Thrown, if no partitioned state is available for the  *                                       function (function is not part os a KeyedStream).  */ <S extends State> S getPartitionedState(StateDescriptor<S, ?> stateDescriptor).
true;;3;2;/**  * Retrieves a {@link ValueState} object that can be used to interact with  * fault-tolerant state that is scoped to the window and key of the current  * trigger invocation.  *  * @param name The name of the key/value state.  * @param stateType The class of the type that is stored in the state. Used to generate  *                  serializers for managed memory and checkpointing.  * @param defaultState The default state value, returned when the state is accessed and  *                     no value has yet been set for the key. May be null.  *  * @param <S>          The type of the state.  * @return The partitioned state object.  * @throws UnsupportedOperationException Thrown, if no partitioned state is available for the  *                                       function (function is not part os a KeyedStream).  * @deprecated Use {@link #getPartitionedState(StateDescriptor)}.  */ ;/**  * Retrieves a {@link ValueState} object that can be used to interact with  * fault-tolerant state that is scoped to the window and key of the current  * trigger invocation.  *  * @param name The name of the key/value state.  * @param stateType The class of the type that is stored in the state. Used to generate  *                  serializers for managed memory and checkpointing.  * @param defaultState The default state value, returned when the state is accessed and  *                     no value has yet been set for the key. May be null.  *  * @param <S>          The type of the state.  * @return The partitioned state object.  * @throws UnsupportedOperationException Thrown, if no partitioned state is available for the  *                                       function (function is not part os a KeyedStream).  * @deprecated Use {@link #getPartitionedState(StateDescriptor)}.  */ @Deprecated <S extends Serializable> ValueState<S> getKeyValueState(String name, Class<S> stateType, S defaultState).
true;;3;2;/**  * Retrieves a {@link ValueState} object that can be used to interact with  * fault-tolerant state that is scoped to the window and key of the current  * trigger invocation.  *  * @param name The name of the key/value state.  * @param stateType The type information for the type that is stored in the state.  *                  Used to create serializers for managed memory and checkpoints.  * @param defaultState The default state value, returned when the state is accessed and  *                     no value has yet been set for the key. May be null.  *  * @param <S>          The type of the state.  * @return The partitioned state object.  * @throws UnsupportedOperationException Thrown, if no partitioned state is available for the  *                                       function (function is not part os a KeyedStream).  * @deprecated Use {@link #getPartitionedState(StateDescriptor)}.  */ ;/**  * Retrieves a {@link ValueState} object that can be used to interact with  * fault-tolerant state that is scoped to the window and key of the current  * trigger invocation.  *  * @param name The name of the key/value state.  * @param stateType The type information for the type that is stored in the state.  *                  Used to create serializers for managed memory and checkpoints.  * @param defaultState The default state value, returned when the state is accessed and  *                     no value has yet been set for the key. May be null.  *  * @param <S>          The type of the state.  * @return The partitioned state object.  * @throws UnsupportedOperationException Thrown, if no partitioned state is available for the  *                                       function (function is not part os a KeyedStream).  * @deprecated Use {@link #getPartitionedState(StateDescriptor)}.  */ @Deprecated <S extends Serializable> ValueState<S> getKeyValueState(String name, TypeInformation<S> stateType, S defaultState).
false;;1;1;;<S extends MergingState<?, ?>> void mergePartitionedState(StateDescriptor<S, ?> stateDescriptor).
