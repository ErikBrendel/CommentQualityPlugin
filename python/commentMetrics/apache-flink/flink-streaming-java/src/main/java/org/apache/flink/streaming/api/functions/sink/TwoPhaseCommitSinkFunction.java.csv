# id;timestamp;commentText;codeText;commentWords;codeWords
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1502083796;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1503491129;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1504010734;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1504010734;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1504010734;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1504010734;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1507568316;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1509523433;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1509523433;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1509597134;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1539149027;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1539149114;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1541587130;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1542186519;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1548860008;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void commit(TXN transaction)_;1550652777;Commit a pre-committed transaction. If this method fail, Flink application will be_restarted and {@link TwoPhaseCommitSinkFunction#recoverAndCommit(Object)} will be called again for the_same transaction.;protected abstract void commit(TXN transaction)_;commit,a,pre,committed,transaction,if,this,method,fail,flink,application,will,be,restarted,and,link,two,phase,commit,sink,function,recover,and,commit,object,will,be,called,again,for,the,same,transaction;protected,abstract,void,commit,txn,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1502083796;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1503491129;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1504010734;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1504010734;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1504010734;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1504010734;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1507568316;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1509523433;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1509523433;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1509597134;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_eventually, a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,eventually,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1539149027;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_eventually, a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,eventually,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1539149114;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_eventually, a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,eventually,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1541587130;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_eventually, a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,eventually,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1542186519;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_eventually, a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,eventually,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1548860008;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_eventually, a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,eventually,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndCommit(TXN transaction);1550652777;Invoked on recovered transactions after a failure. User implementation must ensure that this call will eventually_succeed. If it fails, Flink application will be restarted and it will be invoked again. If it does not succeed_eventually, a data loss will occur. Transactions will be recovered in an order in which they were created.;protected void recoverAndCommit(TXN transaction) {_		commit(transaction)__	};invoked,on,recovered,transactions,after,a,failure,user,implementation,must,ensure,that,this,call,will,eventually,succeed,if,it,fails,flink,application,will,be,restarted,and,it,will,be,invoked,again,if,it,does,not,succeed,eventually,a,data,loss,will,occur,transactions,will,be,recovered,in,an,order,in,which,they,were,created;protected,void,recover,and,commit,txn,transaction,commit,transaction
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor);1504010734;Instantiate {@link TwoPhaseCommitSinkFunction} with custom state descriptors.__@param stateDescriptor descriptor for transactions POJO.;public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor) {_		this.stateDescriptor = requireNonNull(stateDescriptor, "stateDescriptor is null")__	};instantiate,link,two,phase,commit,sink,function,with,custom,state,descriptors,param,state,descriptor,descriptor,for,transactions,pojo;public,two,phase,commit,sink,function,list,state,descriptor,state,txn,context,state,descriptor,this,state,descriptor,require,non,null,state,descriptor,state,descriptor,is,null
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor);1504010734;Instantiate {@link TwoPhaseCommitSinkFunction} with custom state descriptors.__@param stateDescriptor descriptor for transactions POJO.;public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor) {_		this.stateDescriptor = requireNonNull(stateDescriptor, "stateDescriptor is null")__	};instantiate,link,two,phase,commit,sink,function,with,custom,state,descriptors,param,state,descriptor,descriptor,for,transactions,pojo;public,two,phase,commit,sink,function,list,state,descriptor,state,txn,context,state,descriptor,this,state,descriptor,require,non,null,state,descriptor,state,descriptor,is,null
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor);1504010734;Instantiate {@link TwoPhaseCommitSinkFunction} with custom state descriptors.__@param stateDescriptor descriptor for transactions POJO.;public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor) {_		this.stateDescriptor = requireNonNull(stateDescriptor, "stateDescriptor is null")__	};instantiate,link,two,phase,commit,sink,function,with,custom,state,descriptors,param,state,descriptor,descriptor,for,transactions,pojo;public,two,phase,commit,sink,function,list,state,descriptor,state,txn,context,state,descriptor,this,state,descriptor,require,non,null,state,descriptor,state,descriptor,is,null
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor);1507568316;Instantiate {@link TwoPhaseCommitSinkFunction} with custom state descriptors.__@param stateDescriptor descriptor for transactions POJO.;public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor) {_		this.stateDescriptor = requireNonNull(stateDescriptor, "stateDescriptor is null")__	};instantiate,link,two,phase,commit,sink,function,with,custom,state,descriptors,param,state,descriptor,descriptor,for,transactions,pojo;public,two,phase,commit,sink,function,list,state,descriptor,state,txn,context,state,descriptor,this,state,descriptor,require,non,null,state,descriptor,state,descriptor,is,null
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor);1509523433;Instantiate {@link TwoPhaseCommitSinkFunction} with custom state descriptors.__@param stateDescriptor descriptor for transactions POJO.;public TwoPhaseCommitSinkFunction(ListStateDescriptor<State<TXN, CONTEXT>> stateDescriptor) {_		this.stateDescriptor = requireNonNull(stateDescriptor, "stateDescriptor is null")__	};instantiate,link,two,phase,commit,sink,function,with,custom,state,descriptors,param,state,descriptor,descriptor,for,transactions,pojo;public,two,phase,commit,sink,function,list,state,descriptor,state,txn,context,state,descriptor,this,state,descriptor,require,non,null,state,descriptor,state,descriptor,is,null
TwoPhaseCommitSinkFunction -> private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder);1509597134;This method must be the only place to call {@link #recoverAndCommit(Object)} to ensure that_the configuration parameters {@link #transactionTimeout} and_{@link #ignoreFailuresAfterTransactionTimeout} are respected.;private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder) {_		try {_			logWarningIfTimeoutAlmostReached(transactionHolder)__			recoverAndCommit(transactionHolder.handle)__		} catch (final Exception e) {_			final long elapsedTime = clock.millis() - transactionHolder.transactionStartTime__			if (ignoreFailuresAfterTransactionTimeout && elapsedTime > transactionTimeout) {_				LOG.error("Error while committing transaction {}. " +_						"Transaction has been open for longer than the transaction timeout ({})." +_						"Commit will not be attempted again. Data loss might have occurred.",_					transactionHolder.handle, transactionTimeout, e)__			} else {_				throw e__			}_		}_	};this,method,must,be,the,only,place,to,call,link,recover,and,commit,object,to,ensure,that,the,configuration,parameters,link,transaction,timeout,and,link,ignore,failures,after,transaction,timeout,are,respected;private,void,recover,and,commit,internal,transaction,holder,txn,transaction,holder,try,log,warning,if,timeout,almost,reached,transaction,holder,recover,and,commit,transaction,holder,handle,catch,final,exception,e,final,long,elapsed,time,clock,millis,transaction,holder,transaction,start,time,if,ignore,failures,after,transaction,timeout,elapsed,time,transaction,timeout,log,error,error,while,committing,transaction,transaction,has,been,open,for,longer,than,the,transaction,timeout,commit,will,not,be,attempted,again,data,loss,might,have,occurred,transaction,holder,handle,transaction,timeout,e,else,throw,e
TwoPhaseCommitSinkFunction -> private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder);1539149027;This method must be the only place to call {@link #recoverAndCommit(Object)} to ensure that_the configuration parameters {@link #transactionTimeout} and_{@link #ignoreFailuresAfterTransactionTimeout} are respected.;private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder) {_		try {_			logWarningIfTimeoutAlmostReached(transactionHolder)__			recoverAndCommit(transactionHolder.handle)__		} catch (final Exception e) {_			final long elapsedTime = clock.millis() - transactionHolder.transactionStartTime__			if (ignoreFailuresAfterTransactionTimeout && elapsedTime > transactionTimeout) {_				LOG.error("Error while committing transaction {}. " +_						"Transaction has been open for longer than the transaction timeout ({})." +_						"Commit will not be attempted again. Data loss might have occurred.",_					transactionHolder.handle, transactionTimeout, e)__			} else {_				throw e__			}_		}_	};this,method,must,be,the,only,place,to,call,link,recover,and,commit,object,to,ensure,that,the,configuration,parameters,link,transaction,timeout,and,link,ignore,failures,after,transaction,timeout,are,respected;private,void,recover,and,commit,internal,transaction,holder,txn,transaction,holder,try,log,warning,if,timeout,almost,reached,transaction,holder,recover,and,commit,transaction,holder,handle,catch,final,exception,e,final,long,elapsed,time,clock,millis,transaction,holder,transaction,start,time,if,ignore,failures,after,transaction,timeout,elapsed,time,transaction,timeout,log,error,error,while,committing,transaction,transaction,has,been,open,for,longer,than,the,transaction,timeout,commit,will,not,be,attempted,again,data,loss,might,have,occurred,transaction,holder,handle,transaction,timeout,e,else,throw,e
TwoPhaseCommitSinkFunction -> private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder);1539149114;This method must be the only place to call {@link #recoverAndCommit(Object)} to ensure that_the configuration parameters {@link #transactionTimeout} and_{@link #ignoreFailuresAfterTransactionTimeout} are respected.;private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder) {_		try {_			logWarningIfTimeoutAlmostReached(transactionHolder)__			recoverAndCommit(transactionHolder.handle)__		} catch (final Exception e) {_			final long elapsedTime = clock.millis() - transactionHolder.transactionStartTime__			if (ignoreFailuresAfterTransactionTimeout && elapsedTime > transactionTimeout) {_				LOG.error("Error while committing transaction {}. " +_						"Transaction has been open for longer than the transaction timeout ({})." +_						"Commit will not be attempted again. Data loss might have occurred.",_					transactionHolder.handle, transactionTimeout, e)__			} else {_				throw e__			}_		}_	};this,method,must,be,the,only,place,to,call,link,recover,and,commit,object,to,ensure,that,the,configuration,parameters,link,transaction,timeout,and,link,ignore,failures,after,transaction,timeout,are,respected;private,void,recover,and,commit,internal,transaction,holder,txn,transaction,holder,try,log,warning,if,timeout,almost,reached,transaction,holder,recover,and,commit,transaction,holder,handle,catch,final,exception,e,final,long,elapsed,time,clock,millis,transaction,holder,transaction,start,time,if,ignore,failures,after,transaction,timeout,elapsed,time,transaction,timeout,log,error,error,while,committing,transaction,transaction,has,been,open,for,longer,than,the,transaction,timeout,commit,will,not,be,attempted,again,data,loss,might,have,occurred,transaction,holder,handle,transaction,timeout,e,else,throw,e
TwoPhaseCommitSinkFunction -> private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder);1541587130;This method must be the only place to call {@link #recoverAndCommit(Object)} to ensure that_the configuration parameters {@link #transactionTimeout} and_{@link #ignoreFailuresAfterTransactionTimeout} are respected.;private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder) {_		try {_			logWarningIfTimeoutAlmostReached(transactionHolder)__			recoverAndCommit(transactionHolder.handle)__		} catch (final Exception e) {_			final long elapsedTime = clock.millis() - transactionHolder.transactionStartTime__			if (ignoreFailuresAfterTransactionTimeout && elapsedTime > transactionTimeout) {_				LOG.error("Error while committing transaction {}. " +_						"Transaction has been open for longer than the transaction timeout ({})." +_						"Commit will not be attempted again. Data loss might have occurred.",_					transactionHolder.handle, transactionTimeout, e)__			} else {_				throw e__			}_		}_	};this,method,must,be,the,only,place,to,call,link,recover,and,commit,object,to,ensure,that,the,configuration,parameters,link,transaction,timeout,and,link,ignore,failures,after,transaction,timeout,are,respected;private,void,recover,and,commit,internal,transaction,holder,txn,transaction,holder,try,log,warning,if,timeout,almost,reached,transaction,holder,recover,and,commit,transaction,holder,handle,catch,final,exception,e,final,long,elapsed,time,clock,millis,transaction,holder,transaction,start,time,if,ignore,failures,after,transaction,timeout,elapsed,time,transaction,timeout,log,error,error,while,committing,transaction,transaction,has,been,open,for,longer,than,the,transaction,timeout,commit,will,not,be,attempted,again,data,loss,might,have,occurred,transaction,holder,handle,transaction,timeout,e,else,throw,e
TwoPhaseCommitSinkFunction -> private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder);1542186519;This method must be the only place to call {@link #recoverAndCommit(Object)} to ensure that_the configuration parameters {@link #transactionTimeout} and_{@link #ignoreFailuresAfterTransactionTimeout} are respected.;private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder) {_		try {_			logWarningIfTimeoutAlmostReached(transactionHolder)__			recoverAndCommit(transactionHolder.handle)__		} catch (final Exception e) {_			final long elapsedTime = clock.millis() - transactionHolder.transactionStartTime__			if (ignoreFailuresAfterTransactionTimeout && elapsedTime > transactionTimeout) {_				LOG.error("Error while committing transaction {}. " +_						"Transaction has been open for longer than the transaction timeout ({})." +_						"Commit will not be attempted again. Data loss might have occurred.",_					transactionHolder.handle, transactionTimeout, e)__			} else {_				throw e__			}_		}_	};this,method,must,be,the,only,place,to,call,link,recover,and,commit,object,to,ensure,that,the,configuration,parameters,link,transaction,timeout,and,link,ignore,failures,after,transaction,timeout,are,respected;private,void,recover,and,commit,internal,transaction,holder,txn,transaction,holder,try,log,warning,if,timeout,almost,reached,transaction,holder,recover,and,commit,transaction,holder,handle,catch,final,exception,e,final,long,elapsed,time,clock,millis,transaction,holder,transaction,start,time,if,ignore,failures,after,transaction,timeout,elapsed,time,transaction,timeout,log,error,error,while,committing,transaction,transaction,has,been,open,for,longer,than,the,transaction,timeout,commit,will,not,be,attempted,again,data,loss,might,have,occurred,transaction,holder,handle,transaction,timeout,e,else,throw,e
TwoPhaseCommitSinkFunction -> private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder);1548860008;This method must be the only place to call {@link #recoverAndCommit(Object)} to ensure that_the configuration parameters {@link #transactionTimeout} and_{@link #ignoreFailuresAfterTransactionTimeout} are respected.;private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder) {_		try {_			logWarningIfTimeoutAlmostReached(transactionHolder)__			recoverAndCommit(transactionHolder.handle)__		} catch (final Exception e) {_			final long elapsedTime = clock.millis() - transactionHolder.transactionStartTime__			if (ignoreFailuresAfterTransactionTimeout && elapsedTime > transactionTimeout) {_				LOG.error("Error while committing transaction {}. " +_						"Transaction has been open for longer than the transaction timeout ({})." +_						"Commit will not be attempted again. Data loss might have occurred.",_					transactionHolder.handle, transactionTimeout, e)__			} else {_				throw e__			}_		}_	};this,method,must,be,the,only,place,to,call,link,recover,and,commit,object,to,ensure,that,the,configuration,parameters,link,transaction,timeout,and,link,ignore,failures,after,transaction,timeout,are,respected;private,void,recover,and,commit,internal,transaction,holder,txn,transaction,holder,try,log,warning,if,timeout,almost,reached,transaction,holder,recover,and,commit,transaction,holder,handle,catch,final,exception,e,final,long,elapsed,time,clock,millis,transaction,holder,transaction,start,time,if,ignore,failures,after,transaction,timeout,elapsed,time,transaction,timeout,log,error,error,while,committing,transaction,transaction,has,been,open,for,longer,than,the,transaction,timeout,commit,will,not,be,attempted,again,data,loss,might,have,occurred,transaction,holder,handle,transaction,timeout,e,else,throw,e
TwoPhaseCommitSinkFunction -> private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder);1550652777;This method must be the only place to call {@link #recoverAndCommit(Object)} to ensure that_the configuration parameters {@link #transactionTimeout} and_{@link #ignoreFailuresAfterTransactionTimeout} are respected.;private void recoverAndCommitInternal(TransactionHolder<TXN> transactionHolder) {_		try {_			logWarningIfTimeoutAlmostReached(transactionHolder)__			recoverAndCommit(transactionHolder.handle)__		} catch (final Exception e) {_			final long elapsedTime = clock.millis() - transactionHolder.transactionStartTime__			if (ignoreFailuresAfterTransactionTimeout && elapsedTime > transactionTimeout) {_				LOG.error("Error while committing transaction {}. " +_						"Transaction has been open for longer than the transaction timeout ({})." +_						"Commit will not be attempted again. Data loss might have occurred.",_					transactionHolder.handle, transactionTimeout, e)__			} else {_				throw e__			}_		}_	};this,method,must,be,the,only,place,to,call,link,recover,and,commit,object,to,ensure,that,the,configuration,parameters,link,transaction,timeout,and,link,ignore,failures,after,transaction,timeout,are,respected;private,void,recover,and,commit,internal,transaction,holder,txn,transaction,holder,try,log,warning,if,timeout,almost,reached,transaction,holder,recover,and,commit,transaction,holder,handle,catch,final,exception,e,final,long,elapsed,time,clock,millis,transaction,holder,transaction,start,time,if,ignore,failures,after,transaction,timeout,elapsed,time,transaction,timeout,log,error,error,while,committing,transaction,transaction,has,been,open,for,longer,than,the,transaction,timeout,commit,will,not,be,attempted,again,data,loss,might,have,occurred,transaction,holder,handle,transaction,timeout,e,else,throw,e
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1502083796;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1503491129;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1504010734;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1504010734;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1504010734;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1504010734;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1507568316;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1509523433;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1509523433;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1509597134;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1539149027;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1539149114;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1541587130;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1542186519;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1548860008;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> protected void recoverAndAbort(TXN transaction);1550652777;Abort a transaction that was rejected by a coordinator after a failure.;protected void recoverAndAbort(TXN transaction) {_		abort(transaction)__	};abort,a,transaction,that,was,rejected,by,a,coordinator,after,a,failure;protected,void,recover,and,abort,txn,transaction,abort,transaction
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation);1504010734;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>_@param stateTypeInformation {@link TypeInformation} for POJO holding state of opened transactions.;public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation) {_		this(new ListStateDescriptor<State<TXN, CONTEXT>>("state", stateTypeInformation))__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,state,type,information,link,type,information,for,pojo,holding,state,of,opened,transactions;public,two,phase,commit,sink,function,type,information,state,txn,context,state,type,information,this,new,list,state,descriptor,state,txn,context,state,state,type,information
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation);1504010734;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>_@param stateTypeInformation {@link TypeInformation} for POJO holding state of opened transactions.;public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation) {_		this(new ListStateDescriptor<State<TXN, CONTEXT>>("state", stateTypeInformation))__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,state,type,information,link,type,information,for,pojo,holding,state,of,opened,transactions;public,two,phase,commit,sink,function,type,information,state,txn,context,state,type,information,this,new,list,state,descriptor,state,txn,context,state,state,type,information
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation);1504010734;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>_@param stateTypeInformation {@link TypeInformation} for POJO holding state of opened transactions.;public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation) {_		this(new ListStateDescriptor<State<TXN, CONTEXT>>("state", stateTypeInformation))__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,state,type,information,link,type,information,for,pojo,holding,state,of,opened,transactions;public,two,phase,commit,sink,function,type,information,state,txn,context,state,type,information,this,new,list,state,descriptor,state,txn,context,state,state,type,information
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation);1507568316;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>_@param stateTypeInformation {@link TypeInformation} for POJO holding state of opened transactions.;public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation) {_		this(new ListStateDescriptor<State<TXN, CONTEXT>>("state", stateTypeInformation))__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,state,type,information,link,type,information,for,pojo,holding,state,of,opened,transactions;public,two,phase,commit,sink,function,type,information,state,txn,context,state,type,information,this,new,list,state,descriptor,state,txn,context,state,state,type,information
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation);1509523433;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>_@param stateTypeInformation {@link TypeInformation} for POJO holding state of opened transactions.;public TwoPhaseCommitSinkFunction(TypeInformation<State<TXN, CONTEXT>> stateTypeInformation) {_		this(new ListStateDescriptor<State<TXN, CONTEXT>>("state", stateTypeInformation))__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,state,type,information,link,type,information,for,pojo,holding,state,of,opened,transactions;public,two,phase,commit,sink,function,type,information,state,txn,context,state,type,information,this,new,list,state,descriptor,state,txn,context,state,state,type,information
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1507568316;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1509523433;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1509523433;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1509597134;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1539149027;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1539149114;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1541587130;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1542186519;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1548860008;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> @Override 	public final void invoke(IN value) throws Exception;1550652777;This should not be implemented by subclasses.;@Override_	public final void invoke(IN value) throws Exception {};this,should,not,be,implemented,by,subclasses;override,public,final,void,invoke,in,value,throws,exception
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout);1509597134;Sets the transaction timeout. Setting only the transaction timeout has no effect in itself.__@param transactionTimeout The transaction timeout in ms._@see #ignoreFailuresAfterTransactionTimeout()_@see #enableTransactionTimeoutWarnings(double);protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout) {_		checkArgument(transactionTimeout >= 0, "transactionTimeout must not be negative")__		this.transactionTimeout = transactionTimeout__		return this__	};sets,the,transaction,timeout,setting,only,the,transaction,timeout,has,no,effect,in,itself,param,transaction,timeout,the,transaction,timeout,in,ms,see,ignore,failures,after,transaction,timeout,see,enable,transaction,timeout,warnings,double;protected,two,phase,commit,sink,function,in,txn,context,set,transaction,timeout,long,transaction,timeout,check,argument,transaction,timeout,0,transaction,timeout,must,not,be,negative,this,transaction,timeout,transaction,timeout,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout);1539149027;Sets the transaction timeout. Setting only the transaction timeout has no effect in itself.__@param transactionTimeout The transaction timeout in ms._@see #ignoreFailuresAfterTransactionTimeout()_@see #enableTransactionTimeoutWarnings(double);protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout) {_		checkArgument(transactionTimeout >= 0, "transactionTimeout must not be negative")__		this.transactionTimeout = transactionTimeout__		return this__	};sets,the,transaction,timeout,setting,only,the,transaction,timeout,has,no,effect,in,itself,param,transaction,timeout,the,transaction,timeout,in,ms,see,ignore,failures,after,transaction,timeout,see,enable,transaction,timeout,warnings,double;protected,two,phase,commit,sink,function,in,txn,context,set,transaction,timeout,long,transaction,timeout,check,argument,transaction,timeout,0,transaction,timeout,must,not,be,negative,this,transaction,timeout,transaction,timeout,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout);1539149114;Sets the transaction timeout. Setting only the transaction timeout has no effect in itself.__@param transactionTimeout The transaction timeout in ms._@see #ignoreFailuresAfterTransactionTimeout()_@see #enableTransactionTimeoutWarnings(double);protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout) {_		checkArgument(transactionTimeout >= 0, "transactionTimeout must not be negative")__		this.transactionTimeout = transactionTimeout__		return this__	};sets,the,transaction,timeout,setting,only,the,transaction,timeout,has,no,effect,in,itself,param,transaction,timeout,the,transaction,timeout,in,ms,see,ignore,failures,after,transaction,timeout,see,enable,transaction,timeout,warnings,double;protected,two,phase,commit,sink,function,in,txn,context,set,transaction,timeout,long,transaction,timeout,check,argument,transaction,timeout,0,transaction,timeout,must,not,be,negative,this,transaction,timeout,transaction,timeout,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout);1541587130;Sets the transaction timeout. Setting only the transaction timeout has no effect in itself.__@param transactionTimeout The transaction timeout in ms._@see #ignoreFailuresAfterTransactionTimeout()_@see #enableTransactionTimeoutWarnings(double);protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout) {_		checkArgument(transactionTimeout >= 0, "transactionTimeout must not be negative")__		this.transactionTimeout = transactionTimeout__		return this__	};sets,the,transaction,timeout,setting,only,the,transaction,timeout,has,no,effect,in,itself,param,transaction,timeout,the,transaction,timeout,in,ms,see,ignore,failures,after,transaction,timeout,see,enable,transaction,timeout,warnings,double;protected,two,phase,commit,sink,function,in,txn,context,set,transaction,timeout,long,transaction,timeout,check,argument,transaction,timeout,0,transaction,timeout,must,not,be,negative,this,transaction,timeout,transaction,timeout,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout);1542186519;Sets the transaction timeout. Setting only the transaction timeout has no effect in itself.__@param transactionTimeout The transaction timeout in ms._@see #ignoreFailuresAfterTransactionTimeout()_@see #enableTransactionTimeoutWarnings(double);protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout) {_		checkArgument(transactionTimeout >= 0, "transactionTimeout must not be negative")__		this.transactionTimeout = transactionTimeout__		return this__	};sets,the,transaction,timeout,setting,only,the,transaction,timeout,has,no,effect,in,itself,param,transaction,timeout,the,transaction,timeout,in,ms,see,ignore,failures,after,transaction,timeout,see,enable,transaction,timeout,warnings,double;protected,two,phase,commit,sink,function,in,txn,context,set,transaction,timeout,long,transaction,timeout,check,argument,transaction,timeout,0,transaction,timeout,must,not,be,negative,this,transaction,timeout,transaction,timeout,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout);1548860008;Sets the transaction timeout. Setting only the transaction timeout has no effect in itself.__@param transactionTimeout The transaction timeout in ms._@see #ignoreFailuresAfterTransactionTimeout()_@see #enableTransactionTimeoutWarnings(double);protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout) {_		checkArgument(transactionTimeout >= 0, "transactionTimeout must not be negative")__		this.transactionTimeout = transactionTimeout__		return this__	};sets,the,transaction,timeout,setting,only,the,transaction,timeout,has,no,effect,in,itself,param,transaction,timeout,the,transaction,timeout,in,ms,see,ignore,failures,after,transaction,timeout,see,enable,transaction,timeout,warnings,double;protected,two,phase,commit,sink,function,in,txn,context,set,transaction,timeout,long,transaction,timeout,check,argument,transaction,timeout,0,transaction,timeout,must,not,be,negative,this,transaction,timeout,transaction,timeout,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout);1550652777;Sets the transaction timeout. Setting only the transaction timeout has no effect in itself.__@param transactionTimeout The transaction timeout in ms._@see #ignoreFailuresAfterTransactionTimeout()_@see #enableTransactionTimeoutWarnings(double);protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> setTransactionTimeout(long transactionTimeout) {_		checkArgument(transactionTimeout >= 0, "transactionTimeout must not be negative")__		this.transactionTimeout = transactionTimeout__		return this__	};sets,the,transaction,timeout,setting,only,the,transaction,timeout,has,no,effect,in,itself,param,transaction,timeout,the,transaction,timeout,in,ms,see,ignore,failures,after,transaction,timeout,see,enable,transaction,timeout,warnings,double;protected,two,phase,commit,sink,function,in,txn,context,set,transaction,timeout,long,transaction,timeout,check,argument,transaction,timeout,0,transaction,timeout,must,not,be,negative,this,transaction,timeout,transaction,timeout,return,this
TwoPhaseCommitSinkFunction -> StateSerializerConfigSnapshot -> public StateSerializerConfigSnapshot();1509523433;This empty nullary constructor is required for deserializing the configuration.;public StateSerializerConfigSnapshot() {};this,empty,nullary,constructor,is,required,for,deserializing,the,configuration;public,state,serializer,config,snapshot
TwoPhaseCommitSinkFunction -> StateSerializerConfigSnapshot -> public StateSerializerConfigSnapshot();1509597134;This empty nullary constructor is required for deserializing the configuration.;public StateSerializerConfigSnapshot() {};this,empty,nullary,constructor,is,required,for,deserializing,the,configuration;public,state,serializer,config,snapshot
TwoPhaseCommitSinkFunction -> StateSerializerConfigSnapshot -> public StateSerializerConfigSnapshot();1539149027;This empty nullary constructor is required for deserializing the configuration.;public StateSerializerConfigSnapshot() {};this,empty,nullary,constructor,is,required,for,deserializing,the,configuration;public,state,serializer,config,snapshot
TwoPhaseCommitSinkFunction -> StateSerializerConfigSnapshot -> public StateSerializerConfigSnapshot();1539149114;This empty nullary constructor is required for deserializing the configuration.;public StateSerializerConfigSnapshot() {};this,empty,nullary,constructor,is,required,for,deserializing,the,configuration;public,state,serializer,config,snapshot
TwoPhaseCommitSinkFunction -> StateSerializerConfigSnapshot -> public StateSerializerConfigSnapshot();1541587130;This empty nullary constructor is required for deserializing the configuration.;public StateSerializerConfigSnapshot() {};this,empty,nullary,constructor,is,required,for,deserializing,the,configuration;public,state,serializer,config,snapshot
TwoPhaseCommitSinkFunction -> StateSerializerConfigSnapshot -> public StateSerializerConfigSnapshot();1542186519;This empty nullary constructor is required for deserializing the configuration.;public StateSerializerConfigSnapshot() {};this,empty,nullary,constructor,is,required,for,deserializing,the,configuration;public,state,serializer,config,snapshot
TwoPhaseCommitSinkFunction -> StateSerializerConfigSnapshot -> public StateSerializerConfigSnapshot();1548860008;This empty nullary constructor is required for deserializing the configuration.;public StateSerializerConfigSnapshot() {};this,empty,nullary,constructor,is,required,for,deserializing,the,configuration;public,state,serializer,config,snapshot
TwoPhaseCommitSinkFunction -> StateSerializerConfigSnapshot -> public StateSerializerConfigSnapshot();1550652777;This empty nullary constructor is required for deserializing the configuration.;public StateSerializerConfigSnapshot() {};this,empty,nullary,constructor,is,required,for,deserializing,the,configuration;public,state,serializer,config,snapshot
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value) throws Exception_;1502083796;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value) throws Exception_;1503491129;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value) throws Exception_;1504010734;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value) throws Exception_;1504010734;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value) throws Exception_;1504010734;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value) throws Exception_;1504010734;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,throws,exception
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings( 		double warningRatio);1509597134;Enables logging of warnings if a transaction's elapsed time reaches a specified ratio of_the <code>transactionTimeout</code>._If <code>warningRatio</code> is 0, a warning will be always logged when committing the_transaction.__@param warningRatio A value in the range [0,1]._@return;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings(_		double warningRatio) {_		checkArgument(warningRatio >= 0 && warningRatio <= 1,_			"warningRatio must be in range [0,1]")__		this.transactionTimeoutWarningRatio = warningRatio__		return this__	};enables,logging,of,warnings,if,a,transaction,s,elapsed,time,reaches,a,specified,ratio,of,the,code,transaction,timeout,code,if,code,warning,ratio,code,is,0,a,warning,will,be,always,logged,when,committing,the,transaction,param,warning,ratio,a,value,in,the,range,0,1,return;protected,two,phase,commit,sink,function,in,txn,context,enable,transaction,timeout,warnings,double,warning,ratio,check,argument,warning,ratio,0,warning,ratio,1,warning,ratio,must,be,in,range,0,1,this,transaction,timeout,warning,ratio,warning,ratio,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings( 		double warningRatio);1539149027;Enables logging of warnings if a transaction's elapsed time reaches a specified ratio of_the <code>transactionTimeout</code>._If <code>warningRatio</code> is 0, a warning will be always logged when committing the_transaction.__@param warningRatio A value in the range [0,1]._@return;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings(_		double warningRatio) {_		checkArgument(warningRatio >= 0 && warningRatio <= 1,_			"warningRatio must be in range [0,1]")__		this.transactionTimeoutWarningRatio = warningRatio__		return this__	};enables,logging,of,warnings,if,a,transaction,s,elapsed,time,reaches,a,specified,ratio,of,the,code,transaction,timeout,code,if,code,warning,ratio,code,is,0,a,warning,will,be,always,logged,when,committing,the,transaction,param,warning,ratio,a,value,in,the,range,0,1,return;protected,two,phase,commit,sink,function,in,txn,context,enable,transaction,timeout,warnings,double,warning,ratio,check,argument,warning,ratio,0,warning,ratio,1,warning,ratio,must,be,in,range,0,1,this,transaction,timeout,warning,ratio,warning,ratio,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings( 		double warningRatio);1539149114;Enables logging of warnings if a transaction's elapsed time reaches a specified ratio of_the <code>transactionTimeout</code>._If <code>warningRatio</code> is 0, a warning will be always logged when committing the_transaction.__@param warningRatio A value in the range [0,1]._@return;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings(_		double warningRatio) {_		checkArgument(warningRatio >= 0 && warningRatio <= 1,_			"warningRatio must be in range [0,1]")__		this.transactionTimeoutWarningRatio = warningRatio__		return this__	};enables,logging,of,warnings,if,a,transaction,s,elapsed,time,reaches,a,specified,ratio,of,the,code,transaction,timeout,code,if,code,warning,ratio,code,is,0,a,warning,will,be,always,logged,when,committing,the,transaction,param,warning,ratio,a,value,in,the,range,0,1,return;protected,two,phase,commit,sink,function,in,txn,context,enable,transaction,timeout,warnings,double,warning,ratio,check,argument,warning,ratio,0,warning,ratio,1,warning,ratio,must,be,in,range,0,1,this,transaction,timeout,warning,ratio,warning,ratio,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings( 		double warningRatio);1541587130;Enables logging of warnings if a transaction's elapsed time reaches a specified ratio of_the <code>transactionTimeout</code>._If <code>warningRatio</code> is 0, a warning will be always logged when committing the_transaction.__@param warningRatio A value in the range [0,1]._@return;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings(_		double warningRatio) {_		checkArgument(warningRatio >= 0 && warningRatio <= 1,_			"warningRatio must be in range [0,1]")__		this.transactionTimeoutWarningRatio = warningRatio__		return this__	};enables,logging,of,warnings,if,a,transaction,s,elapsed,time,reaches,a,specified,ratio,of,the,code,transaction,timeout,code,if,code,warning,ratio,code,is,0,a,warning,will,be,always,logged,when,committing,the,transaction,param,warning,ratio,a,value,in,the,range,0,1,return;protected,two,phase,commit,sink,function,in,txn,context,enable,transaction,timeout,warnings,double,warning,ratio,check,argument,warning,ratio,0,warning,ratio,1,warning,ratio,must,be,in,range,0,1,this,transaction,timeout,warning,ratio,warning,ratio,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings( 		double warningRatio);1542186519;Enables logging of warnings if a transaction's elapsed time reaches a specified ratio of_the <code>transactionTimeout</code>._If <code>warningRatio</code> is 0, a warning will be always logged when committing the_transaction.__@param warningRatio A value in the range [0,1]._@return;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings(_		double warningRatio) {_		checkArgument(warningRatio >= 0 && warningRatio <= 1,_			"warningRatio must be in range [0,1]")__		this.transactionTimeoutWarningRatio = warningRatio__		return this__	};enables,logging,of,warnings,if,a,transaction,s,elapsed,time,reaches,a,specified,ratio,of,the,code,transaction,timeout,code,if,code,warning,ratio,code,is,0,a,warning,will,be,always,logged,when,committing,the,transaction,param,warning,ratio,a,value,in,the,range,0,1,return;protected,two,phase,commit,sink,function,in,txn,context,enable,transaction,timeout,warnings,double,warning,ratio,check,argument,warning,ratio,0,warning,ratio,1,warning,ratio,must,be,in,range,0,1,this,transaction,timeout,warning,ratio,warning,ratio,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings( 		double warningRatio);1548860008;Enables logging of warnings if a transaction's elapsed time reaches a specified ratio of_the <code>transactionTimeout</code>._If <code>warningRatio</code> is 0, a warning will be always logged when committing the_transaction.__@param warningRatio A value in the range [0,1]._@return;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings(_		double warningRatio) {_		checkArgument(warningRatio >= 0 && warningRatio <= 1,_			"warningRatio must be in range [0,1]")__		this.transactionTimeoutWarningRatio = warningRatio__		return this__	};enables,logging,of,warnings,if,a,transaction,s,elapsed,time,reaches,a,specified,ratio,of,the,code,transaction,timeout,code,if,code,warning,ratio,code,is,0,a,warning,will,be,always,logged,when,committing,the,transaction,param,warning,ratio,a,value,in,the,range,0,1,return;protected,two,phase,commit,sink,function,in,txn,context,enable,transaction,timeout,warnings,double,warning,ratio,check,argument,warning,ratio,0,warning,ratio,1,warning,ratio,must,be,in,range,0,1,this,transaction,timeout,warning,ratio,warning,ratio,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings( 		double warningRatio);1550652777;Enables logging of warnings if a transaction's elapsed time reaches a specified ratio of_the <code>transactionTimeout</code>._If <code>warningRatio</code> is 0, a warning will be always logged when committing the_transaction.__@param warningRatio A value in the range [0,1]._@return;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> enableTransactionTimeoutWarnings(_		double warningRatio) {_		checkArgument(warningRatio >= 0 && warningRatio <= 1,_			"warningRatio must be in range [0,1]")__		this.transactionTimeoutWarningRatio = warningRatio__		return this__	};enables,logging,of,warnings,if,a,transaction,s,elapsed,time,reaches,a,specified,ratio,of,the,code,transaction,timeout,code,if,code,warning,ratio,code,is,0,a,warning,will,be,always,logged,when,committing,the,transaction,param,warning,ratio,a,value,in,the,range,0,1,return;protected,two,phase,commit,sink,function,in,txn,context,enable,transaction,timeout,warnings,double,warning,ratio,check,argument,warning,ratio,0,warning,ratio,1,warning,ratio,must,be,in,range,0,1,this,transaction,timeout,warning,ratio,warning,ratio,return,this
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1502083796;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1503491129;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1504010734;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1504010734;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1504010734;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1504010734;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1507568316;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1509523433;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1509523433;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1509597134;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1539149027;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1539149114;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1541587130;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1542186519;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1548860008;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract TXN beginTransaction() throws Exception_;1550652777;Method that starts a new transaction.__@return newly created transaction.;protected abstract TXN beginTransaction() throws Exception_;method,that,starts,a,new,transaction,return,newly,created,transaction;protected,abstract,txn,begin,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1502083796;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1503491129;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1504010734;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1504010734;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1504010734;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1504010734;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1507568316;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1509523433;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1509523433;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1509597134;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1539149027;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1539149114;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1541587130;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1542186519;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1548860008;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void preCommit(TXN transaction) throws Exception_;1550652777;Pre commit previously created transaction. Pre commit must make all of the necessary steps to prepare the_transaction for a commit that might happen in the future. After this point the transaction might still be_aborted, but underlying implementation must ensure that commit calls on already pre committed transactions_will always succeed.__<p>Usually implementation involves flushing the data.;protected abstract void preCommit(TXN transaction) throws Exception_;pre,commit,previously,created,transaction,pre,commit,must,make,all,of,the,necessary,steps,to,prepare,the,transaction,for,a,commit,that,might,happen,in,the,future,after,this,point,the,transaction,might,still,be,aborted,but,underlying,implementation,must,ensure,that,commit,calls,on,already,pre,committed,transactions,will,always,succeed,p,usually,implementation,involves,flushing,the,data;protected,abstract,void,pre,commit,txn,transaction,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1502083796;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1503491129;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1504010734;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1504010734;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1504010734;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1504010734;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1507568316;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1509523433;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1509523433;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1509597134;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1539149027;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1539149114;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1541587130;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1542186519;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1548860008;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> protected abstract void abort(TXN transaction)_;1550652777;Abort a transaction.;protected abstract void abort(TXN transaction)_;abort,a,transaction;protected,abstract,void,abort,txn,transaction
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction( 			TypeSerializer<TXN> transactionSerializer, 			TypeSerializer<CONTEXT> contextSerializer);1509523433;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>__@param transactionSerializer {@link TypeSerializer} for the transaction type of this sink_@param contextSerializer {@link TypeSerializer} for the context type of this sink;public TwoPhaseCommitSinkFunction(_			TypeSerializer<TXN> transactionSerializer,_			TypeSerializer<CONTEXT> contextSerializer) {__		this.stateDescriptor =_			new ListStateDescriptor<>(_					"state",_					new StateSerializer<>(transactionSerializer, contextSerializer))__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,transaction,serializer,link,type,serializer,for,the,transaction,type,of,this,sink,param,context,serializer,link,type,serializer,for,the,context,type,of,this,sink;public,two,phase,commit,sink,function,type,serializer,txn,transaction,serializer,type,serializer,context,context,serializer,this,state,descriptor,new,list,state,descriptor,state,new,state,serializer,transaction,serializer,context,serializer
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction( 			TypeSerializer<TXN> transactionSerializer, 			TypeSerializer<CONTEXT> contextSerializer);1509597134;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>__@param transactionSerializer {@link TypeSerializer} for the transaction type of this sink_@param contextSerializer {@link TypeSerializer} for the context type of this sink;public TwoPhaseCommitSinkFunction(_			TypeSerializer<TXN> transactionSerializer,_			TypeSerializer<CONTEXT> contextSerializer) {_		this(transactionSerializer, contextSerializer, Clock.systemUTC())__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,transaction,serializer,link,type,serializer,for,the,transaction,type,of,this,sink,param,context,serializer,link,type,serializer,for,the,context,type,of,this,sink;public,two,phase,commit,sink,function,type,serializer,txn,transaction,serializer,type,serializer,context,context,serializer,this,transaction,serializer,context,serializer,clock,system,utc
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction( 			TypeSerializer<TXN> transactionSerializer, 			TypeSerializer<CONTEXT> contextSerializer);1539149027;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>__@param transactionSerializer {@link TypeSerializer} for the transaction type of this sink_@param contextSerializer {@link TypeSerializer} for the context type of this sink;public TwoPhaseCommitSinkFunction(_			TypeSerializer<TXN> transactionSerializer,_			TypeSerializer<CONTEXT> contextSerializer) {_		this(transactionSerializer, contextSerializer, Clock.systemUTC())__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,transaction,serializer,link,type,serializer,for,the,transaction,type,of,this,sink,param,context,serializer,link,type,serializer,for,the,context,type,of,this,sink;public,two,phase,commit,sink,function,type,serializer,txn,transaction,serializer,type,serializer,context,context,serializer,this,transaction,serializer,context,serializer,clock,system,utc
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction( 			TypeSerializer<TXN> transactionSerializer, 			TypeSerializer<CONTEXT> contextSerializer);1539149114;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>__@param transactionSerializer {@link TypeSerializer} for the transaction type of this sink_@param contextSerializer {@link TypeSerializer} for the context type of this sink;public TwoPhaseCommitSinkFunction(_			TypeSerializer<TXN> transactionSerializer,_			TypeSerializer<CONTEXT> contextSerializer) {_		this(transactionSerializer, contextSerializer, Clock.systemUTC())__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,transaction,serializer,link,type,serializer,for,the,transaction,type,of,this,sink,param,context,serializer,link,type,serializer,for,the,context,type,of,this,sink;public,two,phase,commit,sink,function,type,serializer,txn,transaction,serializer,type,serializer,context,context,serializer,this,transaction,serializer,context,serializer,clock,system,utc
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction( 			TypeSerializer<TXN> transactionSerializer, 			TypeSerializer<CONTEXT> contextSerializer);1541587130;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>__@param transactionSerializer {@link TypeSerializer} for the transaction type of this sink_@param contextSerializer {@link TypeSerializer} for the context type of this sink;public TwoPhaseCommitSinkFunction(_			TypeSerializer<TXN> transactionSerializer,_			TypeSerializer<CONTEXT> contextSerializer) {_		this(transactionSerializer, contextSerializer, Clock.systemUTC())__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,transaction,serializer,link,type,serializer,for,the,transaction,type,of,this,sink,param,context,serializer,link,type,serializer,for,the,context,type,of,this,sink;public,two,phase,commit,sink,function,type,serializer,txn,transaction,serializer,type,serializer,context,context,serializer,this,transaction,serializer,context,serializer,clock,system,utc
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction( 			TypeSerializer<TXN> transactionSerializer, 			TypeSerializer<CONTEXT> contextSerializer);1542186519;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>__@param transactionSerializer {@link TypeSerializer} for the transaction type of this sink_@param contextSerializer {@link TypeSerializer} for the context type of this sink;public TwoPhaseCommitSinkFunction(_			TypeSerializer<TXN> transactionSerializer,_			TypeSerializer<CONTEXT> contextSerializer) {_		this(transactionSerializer, contextSerializer, Clock.systemUTC())__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,transaction,serializer,link,type,serializer,for,the,transaction,type,of,this,sink,param,context,serializer,link,type,serializer,for,the,context,type,of,this,sink;public,two,phase,commit,sink,function,type,serializer,txn,transaction,serializer,type,serializer,context,context,serializer,this,transaction,serializer,context,serializer,clock,system,utc
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction( 			TypeSerializer<TXN> transactionSerializer, 			TypeSerializer<CONTEXT> contextSerializer);1548860008;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>__@param transactionSerializer {@link TypeSerializer} for the transaction type of this sink_@param contextSerializer {@link TypeSerializer} for the context type of this sink;public TwoPhaseCommitSinkFunction(_			TypeSerializer<TXN> transactionSerializer,_			TypeSerializer<CONTEXT> contextSerializer) {_		this(transactionSerializer, contextSerializer, Clock.systemUTC())__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,transaction,serializer,link,type,serializer,for,the,transaction,type,of,this,sink,param,context,serializer,link,type,serializer,for,the,context,type,of,this,sink;public,two,phase,commit,sink,function,type,serializer,txn,transaction,serializer,type,serializer,context,context,serializer,this,transaction,serializer,context,serializer,clock,system,utc
TwoPhaseCommitSinkFunction -> public TwoPhaseCommitSinkFunction( 			TypeSerializer<TXN> transactionSerializer, 			TypeSerializer<CONTEXT> contextSerializer);1550652777;Use default {@link ListStateDescriptor} for internal state serialization. Helpful utilities for using this_constructor are {@link TypeInformation#of(Class)}, {@link org.apache.flink.api.common.typeinfo.TypeHint} and_{@link TypeInformation#of(TypeHint)}. Example:_<pre>_{@code_TwoPhaseCommitSinkFunction(TypeInformation.of(new TypeHint<State<TXN, CONTEXT>>() {}))___</pre>__@param transactionSerializer {@link TypeSerializer} for the transaction type of this sink_@param contextSerializer {@link TypeSerializer} for the context type of this sink;public TwoPhaseCommitSinkFunction(_			TypeSerializer<TXN> transactionSerializer,_			TypeSerializer<CONTEXT> contextSerializer) {_		this(transactionSerializer, contextSerializer, Clock.systemUTC())__	};use,default,link,list,state,descriptor,for,internal,state,serialization,helpful,utilities,for,using,this,constructor,are,link,type,information,of,class,link,org,apache,flink,api,common,typeinfo,type,hint,and,link,type,information,of,type,hint,example,pre,code,two,phase,commit,sink,function,type,information,of,new,type,hint,state,txn,context,pre,param,transaction,serializer,link,type,serializer,for,the,transaction,type,of,this,sink,param,context,serializer,link,type,serializer,for,the,context,type,of,this,sink;public,two,phase,commit,sink,function,type,serializer,txn,transaction,serializer,type,serializer,context,context,serializer,this,transaction,serializer,context,serializer,clock,system,utc
TwoPhaseCommitSinkFunction -> private TransactionHolder<TXN> beginTransactionInternal() throws Exception;1509597134;This method must be the only place to call {@link #beginTransaction()} to ensure that the_{@link TransactionHolder} is created at the same time.;private TransactionHolder<TXN> beginTransactionInternal() throws Exception {_		return new TransactionHolder<>(beginTransaction(), clock.millis())__	};this,method,must,be,the,only,place,to,call,link,begin,transaction,to,ensure,that,the,link,transaction,holder,is,created,at,the,same,time;private,transaction,holder,txn,begin,transaction,internal,throws,exception,return,new,transaction,holder,begin,transaction,clock,millis
TwoPhaseCommitSinkFunction -> private TransactionHolder<TXN> beginTransactionInternal() throws Exception;1539149027;This method must be the only place to call {@link #beginTransaction()} to ensure that the_{@link TransactionHolder} is created at the same time.;private TransactionHolder<TXN> beginTransactionInternal() throws Exception {_		return new TransactionHolder<>(beginTransaction(), clock.millis())__	};this,method,must,be,the,only,place,to,call,link,begin,transaction,to,ensure,that,the,link,transaction,holder,is,created,at,the,same,time;private,transaction,holder,txn,begin,transaction,internal,throws,exception,return,new,transaction,holder,begin,transaction,clock,millis
TwoPhaseCommitSinkFunction -> private TransactionHolder<TXN> beginTransactionInternal() throws Exception;1539149114;This method must be the only place to call {@link #beginTransaction()} to ensure that the_{@link TransactionHolder} is created at the same time.;private TransactionHolder<TXN> beginTransactionInternal() throws Exception {_		return new TransactionHolder<>(beginTransaction(), clock.millis())__	};this,method,must,be,the,only,place,to,call,link,begin,transaction,to,ensure,that,the,link,transaction,holder,is,created,at,the,same,time;private,transaction,holder,txn,begin,transaction,internal,throws,exception,return,new,transaction,holder,begin,transaction,clock,millis
TwoPhaseCommitSinkFunction -> private TransactionHolder<TXN> beginTransactionInternal() throws Exception;1541587130;This method must be the only place to call {@link #beginTransaction()} to ensure that the_{@link TransactionHolder} is created at the same time.;private TransactionHolder<TXN> beginTransactionInternal() throws Exception {_		return new TransactionHolder<>(beginTransaction(), clock.millis())__	};this,method,must,be,the,only,place,to,call,link,begin,transaction,to,ensure,that,the,link,transaction,holder,is,created,at,the,same,time;private,transaction,holder,txn,begin,transaction,internal,throws,exception,return,new,transaction,holder,begin,transaction,clock,millis
TwoPhaseCommitSinkFunction -> private TransactionHolder<TXN> beginTransactionInternal() throws Exception;1542186519;This method must be the only place to call {@link #beginTransaction()} to ensure that the_{@link TransactionHolder} is created at the same time.;private TransactionHolder<TXN> beginTransactionInternal() throws Exception {_		return new TransactionHolder<>(beginTransaction(), clock.millis())__	};this,method,must,be,the,only,place,to,call,link,begin,transaction,to,ensure,that,the,link,transaction,holder,is,created,at,the,same,time;private,transaction,holder,txn,begin,transaction,internal,throws,exception,return,new,transaction,holder,begin,transaction,clock,millis
TwoPhaseCommitSinkFunction -> private TransactionHolder<TXN> beginTransactionInternal() throws Exception;1548860008;This method must be the only place to call {@link #beginTransaction()} to ensure that the_{@link TransactionHolder} is created at the same time.;private TransactionHolder<TXN> beginTransactionInternal() throws Exception {_		return new TransactionHolder<>(beginTransaction(), clock.millis())__	};this,method,must,be,the,only,place,to,call,link,begin,transaction,to,ensure,that,the,link,transaction,holder,is,created,at,the,same,time;private,transaction,holder,txn,begin,transaction,internal,throws,exception,return,new,transaction,holder,begin,transaction,clock,millis
TwoPhaseCommitSinkFunction -> private TransactionHolder<TXN> beginTransactionInternal() throws Exception;1550652777;This method must be the only place to call {@link #beginTransaction()} to ensure that the_{@link TransactionHolder} is created at the same time.;private TransactionHolder<TXN> beginTransactionInternal() throws Exception {_		return new TransactionHolder<>(beginTransaction(), clock.millis())__	};this,method,must,be,the,only,place,to,call,link,begin,transaction,to,ensure,that,the,link,transaction,holder,is,created,at,the,same,time;private,transaction,holder,txn,begin,transaction,internal,throws,exception,return,new,transaction,holder,begin,transaction,clock,millis
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout();1509597134;If called, the sink will only log but not propagate exceptions thrown in_{@link #recoverAndCommit(Object)} if the transaction is older than a specified transaction_timeout. The start time of an transaction is determined by {@link System#currentTimeMillis()}._By default, failures are propagated.;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout() {_		this.ignoreFailuresAfterTransactionTimeout = true__		return this__	};if,called,the,sink,will,only,log,but,not,propagate,exceptions,thrown,in,link,recover,and,commit,object,if,the,transaction,is,older,than,a,specified,transaction,timeout,the,start,time,of,an,transaction,is,determined,by,link,system,current,time,millis,by,default,failures,are,propagated;protected,two,phase,commit,sink,function,in,txn,context,ignore,failures,after,transaction,timeout,this,ignore,failures,after,transaction,timeout,true,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout();1539149027;If called, the sink will only log but not propagate exceptions thrown in_{@link #recoverAndCommit(Object)} if the transaction is older than a specified transaction_timeout. The start time of an transaction is determined by {@link System#currentTimeMillis()}._By default, failures are propagated.;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout() {_		this.ignoreFailuresAfterTransactionTimeout = true__		return this__	};if,called,the,sink,will,only,log,but,not,propagate,exceptions,thrown,in,link,recover,and,commit,object,if,the,transaction,is,older,than,a,specified,transaction,timeout,the,start,time,of,an,transaction,is,determined,by,link,system,current,time,millis,by,default,failures,are,propagated;protected,two,phase,commit,sink,function,in,txn,context,ignore,failures,after,transaction,timeout,this,ignore,failures,after,transaction,timeout,true,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout();1539149114;If called, the sink will only log but not propagate exceptions thrown in_{@link #recoverAndCommit(Object)} if the transaction is older than a specified transaction_timeout. The start time of an transaction is determined by {@link System#currentTimeMillis()}._By default, failures are propagated.;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout() {_		this.ignoreFailuresAfterTransactionTimeout = true__		return this__	};if,called,the,sink,will,only,log,but,not,propagate,exceptions,thrown,in,link,recover,and,commit,object,if,the,transaction,is,older,than,a,specified,transaction,timeout,the,start,time,of,an,transaction,is,determined,by,link,system,current,time,millis,by,default,failures,are,propagated;protected,two,phase,commit,sink,function,in,txn,context,ignore,failures,after,transaction,timeout,this,ignore,failures,after,transaction,timeout,true,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout();1541587130;If called, the sink will only log but not propagate exceptions thrown in_{@link #recoverAndCommit(Object)} if the transaction is older than a specified transaction_timeout. The start time of an transaction is determined by {@link System#currentTimeMillis()}._By default, failures are propagated.;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout() {_		this.ignoreFailuresAfterTransactionTimeout = true__		return this__	};if,called,the,sink,will,only,log,but,not,propagate,exceptions,thrown,in,link,recover,and,commit,object,if,the,transaction,is,older,than,a,specified,transaction,timeout,the,start,time,of,an,transaction,is,determined,by,link,system,current,time,millis,by,default,failures,are,propagated;protected,two,phase,commit,sink,function,in,txn,context,ignore,failures,after,transaction,timeout,this,ignore,failures,after,transaction,timeout,true,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout();1542186519;If called, the sink will only log but not propagate exceptions thrown in_{@link #recoverAndCommit(Object)} if the transaction is older than a specified transaction_timeout. The start time of an transaction is determined by {@link System#currentTimeMillis()}._By default, failures are propagated.;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout() {_		this.ignoreFailuresAfterTransactionTimeout = true__		return this__	};if,called,the,sink,will,only,log,but,not,propagate,exceptions,thrown,in,link,recover,and,commit,object,if,the,transaction,is,older,than,a,specified,transaction,timeout,the,start,time,of,an,transaction,is,determined,by,link,system,current,time,millis,by,default,failures,are,propagated;protected,two,phase,commit,sink,function,in,txn,context,ignore,failures,after,transaction,timeout,this,ignore,failures,after,transaction,timeout,true,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout();1548860008;If called, the sink will only log but not propagate exceptions thrown in_{@link #recoverAndCommit(Object)} if the transaction is older than a specified transaction_timeout. The start time of an transaction is determined by {@link System#currentTimeMillis()}._By default, failures are propagated.;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout() {_		this.ignoreFailuresAfterTransactionTimeout = true__		return this__	};if,called,the,sink,will,only,log,but,not,propagate,exceptions,thrown,in,link,recover,and,commit,object,if,the,transaction,is,older,than,a,specified,transaction,timeout,the,start,time,of,an,transaction,is,determined,by,link,system,current,time,millis,by,default,failures,are,propagated;protected,two,phase,commit,sink,function,in,txn,context,ignore,failures,after,transaction,timeout,this,ignore,failures,after,transaction,timeout,true,return,this
TwoPhaseCommitSinkFunction -> protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout();1550652777;If called, the sink will only log but not propagate exceptions thrown in_{@link #recoverAndCommit(Object)} if the transaction is older than a specified transaction_timeout. The start time of an transaction is determined by {@link System#currentTimeMillis()}._By default, failures are propagated.;protected TwoPhaseCommitSinkFunction<IN, TXN, CONTEXT> ignoreFailuresAfterTransactionTimeout() {_		this.ignoreFailuresAfterTransactionTimeout = true__		return this__	};if,called,the,sink,will,only,log,but,not,propagate,exceptions,thrown,in,link,recover,and,commit,object,if,the,transaction,is,older,than,a,specified,transaction,timeout,the,start,time,of,an,transaction,is,determined,by,link,system,current,time,millis,by,default,failures,are,propagated;protected,two,phase,commit,sink,function,in,txn,context,ignore,failures,after,transaction,timeout,this,ignore,failures,after,transaction,timeout,true,return,this
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1507568316;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1509523433;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1509523433;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1509597134;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1539149027;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1539149114;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1541587130;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1542186519;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1548860008;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
TwoPhaseCommitSinkFunction -> protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;1550652777;Write value within a transaction.;protected abstract void invoke(TXN transaction, IN value, Context context) throws Exception_;write,value,within,a,transaction;protected,abstract,void,invoke,txn,transaction,in,value,context,context,throws,exception
