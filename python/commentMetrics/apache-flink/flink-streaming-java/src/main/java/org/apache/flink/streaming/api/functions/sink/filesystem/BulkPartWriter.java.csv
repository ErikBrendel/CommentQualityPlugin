commented;modifiers;parameterAmount;loc;comment;code
false;;2;5;;@Override void write(IN element, long currentTime) throws IOException {     writer.addElement(element).     markWrite(currentTime). }
false;;0;4;;@Override RecoverableWriter.ResumeRecoverable persist() {     throw new UnsupportedOperationException("Bulk Part Writers do not support \"pause and resume\" operations."). }
false;;0;6;;@Override RecoverableWriter.CommitRecoverable closeForCommit() throws IOException {     writer.flush().     writer.finish().     return super.closeForCommit(). }
false;public;4;13;;@Override public PartFileWriter<IN, BucketID> resumeFrom(final BucketID bucketId, final RecoverableFsDataOutputStream stream, final RecoverableWriter.ResumeRecoverable resumable, final long creationTime) throws IOException {     Preconditions.checkNotNull(stream).     Preconditions.checkNotNull(resumable).     final BulkWriter<IN> writer = writerFactory.create(stream).     return new BulkPartWriter<>(bucketId, stream, writer, creationTime). }
false;public;4;13;;@Override public PartFileWriter<IN, BucketID> openNew(final BucketID bucketId, final RecoverableFsDataOutputStream stream, final Path path, final long creationTime) throws IOException {     Preconditions.checkNotNull(stream).     Preconditions.checkNotNull(path).     final BulkWriter<IN> writer = writerFactory.create(stream).     return new BulkPartWriter<>(bucketId, stream, writer, creationTime). }
