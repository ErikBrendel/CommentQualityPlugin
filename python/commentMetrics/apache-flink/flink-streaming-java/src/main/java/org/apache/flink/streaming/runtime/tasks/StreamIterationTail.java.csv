commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Override public void init() throws Exception {     final String iterationId = getConfiguration().getIterationId().     if (iterationId == null || iterationId.length() == 0) {         throw new Exception("Missing iteration ID in the task configuration").     }     final String brokerID = StreamIterationHead.createBrokerIdString(getEnvironment().getJobID(), iterationId, getEnvironment().getTaskInfo().getIndexOfThisSubtask()).     final long iterationWaitTime = getConfiguration().getIterationWaitTime().     LOG.info("Iteration tail {} trying to acquire feedback queue under {}", getName(), brokerID).     @SuppressWarnings("unchecked")     BlockingQueue<StreamRecord<IN>> dataChannel = (BlockingQueue<StreamRecord<IN>>) BlockingQueueBroker.INSTANCE.get(brokerID).     LOG.info("Iteration tail {} acquired feedback queue {}", getName(), brokerID).     this.headOperator = new RecordPusher<>().     this.headOperator.setup(this, getConfiguration(), new IterationTailOutput<>(dataChannel, iterationWaitTime)).     // call super.init() last because that needs this.headOperator to be set up     super.init(). }
false;public;1;4;;@Override public void processElement(StreamRecord<IN> record) throws Exception {     output.collect(record). }
false;public;1;4;;@Override public void processWatermark(Watermark mark) { // ignore }
false;public;1;4;;@Override public void processLatencyMarker(LatencyMarker latencyMarker) throws Exception { // ignore }
false;public;1;3;;@Override public void emitWatermark(Watermark mark) { }
false;public;1;3;;@Override public void emitLatencyMarker(LatencyMarker latencyMarker) { }
false;public;1;13;;@Override public void collect(StreamRecord<IN> record) {     try {         if (shouldWait) {             dataChannel.offer(record, iterationWaitTime, TimeUnit.MILLISECONDS).         } else {             dataChannel.put(record).         }     } catch (InterruptedException e) {         throw new RuntimeException(e).     } }
false;public;2;5;;@Override public <X> void collect(OutputTag<X> outputTag, StreamRecord<X> record) {     throw new UnsupportedOperationException("Side outputs not used in iteration tail"). }
false;public;0;3;;@Override public void close() { }
