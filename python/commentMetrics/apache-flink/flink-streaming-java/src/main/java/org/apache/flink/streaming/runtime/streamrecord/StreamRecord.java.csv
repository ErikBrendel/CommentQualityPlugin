commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the value wrapped in this stream value.  */ ;// ------------------------------------------------------------------------ // Accessors // ------------------------------------------------------------------------ /**  * Returns the value wrapped in this stream value.  */ public T getValue() {     return value. }
true;public;0;10;/**  * Returns the timestamp associated with this stream value in milliseconds.  */ ;/**  * Returns the timestamp associated with this stream value in milliseconds.  */ public long getTimestamp() {     if (hasTimestamp) {         return timestamp.     } else {         return Long.MIN_VALUE.     // throw new IllegalStateException(     // "Record has no timestamp. Is the time characteristic set to 'ProcessingTime', or " +     // "did you forget to call 'DataStream.assignTimestampsAndWatermarks(...)'?").     } }
true;public;0;3;/**  * Checks whether this record has a timestamp.  *  * @return True if the record has a timestamp, false if not.  */ ;/**  * Checks whether this record has a timestamp.  *  * @return True if the record has a timestamp, false if not.  */ public boolean hasTimestamp() {     return hasTimestamp. }
true;public;1;5;/**  * Replace the currently stored value by the given new value. This returns a StreamElement  * with the generic type parameter that matches the new value while keeping the old  * timestamp.  *  * @param element Element to set in this stream value  * @return Returns the StreamElement with replaced value  */ ;// ------------------------------------------------------------------------ // Updating // ------------------------------------------------------------------------ /**  * Replace the currently stored value by the given new value. This returns a StreamElement  * with the generic type parameter that matches the new value while keeping the old  * timestamp.  *  * @param element Element to set in this stream value  * @return Returns the StreamElement with replaced value  */ @SuppressWarnings("unchecked") public <X> StreamRecord<X> replace(X element) {     this.value = (T) element.     return (StreamRecord<X>) this. }
true;public;2;8;/**  * Replace the currently stored value by the given new value and the currently stored  * timestamp with the new timestamp. This returns a StreamElement with the generic type  * parameter that matches the new value.  *  * @param value The new value to wrap in this StreamRecord  * @param timestamp The new timestamp in milliseconds  * @return Returns the StreamElement with replaced value  */ ;/**  * Replace the currently stored value by the given new value and the currently stored  * timestamp with the new timestamp. This returns a StreamElement with the generic type  * parameter that matches the new value.  *  * @param value The new value to wrap in this StreamRecord  * @param timestamp The new timestamp in milliseconds  * @return Returns the StreamElement with replaced value  */ @SuppressWarnings("unchecked") public <X> StreamRecord<X> replace(X value, long timestamp) {     this.timestamp = timestamp.     this.value = (T) value.     this.hasTimestamp = true.     return (StreamRecord<X>) this. }
false;public;1;4;;public void setTimestamp(long timestamp) {     this.timestamp = timestamp.     this.hasTimestamp = true. }
false;public;0;3;;public void eraseTimestamp() {     this.hasTimestamp = false. }
true;public;1;6;/**  * Creates a copy of this stream record. Uses the copied value as the value for the new  * record, i.e., only copies timestamp fields.  */ ;// ------------------------------------------------------------------------ // Copying // ------------------------------------------------------------------------ /**  * Creates a copy of this stream record. Uses the copied value as the value for the new  * record, i.e., only copies timestamp fields.  */ public StreamRecord<T> copy(T valueCopy) {     StreamRecord<T> copy = new StreamRecord<>(valueCopy).     copy.timestamp = this.timestamp.     copy.hasTimestamp = this.hasTimestamp.     return copy. }
true;public;2;5;/**  * Copies this record into the new stream record. Uses the copied value as the value for the new  * record, i.e., only copies timestamp fields.  */ ;/**  * Copies this record into the new stream record. Uses the copied value as the value for the new  * record, i.e., only copies timestamp fields.  */ public void copyTo(T valueCopy, StreamRecord<T> target) {     target.value = valueCopy.     target.timestamp = this.timestamp.     target.hasTimestamp = this.hasTimestamp. }
false;public;1;15;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ @Override public boolean equals(Object o) {     if (this == o) {         return true.     } else if (o != null && getClass() == o.getClass()) {         StreamRecord<?> that = (StreamRecord<?>) o.         return this.hasTimestamp == that.hasTimestamp && (!this.hasTimestamp || this.timestamp == that.timestamp) && (this.value == null ? that.value == null : this.value.equals(that.value)).     } else {         return false.     } }
false;public;0;5;;@Override public int hashCode() {     int result = value != null ? value.hashCode() : 0.     return 31 * result + (hasTimestamp ? (int) (timestamp ^ (timestamp >>> 32)) : 0). }
false;public;0;4;;@Override public String toString() {     return "Record @ " + (hasTimestamp ? timestamp : "(undef)") + " : " + value. }
