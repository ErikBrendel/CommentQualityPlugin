commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the current processing time.  */ ;/**  * Returns the current processing time.  */ long currentProcessingTime().
true;;0;1;/**  * Returns the current event-time watermark.  */ ;/**  * Returns the current event-time watermark.  */ long currentWatermark().
true;;1;1;/**  * Registers a timer to be fired when processing time passes the given time.  *  * <p>Timers can internally be scoped to keys and/or windows. When you set a timer  * in a keyed context, such as in an operation on  * {@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context  * will also be active when you receive the timer notification.  */ ;/**  * Registers a timer to be fired when processing time passes the given time.  *  * <p>Timers can internally be scoped to keys and/or windows. When you set a timer  * in a keyed context, such as in an operation on  * {@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context  * will also be active when you receive the timer notification.  */ void registerProcessingTimeTimer(long time).
true;;1;1;/**  * Registers a timer to be fired when the event time watermark passes the given time.  *  * <p>Timers can internally be scoped to keys and/or windows. When you set a timer  * in a keyed context, such as in an operation on  * {@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context  * will also be active when you receive the timer notification.  */ ;/**  * Registers a timer to be fired when the event time watermark passes the given time.  *  * <p>Timers can internally be scoped to keys and/or windows. When you set a timer  * in a keyed context, such as in an operation on  * {@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context  * will also be active when you receive the timer notification.  */ void registerEventTimeTimer(long time).
true;;1;1;/**  * Deletes the processing-time timer with the given trigger time. This method has only an effect if such a timer  * was previously registered and did not already expire.  *  * <p>Timers can internally be scoped to keys and/or windows. When you delete a timer,  * it is removed from the current keyed context.  */ ;/**  * Deletes the processing-time timer with the given trigger time. This method has only an effect if such a timer  * was previously registered and did not already expire.  *  * <p>Timers can internally be scoped to keys and/or windows. When you delete a timer,  * it is removed from the current keyed context.  */ void deleteProcessingTimeTimer(long time).
true;;1;1;/**  * Deletes the event-time timer with the given trigger time. This method has only an effect if such a timer  * was previously registered and did not already expire.  *  * <p>Timers can internally be scoped to keys and/or windows. When you delete a timer,  * it is removed from the current keyed context.  */ ;/**  * Deletes the event-time timer with the given trigger time. This method has only an effect if such a timer  * was previously registered and did not already expire.  *  * <p>Timers can internally be scoped to keys and/or windows. When you delete a timer,  * it is removed from the current keyed context.  */ void deleteEventTimeTimer(long time).
