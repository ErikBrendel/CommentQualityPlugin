commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Extracts the timestamp from the given element. The timestamp must be monotonically increasing.  *  * @param element The element that the timestamp is extracted from.  * @return The new timestamp.  */ ;/**  * Extracts the timestamp from the given element. The timestamp must be monotonically increasing.  *  * @param element The element that the timestamp is extracted from.  * @return The new timestamp.  */ public abstract long extractAscendingTimestamp(T element).
true;public;1;4;/**  * Sets the handler for violations to the ascending timestamp order.  *  * @param handler The violation handler to use.  * @return This extractor.  */ ;/**  * Sets the handler for violations to the ascending timestamp order.  *  * @param handler The violation handler to use.  * @return This extractor.  */ public AscendingTimestampExtractor<T> withViolationHandler(MonotonyViolationHandler handler) {     this.violationHandler = requireNonNull(handler).     return this. }
false;public,final;2;11;;// ------------------------------------------------------------------------ @Override public final long extractTimestamp(T element, long elementPrevTimestamp) {     final long newTimestamp = extractAscendingTimestamp(element).     if (newTimestamp >= this.currentTimestamp) {         this.currentTimestamp = newTimestamp.         return newTimestamp.     } else {         violationHandler.handleViolation(newTimestamp, this.currentTimestamp).         return newTimestamp.     } }
false;public,final;0;4;;@Override public final Watermark getCurrentWatermark() {     return new Watermark(currentTimestamp == Long.MIN_VALUE ? Long.MIN_VALUE : currentTimestamp - 1). }
true;;2;1;/**  * Called when the property of monotonously ascending timestamps is violated, i.e.,  * when {@code elementTimestamp < lastTimestamp}.  *  * @param elementTimestamp The timestamp of the current element.  * @param lastTimestamp The last timestamp.  */ ;/**  * Called when the property of monotonously ascending timestamps is violated, i.e.,  * when {@code elementTimestamp < lastTimestamp}.  *  * @param elementTimestamp The timestamp of the current element.  * @param lastTimestamp The last timestamp.  */ void handleViolation(long elementTimestamp, long lastTimestamp).
false;public;2;2;;@Override public void handleViolation(long elementTimestamp, long lastTimestamp) { }
false;public;2;5;;@Override public void handleViolation(long elementTimestamp, long lastTimestamp) {     throw new RuntimeException("Ascending timestamps condition violated. Element timestamp " + elementTimestamp + " is smaller than last timestamp " + lastTimestamp). }
false;public;2;4;;@Override public void handleViolation(long elementTimestamp, long lastTimestamp) {     LOG.warn("Timestamp monotony violated: {} < {}", elementTimestamp, lastTimestamp). }
