# id;timestamp;commentText;codeText;commentWords;codeWords
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1475231926;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when a function is executed as part of a recovery run._<p>_Note that restoreState() is called before open().__@param state The state to be restored as a list of atomic sub-states.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,a,function,is,executed,as,part,of,a,recovery,run,p,note,that,restore,state,is,called,before,open,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1475688972;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when a function is executed as part of a recovery run._<p>_Note that restoreState() is called before open().__@param state The state to be restored as a list of atomic sub-states.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,a,function,is,executed,as,part,of,a,recovery,run,p,note,that,restore,state,is,called,before,open,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1481797323;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when a function is executed as part of a recovery run._<p>_Note that restoreState() is called before open().__@param state The state to be restored as a list of atomic sub-states.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,a,function,is,executed,as,part,of,a,recovery,run,p,note,that,restore,state,is,called,before,open,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1485274812;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when the function is executed after a failure recovery._The state list may be empty if no state is to be recovered by the particular parallel instance_of the function.__<p>The given state list will contain all the <i>sub states</i> that this parallel_instance of the function needs to handle. Refer to the  {@link ListCheckpointed class docs}_for an illustration how list-style state redistribution works.__<p><b>Important:</b> When implementing this interface together with {@link RichFunction},_then the {@code restoreState()} method is called before {@link RichFunction#open(Configuration)}.__@param state The state to be restored as a list of atomic sub-states.__@throws Exception Throwing an exception in this method causes the recovery to fail._The exact consequence depends on the configured failure handling strategy,_but typically the system will re-attempt the recovery, or try recovering_from a different checkpoint.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,the,function,is,executed,after,a,failure,recovery,the,state,list,may,be,empty,if,no,state,is,to,be,recovered,by,the,particular,parallel,instance,of,the,function,p,the,given,state,list,will,contain,all,the,i,sub,states,i,that,this,parallel,instance,of,the,function,needs,to,handle,refer,to,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,b,important,b,when,implementing,this,interface,together,with,link,rich,function,then,the,code,restore,state,method,is,called,before,link,rich,function,open,configuration,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states,throws,exception,throwing,an,exception,in,this,method,causes,the,recovery,to,fail,the,exact,consequence,depends,on,the,configured,failure,handling,strategy,but,typically,the,system,will,re,attempt,the,recovery,or,try,recovering,from,a,different,checkpoint;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1493195810;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when the function is executed after a failure recovery._The state list may be empty if no state is to be recovered by the particular parallel instance_of the function.__<p>The given state list will contain all the <i>sub states</i> that this parallel_instance of the function needs to handle. Refer to the  {@link ListCheckpointed class docs}_for an illustration how list-style state redistribution works.__<p><b>Important:</b> When implementing this interface together with {@link RichFunction},_then the {@code restoreState()} method is called before {@link RichFunction#open(Configuration)}.__@param state The state to be restored as a list of atomic sub-states.__@throws Exception Throwing an exception in this method causes the recovery to fail._The exact consequence depends on the configured failure handling strategy,_but typically the system will re-attempt the recovery, or try recovering_from a different checkpoint.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,the,function,is,executed,after,a,failure,recovery,the,state,list,may,be,empty,if,no,state,is,to,be,recovered,by,the,particular,parallel,instance,of,the,function,p,the,given,state,list,will,contain,all,the,i,sub,states,i,that,this,parallel,instance,of,the,function,needs,to,handle,refer,to,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,b,important,b,when,implementing,this,interface,together,with,link,rich,function,then,the,code,restore,state,method,is,called,before,link,rich,function,open,configuration,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states,throws,exception,throwing,an,exception,in,this,method,causes,the,recovery,to,fail,the,exact,consequence,depends,on,the,configured,failure,handling,strategy,but,typically,the,system,will,re,attempt,the,recovery,or,try,recovering,from,a,different,checkpoint;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1493195810;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when the function is executed after a failure recovery._The state list may be empty if no state is to be recovered by the particular parallel instance_of the function.__<p>The given state list will contain all the <i>sub states</i> that this parallel_instance of the function needs to handle. Refer to the  {@link ListCheckpointed class docs}_for an illustration how list-style state redistribution works.__<p><b>Important:</b> When implementing this interface together with {@link RichFunction},_then the {@code restoreState()} method is called before {@link RichFunction#open(Configuration)}.__@param state The state to be restored as a list of atomic sub-states.__@throws Exception Throwing an exception in this method causes the recovery to fail._The exact consequence depends on the configured failure handling strategy,_but typically the system will re-attempt the recovery, or try recovering_from a different checkpoint.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,the,function,is,executed,after,a,failure,recovery,the,state,list,may,be,empty,if,no,state,is,to,be,recovered,by,the,particular,parallel,instance,of,the,function,p,the,given,state,list,will,contain,all,the,i,sub,states,i,that,this,parallel,instance,of,the,function,needs,to,handle,refer,to,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,b,important,b,when,implementing,this,interface,together,with,link,rich,function,then,the,code,restore,state,method,is,called,before,link,rich,function,open,configuration,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states,throws,exception,throwing,an,exception,in,this,method,causes,the,recovery,to,fail,the,exact,consequence,depends,on,the,configured,failure,handling,strategy,but,typically,the,system,will,re,attempt,the,recovery,or,try,recovering,from,a,different,checkpoint;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1493195810;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when the function is executed after a failure recovery._The state list may be empty if no state is to be recovered by the particular parallel instance_of the function.__<p>The given state list will contain all the <i>sub states</i> that this parallel_instance of the function needs to handle. Refer to the  {@link ListCheckpointed class docs}_for an illustration how list-style state redistribution works.__<p><b>Important:</b> When implementing this interface together with {@link RichFunction},_then the {@code restoreState()} method is called before {@link RichFunction#open(Configuration)}.__@param state The state to be restored as a list of atomic sub-states.__@throws Exception Throwing an exception in this method causes the recovery to fail._The exact consequence depends on the configured failure handling strategy,_but typically the system will re-attempt the recovery, or try recovering_from a different checkpoint.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,the,function,is,executed,after,a,failure,recovery,the,state,list,may,be,empty,if,no,state,is,to,be,recovered,by,the,particular,parallel,instance,of,the,function,p,the,given,state,list,will,contain,all,the,i,sub,states,i,that,this,parallel,instance,of,the,function,needs,to,handle,refer,to,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,b,important,b,when,implementing,this,interface,together,with,link,rich,function,then,the,code,restore,state,method,is,called,before,link,rich,function,open,configuration,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states,throws,exception,throwing,an,exception,in,this,method,causes,the,recovery,to,fail,the,exact,consequence,depends,on,the,configured,failure,handling,strategy,but,typically,the,system,will,re,attempt,the,recovery,or,try,recovering,from,a,different,checkpoint;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1495484544;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when the function is executed after a failure recovery._The state list may be empty if no state is to be recovered by the particular parallel instance_of the function.__<p>The given state list will contain all the <i>sub states</i> that this parallel_instance of the function needs to handle. Refer to the  {@link ListCheckpointed class docs}_for an illustration how list-style state redistribution works.__<p><b>Important:</b> When implementing this interface together with {@link RichFunction},_then the {@code restoreState()} method is called before {@link RichFunction#open(Configuration)}.__@param state The state to be restored as a list of atomic sub-states.__@throws Exception Throwing an exception in this method causes the recovery to fail._The exact consequence depends on the configured failure handling strategy,_but typically the system will re-attempt the recovery, or try recovering_from a different checkpoint.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,the,function,is,executed,after,a,failure,recovery,the,state,list,may,be,empty,if,no,state,is,to,be,recovered,by,the,particular,parallel,instance,of,the,function,p,the,given,state,list,will,contain,all,the,i,sub,states,i,that,this,parallel,instance,of,the,function,needs,to,handle,refer,to,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,b,important,b,when,implementing,this,interface,together,with,link,rich,function,then,the,code,restore,state,method,is,called,before,link,rich,function,open,configuration,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states,throws,exception,throwing,an,exception,in,this,method,causes,the,recovery,to,fail,the,exact,consequence,depends,on,the,configured,failure,handling,strategy,but,typically,the,system,will,re,attempt,the,recovery,or,try,recovering,from,a,different,checkpoint;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> void restoreState(List<T> state) throws Exception_;1525661787;Restores the state of the function or operator to that of a previous checkpoint._This method is invoked when the function is executed after a failure recovery._The state list may be empty if no state is to be recovered by the particular parallel instance_of the function.__<p>The given state list will contain all the <i>sub states</i> that this parallel_instance of the function needs to handle. Refer to the  {@link ListCheckpointed class docs}_for an illustration how list-style state redistribution works.__<p><b>Important:</b> When implementing this interface together with {@link RichFunction},_then the {@code restoreState()} method is called before {@link RichFunction#open(Configuration)}.__@param state The state to be restored as a list of atomic sub-states.__@throws Exception Throwing an exception in this method causes the recovery to fail._The exact consequence depends on the configured failure handling strategy,_but typically the system will re-attempt the recovery, or try recovering_from a different checkpoint.;void restoreState(List<T> state) throws Exception_;restores,the,state,of,the,function,or,operator,to,that,of,a,previous,checkpoint,this,method,is,invoked,when,the,function,is,executed,after,a,failure,recovery,the,state,list,may,be,empty,if,no,state,is,to,be,recovered,by,the,particular,parallel,instance,of,the,function,p,the,given,state,list,will,contain,all,the,i,sub,states,i,that,this,parallel,instance,of,the,function,needs,to,handle,refer,to,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,b,important,b,when,implementing,this,interface,together,with,link,rich,function,then,the,code,restore,state,method,is,called,before,link,rich,function,open,configuration,param,state,the,state,to,be,restored,as,a,list,of,atomic,sub,states,throws,exception,throwing,an,exception,in,this,method,causes,the,recovery,to,fail,the,exact,consequence,depends,on,the,configured,failure,handling,strategy,but,typically,the,system,will,re,attempt,the,recovery,or,try,recovering,from,a,different,checkpoint;void,restore,state,list,t,state,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1475231926;Gets the current state of the function of operator. The state must reflect the result of all_prior invocations to this function.__@param checkpointId The ID of the checkpoint._@param timestamp Timestamp of the checkpoint._@return The operator state in a list of redistributable, atomic sub-states._@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,of,operator,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,timestamp,of,the,checkpoint,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1475688972;Gets the current state of the function of operator. The state must reflect the result of all_prior invocations to this function.__@param checkpointId The ID of the checkpoint._@param timestamp Timestamp of the checkpoint._@return The operator state in a list of redistributable, atomic sub-states._@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,of,operator,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,timestamp,of,the,checkpoint,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1481797323;Gets the current state of the function of operator. The state must reflect the result of all_prior invocations to this function.__@param checkpointId The ID of the checkpoint._@param timestamp Timestamp of the checkpoint._@return The operator state in a list of redistributable, atomic sub-states._Should not return null, but empty list instead._@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,of,operator,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,timestamp,of,the,checkpoint,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,should,not,return,null,but,empty,list,instead,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1485274812;Gets the current state of the function. The state must reflect the result of all prior_invocations to this function.__<p>The returned list should contain one entry for redistributable unit of state. See_the {@link ListCheckpointed class docs} for an illustration how list-style state_redistribution works.__<p> As special case, the returned list may be null or empty (if the operator has no state)_or it may contain a single element (if the operator state is indivisible).__@param checkpointId The ID of the checkpoint - a unique and monotonously increasing value._@param timestamp The wall clock timestamp when the checkpoint was triggered by the master.__@return The operator state in a list of redistributable, atomic sub-states._Should not return null, but empty list instead.__@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,p,the,returned,list,should,contain,one,entry,for,redistributable,unit,of,state,see,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,as,special,case,the,returned,list,may,be,null,or,empty,if,the,operator,has,no,state,or,it,may,contain,a,single,element,if,the,operator,state,is,indivisible,param,checkpoint,id,the,id,of,the,checkpoint,a,unique,and,monotonously,increasing,value,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,by,the,master,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,should,not,return,null,but,empty,list,instead,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1493195810;Gets the current state of the function. The state must reflect the result of all prior_invocations to this function.__<p>The returned list should contain one entry for redistributable unit of state. See_the {@link ListCheckpointed class docs} for an illustration how list-style state_redistribution works.__<p>As special case, the returned list may be null or empty (if the operator has no state)_or it may contain a single element (if the operator state is indivisible).__@param checkpointId The ID of the checkpoint - a unique and monotonously increasing value._@param timestamp The wall clock timestamp when the checkpoint was triggered by the master.__@return The operator state in a list of redistributable, atomic sub-states._Should not return null, but empty list instead.__@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,p,the,returned,list,should,contain,one,entry,for,redistributable,unit,of,state,see,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,as,special,case,the,returned,list,may,be,null,or,empty,if,the,operator,has,no,state,or,it,may,contain,a,single,element,if,the,operator,state,is,indivisible,param,checkpoint,id,the,id,of,the,checkpoint,a,unique,and,monotonously,increasing,value,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,by,the,master,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,should,not,return,null,but,empty,list,instead,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1493195810;Gets the current state of the function. The state must reflect the result of all prior_invocations to this function.__<p>The returned list should contain one entry for redistributable unit of state. See_the {@link ListCheckpointed class docs} for an illustration how list-style state_redistribution works.__<p>As special case, the returned list may be null or empty (if the operator has no state)_or it may contain a single element (if the operator state is indivisible).__@param checkpointId The ID of the checkpoint - a unique and monotonously increasing value._@param timestamp The wall clock timestamp when the checkpoint was triggered by the master.__@return The operator state in a list of redistributable, atomic sub-states._Should not return null, but empty list instead.__@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,p,the,returned,list,should,contain,one,entry,for,redistributable,unit,of,state,see,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,as,special,case,the,returned,list,may,be,null,or,empty,if,the,operator,has,no,state,or,it,may,contain,a,single,element,if,the,operator,state,is,indivisible,param,checkpoint,id,the,id,of,the,checkpoint,a,unique,and,monotonously,increasing,value,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,by,the,master,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,should,not,return,null,but,empty,list,instead,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1493195810;Gets the current state of the function. The state must reflect the result of all prior_invocations to this function.__<p>The returned list should contain one entry for redistributable unit of state. See_the {@link ListCheckpointed class docs} for an illustration how list-style state_redistribution works.__<p>As special case, the returned list may be null or empty (if the operator has no state)_or it may contain a single element (if the operator state is indivisible).__@param checkpointId The ID of the checkpoint - a unique and monotonously increasing value._@param timestamp The wall clock timestamp when the checkpoint was triggered by the master.__@return The operator state in a list of redistributable, atomic sub-states._Should not return null, but empty list instead.__@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,p,the,returned,list,should,contain,one,entry,for,redistributable,unit,of,state,see,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,as,special,case,the,returned,list,may,be,null,or,empty,if,the,operator,has,no,state,or,it,may,contain,a,single,element,if,the,operator,state,is,indivisible,param,checkpoint,id,the,id,of,the,checkpoint,a,unique,and,monotonously,increasing,value,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,by,the,master,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,should,not,return,null,but,empty,list,instead,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1495484544;Gets the current state of the function. The state must reflect the result of all prior_invocations to this function.__<p>The returned list should contain one entry for redistributable unit of state. See_the {@link ListCheckpointed class docs} for an illustration how list-style state_redistribution works.__<p>As special case, the returned list may be null or empty (if the operator has no state)_or it may contain a single element (if the operator state is indivisible).__@param checkpointId The ID of the checkpoint - a unique and monotonously increasing value._@param timestamp The wall clock timestamp when the checkpoint was triggered by the master.__@return The operator state in a list of redistributable, atomic sub-states._Should not return null, but empty list instead.__@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,p,the,returned,list,should,contain,one,entry,for,redistributable,unit,of,state,see,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,as,special,case,the,returned,list,may,be,null,or,empty,if,the,operator,has,no,state,or,it,may,contain,a,single,element,if,the,operator,state,is,indivisible,param,checkpoint,id,the,id,of,the,checkpoint,a,unique,and,monotonously,increasing,value,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,by,the,master,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,should,not,return,null,but,empty,list,instead,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
ListCheckpointed -> List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;1525661787;Gets the current state of the function. The state must reflect the result of all prior_invocations to this function.__<p>The returned list should contain one entry for redistributable unit of state. See_the {@link ListCheckpointed class docs} for an illustration how list-style state_redistribution works.__<p>As special case, the returned list may be null or empty (if the operator has no state)_or it may contain a single element (if the operator state is indivisible).__@param checkpointId The ID of the checkpoint - a unique and monotonously increasing value._@param timestamp The wall clock timestamp when the checkpoint was triggered by the master.__@return The operator state in a list of redistributable, atomic sub-states._Should not return null, but empty list instead.__@throws Exception Thrown if the creation of the state object failed. This causes the_checkpoint to fail. The system may decide to fail the operation (and trigger_recovery), or to discard this checkpoint attempt and to continue running_and to try again with the next checkpoint attempt.;List<T> snapshotState(long checkpointId, long timestamp) throws Exception_;gets,the,current,state,of,the,function,the,state,must,reflect,the,result,of,all,prior,invocations,to,this,function,p,the,returned,list,should,contain,one,entry,for,redistributable,unit,of,state,see,the,link,list,checkpointed,class,docs,for,an,illustration,how,list,style,state,redistribution,works,p,as,special,case,the,returned,list,may,be,null,or,empty,if,the,operator,has,no,state,or,it,may,contain,a,single,element,if,the,operator,state,is,indivisible,param,checkpoint,id,the,id,of,the,checkpoint,a,unique,and,monotonously,increasing,value,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,by,the,master,return,the,operator,state,in,a,list,of,redistributable,atomic,sub,states,should,not,return,null,but,empty,list,instead,throws,exception,thrown,if,the,creation,of,the,state,object,failed,this,causes,the,checkpoint,to,fail,the,system,may,decide,to,fail,the,operation,and,trigger,recovery,or,to,discard,this,checkpoint,attempt,and,to,continue,running,and,to,try,again,with,the,next,checkpoint,attempt;list,t,snapshot,state,long,checkpoint,id,long,timestamp,throws,exception
