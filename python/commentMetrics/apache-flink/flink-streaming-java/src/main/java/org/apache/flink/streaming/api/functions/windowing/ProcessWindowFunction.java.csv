commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;4;1;/**  * Evaluates the window and outputs none or several elements.  *  * @param key The key for which this window is evaluated.  * @param context The context in which the window is being evaluated.  * @param elements The elements in the window being evaluated.  * @param out A collector for emitting elements.  *  * @throws Exception The function may throw exceptions to fail the program and trigger recovery.  */ ;/**  * Evaluates the window and outputs none or several elements.  *  * @param key The key for which this window is evaluated.  * @param context The context in which the window is being evaluated.  * @param elements The elements in the window being evaluated.  * @param out A collector for emitting elements.  *  * @throws Exception The function may throw exceptions to fail the program and trigger recovery.  */ public abstract void process(KEY key, Context context, Iterable<IN> elements, Collector<OUT> out) throws Exception.
true;public;1;1;/**  * Deletes any state in the {@code Context} when the Window is purged.  *  * @param context The context to which the window is being evaluated  * @throws Exception The function may throw exceptions to fail the program and trigger recovery.  */ ;/**  * Deletes any state in the {@code Context} when the Window is purged.  *  * @param context The context to which the window is being evaluated  * @throws Exception The function may throw exceptions to fail the program and trigger recovery.  */ public void clear(Context context) throws Exception { }
true;public,abstract;0;1;/**  * Returns the window that is being evaluated.  */ ;/**  * Returns the window that is being evaluated.  */ public abstract W window().
true;public,abstract;0;1;/**  * Returns the current processing time.  */ ;/**  * Returns the current processing time.  */ public abstract long currentProcessingTime().
true;public,abstract;0;1;/**  * Returns the current event-time watermark.  */ ;/**  * Returns the current event-time watermark.  */ public abstract long currentWatermark().
true;public,abstract;0;1;/**  * State accessor for per-key and per-window state.  *  * <p><b>NOTE:</b>If you use per-window state you have to ensure that you clean it up  * by implementing {@link ProcessWindowFunction#clear(Context)}.  */ ;/**  * State accessor for per-key and per-window state.  *  * <p><b>NOTE:</b>If you use per-window state you have to ensure that you clean it up  * by implementing {@link ProcessWindowFunction#clear(Context)}.  */ public abstract KeyedStateStore windowState().
true;public,abstract;0;1;/**  * State accessor for per-key global state.  */ ;/**  * State accessor for per-key global state.  */ public abstract KeyedStateStore globalState().
true;public,abstract;2;1;/**  * Emits a record to the side output identified by the {@link OutputTag}.  *  * @param outputTag the {@code OutputTag} that identifies the side output to emit to.  * @param value The record to emit.  */ ;/**  * Emits a record to the side output identified by the {@link OutputTag}.  *  * @param outputTag the {@code OutputTag} that identifies the side output to emit to.  * @param value The record to emit.  */ public abstract <X> void output(OutputTag<X> outputTag, X value).
