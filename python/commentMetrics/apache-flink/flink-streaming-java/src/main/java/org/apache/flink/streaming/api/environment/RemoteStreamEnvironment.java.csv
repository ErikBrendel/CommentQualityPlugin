commented;modifiers;parameterAmount;loc;comment;code
true;public,static;8;22;/**  * Executes the job remotely.  *  * <p>This method can be used independent of the {@link StreamExecutionEnvironment} type.  * @return The result of the job execution, containing elapsed time and accumulators.  */ ;/**  * Executes the job remotely.  *  * <p>This method can be used independent of the {@link StreamExecutionEnvironment} type.  * @return The result of the job execution, containing elapsed time and accumulators.  */ @PublicEvolving public static JobExecutionResult executeRemotely(StreamExecutionEnvironment streamExecutionEnvironment, List<URL> jarFiles, String host, int port, Configuration clientConfiguration, List<URL> globalClasspaths, String jobName, SavepointRestoreSettings savepointRestoreSettings) throws ProgramInvocationException {     StreamGraph streamGraph = streamExecutionEnvironment.getStreamGraph().     streamGraph.setJobName(jobName).     return executeRemotely(streamGraph, streamExecutionEnvironment.getClass().getClassLoader(), streamExecutionEnvironment.getConfig(), jarFiles, host, port, clientConfiguration, globalClasspaths, savepointRestoreSettings). }
true;private,static;9;59;/**  * Execute the given stream graph remotely.  *  * <p>Method for internal use since it exposes stream graph and other implementation details that are subject to change.  * @throws ProgramInvocationException  */ ;/**  * Execute the given stream graph remotely.  *  * <p>Method for internal use since it exposes stream graph and other implementation details that are subject to change.  * @throws ProgramInvocationException  */ private static JobExecutionResult executeRemotely(StreamGraph streamGraph, ClassLoader envClassLoader, ExecutionConfig executionConfig, List<URL> jarFiles, String host, int port, Configuration clientConfiguration, List<URL> globalClasspaths, SavepointRestoreSettings savepointRestoreSettings) throws ProgramInvocationException {     if (LOG.isInfoEnabled()) {         LOG.info("Running remotely at {}:{}", host, port).     }     ClassLoader userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(jarFiles, globalClasspaths, envClassLoader).     Configuration configuration = new Configuration().     configuration.addAll(clientConfiguration).     configuration.setString(JobManagerOptions.ADDRESS, host).     configuration.setInteger(JobManagerOptions.PORT, port).     configuration.setInteger(RestOptions.PORT, port).     final ClusterClient<?> client.     try {         client = new RestClusterClient<>(configuration, "RemoteStreamEnvironment").     } catch (Exception e) {         throw new ProgramInvocationException("Cannot establish connection to JobManager: " + e.getMessage(), streamGraph.getJobGraph().getJobID(), e).     }     client.setPrintStatusDuringExecution(executionConfig.isSysoutLoggingEnabled()).     if (savepointRestoreSettings == null) {         savepointRestoreSettings = SavepointRestoreSettings.none().     }     try {         return client.run(streamGraph, jarFiles, globalClasspaths, userCodeClassLoader, savepointRestoreSettings).getJobExecutionResult().     } catch (ProgramInvocationException e) {         throw e.     } catch (Exception e) {         String term = e.getMessage() == null ? "." : (": " + e.getMessage()).         throw new ProgramInvocationException("The program execution failed" + term, streamGraph.getJobGraph().getJobID(), e).     } finally {         try {             client.shutdown().         } catch (Exception e) {             LOG.warn("Could not properly shut down the cluster client.", e).         }     } }
false;public;1;7;;@Override public JobExecutionResult execute(String jobName) throws ProgramInvocationException {     StreamGraph streamGraph = getStreamGraph().     streamGraph.setJobName(jobName).     transformations.clear().     return executeRemotely(streamGraph, jarFiles). }
true;protected;2;12;/**  * Executes the remote job.  *  * <p>Note: This method exposes stream graph internal in the public API, but cannot be removed for backward compatibility.  * @param streamGraph  *            Stream Graph to execute  * @param jarFiles  * 			  List of jar file URLs to ship to the cluster  * @return The result of the job execution, containing elapsed time and accumulators.  */ ;/**  * Executes the remote job.  *  * <p>Note: This method exposes stream graph internal in the public API, but cannot be removed for backward compatibility.  * @param streamGraph  *            Stream Graph to execute  * @param jarFiles  * 			  List of jar file URLs to ship to the cluster  * @return The result of the job execution, containing elapsed time and accumulators.  */ @Deprecated protected JobExecutionResult executeRemotely(StreamGraph streamGraph, List<URL> jarFiles) throws ProgramInvocationException {     return executeRemotely(streamGraph, this.getClass().getClassLoader(), getConfig(), jarFiles, host, port, clientConfiguration, globalClasspaths, savepointRestoreSettings). }
false;public;0;5;;@Override public String toString() {     return "Remote Environment (" + this.host + ":" + this.port + " - parallelism = " + (getParallelism() == -1 ? "default" : getParallelism()) + ")". }
true;public;0;3;/**  * Gets the hostname of the master (JobManager), where the  * program will be executed.  *  * @return The hostname of the master  */ ;/**  * Gets the hostname of the master (JobManager), where the  * program will be executed.  *  * @return The hostname of the master  */ public String getHost() {     return host. }
true;public;0;3;/**  * Gets the port of the master (JobManager), where the  * program will be executed.  *  * @return The port of the master  */ ;/**  * Gets the port of the master (JobManager), where the  * program will be executed.  *  * @return The port of the master  */ public int getPort() {     return port. }
false;public;0;3;;public Configuration getClientConfiguration() {     return clientConfiguration. }
