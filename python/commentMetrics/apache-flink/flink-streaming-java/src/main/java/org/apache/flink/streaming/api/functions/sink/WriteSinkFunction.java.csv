commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;10;/**  * Creates target file if it does not exist, cleans it if it exists.  *  * @param path  *            is the path to the location where the tuples are written  */ ;/**  * Creates target file if it does not exist, cleans it if it exists.  *  * @param path  *            is the path to the location where the tuples are written  */ protected void cleanFile(String path) {     try {         PrintWriter writer.         writer = new PrintWriter(path).         writer.print("").         writer.close().     } catch (FileNotFoundException e) {         throw new RuntimeException("An error occurred while cleaning the file: " + e.getMessage(), e).     } }
true;protected,abstract;0;1;/**  * Condition for writing the contents of tupleList and clearing it.  *  * @return value of the updating condition  */ ;/**  * Condition for writing the contents of tupleList and clearing it.  *  * @return value of the updating condition  */ protected abstract boolean updateCondition().
true;protected,abstract;0;1;/**  * Statements to be executed after writing a batch goes here.  */ ;/**  * Statements to be executed after writing a batch goes here.  */ protected abstract void resetParameters().
true;public;1;10;/**  * Implementation of the invoke method of the SinkFunction class. Collects  * the incoming tuples in tupleList and appends the list to the end of the  * target file if updateCondition() is true or the current tuple is the  * endTuple.  */ ;/**  * Implementation of the invoke method of the SinkFunction class. Collects  * the incoming tuples in tupleList and appends the list to the end of the  * target file if updateCondition() is true or the current tuple is the  * endTuple.  */ @Override public void invoke(IN tuple) {     tupleList.add(tuple).     if (updateCondition()) {         format.write(path, tupleList).         resetParameters().     } }
