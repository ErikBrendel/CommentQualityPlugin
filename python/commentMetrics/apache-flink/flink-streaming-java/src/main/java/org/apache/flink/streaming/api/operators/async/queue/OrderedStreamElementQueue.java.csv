# id;timestamp;commentText;codeText;commentWords;codeWords
OrderedStreamElementQueue -> private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException;1482206691;Check if the completed {@link StreamElementQueueEntry} is the current head. If this is the_case, then notify the consumer thread about a new consumable entry.__@param streamElementQueueEntry which has been completed_@throws InterruptedException if the current thread is interrupted;private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException {_		lock.lockInterruptibly()___		try {_			if (!queue.isEmpty() && queue.peek().isDone()) {_				LOG.debug("Signal ordered stream element queue has completed head element.")__				headIsCompleted.signalAll()__			}_		} finally {_			lock.unlock()__		}_	};check,if,the,completed,link,stream,element,queue,entry,is,the,current,head,if,this,is,the,case,then,notify,the,consumer,thread,about,a,new,consumable,entry,param,stream,element,queue,entry,which,has,been,completed,throws,interrupted,exception,if,the,current,thread,is,interrupted;private,void,on,complete,handler,stream,element,queue,entry,stream,element,queue,entry,throws,interrupted,exception,lock,lock,interruptibly,try,if,queue,is,empty,queue,peek,is,done,log,debug,signal,ordered,stream,element,queue,has,completed,head,element,head,is,completed,signal,all,finally,lock,unlock
OrderedStreamElementQueue -> private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException;1482206691;Check if the completed {@link StreamElementQueueEntry} is the current head. If this is the_case, then notify the consumer thread about a new consumable entry.__@param streamElementQueueEntry which has been completed_@throws InterruptedException if the current thread is interrupted;private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException {_		lock.lockInterruptibly()___		try {_			if (!queue.isEmpty() && queue.peek().isDone()) {_				LOG.debug("Signal ordered stream element queue has completed head element.")__				headIsCompleted.signalAll()__			}_		} finally {_			lock.unlock()__		}_	};check,if,the,completed,link,stream,element,queue,entry,is,the,current,head,if,this,is,the,case,then,notify,the,consumer,thread,about,a,new,consumable,entry,param,stream,element,queue,entry,which,has,been,completed,throws,interrupted,exception,if,the,current,thread,is,interrupted;private,void,on,complete,handler,stream,element,queue,entry,stream,element,queue,entry,throws,interrupted,exception,lock,lock,interruptibly,try,if,queue,is,empty,queue,peek,is,done,log,debug,signal,ordered,stream,element,queue,has,completed,head,element,head,is,completed,signal,all,finally,lock,unlock
OrderedStreamElementQueue -> private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException;1493195810;Check if the completed {@link StreamElementQueueEntry} is the current head. If this is the_case, then notify the consumer thread about a new consumable entry.__@param streamElementQueueEntry which has been completed_@throws InterruptedException if the current thread is interrupted;private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException {_		lock.lockInterruptibly()___		try {_			if (!queue.isEmpty() && queue.peek().isDone()) {_				LOG.debug("Signal ordered stream element queue has completed head element.")__				headIsCompleted.signalAll()__			}_		} finally {_			lock.unlock()__		}_	};check,if,the,completed,link,stream,element,queue,entry,is,the,current,head,if,this,is,the,case,then,notify,the,consumer,thread,about,a,new,consumable,entry,param,stream,element,queue,entry,which,has,been,completed,throws,interrupted,exception,if,the,current,thread,is,interrupted;private,void,on,complete,handler,stream,element,queue,entry,stream,element,queue,entry,throws,interrupted,exception,lock,lock,interruptibly,try,if,queue,is,empty,queue,peek,is,done,log,debug,signal,ordered,stream,element,queue,has,completed,head,element,head,is,completed,signal,all,finally,lock,unlock
OrderedStreamElementQueue -> private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException;1493195810;Check if the completed {@link StreamElementQueueEntry} is the current head. If this is the_case, then notify the consumer thread about a new consumable entry.__@param streamElementQueueEntry which has been completed_@throws InterruptedException if the current thread is interrupted;private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException {_		lock.lockInterruptibly()___		try {_			if (!queue.isEmpty() && queue.peek().isDone()) {_				LOG.debug("Signal ordered stream element queue has completed head element.")__				headIsCompleted.signalAll()__			}_		} finally {_			lock.unlock()__		}_	};check,if,the,completed,link,stream,element,queue,entry,is,the,current,head,if,this,is,the,case,then,notify,the,consumer,thread,about,a,new,consumable,entry,param,stream,element,queue,entry,which,has,been,completed,throws,interrupted,exception,if,the,current,thread,is,interrupted;private,void,on,complete,handler,stream,element,queue,entry,stream,element,queue,entry,throws,interrupted,exception,lock,lock,interruptibly,try,if,queue,is,empty,queue,peek,is,done,log,debug,signal,ordered,stream,element,queue,has,completed,head,element,head,is,completed,signal,all,finally,lock,unlock
OrderedStreamElementQueue -> private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException;1495484544;Check if the completed {@link StreamElementQueueEntry} is the current head. If this is the_case, then notify the consumer thread about a new consumable entry.__@param streamElementQueueEntry which has been completed_@throws InterruptedException if the current thread is interrupted;private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException {_		lock.lockInterruptibly()___		try {_			if (!queue.isEmpty() && queue.peek().isDone()) {_				LOG.debug("Signal ordered stream element queue has completed head element.")__				headIsCompleted.signalAll()__			}_		} finally {_			lock.unlock()__		}_	};check,if,the,completed,link,stream,element,queue,entry,is,the,current,head,if,this,is,the,case,then,notify,the,consumer,thread,about,a,new,consumable,entry,param,stream,element,queue,entry,which,has,been,completed,throws,interrupted,exception,if,the,current,thread,is,interrupted;private,void,on,complete,handler,stream,element,queue,entry,stream,element,queue,entry,throws,interrupted,exception,lock,lock,interruptibly,try,if,queue,is,empty,queue,peek,is,done,log,debug,signal,ordered,stream,element,queue,has,completed,head,element,head,is,completed,signal,all,finally,lock,unlock
OrderedStreamElementQueue -> private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException;1501589083;Check if the completed {@link StreamElementQueueEntry} is the current head. If this is the_case, then notify the consumer thread about a new consumable entry.__@param streamElementQueueEntry which has been completed_@throws InterruptedException if the current thread is interrupted;private void onCompleteHandler(StreamElementQueueEntry<?> streamElementQueueEntry) throws InterruptedException {_		lock.lockInterruptibly()___		try {_			if (!queue.isEmpty() && queue.peek().isDone()) {_				LOG.debug("Signal ordered stream element queue has completed head element.")__				headIsCompleted.signalAll()__			}_		} finally {_			lock.unlock()__		}_	};check,if,the,completed,link,stream,element,queue,entry,is,the,current,head,if,this,is,the,case,then,notify,the,consumer,thread,about,a,new,consumable,entry,param,stream,element,queue,entry,which,has,been,completed,throws,interrupted,exception,if,the,current,thread,is,interrupted;private,void,on,complete,handler,stream,element,queue,entry,stream,element,queue,entry,throws,interrupted,exception,lock,lock,interruptibly,try,if,queue,is,empty,queue,peek,is,done,log,debug,signal,ordered,stream,element,queue,has,completed,head,element,head,is,completed,signal,all,finally,lock,unlock
OrderedStreamElementQueue -> private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry);1482206691;Add the given {@link StreamElementQueueEntry} to the queue. Additionally, this method_registers a onComplete callback which is triggered once the given queue entry is completed.__@param streamElementQueueEntry to be inserted_@param <T> Type of the stream element queue entry's result;private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry) {_		assert(lock.isHeldByCurrentThread())___		queue.addLast(streamElementQueueEntry)___		streamElementQueueEntry.onComplete(new AcceptFunction<StreamElementQueueEntry<T>>() {_			@Override_			public void accept(StreamElementQueueEntry<T> value) {_				try {_					onCompleteHandler(value)__				} catch (InterruptedException e) {_					_					LOG.debug("AsyncBufferEntry could not be properly completed because the " +_						"executor thread has been interrupted.", e)__				} catch (Throwable t) {_					operatorActions.failOperator(new Exception("Could not complete the " +_						"stream element queue entry: " + value + '.', t))__				}_			}_		}, executor)__	};add,the,given,link,stream,element,queue,entry,to,the,queue,additionally,this,method,registers,a,on,complete,callback,which,is,triggered,once,the,given,queue,entry,is,completed,param,stream,element,queue,entry,to,be,inserted,param,t,type,of,the,stream,element,queue,entry,s,result;private,t,void,add,entry,stream,element,queue,entry,t,stream,element,queue,entry,assert,lock,is,held,by,current,thread,queue,add,last,stream,element,queue,entry,stream,element,queue,entry,on,complete,new,accept,function,stream,element,queue,entry,t,override,public,void,accept,stream,element,queue,entry,t,value,try,on,complete,handler,value,catch,interrupted,exception,e,log,debug,async,buffer,entry,could,not,be,properly,completed,because,the,executor,thread,has,been,interrupted,e,catch,throwable,t,operator,actions,fail,operator,new,exception,could,not,complete,the,stream,element,queue,entry,value,t,executor
OrderedStreamElementQueue -> private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry);1482206691;Add the given {@link StreamElementQueueEntry} to the queue. Additionally, this method_registers a onComplete callback which is triggered once the given queue entry is completed.__@param streamElementQueueEntry to be inserted_@param <T> Type of the stream element queue entry's result;private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry) {_		assert(lock.isHeldByCurrentThread())___		queue.addLast(streamElementQueueEntry)___		streamElementQueueEntry.onComplete(new AcceptFunction<StreamElementQueueEntry<T>>() {_			@Override_			public void accept(StreamElementQueueEntry<T> value) {_				try {_					onCompleteHandler(value)__				} catch (InterruptedException e) {_					_					LOG.debug("AsyncBufferEntry could not be properly completed because the " +_						"executor thread has been interrupted.", e)__				} catch (Throwable t) {_					operatorActions.failOperator(new Exception("Could not complete the " +_						"stream element queue entry: " + value + '.', t))__				}_			}_		}, executor)__	};add,the,given,link,stream,element,queue,entry,to,the,queue,additionally,this,method,registers,a,on,complete,callback,which,is,triggered,once,the,given,queue,entry,is,completed,param,stream,element,queue,entry,to,be,inserted,param,t,type,of,the,stream,element,queue,entry,s,result;private,t,void,add,entry,stream,element,queue,entry,t,stream,element,queue,entry,assert,lock,is,held,by,current,thread,queue,add,last,stream,element,queue,entry,stream,element,queue,entry,on,complete,new,accept,function,stream,element,queue,entry,t,override,public,void,accept,stream,element,queue,entry,t,value,try,on,complete,handler,value,catch,interrupted,exception,e,log,debug,async,buffer,entry,could,not,be,properly,completed,because,the,executor,thread,has,been,interrupted,e,catch,throwable,t,operator,actions,fail,operator,new,exception,could,not,complete,the,stream,element,queue,entry,value,t,executor
OrderedStreamElementQueue -> private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry);1493195810;Add the given {@link StreamElementQueueEntry} to the queue. Additionally, this method_registers a onComplete callback which is triggered once the given queue entry is completed.__@param streamElementQueueEntry to be inserted_@param <T> Type of the stream element queue entry's result;private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry) {_		assert(lock.isHeldByCurrentThread())___		queue.addLast(streamElementQueueEntry)___		streamElementQueueEntry.onComplete(new AcceptFunction<StreamElementQueueEntry<T>>() {_			@Override_			public void accept(StreamElementQueueEntry<T> value) {_				try {_					onCompleteHandler(value)__				} catch (InterruptedException e) {_					_					LOG.debug("AsyncBufferEntry could not be properly completed because the " +_						"executor thread has been interrupted.", e)__				} catch (Throwable t) {_					operatorActions.failOperator(new Exception("Could not complete the " +_						"stream element queue entry: " + value + '.', t))__				}_			}_		}, executor)__	};add,the,given,link,stream,element,queue,entry,to,the,queue,additionally,this,method,registers,a,on,complete,callback,which,is,triggered,once,the,given,queue,entry,is,completed,param,stream,element,queue,entry,to,be,inserted,param,t,type,of,the,stream,element,queue,entry,s,result;private,t,void,add,entry,stream,element,queue,entry,t,stream,element,queue,entry,assert,lock,is,held,by,current,thread,queue,add,last,stream,element,queue,entry,stream,element,queue,entry,on,complete,new,accept,function,stream,element,queue,entry,t,override,public,void,accept,stream,element,queue,entry,t,value,try,on,complete,handler,value,catch,interrupted,exception,e,log,debug,async,buffer,entry,could,not,be,properly,completed,because,the,executor,thread,has,been,interrupted,e,catch,throwable,t,operator,actions,fail,operator,new,exception,could,not,complete,the,stream,element,queue,entry,value,t,executor
OrderedStreamElementQueue -> private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry);1493195810;Add the given {@link StreamElementQueueEntry} to the queue. Additionally, this method_registers a onComplete callback which is triggered once the given queue entry is completed.__@param streamElementQueueEntry to be inserted_@param <T> Type of the stream element queue entry's result;private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry) {_		assert(lock.isHeldByCurrentThread())___		queue.addLast(streamElementQueueEntry)___		streamElementQueueEntry.onComplete(new AcceptFunction<StreamElementQueueEntry<T>>() {_			@Override_			public void accept(StreamElementQueueEntry<T> value) {_				try {_					onCompleteHandler(value)__				} catch (InterruptedException e) {_					_					LOG.debug("AsyncBufferEntry could not be properly completed because the " +_						"executor thread has been interrupted.", e)__				} catch (Throwable t) {_					operatorActions.failOperator(new Exception("Could not complete the " +_						"stream element queue entry: " + value + '.', t))__				}_			}_		}, executor)__	};add,the,given,link,stream,element,queue,entry,to,the,queue,additionally,this,method,registers,a,on,complete,callback,which,is,triggered,once,the,given,queue,entry,is,completed,param,stream,element,queue,entry,to,be,inserted,param,t,type,of,the,stream,element,queue,entry,s,result;private,t,void,add,entry,stream,element,queue,entry,t,stream,element,queue,entry,assert,lock,is,held,by,current,thread,queue,add,last,stream,element,queue,entry,stream,element,queue,entry,on,complete,new,accept,function,stream,element,queue,entry,t,override,public,void,accept,stream,element,queue,entry,t,value,try,on,complete,handler,value,catch,interrupted,exception,e,log,debug,async,buffer,entry,could,not,be,properly,completed,because,the,executor,thread,has,been,interrupted,e,catch,throwable,t,operator,actions,fail,operator,new,exception,could,not,complete,the,stream,element,queue,entry,value,t,executor
OrderedStreamElementQueue -> private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry);1495484544;Add the given {@link StreamElementQueueEntry} to the queue. Additionally, this method_registers a onComplete callback which is triggered once the given queue entry is completed.__@param streamElementQueueEntry to be inserted_@param <T> Type of the stream element queue entry's result;private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry) {_		assert(lock.isHeldByCurrentThread())___		queue.addLast(streamElementQueueEntry)___		streamElementQueueEntry.onComplete(new AcceptFunction<StreamElementQueueEntry<T>>() {_			@Override_			public void accept(StreamElementQueueEntry<T> value) {_				try {_					onCompleteHandler(value)__				} catch (InterruptedException e) {_					_					LOG.debug("AsyncBufferEntry could not be properly completed because the " +_						"executor thread has been interrupted.", e)__				} catch (Throwable t) {_					operatorActions.failOperator(new Exception("Could not complete the " +_						"stream element queue entry: " + value + '.', t))__				}_			}_		}, executor)__	};add,the,given,link,stream,element,queue,entry,to,the,queue,additionally,this,method,registers,a,on,complete,callback,which,is,triggered,once,the,given,queue,entry,is,completed,param,stream,element,queue,entry,to,be,inserted,param,t,type,of,the,stream,element,queue,entry,s,result;private,t,void,add,entry,stream,element,queue,entry,t,stream,element,queue,entry,assert,lock,is,held,by,current,thread,queue,add,last,stream,element,queue,entry,stream,element,queue,entry,on,complete,new,accept,function,stream,element,queue,entry,t,override,public,void,accept,stream,element,queue,entry,t,value,try,on,complete,handler,value,catch,interrupted,exception,e,log,debug,async,buffer,entry,could,not,be,properly,completed,because,the,executor,thread,has,been,interrupted,e,catch,throwable,t,operator,actions,fail,operator,new,exception,could,not,complete,the,stream,element,queue,entry,value,t,executor
OrderedStreamElementQueue -> private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry);1501589083;Add the given {@link StreamElementQueueEntry} to the queue. Additionally, this method_registers a onComplete callback which is triggered once the given queue entry is completed.__@param streamElementQueueEntry to be inserted_@param <T> Type of the stream element queue entry's result;private <T> void addEntry(StreamElementQueueEntry<T> streamElementQueueEntry) {_		assert(lock.isHeldByCurrentThread())___		queue.addLast(streamElementQueueEntry)___		streamElementQueueEntry.onComplete(_			(StreamElementQueueEntry<T> value) -> {_				try {_					onCompleteHandler(value)__				} catch (InterruptedException e) {_					_					LOG.debug("AsyncBufferEntry could not be properly completed because the " +_						"executor thread has been interrupted.", e)__				} catch (Throwable t) {_					operatorActions.failOperator(new Exception("Could not complete the " +_						"stream element queue entry: " + value + '.', t))__				}_			},_			executor)__	};add,the,given,link,stream,element,queue,entry,to,the,queue,additionally,this,method,registers,a,on,complete,callback,which,is,triggered,once,the,given,queue,entry,is,completed,param,stream,element,queue,entry,to,be,inserted,param,t,type,of,the,stream,element,queue,entry,s,result;private,t,void,add,entry,stream,element,queue,entry,t,stream,element,queue,entry,assert,lock,is,held,by,current,thread,queue,add,last,stream,element,queue,entry,stream,element,queue,entry,on,complete,stream,element,queue,entry,t,value,try,on,complete,handler,value,catch,interrupted,exception,e,log,debug,async,buffer,entry,could,not,be,properly,completed,because,the,executor,thread,has,been,interrupted,e,catch,throwable,t,operator,actions,fail,operator,new,exception,could,not,complete,the,stream,element,queue,entry,value,t,executor
