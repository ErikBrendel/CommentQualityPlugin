# id;timestamp;commentText;codeText;commentWords;codeWords
StatusWatermarkValve -> public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler);1486732842;Returns a new {@code StatusWatermarkValve}.__@param numInputChannels the number of input channels that this valve will need to handle_@param outputHandler the customized output handler for the valve;public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler) {_		checkArgument(numInputChannels > 0)__		this.channelStatuses = new InputChannelStatus[numInputChannels]__		for (int i = 0_ i < numInputChannels_ i++) {_			channelStatuses[i] = new InputChannelStatus()__			channelStatuses[i].watermark = Long.MIN_VALUE__			channelStatuses[i].streamStatus = StreamStatus.ACTIVE__			channelStatuses[i].isWatermarkAligned = true__		}__		this.outputHandler = checkNotNull(outputHandler)___		this.lastOutputWatermark = Long.MIN_VALUE__		this.lastOutputStreamStatus = StreamStatus.ACTIVE__	};returns,a,new,code,status,watermark,valve,param,num,input,channels,the,number,of,input,channels,that,this,valve,will,need,to,handle,param,output,handler,the,customized,output,handler,for,the,valve;public,status,watermark,valve,int,num,input,channels,valve,output,handler,output,handler,check,argument,num,input,channels,0,this,channel,statuses,new,input,channel,status,num,input,channels,for,int,i,0,i,num,input,channels,i,channel,statuses,i,new,input,channel,status,channel,statuses,i,watermark,long,channel,statuses,i,stream,status,stream,status,active,channel,statuses,i,is,watermark,aligned,true,this,output,handler,check,not,null,output,handler,this,last,output,watermark,long,this,last,output,stream,status,stream,status,active
StatusWatermarkValve -> public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler);1493195810;Returns a new {@code StatusWatermarkValve}.__@param numInputChannels the number of input channels that this valve will need to handle_@param outputHandler the customized output handler for the valve;public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler) {_		checkArgument(numInputChannels > 0)__		this.channelStatuses = new InputChannelStatus[numInputChannels]__		for (int i = 0_ i < numInputChannels_ i++) {_			channelStatuses[i] = new InputChannelStatus()__			channelStatuses[i].watermark = Long.MIN_VALUE__			channelStatuses[i].streamStatus = StreamStatus.ACTIVE__			channelStatuses[i].isWatermarkAligned = true__		}__		this.outputHandler = checkNotNull(outputHandler)___		this.lastOutputWatermark = Long.MIN_VALUE__		this.lastOutputStreamStatus = StreamStatus.ACTIVE__	};returns,a,new,code,status,watermark,valve,param,num,input,channels,the,number,of,input,channels,that,this,valve,will,need,to,handle,param,output,handler,the,customized,output,handler,for,the,valve;public,status,watermark,valve,int,num,input,channels,valve,output,handler,output,handler,check,argument,num,input,channels,0,this,channel,statuses,new,input,channel,status,num,input,channels,for,int,i,0,i,num,input,channels,i,channel,statuses,i,new,input,channel,status,channel,statuses,i,watermark,long,channel,statuses,i,stream,status,stream,status,active,channel,statuses,i,is,watermark,aligned,true,this,output,handler,check,not,null,output,handler,this,last,output,watermark,long,this,last,output,stream,status,stream,status,active
StatusWatermarkValve -> public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler);1493195810;Returns a new {@code StatusWatermarkValve}.__@param numInputChannels the number of input channels that this valve will need to handle_@param outputHandler the customized output handler for the valve;public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler) {_		checkArgument(numInputChannels > 0)__		this.channelStatuses = new InputChannelStatus[numInputChannels]__		for (int i = 0_ i < numInputChannels_ i++) {_			channelStatuses[i] = new InputChannelStatus()__			channelStatuses[i].watermark = Long.MIN_VALUE__			channelStatuses[i].streamStatus = StreamStatus.ACTIVE__			channelStatuses[i].isWatermarkAligned = true__		}__		this.outputHandler = checkNotNull(outputHandler)___		this.lastOutputWatermark = Long.MIN_VALUE__		this.lastOutputStreamStatus = StreamStatus.ACTIVE__	};returns,a,new,code,status,watermark,valve,param,num,input,channels,the,number,of,input,channels,that,this,valve,will,need,to,handle,param,output,handler,the,customized,output,handler,for,the,valve;public,status,watermark,valve,int,num,input,channels,valve,output,handler,output,handler,check,argument,num,input,channels,0,this,channel,statuses,new,input,channel,status,num,input,channels,for,int,i,0,i,num,input,channels,i,channel,statuses,i,new,input,channel,status,channel,statuses,i,watermark,long,channel,statuses,i,stream,status,stream,status,active,channel,statuses,i,is,watermark,aligned,true,this,output,handler,check,not,null,output,handler,this,last,output,watermark,long,this,last,output,stream,status,stream,status,active
StatusWatermarkValve -> public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler);1495484544;Returns a new {@code StatusWatermarkValve}.__@param numInputChannels the number of input channels that this valve will need to handle_@param outputHandler the customized output handler for the valve;public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler) {_		checkArgument(numInputChannels > 0)__		this.channelStatuses = new InputChannelStatus[numInputChannels]__		for (int i = 0_ i < numInputChannels_ i++) {_			channelStatuses[i] = new InputChannelStatus()__			channelStatuses[i].watermark = Long.MIN_VALUE__			channelStatuses[i].streamStatus = StreamStatus.ACTIVE__			channelStatuses[i].isWatermarkAligned = true__		}__		this.outputHandler = checkNotNull(outputHandler)___		this.lastOutputWatermark = Long.MIN_VALUE__		this.lastOutputStreamStatus = StreamStatus.ACTIVE__	};returns,a,new,code,status,watermark,valve,param,num,input,channels,the,number,of,input,channels,that,this,valve,will,need,to,handle,param,output,handler,the,customized,output,handler,for,the,valve;public,status,watermark,valve,int,num,input,channels,valve,output,handler,output,handler,check,argument,num,input,channels,0,this,channel,statuses,new,input,channel,status,num,input,channels,for,int,i,0,i,num,input,channels,i,channel,statuses,i,new,input,channel,status,channel,statuses,i,watermark,long,channel,statuses,i,stream,status,stream,status,active,channel,statuses,i,is,watermark,aligned,true,this,output,handler,check,not,null,output,handler,this,last,output,watermark,long,this,last,output,stream,status,stream,status,active
StatusWatermarkValve -> public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler);1506955238;Returns a new {@code StatusWatermarkValve}.__@param numInputChannels the number of input channels that this valve will need to handle_@param outputHandler the customized output handler for the valve;public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler) {_		checkArgument(numInputChannels > 0)__		this.channelStatuses = new InputChannelStatus[numInputChannels]__		for (int i = 0_ i < numInputChannels_ i++) {_			channelStatuses[i] = new InputChannelStatus()__			channelStatuses[i].watermark = Long.MIN_VALUE__			channelStatuses[i].streamStatus = StreamStatus.ACTIVE__			channelStatuses[i].isWatermarkAligned = true__		}__		this.outputHandler = checkNotNull(outputHandler)___		this.lastOutputWatermark = Long.MIN_VALUE__		this.lastOutputStreamStatus = StreamStatus.ACTIVE__	};returns,a,new,code,status,watermark,valve,param,num,input,channels,the,number,of,input,channels,that,this,valve,will,need,to,handle,param,output,handler,the,customized,output,handler,for,the,valve;public,status,watermark,valve,int,num,input,channels,valve,output,handler,output,handler,check,argument,num,input,channels,0,this,channel,statuses,new,input,channel,status,num,input,channels,for,int,i,0,i,num,input,channels,i,channel,statuses,i,new,input,channel,status,channel,statuses,i,watermark,long,channel,statuses,i,stream,status,stream,status,active,channel,statuses,i,is,watermark,aligned,true,this,output,handler,check,not,null,output,handler,this,last,output,watermark,long,this,last,output,stream,status,stream,status,active
StatusWatermarkValve -> public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler);1506955334;Returns a new {@code StatusWatermarkValve}.__@param numInputChannels the number of input channels that this valve will need to handle_@param outputHandler the customized output handler for the valve;public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler) {_		checkArgument(numInputChannels > 0)__		this.channelStatuses = new InputChannelStatus[numInputChannels]__		for (int i = 0_ i < numInputChannels_ i++) {_			channelStatuses[i] = new InputChannelStatus()__			channelStatuses[i].watermark = Long.MIN_VALUE__			channelStatuses[i].streamStatus = StreamStatus.ACTIVE__			channelStatuses[i].isWatermarkAligned = true__		}__		this.outputHandler = checkNotNull(outputHandler)___		this.lastOutputWatermark = Long.MIN_VALUE__		this.lastOutputStreamStatus = StreamStatus.ACTIVE__	};returns,a,new,code,status,watermark,valve,param,num,input,channels,the,number,of,input,channels,that,this,valve,will,need,to,handle,param,output,handler,the,customized,output,handler,for,the,valve;public,status,watermark,valve,int,num,input,channels,valve,output,handler,output,handler,check,argument,num,input,channels,0,this,channel,statuses,new,input,channel,status,num,input,channels,for,int,i,0,i,num,input,channels,i,channel,statuses,i,new,input,channel,status,channel,statuses,i,watermark,long,channel,statuses,i,stream,status,stream,status,active,channel,statuses,i,is,watermark,aligned,true,this,output,handler,check,not,null,output,handler,this,last,output,watermark,long,this,last,output,stream,status,stream,status,active
StatusWatermarkValve -> public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler);1506955334;Returns a new {@code StatusWatermarkValve}.__@param numInputChannels the number of input channels that this valve will need to handle_@param outputHandler the customized output handler for the valve;public StatusWatermarkValve(int numInputChannels, ValveOutputHandler outputHandler) {_		checkArgument(numInputChannels > 0)__		this.channelStatuses = new InputChannelStatus[numInputChannels]__		for (int i = 0_ i < numInputChannels_ i++) {_			channelStatuses[i] = new InputChannelStatus()__			channelStatuses[i].watermark = Long.MIN_VALUE__			channelStatuses[i].streamStatus = StreamStatus.ACTIVE__			channelStatuses[i].isWatermarkAligned = true__		}__		this.outputHandler = checkNotNull(outputHandler)___		this.lastOutputWatermark = Long.MIN_VALUE__		this.lastOutputStreamStatus = StreamStatus.ACTIVE__	};returns,a,new,code,status,watermark,valve,param,num,input,channels,the,number,of,input,channels,that,this,valve,will,need,to,handle,param,output,handler,the,customized,output,handler,for,the,valve;public,status,watermark,valve,int,num,input,channels,valve,output,handler,output,handler,check,argument,num,input,channels,0,this,channel,statuses,new,input,channel,status,num,input,channels,for,int,i,0,i,num,input,channels,i,channel,statuses,i,new,input,channel,status,channel,statuses,i,watermark,long,channel,statuses,i,stream,status,stream,status,active,channel,statuses,i,is,watermark,aligned,true,this,output,handler,check,not,null,output,handler,this,last,output,watermark,long,this,last,output,stream,status,stream,status,active
StatusWatermarkValve -> InputChannelStatus -> private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses);1486732842;Utility to check if at least one channel in a given array of input channels is active;private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses) {_			for (InputChannelStatus status : channelStatuses) {_				if (status.streamStatus.isActive()) {_					return true__				}_			}_			return false__		};utility,to,check,if,at,least,one,channel,in,a,given,array,of,input,channels,is,active;private,static,boolean,has,active,channels,input,channel,status,channel,statuses,for,input,channel,status,status,channel,statuses,if,status,stream,status,is,active,return,true,return,false
StatusWatermarkValve -> InputChannelStatus -> private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses);1493195810;Utility to check if at least one channel in a given array of input channels is active.;private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses) {_			for (InputChannelStatus status : channelStatuses) {_				if (status.streamStatus.isActive()) {_					return true__				}_			}_			return false__		};utility,to,check,if,at,least,one,channel,in,a,given,array,of,input,channels,is,active;private,static,boolean,has,active,channels,input,channel,status,channel,statuses,for,input,channel,status,status,channel,statuses,if,status,stream,status,is,active,return,true,return,false
StatusWatermarkValve -> InputChannelStatus -> private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses);1493195810;Utility to check if at least one channel in a given array of input channels is active.;private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses) {_			for (InputChannelStatus status : channelStatuses) {_				if (status.streamStatus.isActive()) {_					return true__				}_			}_			return false__		};utility,to,check,if,at,least,one,channel,in,a,given,array,of,input,channels,is,active;private,static,boolean,has,active,channels,input,channel,status,channel,statuses,for,input,channel,status,status,channel,statuses,if,status,stream,status,is,active,return,true,return,false
StatusWatermarkValve -> InputChannelStatus -> private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses);1495484544;Utility to check if at least one channel in a given array of input channels is active.;private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses) {_			for (InputChannelStatus status : channelStatuses) {_				if (status.streamStatus.isActive()) {_					return true__				}_			}_			return false__		};utility,to,check,if,at,least,one,channel,in,a,given,array,of,input,channels,is,active;private,static,boolean,has,active,channels,input,channel,status,channel,statuses,for,input,channel,status,status,channel,statuses,if,status,stream,status,is,active,return,true,return,false
StatusWatermarkValve -> InputChannelStatus -> private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses);1506955238;Utility to check if at least one channel in a given array of input channels is active.;private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses) {_			for (InputChannelStatus status : channelStatuses) {_				if (status.streamStatus.isActive()) {_					return true__				}_			}_			return false__		};utility,to,check,if,at,least,one,channel,in,a,given,array,of,input,channels,is,active;private,static,boolean,has,active,channels,input,channel,status,channel,statuses,for,input,channel,status,status,channel,statuses,if,status,stream,status,is,active,return,true,return,false
StatusWatermarkValve -> InputChannelStatus -> private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses);1506955334;Utility to check if at least one channel in a given array of input channels is active.;private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses) {_			for (InputChannelStatus status : channelStatuses) {_				if (status.streamStatus.isActive()) {_					return true__				}_			}_			return false__		};utility,to,check,if,at,least,one,channel,in,a,given,array,of,input,channels,is,active;private,static,boolean,has,active,channels,input,channel,status,channel,statuses,for,input,channel,status,status,channel,statuses,if,status,stream,status,is,active,return,true,return,false
StatusWatermarkValve -> InputChannelStatus -> private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses);1506955334;Utility to check if at least one channel in a given array of input channels is active.;private static boolean hasActiveChannels(InputChannelStatus[] channelStatuses) {_			for (InputChannelStatus status : channelStatuses) {_				if (status.streamStatus.isActive()) {_					return true__				}_			}_			return false__		};utility,to,check,if,at,least,one,channel,in,a,given,array,of,input,channels,is,active;private,static,boolean,has,active,channels,input,channel,status,channel,statuses,for,input,channel,status,status,channel,statuses,if,status,stream,status,is,active,return,true,return,false
StatusWatermarkValve -> public void inputWatermark(Watermark watermark, int channelIndex);1486732842;Feed a {@link Watermark} into the valve. If the input triggers the valve to output a new Watermark,_{@link ValveOutputHandler#handleWatermark(Watermark)} will be called to process the new Watermark.__@param watermark the watermark to feed to the valve_@param channelIndex the index of the channel that the fed watermark belongs to (index starting from 0);public void inputWatermark(Watermark watermark, int channelIndex) {_		_		if (lastOutputStreamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isActive()) {_			long watermarkMillis = watermark.getTimestamp()___			_			if (watermarkMillis > channelStatuses[channelIndex].watermark) {_				channelStatuses[channelIndex].watermark = watermarkMillis___				_				if (!channelStatuses[channelIndex].isWatermarkAligned && watermarkMillis >= lastOutputWatermark) {_					channelStatuses[channelIndex].isWatermarkAligned = true__				}__				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		}_	};feed,a,link,watermark,into,the,valve,if,the,input,triggers,the,valve,to,output,a,new,watermark,link,valve,output,handler,handle,watermark,watermark,will,be,called,to,process,the,new,watermark,param,watermark,the,watermark,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,watermark,belongs,to,index,starting,from,0;public,void,input,watermark,watermark,watermark,int,channel,index,if,last,output,stream,status,is,active,channel,statuses,channel,index,stream,status,is,active,long,watermark,millis,watermark,get,timestamp,if,watermark,millis,channel,statuses,channel,index,watermark,channel,statuses,channel,index,watermark,watermark,millis,if,channel,statuses,channel,index,is,watermark,aligned,watermark,millis,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,find,and,output,new,min,watermark,across,aligned,channels
StatusWatermarkValve -> public void inputWatermark(Watermark watermark, int channelIndex);1493195810;Feed a {@link Watermark} into the valve. If the input triggers the valve to output a new Watermark,_{@link ValveOutputHandler#handleWatermark(Watermark)} will be called to process the new Watermark.__@param watermark the watermark to feed to the valve_@param channelIndex the index of the channel that the fed watermark belongs to (index starting from 0);public void inputWatermark(Watermark watermark, int channelIndex) {_		_		if (lastOutputStreamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isActive()) {_			long watermarkMillis = watermark.getTimestamp()___			_			if (watermarkMillis > channelStatuses[channelIndex].watermark) {_				channelStatuses[channelIndex].watermark = watermarkMillis___				_				if (!channelStatuses[channelIndex].isWatermarkAligned && watermarkMillis >= lastOutputWatermark) {_					channelStatuses[channelIndex].isWatermarkAligned = true__				}__				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		}_	};feed,a,link,watermark,into,the,valve,if,the,input,triggers,the,valve,to,output,a,new,watermark,link,valve,output,handler,handle,watermark,watermark,will,be,called,to,process,the,new,watermark,param,watermark,the,watermark,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,watermark,belongs,to,index,starting,from,0;public,void,input,watermark,watermark,watermark,int,channel,index,if,last,output,stream,status,is,active,channel,statuses,channel,index,stream,status,is,active,long,watermark,millis,watermark,get,timestamp,if,watermark,millis,channel,statuses,channel,index,watermark,channel,statuses,channel,index,watermark,watermark,millis,if,channel,statuses,channel,index,is,watermark,aligned,watermark,millis,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,find,and,output,new,min,watermark,across,aligned,channels
StatusWatermarkValve -> public void inputWatermark(Watermark watermark, int channelIndex);1493195810;Feed a {@link Watermark} into the valve. If the input triggers the valve to output a new Watermark,_{@link ValveOutputHandler#handleWatermark(Watermark)} will be called to process the new Watermark.__@param watermark the watermark to feed to the valve_@param channelIndex the index of the channel that the fed watermark belongs to (index starting from 0);public void inputWatermark(Watermark watermark, int channelIndex) {_		_		if (lastOutputStreamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isActive()) {_			long watermarkMillis = watermark.getTimestamp()___			_			if (watermarkMillis > channelStatuses[channelIndex].watermark) {_				channelStatuses[channelIndex].watermark = watermarkMillis___				_				if (!channelStatuses[channelIndex].isWatermarkAligned && watermarkMillis >= lastOutputWatermark) {_					channelStatuses[channelIndex].isWatermarkAligned = true__				}__				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		}_	};feed,a,link,watermark,into,the,valve,if,the,input,triggers,the,valve,to,output,a,new,watermark,link,valve,output,handler,handle,watermark,watermark,will,be,called,to,process,the,new,watermark,param,watermark,the,watermark,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,watermark,belongs,to,index,starting,from,0;public,void,input,watermark,watermark,watermark,int,channel,index,if,last,output,stream,status,is,active,channel,statuses,channel,index,stream,status,is,active,long,watermark,millis,watermark,get,timestamp,if,watermark,millis,channel,statuses,channel,index,watermark,channel,statuses,channel,index,watermark,watermark,millis,if,channel,statuses,channel,index,is,watermark,aligned,watermark,millis,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,find,and,output,new,min,watermark,across,aligned,channels
StatusWatermarkValve -> public void inputWatermark(Watermark watermark, int channelIndex);1495484544;Feed a {@link Watermark} into the valve. If the input triggers the valve to output a new Watermark,_{@link ValveOutputHandler#handleWatermark(Watermark)} will be called to process the new Watermark.__@param watermark the watermark to feed to the valve_@param channelIndex the index of the channel that the fed watermark belongs to (index starting from 0);public void inputWatermark(Watermark watermark, int channelIndex) {_		_		if (lastOutputStreamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isActive()) {_			long watermarkMillis = watermark.getTimestamp()___			_			if (watermarkMillis > channelStatuses[channelIndex].watermark) {_				channelStatuses[channelIndex].watermark = watermarkMillis___				_				if (!channelStatuses[channelIndex].isWatermarkAligned && watermarkMillis >= lastOutputWatermark) {_					channelStatuses[channelIndex].isWatermarkAligned = true__				}__				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		}_	};feed,a,link,watermark,into,the,valve,if,the,input,triggers,the,valve,to,output,a,new,watermark,link,valve,output,handler,handle,watermark,watermark,will,be,called,to,process,the,new,watermark,param,watermark,the,watermark,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,watermark,belongs,to,index,starting,from,0;public,void,input,watermark,watermark,watermark,int,channel,index,if,last,output,stream,status,is,active,channel,statuses,channel,index,stream,status,is,active,long,watermark,millis,watermark,get,timestamp,if,watermark,millis,channel,statuses,channel,index,watermark,channel,statuses,channel,index,watermark,watermark,millis,if,channel,statuses,channel,index,is,watermark,aligned,watermark,millis,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,find,and,output,new,min,watermark,across,aligned,channels
StatusWatermarkValve -> public void inputWatermark(Watermark watermark, int channelIndex);1506955238;Feed a {@link Watermark} into the valve. If the input triggers the valve to output a new Watermark,_{@link ValveOutputHandler#handleWatermark(Watermark)} will be called to process the new Watermark.__@param watermark the watermark to feed to the valve_@param channelIndex the index of the channel that the fed watermark belongs to (index starting from 0);public void inputWatermark(Watermark watermark, int channelIndex) {_		_		if (lastOutputStreamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isActive()) {_			long watermarkMillis = watermark.getTimestamp()___			_			if (watermarkMillis > channelStatuses[channelIndex].watermark) {_				channelStatuses[channelIndex].watermark = watermarkMillis___				_				if (!channelStatuses[channelIndex].isWatermarkAligned && watermarkMillis >= lastOutputWatermark) {_					channelStatuses[channelIndex].isWatermarkAligned = true__				}__				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		}_	};feed,a,link,watermark,into,the,valve,if,the,input,triggers,the,valve,to,output,a,new,watermark,link,valve,output,handler,handle,watermark,watermark,will,be,called,to,process,the,new,watermark,param,watermark,the,watermark,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,watermark,belongs,to,index,starting,from,0;public,void,input,watermark,watermark,watermark,int,channel,index,if,last,output,stream,status,is,active,channel,statuses,channel,index,stream,status,is,active,long,watermark,millis,watermark,get,timestamp,if,watermark,millis,channel,statuses,channel,index,watermark,channel,statuses,channel,index,watermark,watermark,millis,if,channel,statuses,channel,index,is,watermark,aligned,watermark,millis,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,find,and,output,new,min,watermark,across,aligned,channels
StatusWatermarkValve -> public void inputWatermark(Watermark watermark, int channelIndex);1506955334;Feed a {@link Watermark} into the valve. If the input triggers the valve to output a new Watermark,_{@link ValveOutputHandler#handleWatermark(Watermark)} will be called to process the new Watermark.__@param watermark the watermark to feed to the valve_@param channelIndex the index of the channel that the fed watermark belongs to (index starting from 0);public void inputWatermark(Watermark watermark, int channelIndex) {_		_		if (lastOutputStreamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isActive()) {_			long watermarkMillis = watermark.getTimestamp()___			_			if (watermarkMillis > channelStatuses[channelIndex].watermark) {_				channelStatuses[channelIndex].watermark = watermarkMillis___				_				if (!channelStatuses[channelIndex].isWatermarkAligned && watermarkMillis >= lastOutputWatermark) {_					channelStatuses[channelIndex].isWatermarkAligned = true__				}__				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		}_	};feed,a,link,watermark,into,the,valve,if,the,input,triggers,the,valve,to,output,a,new,watermark,link,valve,output,handler,handle,watermark,watermark,will,be,called,to,process,the,new,watermark,param,watermark,the,watermark,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,watermark,belongs,to,index,starting,from,0;public,void,input,watermark,watermark,watermark,int,channel,index,if,last,output,stream,status,is,active,channel,statuses,channel,index,stream,status,is,active,long,watermark,millis,watermark,get,timestamp,if,watermark,millis,channel,statuses,channel,index,watermark,channel,statuses,channel,index,watermark,watermark,millis,if,channel,statuses,channel,index,is,watermark,aligned,watermark,millis,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,find,and,output,new,min,watermark,across,aligned,channels
StatusWatermarkValve -> public void inputWatermark(Watermark watermark, int channelIndex);1506955334;Feed a {@link Watermark} into the valve. If the input triggers the valve to output a new Watermark,_{@link ValveOutputHandler#handleWatermark(Watermark)} will be called to process the new Watermark.__@param watermark the watermark to feed to the valve_@param channelIndex the index of the channel that the fed watermark belongs to (index starting from 0);public void inputWatermark(Watermark watermark, int channelIndex) {_		_		if (lastOutputStreamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isActive()) {_			long watermarkMillis = watermark.getTimestamp()___			_			if (watermarkMillis > channelStatuses[channelIndex].watermark) {_				channelStatuses[channelIndex].watermark = watermarkMillis___				_				if (!channelStatuses[channelIndex].isWatermarkAligned && watermarkMillis >= lastOutputWatermark) {_					channelStatuses[channelIndex].isWatermarkAligned = true__				}__				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		}_	};feed,a,link,watermark,into,the,valve,if,the,input,triggers,the,valve,to,output,a,new,watermark,link,valve,output,handler,handle,watermark,watermark,will,be,called,to,process,the,new,watermark,param,watermark,the,watermark,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,watermark,belongs,to,index,starting,from,0;public,void,input,watermark,watermark,watermark,int,channel,index,if,last,output,stream,status,is,active,channel,statuses,channel,index,stream,status,is,active,long,watermark,millis,watermark,get,timestamp,if,watermark,millis,channel,statuses,channel,index,watermark,channel,statuses,channel,index,watermark,watermark,millis,if,channel,statuses,channel,index,is,watermark,aligned,watermark,millis,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,find,and,output,new,min,watermark,across,aligned,channels
StatusWatermarkValve -> public void inputStreamStatus(StreamStatus streamStatus, int channelIndex);1486732842;Feed a {@link StreamStatus} into the valve. This may trigger the valve to output either a new Stream Status,_for which {@link ValveOutputHandler#handleStreamStatus(StreamStatus)} will be called, or a new Watermark,_for which {@link ValveOutputHandler#handleWatermark(Watermark)} will be called.__@param streamStatus the stream status to feed to the valve_@param channelIndex the index of the channel that the fed stream status belongs to (index starting from 0);public void inputStreamStatus(StreamStatus streamStatus, int channelIndex) {_		_		if (streamStatus.isIdle() && channelStatuses[channelIndex].streamStatus.isActive()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.IDLE___			_			channelStatuses[channelIndex].isWatermarkAligned = false___			_			_			if (!InputChannelStatus.hasActiveChannels(channelStatuses)) {_				lastOutputStreamStatus = StreamStatus.IDLE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			} else if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_				_				_				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		} else if (streamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isIdle()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.ACTIVE___			_			_			if (channelStatuses[channelIndex].watermark >= lastOutputWatermark) {_				channelStatuses[channelIndex].isWatermarkAligned = true__			}__			_			_			if (lastOutputStreamStatus.isIdle()) {_				lastOutputStreamStatus = StreamStatus.ACTIVE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			}_		}_	};feed,a,link,stream,status,into,the,valve,this,may,trigger,the,valve,to,output,either,a,new,stream,status,for,which,link,valve,output,handler,handle,stream,status,stream,status,will,be,called,or,a,new,watermark,for,which,link,valve,output,handler,handle,watermark,watermark,will,be,called,param,stream,status,the,stream,status,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,stream,status,belongs,to,index,starting,from,0;public,void,input,stream,status,stream,status,stream,status,int,channel,index,if,stream,status,is,idle,channel,statuses,channel,index,stream,status,is,active,channel,statuses,channel,index,stream,status,stream,status,idle,channel,statuses,channel,index,is,watermark,aligned,false,if,input,channel,status,has,active,channels,channel,statuses,last,output,stream,status,stream,status,idle,output,handler,handle,stream,status,last,output,stream,status,else,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,new,min,watermark,across,aligned,channels,else,if,stream,status,is,active,channel,statuses,channel,index,stream,status,is,idle,channel,statuses,channel,index,stream,status,stream,status,active,if,channel,statuses,channel,index,watermark,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,if,last,output,stream,status,is,idle,last,output,stream,status,stream,status,active,output,handler,handle,stream,status,last,output,stream,status
StatusWatermarkValve -> public void inputStreamStatus(StreamStatus streamStatus, int channelIndex);1493195810;Feed a {@link StreamStatus} into the valve. This may trigger the valve to output either a new Stream Status,_for which {@link ValveOutputHandler#handleStreamStatus(StreamStatus)} will be called, or a new Watermark,_for which {@link ValveOutputHandler#handleWatermark(Watermark)} will be called.__@param streamStatus the stream status to feed to the valve_@param channelIndex the index of the channel that the fed stream status belongs to (index starting from 0);public void inputStreamStatus(StreamStatus streamStatus, int channelIndex) {_		_		if (streamStatus.isIdle() && channelStatuses[channelIndex].streamStatus.isActive()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.IDLE___			_			channelStatuses[channelIndex].isWatermarkAligned = false___			_			_			if (!InputChannelStatus.hasActiveChannels(channelStatuses)) {_				lastOutputStreamStatus = StreamStatus.IDLE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			} else if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_				_				_				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		} else if (streamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isIdle()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.ACTIVE___			_			_			if (channelStatuses[channelIndex].watermark >= lastOutputWatermark) {_				channelStatuses[channelIndex].isWatermarkAligned = true__			}__			_			_			if (lastOutputStreamStatus.isIdle()) {_				lastOutputStreamStatus = StreamStatus.ACTIVE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			}_		}_	};feed,a,link,stream,status,into,the,valve,this,may,trigger,the,valve,to,output,either,a,new,stream,status,for,which,link,valve,output,handler,handle,stream,status,stream,status,will,be,called,or,a,new,watermark,for,which,link,valve,output,handler,handle,watermark,watermark,will,be,called,param,stream,status,the,stream,status,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,stream,status,belongs,to,index,starting,from,0;public,void,input,stream,status,stream,status,stream,status,int,channel,index,if,stream,status,is,idle,channel,statuses,channel,index,stream,status,is,active,channel,statuses,channel,index,stream,status,stream,status,idle,channel,statuses,channel,index,is,watermark,aligned,false,if,input,channel,status,has,active,channels,channel,statuses,last,output,stream,status,stream,status,idle,output,handler,handle,stream,status,last,output,stream,status,else,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,new,min,watermark,across,aligned,channels,else,if,stream,status,is,active,channel,statuses,channel,index,stream,status,is,idle,channel,statuses,channel,index,stream,status,stream,status,active,if,channel,statuses,channel,index,watermark,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,if,last,output,stream,status,is,idle,last,output,stream,status,stream,status,active,output,handler,handle,stream,status,last,output,stream,status
StatusWatermarkValve -> public void inputStreamStatus(StreamStatus streamStatus, int channelIndex);1493195810;Feed a {@link StreamStatus} into the valve. This may trigger the valve to output either a new Stream Status,_for which {@link ValveOutputHandler#handleStreamStatus(StreamStatus)} will be called, or a new Watermark,_for which {@link ValveOutputHandler#handleWatermark(Watermark)} will be called.__@param streamStatus the stream status to feed to the valve_@param channelIndex the index of the channel that the fed stream status belongs to (index starting from 0);public void inputStreamStatus(StreamStatus streamStatus, int channelIndex) {_		_		if (streamStatus.isIdle() && channelStatuses[channelIndex].streamStatus.isActive()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.IDLE___			_			channelStatuses[channelIndex].isWatermarkAligned = false___			_			_			if (!InputChannelStatus.hasActiveChannels(channelStatuses)) {_				lastOutputStreamStatus = StreamStatus.IDLE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			} else if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_				_				_				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		} else if (streamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isIdle()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.ACTIVE___			_			_			if (channelStatuses[channelIndex].watermark >= lastOutputWatermark) {_				channelStatuses[channelIndex].isWatermarkAligned = true__			}__			_			_			if (lastOutputStreamStatus.isIdle()) {_				lastOutputStreamStatus = StreamStatus.ACTIVE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			}_		}_	};feed,a,link,stream,status,into,the,valve,this,may,trigger,the,valve,to,output,either,a,new,stream,status,for,which,link,valve,output,handler,handle,stream,status,stream,status,will,be,called,or,a,new,watermark,for,which,link,valve,output,handler,handle,watermark,watermark,will,be,called,param,stream,status,the,stream,status,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,stream,status,belongs,to,index,starting,from,0;public,void,input,stream,status,stream,status,stream,status,int,channel,index,if,stream,status,is,idle,channel,statuses,channel,index,stream,status,is,active,channel,statuses,channel,index,stream,status,stream,status,idle,channel,statuses,channel,index,is,watermark,aligned,false,if,input,channel,status,has,active,channels,channel,statuses,last,output,stream,status,stream,status,idle,output,handler,handle,stream,status,last,output,stream,status,else,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,new,min,watermark,across,aligned,channels,else,if,stream,status,is,active,channel,statuses,channel,index,stream,status,is,idle,channel,statuses,channel,index,stream,status,stream,status,active,if,channel,statuses,channel,index,watermark,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,if,last,output,stream,status,is,idle,last,output,stream,status,stream,status,active,output,handler,handle,stream,status,last,output,stream,status
StatusWatermarkValve -> public void inputStreamStatus(StreamStatus streamStatus, int channelIndex);1495484544;Feed a {@link StreamStatus} into the valve. This may trigger the valve to output either a new Stream Status,_for which {@link ValveOutputHandler#handleStreamStatus(StreamStatus)} will be called, or a new Watermark,_for which {@link ValveOutputHandler#handleWatermark(Watermark)} will be called.__@param streamStatus the stream status to feed to the valve_@param channelIndex the index of the channel that the fed stream status belongs to (index starting from 0);public void inputStreamStatus(StreamStatus streamStatus, int channelIndex) {_		_		if (streamStatus.isIdle() && channelStatuses[channelIndex].streamStatus.isActive()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.IDLE___			_			channelStatuses[channelIndex].isWatermarkAligned = false___			_			_			if (!InputChannelStatus.hasActiveChannels(channelStatuses)) {_				lastOutputStreamStatus = StreamStatus.IDLE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			} else if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_				_				_				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		} else if (streamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isIdle()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.ACTIVE___			_			_			if (channelStatuses[channelIndex].watermark >= lastOutputWatermark) {_				channelStatuses[channelIndex].isWatermarkAligned = true__			}__			_			_			if (lastOutputStreamStatus.isIdle()) {_				lastOutputStreamStatus = StreamStatus.ACTIVE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			}_		}_	};feed,a,link,stream,status,into,the,valve,this,may,trigger,the,valve,to,output,either,a,new,stream,status,for,which,link,valve,output,handler,handle,stream,status,stream,status,will,be,called,or,a,new,watermark,for,which,link,valve,output,handler,handle,watermark,watermark,will,be,called,param,stream,status,the,stream,status,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,stream,status,belongs,to,index,starting,from,0;public,void,input,stream,status,stream,status,stream,status,int,channel,index,if,stream,status,is,idle,channel,statuses,channel,index,stream,status,is,active,channel,statuses,channel,index,stream,status,stream,status,idle,channel,statuses,channel,index,is,watermark,aligned,false,if,input,channel,status,has,active,channels,channel,statuses,last,output,stream,status,stream,status,idle,output,handler,handle,stream,status,last,output,stream,status,else,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,new,min,watermark,across,aligned,channels,else,if,stream,status,is,active,channel,statuses,channel,index,stream,status,is,idle,channel,statuses,channel,index,stream,status,stream,status,active,if,channel,statuses,channel,index,watermark,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,if,last,output,stream,status,is,idle,last,output,stream,status,stream,status,active,output,handler,handle,stream,status,last,output,stream,status
StatusWatermarkValve -> public void inputStreamStatus(StreamStatus streamStatus, int channelIndex);1506955238;Feed a {@link StreamStatus} into the valve. This may trigger the valve to output either a new Stream Status,_for which {@link ValveOutputHandler#handleStreamStatus(StreamStatus)} will be called, or a new Watermark,_for which {@link ValveOutputHandler#handleWatermark(Watermark)} will be called.__@param streamStatus the stream status to feed to the valve_@param channelIndex the index of the channel that the fed stream status belongs to (index starting from 0);public void inputStreamStatus(StreamStatus streamStatus, int channelIndex) {_		_		if (streamStatus.isIdle() && channelStatuses[channelIndex].streamStatus.isActive()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.IDLE___			_			channelStatuses[channelIndex].isWatermarkAligned = false___			_			_			if (!InputChannelStatus.hasActiveChannels(channelStatuses)) {_				lastOutputStreamStatus = StreamStatus.IDLE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			} else if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_				_				_				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		} else if (streamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isIdle()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.ACTIVE___			_			_			if (channelStatuses[channelIndex].watermark >= lastOutputWatermark) {_				channelStatuses[channelIndex].isWatermarkAligned = true__			}__			_			_			if (lastOutputStreamStatus.isIdle()) {_				lastOutputStreamStatus = StreamStatus.ACTIVE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			}_		}_	};feed,a,link,stream,status,into,the,valve,this,may,trigger,the,valve,to,output,either,a,new,stream,status,for,which,link,valve,output,handler,handle,stream,status,stream,status,will,be,called,or,a,new,watermark,for,which,link,valve,output,handler,handle,watermark,watermark,will,be,called,param,stream,status,the,stream,status,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,stream,status,belongs,to,index,starting,from,0;public,void,input,stream,status,stream,status,stream,status,int,channel,index,if,stream,status,is,idle,channel,statuses,channel,index,stream,status,is,active,channel,statuses,channel,index,stream,status,stream,status,idle,channel,statuses,channel,index,is,watermark,aligned,false,if,input,channel,status,has,active,channels,channel,statuses,last,output,stream,status,stream,status,idle,output,handler,handle,stream,status,last,output,stream,status,else,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,new,min,watermark,across,aligned,channels,else,if,stream,status,is,active,channel,statuses,channel,index,stream,status,is,idle,channel,statuses,channel,index,stream,status,stream,status,active,if,channel,statuses,channel,index,watermark,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,if,last,output,stream,status,is,idle,last,output,stream,status,stream,status,active,output,handler,handle,stream,status,last,output,stream,status
StatusWatermarkValve -> public void inputStreamStatus(StreamStatus streamStatus, int channelIndex);1506955334;Feed a {@link StreamStatus} into the valve. This may trigger the valve to output either a new Stream Status,_for which {@link ValveOutputHandler#handleStreamStatus(StreamStatus)} will be called, or a new Watermark,_for which {@link ValveOutputHandler#handleWatermark(Watermark)} will be called.__@param streamStatus the stream status to feed to the valve_@param channelIndex the index of the channel that the fed stream status belongs to (index starting from 0);public void inputStreamStatus(StreamStatus streamStatus, int channelIndex) {_		_		if (streamStatus.isIdle() && channelStatuses[channelIndex].streamStatus.isActive()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.IDLE___			_			channelStatuses[channelIndex].isWatermarkAligned = false___			_			_			if (!InputChannelStatus.hasActiveChannels(channelStatuses)) {__				_				_				_				_				_				if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_					findAndOutputMaxWatermarkAcrossAllChannels()__				}__				lastOutputStreamStatus = StreamStatus.IDLE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			} else if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_				_				_				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		} else if (streamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isIdle()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.ACTIVE___			_			_			if (channelStatuses[channelIndex].watermark >= lastOutputWatermark) {_				channelStatuses[channelIndex].isWatermarkAligned = true__			}__			_			_			if (lastOutputStreamStatus.isIdle()) {_				lastOutputStreamStatus = StreamStatus.ACTIVE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			}_		}_	};feed,a,link,stream,status,into,the,valve,this,may,trigger,the,valve,to,output,either,a,new,stream,status,for,which,link,valve,output,handler,handle,stream,status,stream,status,will,be,called,or,a,new,watermark,for,which,link,valve,output,handler,handle,watermark,watermark,will,be,called,param,stream,status,the,stream,status,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,stream,status,belongs,to,index,starting,from,0;public,void,input,stream,status,stream,status,stream,status,int,channel,index,if,stream,status,is,idle,channel,statuses,channel,index,stream,status,is,active,channel,statuses,channel,index,stream,status,stream,status,idle,channel,statuses,channel,index,is,watermark,aligned,false,if,input,channel,status,has,active,channels,channel,statuses,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,max,watermark,across,all,channels,last,output,stream,status,stream,status,idle,output,handler,handle,stream,status,last,output,stream,status,else,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,new,min,watermark,across,aligned,channels,else,if,stream,status,is,active,channel,statuses,channel,index,stream,status,is,idle,channel,statuses,channel,index,stream,status,stream,status,active,if,channel,statuses,channel,index,watermark,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,if,last,output,stream,status,is,idle,last,output,stream,status,stream,status,active,output,handler,handle,stream,status,last,output,stream,status
StatusWatermarkValve -> public void inputStreamStatus(StreamStatus streamStatus, int channelIndex);1506955334;Feed a {@link StreamStatus} into the valve. This may trigger the valve to output either a new Stream Status,_for which {@link ValveOutputHandler#handleStreamStatus(StreamStatus)} will be called, or a new Watermark,_for which {@link ValveOutputHandler#handleWatermark(Watermark)} will be called.__@param streamStatus the stream status to feed to the valve_@param channelIndex the index of the channel that the fed stream status belongs to (index starting from 0);public void inputStreamStatus(StreamStatus streamStatus, int channelIndex) {_		_		if (streamStatus.isIdle() && channelStatuses[channelIndex].streamStatus.isActive()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.IDLE___			_			channelStatuses[channelIndex].isWatermarkAligned = false___			_			_			if (!InputChannelStatus.hasActiveChannels(channelStatuses)) {__				_				_				_				_				_				if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_					findAndOutputMaxWatermarkAcrossAllChannels()__				}__				lastOutputStreamStatus = StreamStatus.IDLE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			} else if (channelStatuses[channelIndex].watermark == lastOutputWatermark) {_				_				_				_				findAndOutputNewMinWatermarkAcrossAlignedChannels()__			}_		} else if (streamStatus.isActive() && channelStatuses[channelIndex].streamStatus.isIdle()) {_			_			channelStatuses[channelIndex].streamStatus = StreamStatus.ACTIVE___			_			_			if (channelStatuses[channelIndex].watermark >= lastOutputWatermark) {_				channelStatuses[channelIndex].isWatermarkAligned = true__			}__			_			_			if (lastOutputStreamStatus.isIdle()) {_				lastOutputStreamStatus = StreamStatus.ACTIVE__				outputHandler.handleStreamStatus(lastOutputStreamStatus)__			}_		}_	};feed,a,link,stream,status,into,the,valve,this,may,trigger,the,valve,to,output,either,a,new,stream,status,for,which,link,valve,output,handler,handle,stream,status,stream,status,will,be,called,or,a,new,watermark,for,which,link,valve,output,handler,handle,watermark,watermark,will,be,called,param,stream,status,the,stream,status,to,feed,to,the,valve,param,channel,index,the,index,of,the,channel,that,the,fed,stream,status,belongs,to,index,starting,from,0;public,void,input,stream,status,stream,status,stream,status,int,channel,index,if,stream,status,is,idle,channel,statuses,channel,index,stream,status,is,active,channel,statuses,channel,index,stream,status,stream,status,idle,channel,statuses,channel,index,is,watermark,aligned,false,if,input,channel,status,has,active,channels,channel,statuses,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,max,watermark,across,all,channels,last,output,stream,status,stream,status,idle,output,handler,handle,stream,status,last,output,stream,status,else,if,channel,statuses,channel,index,watermark,last,output,watermark,find,and,output,new,min,watermark,across,aligned,channels,else,if,stream,status,is,active,channel,statuses,channel,index,stream,status,is,idle,channel,statuses,channel,index,stream,status,stream,status,active,if,channel,statuses,channel,index,watermark,last,output,watermark,channel,statuses,channel,index,is,watermark,aligned,true,if,last,output,stream,status,is,idle,last,output,stream,status,stream,status,active,output,handler,handle,stream,status,last,output,stream,status
