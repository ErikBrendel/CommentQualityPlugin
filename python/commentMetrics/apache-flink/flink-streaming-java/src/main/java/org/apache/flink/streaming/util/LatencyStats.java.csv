commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;public void reportLatency(LatencyMarker marker) {     final String uniqueName = granularity.createUniqueHistogramName(marker, operatorId, subtaskIndex).     DescriptiveStatisticsHistogram latencyHistogram = this.latencyStats.get(uniqueName).     if (latencyHistogram == null) {         latencyHistogram = new DescriptiveStatisticsHistogram(this.historySize).         this.latencyStats.put(uniqueName, latencyHistogram).         granularity.createSourceMetricGroups(metricGroup, marker, operatorId, subtaskIndex).addGroup("operator_id", String.valueOf(operatorId)).addGroup("operator_subtask_index", String.valueOf(subtaskIndex)).histogram("latency", latencyHistogram).     }     long now = System.currentTimeMillis().     latencyHistogram.update(now - marker.getMarkedTime()). }
false;;3;4;;@Override String createUniqueHistogramName(LatencyMarker marker, OperatorID operatorId, int operatorSubtaskIndex) {     return String.valueOf(operatorId) + operatorSubtaskIndex. }
false;;4;8;;@Override MetricGroup createSourceMetricGroups(MetricGroup base, LatencyMarker marker, OperatorID operatorId, int operatorSubtaskIndex) {     return base. }
false;;3;4;;@Override String createUniqueHistogramName(LatencyMarker marker, OperatorID operatorId, int operatorSubtaskIndex) {     return String.valueOf(marker.getOperatorId()) + operatorId + operatorSubtaskIndex. }
false;;4;9;;@Override MetricGroup createSourceMetricGroups(MetricGroup base, LatencyMarker marker, OperatorID operatorId, int operatorSubtaskIndex) {     return base.addGroup("source_id", String.valueOf(marker.getOperatorId())). }
false;;3;4;;@Override String createUniqueHistogramName(LatencyMarker marker, OperatorID operatorId, int operatorSubtaskIndex) {     return String.valueOf(marker.getOperatorId()) + marker.getSubtaskIndex() + operatorId + operatorSubtaskIndex. }
false;;4;10;;@Override MetricGroup createSourceMetricGroups(MetricGroup base, LatencyMarker marker, OperatorID operatorId, int operatorSubtaskIndex) {     return base.addGroup("source_id", String.valueOf(marker.getOperatorId())).addGroup("source_subtask_index", String.valueOf(marker.getSubtaskIndex())). }
false;abstract;3;1;;abstract String createUniqueHistogramName(LatencyMarker marker, OperatorID operatorId, int operatorSubtaskIndex).
false;abstract;4;1;;abstract MetricGroup createSourceMetricGroups(MetricGroup base, LatencyMarker marker, OperatorID operatorId, int operatorSubtaskIndex).
