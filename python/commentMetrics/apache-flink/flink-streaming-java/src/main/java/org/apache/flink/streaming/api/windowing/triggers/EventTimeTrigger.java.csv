commented;modifiers;parameterAmount;loc;comment;code
false;public;4;10;;@Override public TriggerResult onElement(Object element, long timestamp, TimeWindow window, TriggerContext ctx) throws Exception {     if (window.maxTimestamp() <= ctx.getCurrentWatermark()) {         // if the watermark is already past the window fire immediately         return TriggerResult.FIRE.     } else {         ctx.registerEventTimeTimer(window.maxTimestamp()).         return TriggerResult.CONTINUE.     } }
false;public;3;6;;@Override public TriggerResult onEventTime(long time, TimeWindow window, TriggerContext ctx) {     return time == window.maxTimestamp() ? TriggerResult.FIRE : TriggerResult.CONTINUE. }
false;public;3;4;;@Override public TriggerResult onProcessingTime(long time, TimeWindow window, TriggerContext ctx) throws Exception {     return TriggerResult.CONTINUE. }
false;public;2;4;;@Override public void clear(TimeWindow window, TriggerContext ctx) throws Exception {     ctx.deleteEventTimeTimer(window.maxTimestamp()). }
false;public;0;4;;@Override public boolean canMerge() {     return true. }
false;public;2;11;;@Override public void onMerge(TimeWindow window, OnMergeContext ctx) {     // only register a timer if the watermark is not yet past the end of the merged window     // this is in line with the logic in onElement(). If the watermark is past the end of     // the window onElement() will fire and setting a timer here would fire the window twice.     long windowMaxTimestamp = window.maxTimestamp().     if (windowMaxTimestamp > ctx.getCurrentWatermark()) {         ctx.registerEventTimeTimer(windowMaxTimestamp).     } }
false;public;0;4;;@Override public String toString() {     return "EventTimeTrigger()". }
true;public,static;0;3;/**  * Creates an event-time trigger that fires once the watermark passes the end of the window.  *  * <p>Once the trigger fires all elements are discarded. Elements that arrive late immediately  * trigger window evaluation with just this one element.  */ ;/**  * Creates an event-time trigger that fires once the watermark passes the end of the window.  *  * <p>Once the trigger fires all elements are discarded. Elements that arrive late immediately  * trigger window evaluation with just this one element.  */ public static EventTimeTrigger create() {     return new EventTimeTrigger(). }
