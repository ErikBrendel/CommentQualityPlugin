commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the next {@link BufferOrEvent} that the operator may consume.  * This call blocks until the next BufferOrEvent is available, or until the stream  * has been determined to be finished.  *  * @return The next BufferOrEvent, or {@code null}, if the stream is finished.  *  * @throws IOException Thrown if the network or local disk I/O fails.  *  * @throws InterruptedException Thrown if the thread is interrupted while blocking during  *                              waiting for the next BufferOrEvent to become available.  * @throws Exception Thrown in case that a checkpoint fails that is started as the result of receiving  *                   the last checkpoint barrier  */ ;/**  * Returns the next {@link BufferOrEvent} that the operator may consume.  * This call blocks until the next BufferOrEvent is available, or until the stream  * has been determined to be finished.  *  * @return The next BufferOrEvent, or {@code null}, if the stream is finished.  *  * @throws IOException Thrown if the network or local disk I/O fails.  *  * @throws InterruptedException Thrown if the thread is interrupted while blocking during  *                              waiting for the next BufferOrEvent to become available.  * @throws Exception Thrown in case that a checkpoint fails that is started as the result of receiving  *                   the last checkpoint barrier  */ BufferOrEvent getNextNonBlocked() throws Exception.
true;;1;1;/**  * Registers the task be notified once all checkpoint barriers have been received for a checkpoint.  *  * @param task The task to notify  */ ;/**  * Registers the task be notified once all checkpoint barriers have been received for a checkpoint.  *  * @param task The task to notify  */ void registerCheckpointEventHandler(AbstractInvokable task).
true;;0;1;/**  * Cleans up all internally held resources.  *  * @throws IOException Thrown if the cleanup of I/O resources failed.  */ ;/**  * Cleans up all internally held resources.  *  * @throws IOException Thrown if the cleanup of I/O resources failed.  */ void cleanup() throws IOException.
true;;0;1;/**  * Checks if the barrier handler has buffered any data internally.  * @return {@code True}, if no data is buffered internally, {@code false} otherwise.  */ ;/**  * Checks if the barrier handler has buffered any data internally.  * @return {@code True}, if no data is buffered internally, {@code false} otherwise.  */ boolean isEmpty().
true;;0;1;/**  * Gets the time that the latest alignment took, in nanoseconds.  * If there is currently an alignment in progress, it will return the time spent in the  * current alignment so far.  *  * @return The duration in nanoseconds  */ ;/**  * Gets the time that the latest alignment took, in nanoseconds.  * If there is currently an alignment in progress, it will return the time spent in the  * current alignment so far.  *  * @return The duration in nanoseconds  */ long getAlignmentDurationNanos().
