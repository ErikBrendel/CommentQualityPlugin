commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;3;1;/**  * Returns a {@code Collection} of windows that should be assigned to the element.  *  * @param element The element to which windows should be assigned.  * @param timestamp The timestamp of the element.  * @param context The {@link WindowAssignerContext} in which the assigner operates.  */ ;/**  * Returns a {@code Collection} of windows that should be assigned to the element.  *  * @param element The element to which windows should be assigned.  * @param timestamp The timestamp of the element.  * @param context The {@link WindowAssignerContext} in which the assigner operates.  */ public abstract Collection<W> assignWindows(T element, long timestamp, WindowAssignerContext context).
true;public,abstract;1;1;/**  * Returns the default trigger associated with this {@code WindowAssigner}.  */ ;/**  * Returns the default trigger associated with this {@code WindowAssigner}.  */ public abstract Trigger<T, W> getDefaultTrigger(StreamExecutionEnvironment env).
true;public,abstract;1;1;/**  * Returns a {@link TypeSerializer} for serializing windows that are assigned by  * this {@code WindowAssigner}.  */ ;/**  * Returns a {@link TypeSerializer} for serializing windows that are assigned by  * this {@code WindowAssigner}.  */ public abstract TypeSerializer<W> getWindowSerializer(ExecutionConfig executionConfig).
true;public,abstract;0;1;/**  * Returns {@code true} if elements are assigned to windows based on event time,  * {@code false} otherwise.  */ ;/**  * Returns {@code true} if elements are assigned to windows based on event time,  * {@code false} otherwise.  */ public abstract boolean isEventTime().
true;public,abstract;0;1;/**  * Returns the current processing time.  */ ;/**  * Returns the current processing time.  */ public abstract long getCurrentProcessingTime().
