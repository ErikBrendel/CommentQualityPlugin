commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Internally used to set the job ID after instantiation.  *  * @param id  * @throws Exception  */ ;/**  * Internally used to set the job ID after instantiation.  *  * @param id  * @throws Exception  */ public void setJobId(String id) throws Exception {     this.jobId = id. }
true;public;1;3;/**  * Internally used to set the operator ID after instantiation.  *  * @param id  * @throws Exception  */ ;/**  * Internally used to set the operator ID after instantiation.  *  * @param id  * @throws Exception  */ public void setOperatorId(String id) throws Exception {     this.operatorId = id. }
true;public,abstract;0;1;/**  * Opens/connects to the resource, and possibly creates it beforehand.  *  * @throws Exception  */ ;/**  * Opens/connects to the resource, and possibly creates it beforehand.  *  * @throws Exception  */ public abstract void open() throws Exception.
true;public,abstract;0;1;/**  * Closes the resource/connection to it. The resource should generally still exist after this call.  *  * @throws Exception  */ ;/**  * Closes the resource/connection to it. The resource should generally still exist after this call.  *  * @throws Exception  */ public abstract void close() throws Exception.
true;public,abstract;0;1;/**  * Creates/opens/connects to the resource that is used to store information. Called once directly after instantiation.  * @throws Exception  */ ;/**  * Creates/opens/connects to the resource that is used to store information. Called once directly after instantiation.  * @throws Exception  */ public abstract void createResource() throws Exception.
true;public,abstract;2;1;/**  * Mark the given checkpoint as completed in the resource.  *  * @param subtaskIdx the index of the subtask responsible for committing the checkpoint.  * @param checkpointID the id of the checkpoint to be committed.  * @throws Exception  */ ;/**  * Mark the given checkpoint as completed in the resource.  *  * @param subtaskIdx the index of the subtask responsible for committing the checkpoint.  * @param checkpointID the id of the checkpoint to be committed.  * @throws Exception  */ public abstract void commitCheckpoint(int subtaskIdx, long checkpointID) throws Exception.
true;public,abstract;2;1;/**  * Checked the resource whether the given checkpoint was committed completely.  *  * @param subtaskIdx the index of the subtask responsible for committing the checkpoint.  * @param checkpointID the id of the checkpoint we are interested in.  * @return true if the checkpoint was committed completely, false otherwise  * @throws Exception  */ ;/**  * Checked the resource whether the given checkpoint was committed completely.  *  * @param subtaskIdx the index of the subtask responsible for committing the checkpoint.  * @param checkpointID the id of the checkpoint we are interested in.  * @return true if the checkpoint was committed completely, false otherwise  * @throws Exception  */ public abstract boolean isCheckpointCommitted(int subtaskIdx, long checkpointID) throws Exception.
