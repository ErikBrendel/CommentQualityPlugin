commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void setRuntimeContext(RuntimeContext runtimeContext) {     Preconditions.checkNotNull(runtimeContext).     if (runtimeContext instanceof IterationRuntimeContext) {         super.setRuntimeContext(new RichAsyncFunctionIterationRuntimeContext((IterationRuntimeContext) runtimeContext)).     } else {         super.setRuntimeContext(new RichAsyncFunctionRuntimeContext(runtimeContext)).     } }
false;public,abstract;2;2;;@Override public abstract void asyncInvoke(IN input, ResultFuture<OUT> resultFuture) throws Exception.
false;public;0;4;;@Override public String getTaskName() {     return runtimeContext.getTaskName(). }
false;public;0;4;;@Override public MetricGroup getMetricGroup() {     return runtimeContext.getMetricGroup(). }
false;public;0;4;;@Override public int getNumberOfParallelSubtasks() {     return runtimeContext.getNumberOfParallelSubtasks(). }
false;public;0;4;;@Override public int getMaxNumberOfParallelSubtasks() {     return runtimeContext.getMaxNumberOfParallelSubtasks(). }
false;public;0;4;;@Override public int getIndexOfThisSubtask() {     return runtimeContext.getIndexOfThisSubtask(). }
false;public;0;4;;@Override public int getAttemptNumber() {     return runtimeContext.getAttemptNumber(). }
false;public;0;4;;@Override public String getTaskNameWithSubtasks() {     return runtimeContext.getTaskNameWithSubtasks(). }
false;public;0;4;;@Override public ExecutionConfig getExecutionConfig() {     return runtimeContext.getExecutionConfig(). }
false;public;0;4;;@Override public ClassLoader getUserCodeClassLoader() {     return runtimeContext.getUserCodeClassLoader(). }
false;public;0;4;;// ----------------------------------------------------------------------------------- // Unsupported operations // ----------------------------------------------------------------------------------- @Override public DistributedCache getDistributedCache() {     throw new UnsupportedOperationException("Distributed cache is not supported in rich async functions."). }
false;public;1;4;;@Override public <T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties) {     throw new UnsupportedOperationException("State is not supported in rich async functions."). }
false;public;1;4;;@Override public <T> ListState<T> getListState(ListStateDescriptor<T> stateProperties) {     throw new UnsupportedOperationException("State is not supported in rich async functions."). }
false;public;1;4;;@Override public <T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties) {     throw new UnsupportedOperationException("State is not supported in rich async functions."). }
false;public;1;4;;@Override public <IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties) {     throw new UnsupportedOperationException("State is not supported in rich async functions."). }
false;public;1;4;;@Override public <T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties) {     throw new UnsupportedOperationException("State is not supported in rich async functions."). }
false;public;1;4;;@Override public <UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties) {     throw new UnsupportedOperationException("State is not supported in rich async functions."). }
false;public;2;4;;@Override public <V, A extends Serializable> void addAccumulator(String name, Accumulator<V, A> accumulator) {     throw new UnsupportedOperationException("Accumulators are not supported in rich async functions."). }
false;public;1;4;;@Override public <V, A extends Serializable> Accumulator<V, A> getAccumulator(String name) {     throw new UnsupportedOperationException("Accumulators are not supported in rich async functions."). }
false;public;0;4;;@Override public Map<String, Accumulator<?, ?>> getAllAccumulators() {     throw new UnsupportedOperationException("Accumulators are not supported in rich async functions."). }
false;public;1;4;;@Override public IntCounter getIntCounter(String name) {     throw new UnsupportedOperationException("Int counters are not supported in rich async functions."). }
false;public;1;4;;@Override public LongCounter getLongCounter(String name) {     throw new UnsupportedOperationException("Long counters are not supported in rich async functions."). }
false;public;1;4;;@Override public DoubleCounter getDoubleCounter(String name) {     throw new UnsupportedOperationException("Long counters are not supported in rich async functions."). }
false;public;1;4;;@Override public Histogram getHistogram(String name) {     throw new UnsupportedOperationException("Histograms are not supported in rich async functions."). }
false;public;1;4;;@Override public boolean hasBroadcastVariable(String name) {     throw new UnsupportedOperationException("Broadcast variables are not supported in rich async functions."). }
false;public;1;4;;@Override public <RT> List<RT> getBroadcastVariable(String name) {     throw new UnsupportedOperationException("Broadcast variables are not supported in rich async functions."). }
false;public;2;4;;@Override public <T, C> C getBroadcastVariableWithInitializer(String name, BroadcastVariableInitializer<T, C> initializer) {     throw new UnsupportedOperationException("Broadcast variables are not supported in rich async functions."). }
false;public;0;4;;@Override public int getSuperstepNumber() {     return iterationRuntimeContext.getSuperstepNumber(). }
false;public;1;4;;// ----------------------------------------------------------------------------------- // Unsupported operations // ----------------------------------------------------------------------------------- @Override public <T extends Aggregator<?>> T getIterationAggregator(String name) {     throw new UnsupportedOperationException("Iteration aggregators are not supported in rich async functions."). }
false;public;1;4;;@Override public <T extends Value> T getPreviousIterationAggregate(String name) {     throw new UnsupportedOperationException("Iteration aggregators are not supported in rich async functions."). }
