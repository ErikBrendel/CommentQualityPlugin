commented;modifiers;parameterAmount;loc;comment;code
false;public;3;15;;@SuppressWarnings("unchecked") public <N> InternalTimerService<N> getInternalTimerService(String name, TimerSerializer<K, N> timerSerializer, Triggerable<K, N> triggerable) {     InternalTimerServiceImpl<K, N> timerService = registerOrGetTimerService(name, timerSerializer).     timerService.startTimerService(timerSerializer.getKeySerializer(), timerSerializer.getNamespaceSerializer(), triggerable).     return timerService. }
false;;2;16;;@SuppressWarnings("unchecked") <N> InternalTimerServiceImpl<K, N> registerOrGetTimerService(String name, TimerSerializer<K, N> timerSerializer) {     InternalTimerServiceImpl<K, N> timerService = (InternalTimerServiceImpl<K, N>) timerServices.get(name).     if (timerService == null) {         timerService = new InternalTimerServiceImpl<>(localKeyGroupRange, keyContext, processingTimeService, createTimerPriorityQueue(PROCESSING_TIMER_PREFIX + name, timerSerializer), createTimerPriorityQueue(EVENT_TIMER_PREFIX + name, timerSerializer)).         timerServices.put(name, timerService).     }     return timerService. }
false;;0;3;;Map<String, InternalTimerServiceImpl<K, ?>> getRegisteredTimerServices() {     return Collections.unmodifiableMap(timerServices). }
false;private;2;7;;private <N> KeyGroupedInternalPriorityQueue<TimerHeapInternalTimer<K, N>> createTimerPriorityQueue(String name, TimerSerializer<K, N> timerSerializer) {     return priorityQueueSetFactory.create(name, timerSerializer). }
false;public;1;5;;public void advanceWatermark(Watermark watermark) throws Exception {     for (InternalTimerServiceImpl<?, ?> service : timerServices.values()) {         service.advanceWatermark(watermark.getTimestamp()).     } }
false;public;2;7;;// ////////////////				Fault Tolerance Methods				/////////////////// public void snapshotStateForKeyGroup(DataOutputView stream, int keyGroupIdx) throws IOException {     Preconditions.checkState(useLegacySynchronousSnapshots).     InternalTimerServiceSerializationProxy<K> serializationProxy = new InternalTimerServiceSerializationProxy<>(this, keyGroupIdx).     serializationProxy.write(stream). }
false;public;3;13;;public void restoreStateForKeyGroup(InputStream stream, int keyGroupIdx, ClassLoader userCodeClassLoader) throws IOException {     InternalTimerServiceSerializationProxy<K> serializationProxy = new InternalTimerServiceSerializationProxy<>(this, userCodeClassLoader, keyGroupIdx).     serializationProxy.read(stream). }
false;public;0;8;;// //////////////////			Methods used ONLY IN TESTS				//////////////////// @VisibleForTesting public int numProcessingTimeTimers() {     int count = 0.     for (InternalTimerServiceImpl<?, ?> timerService : timerServices.values()) {         count += timerService.numProcessingTimeTimers().     }     return count. }
false;public;0;8;;@VisibleForTesting public int numEventTimeTimers() {     int count = 0.     for (InternalTimerServiceImpl<?, ?> timerService : timerServices.values()) {         count += timerService.numEventTimeTimers().     }     return count. }
