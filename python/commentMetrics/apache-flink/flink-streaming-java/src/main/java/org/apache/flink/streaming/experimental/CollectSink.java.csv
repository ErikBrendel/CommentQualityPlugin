commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public void invoke(IN value, Context context) throws Exception {     try {         serializer.serialize(value, streamWriter).     } catch (Exception e) {         throw new IOException("Error sending data back to client (" + hostIp.toString() + ":" + port + ')', e).     } }
true;public;1;11;/**  * Initialize the connection with the Socket in the server.  * @param parameters Configuration.  */ ;/**  * Initialize the connection with the Socket in the server.  * @param parameters Configuration.  */ @Override public void open(Configuration parameters) throws Exception {     try {         client = new Socket(hostIp, port).         outputStream = client.getOutputStream().         streamWriter = new DataOutputViewStreamWrapper(outputStream).     } catch (IOException e) {         throw new IOException("Cannot connect to the client to send back the stream", e).     } }
true;public;0;29;/**  * Closes the connection with the Socket server.  */ ;/**  * Closes the connection with the Socket server.  */ @Override public void close() throws Exception {     try {         if (outputStream != null) {             outputStream.flush().             outputStream.close().         }         // first regular attempt to cleanly close. Failing that will escalate         if (client != null) {             client.close().         }     } catch (Exception e) {         throw new IOException("Error while closing connection that streams data back to client at " + hostIp.toString() + ":" + port, e).     } finally {         // if we failed prior to closing the client, close it         if (client != null) {             try {                 client.close().             } catch (Throwable t) {             // best effort to close, we do not care about an exception here any more             }         }     } }
