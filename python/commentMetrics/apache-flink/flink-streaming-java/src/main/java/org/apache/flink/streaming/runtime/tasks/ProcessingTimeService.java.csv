# id;timestamp;commentText;codeText;commentWords;codeWords
ProcessingTimeService -> public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;1477069385;Registers a task to be executed when (processing) time is {@code timestamp}.__@param timestamp   Time when the task is to be executed (in processing time)_@param target      The task to be executed__@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;registers,a,task,to,be,executed,when,processing,time,is,code,timestamp,param,timestamp,time,when,the,task,is,to,be,executed,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;public,abstract,scheduled,future,register,timer,long,timestamp,processing,time,callback,target
ProcessingTimeService -> public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;1482249781;Registers a task to be executed when (processing) time is {@code timestamp}.__@param timestamp   Time when the task is to be executed (in processing time)_@param target      The task to be executed__@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;registers,a,task,to,be,executed,when,processing,time,is,code,timestamp,param,timestamp,time,when,the,task,is,to,be,executed,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;public,abstract,scheduled,future,register,timer,long,timestamp,processing,time,callback,target
ProcessingTimeService -> public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;1493195810;Registers a task to be executed when (processing) time is {@code timestamp}.__@param timestamp   Time when the task is to be executed (in processing time)_@param target      The task to be executed__@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;registers,a,task,to,be,executed,when,processing,time,is,code,timestamp,param,timestamp,time,when,the,task,is,to,be,executed,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;public,abstract,scheduled,future,register,timer,long,timestamp,processing,time,callback,target
ProcessingTimeService -> public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;1508969168;Registers a task to be executed when (processing) time is {@code timestamp}.__@param timestamp   Time when the task is to be executed (in processing time)_@param target      The task to be executed__@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;registers,a,task,to,be,executed,when,processing,time,is,code,timestamp,param,timestamp,time,when,the,task,is,to,be,executed,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;public,abstract,scheduled,future,register,timer,long,timestamp,processing,time,callback,target
ProcessingTimeService -> public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;1511447023;Registers a task to be executed when (processing) time is {@code timestamp}.__@param timestamp   Time when the task is to be executed (in processing time)_@param target      The task to be executed__@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;registers,a,task,to,be,executed,when,processing,time,is,code,timestamp,param,timestamp,time,when,the,task,is,to,be,executed,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;public,abstract,scheduled,future,register,timer,long,timestamp,processing,time,callback,target
ProcessingTimeService -> public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;1526336590;Registers a task to be executed when (processing) time is {@code timestamp}.__@param timestamp   Time when the task is to be executed (in processing time)_@param target      The task to be executed__@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;public abstract ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target)_;registers,a,task,to,be,executed,when,processing,time,is,code,timestamp,param,timestamp,time,when,the,task,is,to,be,executed,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;public,abstract,scheduled,future,register,timer,long,timestamp,processing,time,callback,target
ProcessingTimeService -> public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;1482249781;Registers a task to be executed repeatedly at a fixed rate.__@param callback to be executed after the initial delay and then after each period_@param initialDelay initial delay to start executing callback_@param period after the initial delay after which the callback is executed_@return Scheduled future representing the task to be executed repeatedly;public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;registers,a,task,to,be,executed,repeatedly,at,a,fixed,rate,param,callback,to,be,executed,after,the,initial,delay,and,then,after,each,period,param,initial,delay,initial,delay,to,start,executing,callback,param,period,after,the,initial,delay,after,which,the,callback,is,executed,return,scheduled,future,representing,the,task,to,be,executed,repeatedly;public,abstract,scheduled,future,schedule,at,fixed,rate,processing,time,callback,callback,long,initial,delay,long,period
ProcessingTimeService -> public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;1493195810;Registers a task to be executed repeatedly at a fixed rate.__@param callback to be executed after the initial delay and then after each period_@param initialDelay initial delay to start executing callback_@param period after the initial delay after which the callback is executed_@return Scheduled future representing the task to be executed repeatedly;public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;registers,a,task,to,be,executed,repeatedly,at,a,fixed,rate,param,callback,to,be,executed,after,the,initial,delay,and,then,after,each,period,param,initial,delay,initial,delay,to,start,executing,callback,param,period,after,the,initial,delay,after,which,the,callback,is,executed,return,scheduled,future,representing,the,task,to,be,executed,repeatedly;public,abstract,scheduled,future,schedule,at,fixed,rate,processing,time,callback,callback,long,initial,delay,long,period
ProcessingTimeService -> public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;1508969168;Registers a task to be executed repeatedly at a fixed rate.__@param callback to be executed after the initial delay and then after each period_@param initialDelay initial delay to start executing callback_@param period after the initial delay after which the callback is executed_@return Scheduled future representing the task to be executed repeatedly;public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;registers,a,task,to,be,executed,repeatedly,at,a,fixed,rate,param,callback,to,be,executed,after,the,initial,delay,and,then,after,each,period,param,initial,delay,initial,delay,to,start,executing,callback,param,period,after,the,initial,delay,after,which,the,callback,is,executed,return,scheduled,future,representing,the,task,to,be,executed,repeatedly;public,abstract,scheduled,future,schedule,at,fixed,rate,processing,time,callback,callback,long,initial,delay,long,period
ProcessingTimeService -> public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;1511447023;Registers a task to be executed repeatedly at a fixed rate.__@param callback to be executed after the initial delay and then after each period_@param initialDelay initial delay to start executing callback_@param period after the initial delay after which the callback is executed_@return Scheduled future representing the task to be executed repeatedly;public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;registers,a,task,to,be,executed,repeatedly,at,a,fixed,rate,param,callback,to,be,executed,after,the,initial,delay,and,then,after,each,period,param,initial,delay,initial,delay,to,start,executing,callback,param,period,after,the,initial,delay,after,which,the,callback,is,executed,return,scheduled,future,representing,the,task,to,be,executed,repeatedly;public,abstract,scheduled,future,schedule,at,fixed,rate,processing,time,callback,callback,long,initial,delay,long,period
ProcessingTimeService -> public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;1526336590;Registers a task to be executed repeatedly at a fixed rate.__@param callback to be executed after the initial delay and then after each period_@param initialDelay initial delay to start executing callback_@param period after the initial delay after which the callback is executed_@return Scheduled future representing the task to be executed repeatedly;public abstract ScheduledFuture<?> scheduleAtFixedRate(ProcessingTimeCallback callback, long initialDelay, long period)_;registers,a,task,to,be,executed,repeatedly,at,a,fixed,rate,param,callback,to,be,executed,after,the,initial,delay,and,then,after,each,period,param,initial,delay,initial,delay,to,start,executing,callback,param,period,after,the,initial,delay,after,which,the,callback,is,executed,return,scheduled,future,representing,the,task,to,be,executed,repeatedly;public,abstract,scheduled,future,schedule,at,fixed,rate,processing,time,callback,callback,long,initial,delay,long,period
ProcessingTimeService -> public abstract boolean shutdownAndAwaitPending(long time, TimeUnit timeUnit) throws InterruptedException_;1511447023;Shuts down and clean up the timer service provider hard and immediately. This does wait_for all timers to complete or until the time limit is exceeded. Any call to_{@link #registerTimer(long, ProcessingTimeCallback)} will result in a hard exception after calling this method._@param time time to wait for termination._@param timeUnit time unit of parameter time._@return {@code true} if this timer service and all pending timers are terminated and_{@code false} if the timeout elapsed before this happened.;public abstract boolean shutdownAndAwaitPending(long time, TimeUnit timeUnit) throws InterruptedException_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,wait,for,all,timers,to,complete,or,until,the,time,limit,is,exceeded,any,call,to,link,register,timer,long,processing,time,callback,will,result,in,a,hard,exception,after,calling,this,method,param,time,time,to,wait,for,termination,param,time,unit,time,unit,of,parameter,time,return,code,true,if,this,timer,service,and,all,pending,timers,are,terminated,and,code,false,if,the,timeout,elapsed,before,this,happened;public,abstract,boolean,shutdown,and,await,pending,long,time,time,unit,time,unit,throws,interrupted,exception
ProcessingTimeService -> public abstract boolean shutdownAndAwaitPending(long time, TimeUnit timeUnit) throws InterruptedException_;1526336590;Shuts down and clean up the timer service provider hard and immediately. This does wait_for all timers to complete or until the time limit is exceeded. Any call to_{@link #registerTimer(long, ProcessingTimeCallback)} will result in a hard exception after calling this method._@param time time to wait for termination._@param timeUnit time unit of parameter time._@return {@code true} if this timer service and all pending timers are terminated and_{@code false} if the timeout elapsed before this happened.;public abstract boolean shutdownAndAwaitPending(long time, TimeUnit timeUnit) throws InterruptedException_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,wait,for,all,timers,to,complete,or,until,the,time,limit,is,exceeded,any,call,to,link,register,timer,long,processing,time,callback,will,result,in,a,hard,exception,after,calling,this,method,param,time,time,to,wait,for,termination,param,time,unit,time,unit,of,parameter,time,return,code,true,if,this,timer,service,and,all,pending,timers,are,terminated,and,code,false,if,the,timeout,elapsed,before,this,happened;public,abstract,boolean,shutdown,and,await,pending,long,time,time,unit,time,unit,throws,interrupted,exception
ProcessingTimeService -> public abstract long getCurrentProcessingTime()_;1477069384;Returns the current processing time.;public abstract long getCurrentProcessingTime()_;returns,the,current,processing,time;public,abstract,long,get,current,processing,time
ProcessingTimeService -> public abstract long getCurrentProcessingTime()_;1477069385;Returns the current processing time.;public abstract long getCurrentProcessingTime()_;returns,the,current,processing,time;public,abstract,long,get,current,processing,time
ProcessingTimeService -> public abstract long getCurrentProcessingTime()_;1482249781;Returns the current processing time.;public abstract long getCurrentProcessingTime()_;returns,the,current,processing,time;public,abstract,long,get,current,processing,time
ProcessingTimeService -> public abstract long getCurrentProcessingTime()_;1493195810;Returns the current processing time.;public abstract long getCurrentProcessingTime()_;returns,the,current,processing,time;public,abstract,long,get,current,processing,time
ProcessingTimeService -> public abstract long getCurrentProcessingTime()_;1508969168;Returns the current processing time.;public abstract long getCurrentProcessingTime()_;returns,the,current,processing,time;public,abstract,long,get,current,processing,time
ProcessingTimeService -> public abstract long getCurrentProcessingTime()_;1511447023;Returns the current processing time.;public abstract long getCurrentProcessingTime()_;returns,the,current,processing,time;public,abstract,long,get,current,processing,time
ProcessingTimeService -> public abstract long getCurrentProcessingTime()_;1526336590;Returns the current processing time.;public abstract long getCurrentProcessingTime()_;returns,the,current,processing,time;public,abstract,long,get,current,processing,time
ProcessingTimeService -> public abstract void quiesceAndAwaitPending() throws InterruptedException_;1477069384;This method puts the service into a state where it does not register new timers, but_returns for each call to {@link #registerTimer(long, Triggerable)} only a "mock" future._Furthermore, the method clears all not yet started timers, and awaits the completion_of currently executing timers.__<p>This method can be used to cleanly shut down the timer service. The using components_will not notice that the service is shut down (as for example via exceptions when registering_a new timer), but the service will simply not fire any timer any more.;public abstract void quiesceAndAwaitPending() throws InterruptedException_;this,method,puts,the,service,into,a,state,where,it,does,not,register,new,timers,but,returns,for,each,call,to,link,register,timer,long,triggerable,only,a,mock,future,furthermore,the,method,clears,all,not,yet,started,timers,and,awaits,the,completion,of,currently,executing,timers,p,this,method,can,be,used,to,cleanly,shut,down,the,timer,service,the,using,components,will,not,notice,that,the,service,is,shut,down,as,for,example,via,exceptions,when,registering,a,new,timer,but,the,service,will,simply,not,fire,any,timer,any,more;public,abstract,void,quiesce,and,await,pending,throws,interrupted,exception
ProcessingTimeService -> public abstract void quiesceAndAwaitPending() throws InterruptedException_;1477069385;This method puts the service into a state where it does not register new timers, but_returns for each call to {@link #registerTimer(long, ProcessingTimeCallback)} only a "mock" future._Furthermore, the method clears all not yet started timers, and awaits the completion_of currently executing timers.__<p>This method can be used to cleanly shut down the timer service. The using components_will not notice that the service is shut down (as for example via exceptions when registering_a new timer), but the service will simply not fire any timer any more.;public abstract void quiesceAndAwaitPending() throws InterruptedException_;this,method,puts,the,service,into,a,state,where,it,does,not,register,new,timers,but,returns,for,each,call,to,link,register,timer,long,processing,time,callback,only,a,mock,future,furthermore,the,method,clears,all,not,yet,started,timers,and,awaits,the,completion,of,currently,executing,timers,p,this,method,can,be,used,to,cleanly,shut,down,the,timer,service,the,using,components,will,not,notice,that,the,service,is,shut,down,as,for,example,via,exceptions,when,registering,a,new,timer,but,the,service,will,simply,not,fire,any,timer,any,more;public,abstract,void,quiesce,and,await,pending,throws,interrupted,exception
ProcessingTimeService -> public abstract void quiesceAndAwaitPending() throws InterruptedException_;1482249781;This method puts the service into a state where it does not register new timers, but_returns for each call to {@link #registerTimer(long, ProcessingTimeCallback)} only a "mock" future._Furthermore, the method clears all not yet started timers, and awaits the completion_of currently executing timers.__<p>This method can be used to cleanly shut down the timer service. The using components_will not notice that the service is shut down (as for example via exceptions when registering_a new timer), but the service will simply not fire any timer any more.;public abstract void quiesceAndAwaitPending() throws InterruptedException_;this,method,puts,the,service,into,a,state,where,it,does,not,register,new,timers,but,returns,for,each,call,to,link,register,timer,long,processing,time,callback,only,a,mock,future,furthermore,the,method,clears,all,not,yet,started,timers,and,awaits,the,completion,of,currently,executing,timers,p,this,method,can,be,used,to,cleanly,shut,down,the,timer,service,the,using,components,will,not,notice,that,the,service,is,shut,down,as,for,example,via,exceptions,when,registering,a,new,timer,but,the,service,will,simply,not,fire,any,timer,any,more;public,abstract,void,quiesce,and,await,pending,throws,interrupted,exception
ProcessingTimeService -> public abstract void quiesceAndAwaitPending() throws InterruptedException_;1493195810;This method puts the service into a state where it does not register new timers, but_returns for each call to {@link #registerTimer(long, ProcessingTimeCallback)} only a "mock" future._Furthermore, the method clears all not yet started timers, and awaits the completion_of currently executing timers.__<p>This method can be used to cleanly shut down the timer service. The using components_will not notice that the service is shut down (as for example via exceptions when registering_a new timer), but the service will simply not fire any timer any more.;public abstract void quiesceAndAwaitPending() throws InterruptedException_;this,method,puts,the,service,into,a,state,where,it,does,not,register,new,timers,but,returns,for,each,call,to,link,register,timer,long,processing,time,callback,only,a,mock,future,furthermore,the,method,clears,all,not,yet,started,timers,and,awaits,the,completion,of,currently,executing,timers,p,this,method,can,be,used,to,cleanly,shut,down,the,timer,service,the,using,components,will,not,notice,that,the,service,is,shut,down,as,for,example,via,exceptions,when,registering,a,new,timer,but,the,service,will,simply,not,fire,any,timer,any,more;public,abstract,void,quiesce,and,await,pending,throws,interrupted,exception
ProcessingTimeService -> public abstract void shutdownService()_;1477069384;Shuts down and clean up the timer service provider hard and immediately. This does not wait_for any timer to complete. Any further call to {@link #registerTimer(long, Triggerable)}_will result in a hard exception.;public abstract void shutdownService()_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,not,wait,for,any,timer,to,complete,any,further,call,to,link,register,timer,long,triggerable,will,result,in,a,hard,exception;public,abstract,void,shutdown,service
ProcessingTimeService -> public abstract void shutdownService()_;1477069385;Shuts down and clean up the timer service provider hard and immediately. This does not wait_for any timer to complete. Any further call to {@link #registerTimer(long, ProcessingTimeCallback)}_will result in a hard exception.;public abstract void shutdownService()_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,not,wait,for,any,timer,to,complete,any,further,call,to,link,register,timer,long,processing,time,callback,will,result,in,a,hard,exception;public,abstract,void,shutdown,service
ProcessingTimeService -> public abstract void shutdownService()_;1482249781;Shuts down and clean up the timer service provider hard and immediately. This does not wait_for any timer to complete. Any further call to {@link #registerTimer(long, ProcessingTimeCallback)}_will result in a hard exception.;public abstract void shutdownService()_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,not,wait,for,any,timer,to,complete,any,further,call,to,link,register,timer,long,processing,time,callback,will,result,in,a,hard,exception;public,abstract,void,shutdown,service
ProcessingTimeService -> public abstract void shutdownService()_;1493195810;Shuts down and clean up the timer service provider hard and immediately. This does not wait_for any timer to complete. Any further call to {@link #registerTimer(long, ProcessingTimeCallback)}_will result in a hard exception.;public abstract void shutdownService()_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,not,wait,for,any,timer,to,complete,any,further,call,to,link,register,timer,long,processing,time,callback,will,result,in,a,hard,exception;public,abstract,void,shutdown,service
ProcessingTimeService -> public abstract void shutdownService()_;1508969168;Shuts down and clean up the timer service provider hard and immediately. This does not wait_for any timer to complete. Any further call to {@link #registerTimer(long, ProcessingTimeCallback)}_will result in a hard exception.;public abstract void shutdownService()_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,not,wait,for,any,timer,to,complete,any,further,call,to,link,register,timer,long,processing,time,callback,will,result,in,a,hard,exception;public,abstract,void,shutdown,service
ProcessingTimeService -> public abstract void shutdownService()_;1511447023;Shuts down and clean up the timer service provider hard and immediately. This does not wait_for any timer to complete. Any further call to {@link #registerTimer(long, ProcessingTimeCallback)}_will result in a hard exception.;public abstract void shutdownService()_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,not,wait,for,any,timer,to,complete,any,further,call,to,link,register,timer,long,processing,time,callback,will,result,in,a,hard,exception;public,abstract,void,shutdown,service
ProcessingTimeService -> public abstract void shutdownService()_;1526336590;Shuts down and clean up the timer service provider hard and immediately. This does not wait_for any timer to complete. Any further call to {@link #registerTimer(long, ProcessingTimeCallback)}_will result in a hard exception.;public abstract void shutdownService()_;shuts,down,and,clean,up,the,timer,service,provider,hard,and,immediately,this,does,not,wait,for,any,timer,to,complete,any,further,call,to,link,register,timer,long,processing,time,callback,will,result,in,a,hard,exception;public,abstract,void,shutdown,service
ProcessingTimeService -> public abstract void quiesce() throws InterruptedException_;1508969168;This method puts the service into a state where it does not register new timers, but_returns for each call to {@link #registerTimer(long, ProcessingTimeCallback)} only a "mock" future._Furthermore, the method clears all not yet started timers.__<p>This method can be used to cleanly shut down the timer service. The using components_will not notice that the service is shut down (as for example via exceptions when registering_a new timer), but the service will simply not fire any timer any more.;public abstract void quiesce() throws InterruptedException_;this,method,puts,the,service,into,a,state,where,it,does,not,register,new,timers,but,returns,for,each,call,to,link,register,timer,long,processing,time,callback,only,a,mock,future,furthermore,the,method,clears,all,not,yet,started,timers,p,this,method,can,be,used,to,cleanly,shut,down,the,timer,service,the,using,components,will,not,notice,that,the,service,is,shut,down,as,for,example,via,exceptions,when,registering,a,new,timer,but,the,service,will,simply,not,fire,any,timer,any,more;public,abstract,void,quiesce,throws,interrupted,exception
ProcessingTimeService -> public abstract void quiesce() throws InterruptedException_;1511447023;This method puts the service into a state where it does not register new timers, but_returns for each call to {@link #registerTimer(long, ProcessingTimeCallback)} only a "mock" future._Furthermore, the method clears all not yet started timers.__<p>This method can be used to cleanly shut down the timer service. The using components_will not notice that the service is shut down (as for example via exceptions when registering_a new timer), but the service will simply not fire any timer any more.;public abstract void quiesce() throws InterruptedException_;this,method,puts,the,service,into,a,state,where,it,does,not,register,new,timers,but,returns,for,each,call,to,link,register,timer,long,processing,time,callback,only,a,mock,future,furthermore,the,method,clears,all,not,yet,started,timers,p,this,method,can,be,used,to,cleanly,shut,down,the,timer,service,the,using,components,will,not,notice,that,the,service,is,shut,down,as,for,example,via,exceptions,when,registering,a,new,timer,but,the,service,will,simply,not,fire,any,timer,any,more;public,abstract,void,quiesce,throws,interrupted,exception
ProcessingTimeService -> public abstract void quiesce() throws InterruptedException_;1526336590;This method puts the service into a state where it does not register new timers, but_returns for each call to {@link #registerTimer(long, ProcessingTimeCallback)} only a "mock" future._Furthermore, the method clears all not yet started timers.__<p>This method can be used to cleanly shut down the timer service. The using components_will not notice that the service is shut down (as for example via exceptions when registering_a new timer), but the service will simply not fire any timer any more.;public abstract void quiesce() throws InterruptedException_;this,method,puts,the,service,into,a,state,where,it,does,not,register,new,timers,but,returns,for,each,call,to,link,register,timer,long,processing,time,callback,only,a,mock,future,furthermore,the,method,clears,all,not,yet,started,timers,p,this,method,can,be,used,to,cleanly,shut,down,the,timer,service,the,using,components,will,not,notice,that,the,service,is,shut,down,as,for,example,via,exceptions,when,registering,a,new,timer,but,the,service,will,simply,not,fire,any,timer,any,more;public,abstract,void,quiesce,throws,interrupted,exception
ProcessingTimeService -> public abstract void awaitPendingAfterQuiesce() throws InterruptedException_;1508969168;This method can be used after calling {@link #quiesce()}, and awaits the completion_of currently executing timers.;public abstract void awaitPendingAfterQuiesce() throws InterruptedException_;this,method,can,be,used,after,calling,link,quiesce,and,awaits,the,completion,of,currently,executing,timers;public,abstract,void,await,pending,after,quiesce,throws,interrupted,exception
ProcessingTimeService -> public abstract void awaitPendingAfterQuiesce() throws InterruptedException_;1511447023;This method can be used after calling {@link #quiesce()}, and awaits the completion_of currently executing timers.;public abstract void awaitPendingAfterQuiesce() throws InterruptedException_;this,method,can,be,used,after,calling,link,quiesce,and,awaits,the,completion,of,currently,executing,timers;public,abstract,void,await,pending,after,quiesce,throws,interrupted,exception
ProcessingTimeService -> public abstract void awaitPendingAfterQuiesce() throws InterruptedException_;1526336590;This method can be used after calling {@link #quiesce()}, and awaits the completion_of currently executing timers.;public abstract void awaitPendingAfterQuiesce() throws InterruptedException_;this,method,can,be,used,after,calling,link,quiesce,and,awaits,the,completion,of,currently,executing,timers;public,abstract,void,await,pending,after,quiesce,throws,interrupted,exception
ProcessingTimeService -> public abstract boolean isTerminated()_;1477069384;Returns <tt>true</tt> if the service has been shut down, <tt>false</tt> otherwise.;public abstract boolean isTerminated()_;returns,tt,true,tt,if,the,service,has,been,shut,down,tt,false,tt,otherwise;public,abstract,boolean,is,terminated
ProcessingTimeService -> public abstract boolean isTerminated()_;1477069385;Returns <tt>true</tt> if the service has been shut down, <tt>false</tt> otherwise.;public abstract boolean isTerminated()_;returns,tt,true,tt,if,the,service,has,been,shut,down,tt,false,tt,otherwise;public,abstract,boolean,is,terminated
ProcessingTimeService -> public abstract boolean isTerminated()_;1482249781;Returns <tt>true</tt> if the service has been shut down, <tt>false</tt> otherwise.;public abstract boolean isTerminated()_;returns,tt,true,tt,if,the,service,has,been,shut,down,tt,false,tt,otherwise;public,abstract,boolean,is,terminated
ProcessingTimeService -> public abstract boolean isTerminated()_;1493195810;Returns <tt>true</tt> if the service has been shut down, <tt>false</tt> otherwise.;public abstract boolean isTerminated()_;returns,tt,true,tt,if,the,service,has,been,shut,down,tt,false,tt,otherwise;public,abstract,boolean,is,terminated
ProcessingTimeService -> public abstract boolean isTerminated()_;1508969168;Returns <tt>true</tt> if the service has been shut down, <tt>false</tt> otherwise.;public abstract boolean isTerminated()_;returns,tt,true,tt,if,the,service,has,been,shut,down,tt,false,tt,otherwise;public,abstract,boolean,is,terminated
ProcessingTimeService -> public abstract boolean isTerminated()_;1511447023;Returns <tt>true</tt> if the service has been shut down, <tt>false</tt> otherwise.;public abstract boolean isTerminated()_;returns,tt,true,tt,if,the,service,has,been,shut,down,tt,false,tt,otherwise;public,abstract,boolean,is,terminated
ProcessingTimeService -> public abstract boolean isTerminated()_;1526336590;Returns <tt>true</tt> if the service has been shut down, <tt>false</tt> otherwise.;public abstract boolean isTerminated()_;returns,tt,true,tt,if,the,service,has,been,shut,down,tt,false,tt,otherwise;public,abstract,boolean,is,terminated
