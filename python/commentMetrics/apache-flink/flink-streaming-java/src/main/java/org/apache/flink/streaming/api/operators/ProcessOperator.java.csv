commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void open() throws Exception {     super.open().     collector = new TimestampedCollector<>(output).     context = new ContextImpl(userFunction, getProcessingTimeService()). }
false;public;1;7;;@Override public void processElement(StreamRecord<IN> element) throws Exception {     collector.setTimestamp(element).     context.element = element.     userFunction.processElement(element.getValue(), context, collector).     context.element = null. }
false;public;1;5;;@Override public void processWatermark(Watermark mark) throws Exception {     super.processWatermark(mark).     this.currentWatermark = mark.getTimestamp(). }
false;public;0;10;;@Override public Long timestamp() {     checkState(element != null).     if (element.hasTimestamp()) {         return element.getTimestamp().     } else {         return null.     } }
false;public;2;7;;@Override public <X> void output(OutputTag<X> outputTag, X value) {     if (outputTag == null) {         throw new IllegalArgumentException("OutputTag must not be null.").     }     output.collect(outputTag, new StreamRecord<>(value, element.getTimestamp())). }
false;public;0;4;;@Override public long currentProcessingTime() {     return processingTimeService.getCurrentProcessingTime(). }
false;public;0;4;;@Override public long currentWatermark() {     return currentWatermark. }
false;public;1;4;;@Override public void registerProcessingTimeTimer(long time) {     throw new UnsupportedOperationException(UNSUPPORTED_REGISTER_TIMER_MSG). }
false;public;1;4;;@Override public void registerEventTimeTimer(long time) {     throw new UnsupportedOperationException(UNSUPPORTED_REGISTER_TIMER_MSG). }
false;public;1;4;;@Override public void deleteProcessingTimeTimer(long time) {     throw new UnsupportedOperationException(UNSUPPORTED_DELETE_TIMER_MSG). }
false;public;1;4;;@Override public void deleteEventTimeTimer(long time) {     throw new UnsupportedOperationException(UNSUPPORTED_DELETE_TIMER_MSG). }
false;public;0;4;;@Override public TimerService timerService() {     return this. }
