commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     sessionIds = new ArrayList<>(64).     sessionIdsPerSnapshot = new ArrayDeque<>(). }
false;public;0;6;;@Override public void close() throws Exception {     super.close().     sessionIds.clear().     sessionIdsPerSnapshot.clear(). }
true;protected,final;2;14;/**  * Acknowledges the session ids.  * @param checkpointId The id of the current checkout to acknowledge ids for.  * @param uniqueIds The checkpointed unique ids which are ignored here. They only serve as a  *                  means of de-duplicating messages when the acknowledgment after a checkpoint  *                  fails.  */ ;// ------------------------------------------------------------------------ // ID Checkpointing // ------------------------------------------------------------------------ /**  * Acknowledges the session ids.  * @param checkpointId The id of the current checkout to acknowledge ids for.  * @param uniqueIds The checkpointed unique ids which are ignored here. They only serve as a  *                  means of de-duplicating messages when the acknowledgment after a checkpoint  *                  fails.  */ @Override protected final void acknowledgeIDs(long checkpointId, Set<UId> uniqueIds) {     LOG.debug("Acknowledging ids for checkpoint {}", checkpointId).     Iterator<Tuple2<Long, List<SessionId>>> iterator = sessionIdsPerSnapshot.iterator().     while (iterator.hasNext()) {         final Tuple2<Long, List<SessionId>> next = iterator.next().         long id = next.f0.         if (id <= checkpointId) {             acknowledgeSessionIDs(next.f1).             // remove ids for this session             iterator.remove().         }     } }
true;protected,abstract;1;1;/**  * Acknowledges the session ids.  * @param sessionIds The message ids for this session.  */ ;/**  * Acknowledges the session ids.  * @param sessionIds The message ids for this session.  */ protected abstract void acknowledgeSessionIDs(List<SessionId> sessionIds).
false;public;1;6;;// ------------------------------------------------------------------------ // Checkpointing the data // ------------------------------------------------------------------------ @Override public void snapshotState(FunctionSnapshotContext context) throws Exception {     sessionIdsPerSnapshot.add(new Tuple2<>(context.getCheckpointId(), sessionIds)).     sessionIds = new ArrayList<>(64).     super.snapshotState(context). }
