commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.  */ ;/**  * Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.  */ public StreamTransformation<IN1> getInput1() {     return input1. }
true;public;0;3;/**  * Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.  */ ;/**  * Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.  */ public StreamTransformation<IN2> getInput2() {     return input2. }
true;public;0;3;/**  * Returns the {@code TypeInformation} for the elements from the first input.  */ ;/**  * Returns the {@code TypeInformation} for the elements from the first input.  */ public TypeInformation<IN1> getInputType1() {     return input1.getOutputType(). }
true;public;0;3;/**  * Returns the {@code TypeInformation} for the elements from the first input.  */ ;/**  * Returns the {@code TypeInformation} for the elements from the first input.  */ public TypeInformation<IN2> getInputType2() {     return input2.getOutputType(). }
true;public;0;3;/**  * Returns the {@code TwoInputStreamOperator} of this Transformation.  */ ;/**  * Returns the {@code TwoInputStreamOperator} of this Transformation.  */ public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {     return operator. }
true;public;2;4;/**  * Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of  * this transformation.  *  * @param stateKeySelector1 The {@code KeySelector} to set for the first input  * @param stateKeySelector2 The {@code KeySelector} to set for the first input  */ ;/**  * Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of  * this transformation.  *  * @param stateKeySelector1 The {@code KeySelector} to set for the first input  * @param stateKeySelector2 The {@code KeySelector} to set for the first input  */ public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2) {     this.stateKeySelector1 = stateKeySelector1.     this.stateKeySelector2 = stateKeySelector2. }
true;public;0;3;/**  * Returns the {@code KeySelector} that must be used for partitioning keyed state in this  * Operation for the first input.  *  * @see #setStateKeySelectors  */ ;/**  * Returns the {@code KeySelector} that must be used for partitioning keyed state in this  * Operation for the first input.  *  * @see #setStateKeySelectors  */ public KeySelector<IN1, ?> getStateKeySelector1() {     return stateKeySelector1. }
true;public;0;3;/**  * Returns the {@code KeySelector} that must be used for partitioning keyed state in this  * Operation for the second input.  *  * @see #setStateKeySelectors  */ ;/**  * Returns the {@code KeySelector} that must be used for partitioning keyed state in this  * Operation for the second input.  *  * @see #setStateKeySelectors  */ public KeySelector<IN2, ?> getStateKeySelector2() {     return stateKeySelector2. }
false;public;1;3;;public void setStateKeyType(TypeInformation<?> stateKeyType) {     this.stateKeyType = stateKeyType. }
false;public;0;3;;public TypeInformation<?> getStateKeyType() {     return stateKeyType. }
false;public;0;8;;@Override public Collection<StreamTransformation<?>> getTransitivePredecessors() {     List<StreamTransformation<?>> result = Lists.newArrayList().     result.add(this).     result.addAll(input1.getTransitivePredecessors()).     result.addAll(input2.getTransitivePredecessors()).     return result. }
false;public,final;1;4;;@Override public final void setChainingStrategy(ChainingStrategy strategy) {     operator.setChainingStrategy(strategy). }
