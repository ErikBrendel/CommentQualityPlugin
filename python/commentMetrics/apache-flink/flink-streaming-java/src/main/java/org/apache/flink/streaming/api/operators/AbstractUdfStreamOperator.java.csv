commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the user function executed in this operator.  * @return The user function of this operator.  */ ;/**  * Gets the user function executed in this operator.  * @return The user function of this operator.  */ public F getUserFunction() {     return userFunction. }
false;public;3;6;;// ------------------------------------------------------------------------ // operator life cycle // ------------------------------------------------------------------------ @Override public void setup(StreamTask<?, ?> containingTask, StreamConfig config, Output<StreamRecord<OUT>> output) {     super.setup(containingTask, config, output).     FunctionUtils.setFunctionRuntimeContext(userFunction, getRuntimeContext()). }
false;public;1;5;;@Override public void snapshotState(StateSnapshotContext context) throws Exception {     super.snapshotState(context).     StreamingFunctionUtils.snapshotFunctionState(context, getOperatorStateBackend(), userFunction). }
false;public;1;5;;@Override public void initializeState(StateInitializationContext context) throws Exception {     super.initializeState(context).     StreamingFunctionUtils.restoreFunctionState(context, userFunction). }
false;public;0;5;;@Override public void open() throws Exception {     super.open().     FunctionUtils.openFunction(userFunction, new Configuration()). }
false;public;0;6;;@Override public void close() throws Exception {     super.close().     functionsClosed = true.     FunctionUtils.closeFunction(userFunction). }
false;public;0;8;;@Override public void dispose() throws Exception {     super.dispose().     if (!functionsClosed) {         functionsClosed = true.         FunctionUtils.closeFunction(userFunction).     } }
false;public;1;8;;// ------------------------------------------------------------------------ // checkpointing and recovery // ------------------------------------------------------------------------ @Override public void notifyCheckpointComplete(long checkpointId) throws Exception {     super.notifyCheckpointComplete(checkpointId).     if (userFunction instanceof CheckpointListener) {         ((CheckpointListener) userFunction).notifyCheckpointComplete(checkpointId).     } }
false;public;2;4;;// ------------------------------------------------------------------------ // Output type configuration // ------------------------------------------------------------------------ @Override public void setOutputType(TypeInformation<OUT> outTypeInfo, ExecutionConfig executionConfig) {     StreamingFunctionUtils.setOutputType(userFunction, outTypeInfo, executionConfig). }
true;public;0;3;/**  * Since the streaming API does not implement any parametrization of functions via a  * configuration, the config returned here is actually empty.  *  * @return The user function parameters (currently empty)  */ ;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ /**  * Since the streaming API does not implement any parametrization of functions via a  * configuration, the config returned here is actually empty.  *  * @return The user function parameters (currently empty)  */ public Configuration getUserFunctionParameters() {     return new Configuration(). }
false;private;0;9;;private void checkUdfCheckpointingPreconditions() {     if (userFunction instanceof CheckpointedFunction && userFunction instanceof ListCheckpointed) {         throw new IllegalStateException("User functions are not allowed to implement " + "CheckpointedFunction AND ListCheckpointed.").     } }
