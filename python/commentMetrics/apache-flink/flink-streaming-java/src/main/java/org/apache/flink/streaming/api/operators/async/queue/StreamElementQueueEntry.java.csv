commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public StreamElement getStreamElement() {     return streamElement. }
true;public;0;3;/**  * True if the stream element queue entry has been completed. otherwise false.  *  * @return True if the stream element queue entry has been completed. otherwise false.  */ ;/**  * True if the stream element queue entry has been completed. otherwise false.  *  * @return True if the stream element queue entry has been completed. otherwise false.  */ public boolean isDone() {     return getFuture().isDone(). }
true;public;2;11;/**  * Register the given complete function to be called once this queue entry has been completed.  *  * @param completeFunction to call when the queue entry has been completed  * @param executor to run the complete function  */ ;/**  * Register the given complete function to be called once this queue entry has been completed.  *  * @param completeFunction to call when the queue entry has been completed  * @param executor to run the complete function  */ public void onComplete(final Consumer<StreamElementQueueEntry<T>> completeFunction, Executor executor) {     final StreamElementQueueEntry<T> thisReference = this.     getFuture().whenCompleteAsync(// see FLINK-6435     (value, throwable) -> completeFunction.accept(thisReference), executor). }
false;protected,abstract;0;1;;protected abstract CompletableFuture<T> getFuture().
false;public,final;0;4;;@Override public final boolean isWatermark() {     return AsyncWatermarkResult.class.isAssignableFrom(getClass()). }
false;public,final;0;4;;@Override public final boolean isResultCollection() {     return AsyncCollectionResult.class.isAssignableFrom(getClass()). }
false;public,final;0;4;;@Override public final AsyncWatermarkResult asWatermark() {     return (AsyncWatermarkResult) this. }
false;public,final;0;4;;@Override public final <T> AsyncCollectionResult<T> asResultCollection() {     return (AsyncCollectionResult<T>) this. }
