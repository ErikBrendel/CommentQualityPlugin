commented;modifiers;parameterAmount;loc;comment;code
false;public;4;6;;@Override public void evictBefore(Iterable<TimestampedValue<Object>> elements, int size, W window, EvictorContext ctx) {     if (!doEvictAfter) {         evict(elements, size, ctx).     } }
false;public;4;6;;@Override public void evictAfter(Iterable<TimestampedValue<Object>> elements, int size, W window, EvictorContext ctx) {     if (doEvictAfter) {         evict(elements, size, ctx).     } }
false;private;3;16;;private void evict(Iterable<TimestampedValue<Object>> elements, int size, EvictorContext ctx) {     if (size <= maxCount) {         return.     } else {         int evictedCount = 0.         for (Iterator<TimestampedValue<Object>> iterator = elements.iterator(). iterator.hasNext(). ) {             iterator.next().             evictedCount++.             if (evictedCount > size - maxCount) {                 break.             } else {                 iterator.remove().             }         }     } }
true;public,static;1;3;/**  * Creates a {@code CountEvictor} that keeps the given number of elements.  * Eviction is done before the window function.  *  * @param maxCount The number of elements to keep in the pane.  */ ;/**  * Creates a {@code CountEvictor} that keeps the given number of elements.  * Eviction is done before the window function.  *  * @param maxCount The number of elements to keep in the pane.  */ public static <W extends Window> CountEvictor<W> of(long maxCount) {     return new CountEvictor<>(maxCount). }
true;public,static;2;3;/**  * Creates a {@code CountEvictor} that keeps the given number of elements in the pane  * Eviction is done before/after the window function based on the value of doEvictAfter.  *  * @param maxCount The number of elements to keep in the pane.  * @param doEvictAfter Whether to do eviction after the window function.  */ ;/**  * Creates a {@code CountEvictor} that keeps the given number of elements in the pane  * Eviction is done before/after the window function based on the value of doEvictAfter.  *  * @param maxCount The number of elements to keep in the pane.  * @param doEvictAfter Whether to do eviction after the window function.  */ public static <W extends Window> CountEvictor<W> of(long maxCount, boolean doEvictAfter) {     return new CountEvictor<>(maxCount, doEvictAfter). }
