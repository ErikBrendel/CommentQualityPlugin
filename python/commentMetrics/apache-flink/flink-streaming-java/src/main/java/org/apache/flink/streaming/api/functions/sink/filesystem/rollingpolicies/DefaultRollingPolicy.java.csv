commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean shouldRollOnCheckpoint(PartFileInfo<BucketID> partFileState) throws IOException {     return partFileState.getSize() > partSize. }
false;public;2;4;;@Override public boolean shouldRollOnEvent(PartFileInfo<BucketID> partFileState, IN element) throws IOException {     return partFileState.getSize() > partSize. }
false;public;2;5;;@Override public boolean shouldRollOnProcessingTime(final PartFileInfo<BucketID> partFileState, final long currentTime) {     return currentTime - partFileState.getCreationTime() >= rolloverInterval || currentTime - partFileState.getLastUpdateTime() >= inactivityInterval. }
true;public,static;0;6;/**  * Initiates the instantiation of a {@code DefaultRollingPolicy}.  * To finalize it and have the actual policy, call {@code .create()}.  */ ;/**  * Initiates the instantiation of a {@code DefaultRollingPolicy}.  * To finalize it and have the actual policy, call {@code .create()}.  */ public static DefaultRollingPolicy.PolicyBuilder create() {     return new DefaultRollingPolicy.PolicyBuilder(DEFAULT_MAX_PART_SIZE, DEFAULT_ROLLOVER_INTERVAL, DEFAULT_INACTIVITY_INTERVAL). }
true;public;1;4;/**  * Sets the part size above which a part file will have to roll.  * @param size the allowed part size.  */ ;/**  * Sets the part size above which a part file will have to roll.  * @param size the allowed part size.  */ public DefaultRollingPolicy.PolicyBuilder withMaxPartSize(final long size) {     Preconditions.checkState(size > 0L).     return new PolicyBuilder(size, rolloverInterval, inactivityInterval). }
true;public;1;4;/**  * Sets the interval of allowed inactivity after which a part file will have to roll.  * @param interval the allowed inactivity interval.  */ ;/**  * Sets the interval of allowed inactivity after which a part file will have to roll.  * @param interval the allowed inactivity interval.  */ public DefaultRollingPolicy.PolicyBuilder withInactivityInterval(final long interval) {     Preconditions.checkState(interval > 0L).     return new PolicyBuilder(partSize, rolloverInterval, interval). }
true;public;1;4;/**  * Sets the max time a part file can stay open before having to roll.  * @param interval the desired rollover interval.  */ ;/**  * Sets the max time a part file can stay open before having to roll.  * @param interval the desired rollover interval.  */ public DefaultRollingPolicy.PolicyBuilder withRolloverInterval(final long interval) {     Preconditions.checkState(interval > 0L).     return new PolicyBuilder(partSize, interval, inactivityInterval). }
true;public;0;3;/**  * Creates the actual policy.  */ ;/**  * Creates the actual policy.  */ public <IN, BucketID> DefaultRollingPolicy<IN, BucketID> build() {     return new DefaultRollingPolicy<>(partSize, rolloverInterval, inactivityInterval). }
