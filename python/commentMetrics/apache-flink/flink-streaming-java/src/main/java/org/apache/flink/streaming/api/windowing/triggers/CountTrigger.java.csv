commented;modifiers;parameterAmount;loc;comment;code
false;public;4;10;;@Override public TriggerResult onElement(Object element, long timestamp, W window, TriggerContext ctx) throws Exception {     ReducingState<Long> count = ctx.getPartitionedState(stateDesc).     count.add(1L).     if (count.get() >= maxCount) {         count.clear().         return TriggerResult.FIRE.     }     return TriggerResult.CONTINUE. }
false;public;3;4;;@Override public TriggerResult onEventTime(long time, W window, TriggerContext ctx) {     return TriggerResult.CONTINUE. }
false;public;3;4;;@Override public TriggerResult onProcessingTime(long time, W window, TriggerContext ctx) throws Exception {     return TriggerResult.CONTINUE. }
false;public;2;4;;@Override public void clear(W window, TriggerContext ctx) throws Exception {     ctx.getPartitionedState(stateDesc).clear(). }
false;public;0;4;;@Override public boolean canMerge() {     return true. }
false;public;2;4;;@Override public void onMerge(W window, OnMergeContext ctx) throws Exception {     ctx.mergePartitionedState(stateDesc). }
false;public;0;4;;@Override public String toString() {     return "CountTrigger(" + maxCount + ")". }
true;public,static;1;3;/**  * Creates a trigger that fires once the number of elements in a pane reaches the given count.  *  * @param maxCount The count of elements at which to fire.  * @param <W> The type of {@link Window Windows} on which this trigger can operate.  */ ;/**  * Creates a trigger that fires once the number of elements in a pane reaches the given count.  *  * @param maxCount The count of elements at which to fire.  * @param <W> The type of {@link Window Windows} on which this trigger can operate.  */ public static <W extends Window> CountTrigger<W> of(long maxCount) {     return new CountTrigger<>(maxCount). }
false;public;2;4;;@Override public Long reduce(Long value1, Long value2) throws Exception {     return value1 + value2. }
