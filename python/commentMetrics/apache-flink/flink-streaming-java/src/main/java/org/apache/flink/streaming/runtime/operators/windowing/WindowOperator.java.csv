# id;timestamp;commentText;codeText;commentWords;codeWords
WindowOperator -> @SuppressWarnings("unchecked") 	private void fireOrContinue(TriggerResult triggerResult, 								W window, 								AppendingState<IN, ACC> windowState) throws Exception;1466504046;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fireOrContinue(TriggerResult triggerResult,_								W window,_								AppendingState<IN, ACC> windowState) throws Exception {_		if (!triggerResult.isFire()) {_			return__		}__		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		ACC contents = windowState.get()__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,or,continue,trigger,result,trigger,result,w,window,appending,state,in,acc,window,state,throws,exception,if,trigger,result,is,fire,return,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fireOrContinue(TriggerResult triggerResult, 								W window, 								AppendingState<IN, ACC> windowState) throws Exception;1466504186;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fireOrContinue(TriggerResult triggerResult,_								W window,_								AppendingState<IN, ACC> windowState) throws Exception {_		if (!triggerResult.isFire()) {_			return__		}__		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		ACC contents = windowState.get()__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,or,continue,trigger,result,trigger,result,w,window,appending,state,in,acc,window,state,throws,exception,if,trigger,result,is,fire,return,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fireOrContinue(TriggerResult triggerResult, 								W window, 								AppendingState<IN, ACC> windowState) throws Exception;1467040572;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fireOrContinue(TriggerResult triggerResult,_								W window,_								AppendingState<IN, ACC> windowState) throws Exception {_		if (!triggerResult.isFire()) {_			return__		}__		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		ACC contents = windowState.get()__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,or,continue,trigger,result,trigger,result,w,window,appending,state,in,acc,window,state,throws,exception,if,trigger,result,is,fire,return,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fireOrContinue(TriggerResult triggerResult, 								W window, 								AppendingState<IN, ACC> windowState) throws Exception;1467040572;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fireOrContinue(TriggerResult triggerResult,_								W window,_								AppendingState<IN, ACC> windowState) throws Exception {_		if (!triggerResult.isFire()) {_			return__		}__		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		ACC contents = windowState.get()__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,or,continue,trigger,result,trigger,result,w,window,appending,state,in,acc,window,state,throws,exception,if,trigger,result,is,fire,return,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fireOrContinue(TriggerResult triggerResult, 								W window, 								AppendingState<IN, ACC> windowState) throws Exception;1467645848;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fireOrContinue(TriggerResult triggerResult,_								W window,_								AppendingState<IN, ACC> windowState) throws Exception {_		if (!triggerResult.isFire()) {_			return__		}__		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		ACC contents = windowState.get()__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,or,continue,trigger,result,trigger,result,w,window,appending,state,in,acc,window,state,throws,exception,if,trigger,result,is,fire,return,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fireOrContinue(TriggerResult triggerResult, 								W window, 								AppendingState<IN, ACC> windowState) throws Exception;1468523508;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fireOrContinue(TriggerResult triggerResult,_								W window,_								AppendingState<IN, ACC> windowState) throws Exception {_		if (!triggerResult.isFire()) {_			return__		}__		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		ACC contents = windowState.get()__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,or,continue,trigger,result,trigger,result,w,window,appending,state,in,acc,window,state,throws,exception,if,trigger,result,is,fire,return,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1489819457;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1490282941;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1490282942;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1490457557;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1493195810;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1493195810;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1493195810;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1493195810;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1493195810;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1493298548;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1495484544;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1503598628;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1506334011;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1507799553;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1508934111;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1509016418;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1515177485;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1522337739;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1526474860;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> protected boolean isElementLate(StreamRecord<IN> element);1531308946;Decide if a record is currently late, based on current watermark and allowed lateness.__@param element The element to check_@return The element for which should be considered when sideoutputs;protected boolean isElementLate(StreamRecord<IN> element){_		return (windowAssigner.isEventTime()) &&_			(element.getTimestamp() + allowedLateness <= internalTimerService.currentWatermark())__	};decide,if,a,record,is,currently,late,based,on,current,watermark,and,allowed,lateness,param,element,the,element,to,check,return,the,element,for,which,should,be,considered,when,sideoutputs;protected,boolean,is,element,late,stream,record,in,element,return,window,assigner,is,event,time,element,get,timestamp,allowed,lateness,internal,timer,service,current,watermark
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1445418103;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1445522037;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1445591669;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1445607475;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1445608082;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1445608190;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1446662786;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1447162450;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1447931003;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1448353719;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1448353719;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1453987157;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory, 			WindowFunction<IN, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger);1454527671;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			WindowBufferFactory<? super IN, ? extends WindowBuffer<IN>> windowBufferFactory,_			WindowFunction<IN, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowBufferFactory = requireNonNull(windowBufferFactory)__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,window,buffer,factory,super,in,extends,window,buffer,in,window,buffer,factory,window,function,in,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,buffer,factory,require,non,null,window,buffer,factory,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1466504046;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__		deleteCleanupTimer(window)__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear,delete,cleanup,timer,window
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1466504186;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__		deleteCleanupTimer(window)__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear,delete,cleanup,timer,window
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1467040572;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__		deleteCleanupTimer(window)__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear,delete,cleanup,timer,window
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1467040572;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__		deleteCleanupTimer(window)__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear,delete,cleanup,timer,window
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1467645848;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__		deleteCleanupTimer(window)__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear,delete,cleanup,timer,window
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1468523508;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__		deleteCleanupTimer(window)__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear,delete,cleanup,timer,window
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1469560325;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1470753725;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1471971066;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1472663401;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1472663401;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1474473213;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1474635666;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1475231926;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1475688974;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1475690674;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1475690674;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1475830909;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1477069384;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1477069385;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1477517188;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1478005374;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1478532357;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1479200724;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1479217936;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1480333691;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1482244974;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1482244974;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1484235257;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1485118419;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> private void cleanup(W window, 						AppendingState<IN, ACC> windowState, 						MergingWindowSet<W> mergingWindows) throws Exception;1485179139;Cleans up the window state if the provided {@link TriggerResult} requires so, or if it_is time to do so (see {@link #isCleanupTime(Window, long)}). The caller must ensure that the_correct key is set in the state backend and the context object.;private void cleanup(W window,_						AppendingState<IN, ACC> windowState,_						MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_		context.clear()__	};cleans,up,the,window,state,if,the,provided,link,trigger,result,requires,so,or,if,it,is,time,to,do,so,see,link,is,cleanup,time,window,long,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,cleanup,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist,context,clear
WindowOperator -> protected void registerCleanupTimer(W window);1466504046;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = getCleanupTimeForWindow(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,get,cleanup,time,for,window,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1466504186;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1467040572;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1467040572;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1467645848;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1468523508;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1469560325;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1470753725;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1471971066;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1472663401;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1472663401;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1474473213;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1474635666;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1475231926;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1475688974;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1475690674;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1475690674;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1475830909;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1477069384;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1477069385;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1477517188;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1478005374;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1478532357;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1479200724;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1479217936;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1480333691;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1482244974;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1482244974;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1484235257;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1485118419;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1485179139;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1485250954;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1489819457;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1490282941;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1490282942;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			context.registerEventTimeTimer(cleanupTime)__		} else {_			context.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,context,register,event,time,timer,cleanup,time,else,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1490457557;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1493195810;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1493195810;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1493195810;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1493195810;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1493195810;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1493298548;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1495484544;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1503598628;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1506334011;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1507799553;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1508934111;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1509016418;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1515177485;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1522337739;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1526474860;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> protected void registerCleanupTimer(W window);1531308946;Registers a timer to cleanup the content of the window._@param window_the window whose state to discard;protected void registerCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}__		if (windowAssigner.isEventTime()) {_			triggerContext.registerEventTimeTimer(cleanupTime)__		} else {_			triggerContext.registerProcessingTimeTimer(cleanupTime)__		}_	};registers,a,timer,to,cleanup,the,content,of,the,window,param,window,the,window,whose,state,to,discard;protected,void,register,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,register,event,time,timer,cleanup,time,else,trigger,context,register,processing,time,timer,cleanup,time
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1459869538;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1460123413;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1460725268;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1461572320;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1462268186;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1466072007;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			LegacyWindowOperatorType legacyWindowOperatorType);1482244974;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.legacyWindowOperatorType = legacyWindowOperatorType___		if (windowAssigner instanceof MergingWindowAssigner) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			mergingWindowsDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__		} else {_			mergingWindowsDescriptor = null__		}__		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,legacy,window,operator,type,legacy,window,operator,type,if,window,assigner,instanceof,merging,window,assigner,suppress,warnings,unchecked,rawtypes,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,merging,windows,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,else,merging,windows,descriptor,null,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			LegacyWindowOperatorType legacyWindowOperatorType);1484235257;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.legacyWindowOperatorType = legacyWindowOperatorType___		if (windowAssigner instanceof MergingWindowAssigner) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			mergingWindowsDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__		} else {_			mergingWindowsDescriptor = null__		}__		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,legacy,window,operator,type,legacy,window,operator,type,if,window,assigner,instanceof,merging,window,assigner,suppress,warnings,unchecked,rawtypes,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,merging,windows,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,else,merging,windows,descriptor,null,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			LegacyWindowOperatorType legacyWindowOperatorType);1485118419;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			LegacyWindowOperatorType legacyWindowOperatorType);1485179139;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			LegacyWindowOperatorType legacyWindowOperatorType);1485250954;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> protected void deleteCleanupTimer(W window);1466504046;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = getCleanupTimeForWindow(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,get,cleanup,time,for,window,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1466504186;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1467040572;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1467040572;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1467645848;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1468523508;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1469560325;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1470753725;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1471971066;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1472663401;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1472663401;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1474473213;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1474635666;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1475231926;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1475688974;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1475690674;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1475690674;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1475830909;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1477069384;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1477069385;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1477517188;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1478005374;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1478532357;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1479200724;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1479217936;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1480333691;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1482244974;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1482244974;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1484235257;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1485118419;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1485179139;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1485250954;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1489819457;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1490282941;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1490282942;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			context.deleteEventTimeTimer(cleanupTime)__		} else {_			context.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,context,delete,event,time,timer,cleanup,time,else,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1490457557;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1493195810;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1493195810;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1493195810;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1493195810;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1493195810;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1493298548;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1495484544;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1503598628;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1506334011;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1507799553;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1508934111;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1509016418;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1515177485;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1522337739;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1526474860;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> protected void deleteCleanupTimer(W window);1531308946;Deletes the cleanup timer set for the contents of the provided window._@param window_the window whose state to discard;protected void deleteCleanupTimer(W window) {_		long cleanupTime = cleanupTime(window)__		if (cleanupTime == Long.MAX_VALUE) {_			_			return__		}_		if (windowAssigner.isEventTime()) {_			triggerContext.deleteEventTimeTimer(cleanupTime)__		} else {_			triggerContext.deleteProcessingTimeTimer(cleanupTime)__		}_	};deletes,the,cleanup,timer,set,for,the,contents,of,the,provided,window,param,window,the,window,whose,state,to,discard;protected,void,delete,cleanup,timer,w,window,long,cleanup,time,cleanup,time,window,if,cleanup,time,long,return,if,window,assigner,is,event,time,trigger,context,delete,event,time,timer,cleanup,time,else,trigger,context,delete,processing,time,timer,cleanup,time
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1489819457;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1490282941;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1490282942;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1490457557;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1493298548;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag, 			LegacyWindowOperatorType legacyWindowOperatorType);1495484544;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag,_			LegacyWindowOperatorType legacyWindowOperatorType) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag__		this.legacyWindowOperatorType = legacyWindowOperatorType___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,legacy,window,operator,type,legacy,window,operator,type,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,this,legacy,window,operator,type,legacy,window,operator,type,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1454527671;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,acc,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1454527712;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,acc,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1454527721;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,acc,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1455138931;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,acc,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1455486690;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, ACC, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,acc,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1489819457;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1490282941;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1490282942;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1490457557;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1493195810;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1493298548;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1495484544;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, lateDataOutputTag, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,late,data,output,tag,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1503598628;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1506334011;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1507799553;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1508934111;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1509016418;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1515177485;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1522337739;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1526474860;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness, 			OutputTag<IN> lateDataOutputTag);1531308946;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness,_			OutputTag<IN> lateDataOutputTag) {__		super(windowFunction)___		checkArgument(!(windowAssigner instanceof BaseAlignedWindowAssigner),_			"The " + windowAssigner.getClass().getSimpleName() + " cannot be used with a WindowOperator. " +_				"This assigner is only used with the AccumulatingProcessingTimeWindowOperator and " +_				"the AggregatingProcessingTimeWindowOperator")___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness__		this.lateDataOutputTag = lateDataOutputTag___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,output,tag,in,late,data,output,tag,super,window,function,check,argument,window,assigner,instanceof,base,aligned,window,assigner,the,window,assigner,get,class,get,simple,name,cannot,be,used,with,a,window,operator,this,assigner,is,only,used,with,the,accumulating,processing,time,window,operator,and,the,aggregating,processing,time,window,operator,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,this,late,data,output,tag,late,data,output,tag,set,chaining,strategy,chaining,strategy,always
WindowOperator -> private long cleanupTime(W window);1466504186;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1467040572;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1467040572;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1467645848;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1468523508;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1469560325;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1470753725;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1471971066;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1472663401;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1472663401;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1474473213;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1474635666;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1475231926;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1475688974;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1475690674;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1475690674;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1475830909;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1477069384;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1477069385;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1477517188;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1478005374;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1478532357;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1479200724;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1479217936;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1480333691;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1482244974;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1482244974;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1484235257;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1485118419;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1485179139;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		long cleanupTime = window.maxTimestamp() + allowedLateness__		return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long
WindowOperator -> private long cleanupTime(W window);1485250954;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1489819457;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1490282941;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1490282942;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1490457557;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1493195810;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1493195810;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1493195810;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1493195810;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1493195810;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1493298548;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1495484544;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1503598628;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1506334011;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1507799553;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1508934111;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1509016418;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greated than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greated,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1515177485;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greater than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greater,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1522337739;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greater than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greater,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1526474860;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greater than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greater,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> private long cleanupTime(W window);1531308946;Returns the cleanup time for a window, which is_{@code window.maxTimestamp + allowedLateness}. In_case this leads to a value greater than {@link Long#MAX_VALUE}_then a cleanup time of {@link Long#MAX_VALUE} is_returned.__@param window the window whose cleanup time we are computing.;private long cleanupTime(W window) {_		if (windowAssigner.isEventTime()) {_			long cleanupTime = window.maxTimestamp() + allowedLateness__			return cleanupTime >= window.maxTimestamp() ? cleanupTime : Long.MAX_VALUE__		} else {_			return window.maxTimestamp()__		}_	};returns,the,cleanup,time,for,a,window,which,is,code,window,max,timestamp,allowed,lateness,in,case,this,leads,to,a,value,greater,than,link,long,then,a,cleanup,time,of,link,long,is,returned,param,window,the,window,whose,cleanup,time,we,are,computing;private,long,cleanup,time,w,window,if,window,assigner,is,event,time,long,cleanup,time,window,max,timestamp,allowed,lateness,return,cleanup,time,window,max,timestamp,cleanup,time,long,else,return,window,max,timestamp
WindowOperator -> protected boolean isWindowLate(W window);1489819457;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1490282941;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1490282942;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1490457557;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1493195810;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1493195810;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1493195810;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1493195810;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1493195810;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1493298548;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1495484544;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1503598628;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1506334011;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1507799553;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1508934111;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1509016418;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1515177485;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1522337739;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1526474860;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isWindowLate(W window);1531308946;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isWindowLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,window,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1461572320;Retrieves the {@link MergingWindowSet} for the currently active key. The caller must_ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1462268186;Retrieves the {@link MergingWindowSet} for the currently active key. The caller must_ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1466072007;Retrieves the {@link MergingWindowSet} for the currently active key. The caller must_ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1466504046;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1466504186;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1467040572;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1467040572;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1467645848;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1468523508;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1469560325;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(null, VoidSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,null,void,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1470753725;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1471971066;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1472663401;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1472663401;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1474473213;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1474635666;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getStateBackend().getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1475231926;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getKeyedStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getKeyedStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,keyed,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,keyed,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1475688974;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getKeyedStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getKeyedStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,keyed,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,keyed,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1475690674;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getKeyedStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getKeyedStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,keyed,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,keyed,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1475690674;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getKeyedStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getKeyedStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,keyed,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,keyed,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1475830909;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getKeyedStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getKeyedStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,keyed,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,keyed,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1477069384;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getKeyedStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getKeyedStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,keyed,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,keyed,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1477069385;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getKeyedStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getKeyedStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,keyed,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,keyed,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> @SuppressWarnings("unchecked") 	protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1477517188;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.;@SuppressWarnings("unchecked")_	protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		MergingWindowSet<W> mergingWindows = mergingWindowsByKey.get((K) getKeyedStateBackend().getCurrentKey())__		if (mergingWindows == null) {_			__			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			ListStateDescriptor<Tuple2<W, W>> mergeStateDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__			ListState<Tuple2<W, W>> mergeState = getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergeStateDescriptor)___			mergingWindows = new MergingWindowSet<>((MergingWindowAssigner<? super IN, W>) windowAssigner, mergeState)__			mergeState.clear()___			mergingWindowsByKey.put((K) getKeyedStateBackend().getCurrentKey(), mergingWindows)__		}_		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend;suppress,warnings,unchecked,protected,merging,window,set,w,get,merging,window,set,throws,exception,merging,window,set,w,merging,windows,merging,windows,by,key,get,k,get,keyed,state,backend,get,current,key,if,merging,windows,null,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,list,state,descriptor,tuple2,w,w,merge,state,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merge,state,descriptor,merging,windows,new,merging,window,set,merging,window,assigner,super,in,w,window,assigner,merge,state,merge,state,clear,merging,windows,by,key,put,k,get,keyed,state,backend,get,current,key,merging,windows,return,merging,windows
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1485250954;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the context object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		context.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1489819457;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the context object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		context.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1490282941;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the context object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		context.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1490282942;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the context object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		context.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1490457557;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1493195810;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1493195810;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1493195810;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1493195810;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1493195810;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1493298548;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1495484544;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1503598628;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1506334011;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1507799553;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1508934111;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1509016418;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1515177485;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1522337739;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1526474860;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> private void clearAllState( 			W window, 			AppendingState<IN, ACC> windowState, 			MergingWindowSet<W> mergingWindows) throws Exception;1531308946;Drops all state for the given window and calls_{@link Trigger#clear(Window, Trigger.TriggerContext)}.__<p>The caller must ensure that the_correct key is set in the state backend and the triggerContext object.;private void clearAllState(_			W window,_			AppendingState<IN, ACC> windowState,_			MergingWindowSet<W> mergingWindows) throws Exception {_		windowState.clear()__		triggerContext.clear()__		processContext.window = window__		processContext.clear()__		if (mergingWindows != null) {_			mergingWindows.retireWindow(window)__			mergingWindows.persist()__		}_	};drops,all,state,for,the,given,window,and,calls,link,trigger,clear,window,trigger,trigger,context,p,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,trigger,context,object;private,void,clear,all,state,w,window,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,throws,exception,window,state,clear,trigger,context,clear,process,context,window,window,process,context,clear,if,merging,windows,null,merging,windows,retire,window,window,merging,windows,persist
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1445418103;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1445522037;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1445591669;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1445607475;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1445608082;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1445608190;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1446662786;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1447162450;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1447931003;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1448353719;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1448353719;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1453987157;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime);1454527671;When this flag is enabled the current processing time is set as the timestamp of elements_upon arrival. This must be used, for example, when using the_{@link org.apache.flink.streaming.api.windowing.evictors.TimeEvictor} with processing_time semantics.;public WindowOperator<K, IN, OUT, W> enableSetProcessingTime(boolean setProcessingTime) {_		this.setProcessingTime = setProcessingTime__		return this__	};when,this,flag,is,enabled,the,current,processing,time,is,set,as,the,timestamp,of,elements,upon,arrival,this,must,be,used,for,example,when,using,the,link,org,apache,flink,streaming,api,windowing,evictors,time,evictor,with,processing,time,semantics;public,window,operator,k,in,out,w,enable,set,processing,time,boolean,set,processing,time,this,set,processing,time,set,processing,time,return,this
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1485250954;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1489819457;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1490282941;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1490282942;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1490457557;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1493195810;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1493195810;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1493195810;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1493195810;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1493195810;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1493298548;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1495484544;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1503598628;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1506334011;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1507799553;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1508934111;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1509016418;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1515177485;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1522337739;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1526474860;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void emitWindowContents(W window, ACC contents) throws Exception;1531308946;Emits the contents of the given window using the {@link InternalWindowFunction}.;@SuppressWarnings("unchecked")_	private void emitWindowContents(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		processContext.window = window__		userFunction.process(triggerContext.key, window, processContext, contents, timestampedCollector)__	};emits,the,contents,of,the,given,window,using,the,link,internal,window,function;suppress,warnings,unchecked,private,void,emit,window,contents,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,process,context,window,window,user,function,process,trigger,context,key,window,process,context,contents,timestamped,collector
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1456528025;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,merging,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1459866414;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,merging,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1478005374;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		ListState<Tuple2<W, W>> mergeState =_				getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergingWindowsDescriptor)___		@SuppressWarnings({"unchecked", "rawtypes"})_		MergingWindowSet<W> mergingWindows = new MergingWindowSet<>((MergingWindowAssigner) windowAssigner, mergeState)___		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merging,windows,descriptor,suppress,warnings,unchecked,rawtypes,merging,window,set,w,merging,windows,new,merging,window,set,merging,window,assigner,window,assigner,merge,state,return,merging,windows
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1478532357;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		ListState<Tuple2<W, W>> mergeState =_				getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergingWindowsDescriptor)___		@SuppressWarnings({"unchecked", "rawtypes"})_		MergingWindowSet<W> mergingWindows = new MergingWindowSet<>((MergingWindowAssigner) windowAssigner, mergeState)___		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merging,windows,descriptor,suppress,warnings,unchecked,rawtypes,merging,window,set,w,merging,windows,new,merging,window,set,merging,window,assigner,window,assigner,merge,state,return,merging,windows
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1479200724;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		ListState<Tuple2<W, W>> mergeState =_				getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergingWindowsDescriptor)___		@SuppressWarnings({"unchecked", "rawtypes"})_		MergingWindowSet<W> mergingWindows = new MergingWindowSet<>((MergingWindowAssigner) windowAssigner, mergeState)___		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merging,windows,descriptor,suppress,warnings,unchecked,rawtypes,merging,window,set,w,merging,windows,new,merging,window,set,merging,window,assigner,window,assigner,merge,state,return,merging,windows
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1479217936;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		ListState<Tuple2<W, W>> mergeState =_				getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergingWindowsDescriptor)___		@SuppressWarnings({"unchecked", "rawtypes"})_		MergingWindowSet<W> mergingWindows = new MergingWindowSet<>((MergingWindowAssigner) windowAssigner, mergeState)___		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merging,windows,descriptor,suppress,warnings,unchecked,rawtypes,merging,window,set,w,merging,windows,new,merging,window,set,merging,window,assigner,window,assigner,merge,state,return,merging,windows
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1480333691;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		ListState<Tuple2<W, W>> mergeState =_				getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergingWindowsDescriptor)___		@SuppressWarnings({"unchecked", "rawtypes"})_		MergingWindowSet<W> mergingWindows = new MergingWindowSet<>((MergingWindowAssigner) windowAssigner, mergeState)___		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merging,windows,descriptor,suppress,warnings,unchecked,rawtypes,merging,window,set,w,merging,windows,new,merging,window,set,merging,window,assigner,window,assigner,merge,state,return,merging,windows
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1482244974;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		ListState<Tuple2<W, W>> mergeState =_				getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergingWindowsDescriptor)___		@SuppressWarnings({"unchecked", "rawtypes"})_		MergingWindowSet<W> mergingWindows = new MergingWindowSet<>((MergingWindowAssigner) windowAssigner, mergeState)___		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merging,windows,descriptor,suppress,warnings,unchecked,rawtypes,merging,window,set,w,merging,windows,new,merging,window,set,merging,window,assigner,window,assigner,merge,state,return,merging,windows
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1482244974;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		ListState<Tuple2<W, W>> mergeState =_				getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergingWindowsDescriptor)___		@SuppressWarnings({"unchecked", "rawtypes"})_		MergingWindowSet<W> mergingWindows = new MergingWindowSet<>((MergingWindowAssigner) windowAssigner, mergeState)___		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merging,windows,descriptor,suppress,warnings,unchecked,rawtypes,merging,window,set,w,merging,windows,new,merging,window,set,merging,window,assigner,window,assigner,merge,state,return,merging,windows
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1484235257;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		ListState<Tuple2<W, W>> mergeState =_				getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, mergingWindowsDescriptor)___		@SuppressWarnings({"unchecked", "rawtypes"})_		MergingWindowSet<W> mergingWindows = new MergingWindowSet<>((MergingWindowAssigner) windowAssigner, mergeState)___		return mergingWindows__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,list,state,tuple2,w,w,merge,state,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,merging,windows,descriptor,suppress,warnings,unchecked,rawtypes,merging,window,set,w,merging,windows,new,merging,window,set,merging,window,assigner,window,assigner,merge,state,return,merging,windows
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1485118419;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1485179139;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1485250954;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1489819457;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1490282941;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1490282942;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1490457557;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1493195810;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1493195810;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1493195810;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1493195810;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1493195810;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1493298548;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1495484544;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1503598628;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1506334011;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1507799553;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1508934111;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1509016418;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1515177485;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1522337739;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1526474860;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> protected MergingWindowSet<W> getMergingWindowSet() throws Exception;1531308946;Retrieves the {@link MergingWindowSet} for the currently active key._The caller must ensure that the correct key is set in the state backend.__<p>The caller must also ensure to properly persist changes to state using_{@link MergingWindowSet#persist()}.;protected MergingWindowSet<W> getMergingWindowSet() throws Exception {_		@SuppressWarnings("unchecked")_		MergingWindowAssigner<? super IN, W> mergingAssigner = (MergingWindowAssigner<? super IN, W>) windowAssigner__		return new MergingWindowSet<>(mergingAssigner, mergingSetsState)__	};retrieves,the,link,merging,window,set,for,the,currently,active,key,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,p,the,caller,must,also,ensure,to,properly,persist,changes,to,state,using,link,merging,window,set,persist;protected,merging,window,set,w,get,merging,window,set,throws,exception,suppress,warnings,unchecked,merging,window,assigner,super,in,w,merging,assigner,merging,window,assigner,super,in,w,window,assigner,return,new,merging,window,set,merging,assigner,merging,sets,state
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1445418103;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			SerializationUtils.serialize(state, baos)__			out.writeInt(baos.size())__			out.write(baos.toByteArray(), 0, baos.size())___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,array,output,stream,baos,new,byte,array,output,stream,serialization,utils,serialize,state,baos,out,write,int,baos,size,out,write,baos,to,byte,array,0,baos,size,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1445522037;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			SerializationUtils.serialize(state, baos)__			out.writeInt(baos.size())__			out.write(baos.toByteArray(), 0, baos.size())___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,array,output,stream,baos,new,byte,array,output,stream,serialization,utils,serialize,state,baos,out,write,int,baos,size,out,write,baos,to,byte,array,0,baos,size,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1445591669;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			SerializationUtils.serialize(state, baos)__			out.writeInt(baos.size())__			out.write(baos.toByteArray(), 0, baos.size())___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,array,output,stream,baos,new,byte,array,output,stream,serialization,utils,serialize,state,baos,out,write,int,baos,size,out,write,baos,to,byte,array,0,baos,size,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1445607475;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			SerializationUtils.serialize(state, baos)__			out.writeInt(baos.size())__			out.write(baos.toByteArray(), 0, baos.size())___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,array,output,stream,baos,new,byte,array,output,stream,serialization,utils,serialize,state,baos,out,write,int,baos,size,out,write,baos,to,byte,array,0,baos,size,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1445608082;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			SerializationUtils.serialize(state, baos)__			out.writeInt(baos.size())__			out.write(baos.toByteArray(), 0, baos.size())___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,array,output,stream,baos,new,byte,array,output,stream,serialization,utils,serialize,state,baos,out,write,int,baos,size,out,write,baos,to,byte,array,0,baos,size,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1445608190;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			SerializationUtils.serialize(state, baos)__			out.writeInt(baos.size())__			out.write(baos.toByteArray(), 0, baos.size())___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,array,output,stream,baos,new,byte,array,output,stream,serialization,utils,serialize,state,baos,out,write,int,baos,size,out,write,baos,to,byte,array,0,baos,size,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1446662786;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			SerializationUtils.serialize(state, baos)__			out.writeInt(baos.size())__			out.write(baos.toByteArray(), 0, baos.size())___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,array,output,stream,baos,new,byte,array,output,stream,serialization,utils,serialize,state,baos,out,write,int,baos,size,out,write,baos,to,byte,array,0,baos,size,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1447162450;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			byte[] serializedState = InstantiationUtil.serializeObject(state)__			out.writeInt(serializedState.length)__			out.write(serializedState, 0, serializedState.length)___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,serialized,state,instantiation,util,serialize,object,state,out,write,int,serialized,state,length,out,write,serialized,state,0,serialized,state,length,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1447931003;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			byte[] serializedState = InstantiationUtil.serializeObject(state)__			out.writeInt(serializedState.length)__			out.write(serializedState, 0, serializedState.length)___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,serialized,state,instantiation,util,serialize,object,state,out,write,int,serialized,state,length,out,write,serialized,state,0,serialized,state,length,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1448353719;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			byte[] serializedState = InstantiationUtil.serializeObject(state)__			out.writeInt(serializedState.length)__			out.write(serializedState, 0, serializedState.length)___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,serialized,state,instantiation,util,serialize,object,state,out,write,int,serialized,state,length,out,write,serialized,state,0,serialized,state,length,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1448353719;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			byte[] serializedState = InstantiationUtil.serializeObject(state)__			out.writeInt(serializedState.length)__			out.write(serializedState, 0, serializedState.length)___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,serialized,state,instantiation,util,serialize,object,state,out,write,int,serialized,state,length,out,write,serialized,state,0,serialized,state,length,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> Context -> protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException;1453987157;Writes the {@code Context} to the given state checkpoint output.;protected void writeToState(StateBackend.CheckpointStateOutputView out) throws IOException {_			keySerializer.serialize(key, out)__			windowSerializer.serialize(window, out)__			out.writeLong(watermarkTimer)__			out.writeLong(processingTimeTimer)___			byte[] serializedState = InstantiationUtil.serializeObject(state)__			out.writeInt(serializedState.length)__			out.write(serializedState, 0, serializedState.length)___			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			out.writeInt(windowBuffer.size())__			for (StreamRecord<IN> element: windowBuffer.getElements()) {_				recordSerializer.serialize(element, out)__			}_		};writes,the,code,context,to,the,given,state,checkpoint,output;protected,void,write,to,state,state,backend,checkpoint,state,output,view,out,throws,ioexception,key,serializer,serialize,key,out,window,serializer,serialize,window,out,out,write,long,watermark,timer,out,write,long,processing,time,timer,byte,serialized,state,instantiation,util,serialize,object,state,out,write,int,serialized,state,length,out,write,serialized,state,0,serialized,state,length,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,out,write,int,window,buffer,size,for,stream,record,in,element,window,buffer,get,elements,record,serializer,serialize,element,out
WindowOperator -> protected boolean isLate(W window);1466504046;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (getCleanupTimeForWindow(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,get,cleanup,time,for,window,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1466504186;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1467040572;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1467040572;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1467645848;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1468523508;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1469560325;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1470753725;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1471971066;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1472663401;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1472663401;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1474473213;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1474635666;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1475231926;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1475688974;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1475690674;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1475690674;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1475830909;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1477069384;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= currentWatermark))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,current,watermark
WindowOperator -> protected boolean isLate(W window);1477069385;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1477517188;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1478005374;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1478532357;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1479200724;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1479217936;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1480333691;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1482244974;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1482244974;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1484235257;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1485118419;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1485179139;Decides if a window is currently late or not, based on the current_watermark, i.e. the current event time, and the allowed lateness._@param window_The collection of windows returned by the {@link WindowAssigner}._@return The windows (among the {@code eligibleWindows}) for which the element should still be_considered when triggering.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};decides,if,a,window,is,currently,late,or,not,based,on,the,current,watermark,i,e,the,current,event,time,and,the,allowed,lateness,param,window,the,collection,of,windows,returned,by,the,link,window,assigner,return,the,windows,among,the,code,eligible,windows,for,which,the,element,should,still,be,considered,when,triggering;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected boolean isLate(W window);1485250954;Returns {@code true} if the watermark is after the end timestamp plus the allowed lateness_of the given window.;protected boolean isLate(W window) {_		return (windowAssigner.isEventTime() && (cleanupTime(window) <= internalTimerService.currentWatermark()))__	};returns,code,true,if,the,watermark,is,after,the,end,timestamp,plus,the,allowed,lateness,of,the,given,window;protected,boolean,is,late,w,window,return,window,assigner,is,event,time,cleanup,time,window,internal,timer,service,current,watermark
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1466504046;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = getCleanupTimeForWindow(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,get,cleanup,time,for,window,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1466504186;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1467040572;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1467040572;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1467645848;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1468523508;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1469560325;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1470753725;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1471971066;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1472663401;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1472663401;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1474473213;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1474635666;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1475231926;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1475688974;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1475690674;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1475690674;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1475830909;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1477069384;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1477069385;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1477517188;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1478005374;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1478532357;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1479200724;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1479217936;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1480333691;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1482244974;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1482244974;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1484235257;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1485118419;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1485179139;Decides if it is time to clean up the window state._Clean up time for a window is:_<li> if it is event time, after the watermark passes the end of the window plus the user-specified allowed lateness_<li> if it is processing time, after the processing time at the node passes the end of the window._@param window_the window to clean_@param time_the current time (event or processing depending on the {@link WindowAssigner}_@return {@code true} if it is time to clean up the window state, {@code false} otherwise.;protected final boolean isCleanupTime(W window, long time) {_		long cleanupTime = cleanupTime(window)__		return  cleanupTime == time__	};decides,if,it,is,time,to,clean,up,the,window,state,clean,up,time,for,a,window,is,li,if,it,is,event,time,after,the,watermark,passes,the,end,of,the,window,plus,the,user,specified,allowed,lateness,li,if,it,is,processing,time,after,the,processing,time,at,the,node,passes,the,end,of,the,window,param,window,the,window,to,clean,param,time,the,current,time,event,or,processing,depending,on,the,link,window,assigner,return,code,true,if,it,is,time,to,clean,up,the,window,state,code,false,otherwise;protected,final,boolean,is,cleanup,time,w,window,long,time,long,cleanup,time,cleanup,time,window,return,cleanup,time,time
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1485250954;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1489819457;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1490282941;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1490282942;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1490457557;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1493195810;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1493195810;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1493195810;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1493195810;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1493195810;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1493298548;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1495484544;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1503598628;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1506334011;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1507799553;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1508934111;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1509016418;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1515177485;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1522337739;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1526474860;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected final boolean isCleanupTime(W window, long time);1531308946;Returns {@code true} if the given time is the cleanup time for the given window.;protected final boolean isCleanupTime(W window, long time) {_		return time == cleanupTime(window)__	};returns,code,true,if,the,given,time,is,the,cleanup,time,for,the,given,window;protected,final,boolean,is,cleanup,time,w,window,long,time,return,time,cleanup,time,window
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1490282941;Write skipped late arriving element to SideOutput__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1490282942;Write skipped late arriving element to SideOutput__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1490457557;Write skipped late arriving element to SideOutput__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1493195810;Write skipped late arriving element to SideOutput__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1493195810;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1493195810;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1493195810;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1493195810;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1493298548;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1495484544;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1503598628;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1506334011;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1507799553;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1508934111;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1509016418;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1515177485;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1522337739;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1526474860;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> protected void sideOutput(StreamRecord<IN> element);1531308946;Write skipped late arriving element to SideOutput.__@param element skipped late arriving element to side output;protected void sideOutput(StreamRecord<IN> element){_		output.collect(lateDataOutputTag, element)__	};write,skipped,late,arriving,element,to,side,output,param,element,skipped,late,arriving,element,to,side,output;protected,void,side,output,stream,record,in,element,output,collect,late,data,output,tag,element
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1469560325;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1470753725;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1471971066;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1472663401;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1472663401;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1474473213;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1474635666;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1475231926;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1475688974;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1475690674;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1475690674;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1475830909;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1477069384;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1477069385;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1477517188;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1478005374;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1478532357;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1479200724;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1479217936;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1480333691;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1482244974;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1482244974;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1484235257;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1485118419;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> @SuppressWarnings("unchecked") 	private void fire(W window, ACC contents) throws Exception;1485179139;Triggers the window computation if the provided {@link TriggerResult} requires so._The caller must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	private void fire(W window, ACC contents) throws Exception {_		timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__		userFunction.apply(context.key, context.window, contents, timestampedCollector)__	};triggers,the,window,computation,if,the,provided,link,trigger,result,requires,so,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,private,void,fire,w,window,acc,contents,throws,exception,timestamped,collector,set,absolute,timestamp,window,max,timestamp,user,function,apply,context,key,context,window,contents,timestamped,collector
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1474473213;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1474635666;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1475231926;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1475688974;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1475690674;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1475690674;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1475830909;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1477069384;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1477069385;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1477517188;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1478005374;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		if (windowAssigner instanceof MergingWindowAssigner) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			mergingWindowsDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__		} else {_			mergingWindowsDescriptor = null__		}__		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,if,window,assigner,instanceof,merging,window,assigner,suppress,warnings,unchecked,rawtypes,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,merging,windows,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,else,merging,windows,descriptor,null,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1478532357;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		if (windowAssigner instanceof MergingWindowAssigner) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			mergingWindowsDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__		} else {_			mergingWindowsDescriptor = null__		}__		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,if,window,assigner,instanceof,merging,window,assigner,suppress,warnings,unchecked,rawtypes,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,merging,windows,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,else,merging,windows,descriptor,null,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1479200724;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		if (windowAssigner instanceof MergingWindowAssigner) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			mergingWindowsDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__		} else {_			mergingWindowsDescriptor = null__		}__		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,if,window,assigner,instanceof,merging,window,assigner,suppress,warnings,unchecked,rawtypes,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,merging,windows,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,else,merging,windows,descriptor,null,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1479217936;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		if (windowAssigner instanceof MergingWindowAssigner) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			mergingWindowsDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__		} else {_			mergingWindowsDescriptor = null__		}__		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,if,window,assigner,instanceof,merging,window,assigner,suppress,warnings,unchecked,rawtypes,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,merging,windows,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,else,merging,windows,descriptor,null,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1480333691;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		if (windowAssigner instanceof MergingWindowAssigner) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			mergingWindowsDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__		} else {_			mergingWindowsDescriptor = null__		}__		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,if,window,assigner,instanceof,merging,window,assigner,suppress,warnings,unchecked,rawtypes,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,merging,windows,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,else,merging,windows,descriptor,null,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1482244974;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		super(windowFunction)___		checkArgument(allowedLateness >= 0)___		checkArgument(windowStateDescriptor == null || windowStateDescriptor.isSerializerInitialized(),_				"window state serializer is not properly initialized")___		this.windowAssigner = checkNotNull(windowAssigner)__		this.windowSerializer = checkNotNull(windowSerializer)__		this.keySelector = checkNotNull(keySelector)__		this.keySerializer = checkNotNull(keySerializer)__		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = checkNotNull(trigger)__		this.allowedLateness = allowedLateness___		if (windowAssigner instanceof MergingWindowAssigner) {_			@SuppressWarnings({"unchecked", "rawtypes"})_			TupleSerializer<Tuple2<W, W>> tupleSerializer = new TupleSerializer<>((Class) Tuple2.class, new TypeSerializer[] {windowSerializer, windowSerializer} )__			mergingWindowsDescriptor = new ListStateDescriptor<>("merging-window-set", tupleSerializer)__		} else {_			mergingWindowsDescriptor = null__		}__		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,check,argument,allowed,lateness,0,check,argument,window,state,descriptor,null,window,state,descriptor,is,serializer,initialized,window,state,serializer,is,not,properly,initialized,this,window,assigner,check,not,null,window,assigner,this,window,serializer,check,not,null,window,serializer,this,key,selector,check,not,null,key,selector,this,key,serializer,check,not,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,check,not,null,trigger,this,allowed,lateness,allowed,lateness,if,window,assigner,instanceof,merging,window,assigner,suppress,warnings,unchecked,rawtypes,tuple,serializer,tuple2,w,w,tuple,serializer,new,tuple,serializer,class,tuple2,class,new,type,serializer,window,serializer,window,serializer,merging,windows,descriptor,new,list,state,descriptor,merging,window,set,tuple,serializer,else,merging,windows,descriptor,null,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1482244974;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1484235257;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1485118419;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1485179139;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,legacy,window,operator,type,none
WindowOperator -> public WindowOperator( 			WindowAssigner<? super IN, W> windowAssigner, 			TypeSerializer<W> windowSerializer, 			KeySelector<IN, K> keySelector, 			TypeSerializer<K> keySerializer, 			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 			InternalWindowFunction<ACC, OUT, K, W> windowFunction, 			Trigger<? super IN, ? super W> trigger, 			long allowedLateness);1485250954;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(_			WindowAssigner<? super IN, W> windowAssigner,_			TypeSerializer<W> windowSerializer,_			KeySelector<IN, K> keySelector,_			TypeSerializer<K> keySerializer,_			StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_			InternalWindowFunction<ACC, OUT, K, W> windowFunction,_			Trigger<? super IN, ? super W> trigger,_			long allowedLateness) {__		this(windowAssigner, windowSerializer, keySelector, keySerializer,_			windowStateDescriptor, windowFunction, trigger, allowedLateness, LegacyWindowOperatorType.NONE)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,this,window,assigner,window,serializer,key,selector,key,serializer,window,state,descriptor,window,function,trigger,allowed,lateness,legacy,window,operator,type,none
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in) throws Exception;1445418103;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			ByteArrayInputStream bais = new ByteArrayInputStream(stateData)__			state = (HashMap<String, Serializable>) SerializationUtils.deserialize(bais)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,byte,array,input,stream,bais,new,byte,array,input,stream,state,data,state,hash,map,string,serializable,serialization,utils,deserialize,bais,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in) throws Exception;1445522037;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			ByteArrayInputStream bais = new ByteArrayInputStream(stateData)__			state = (HashMap<String, Serializable>) SerializationUtils.deserialize(bais)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,byte,array,input,stream,bais,new,byte,array,input,stream,state,data,state,hash,map,string,serializable,serialization,utils,deserialize,bais,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in) throws Exception;1445591669;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			ByteArrayInputStream bais = new ByteArrayInputStream(stateData)__			state = (HashMap<String, Serializable>) SerializationUtils.deserialize(bais)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,byte,array,input,stream,bais,new,byte,array,input,stream,state,data,state,hash,map,string,serializable,serialization,utils,deserialize,bais,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in) throws Exception;1445607475;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			ByteArrayInputStream bais = new ByteArrayInputStream(stateData)__			state = (HashMap<String, Serializable>) SerializationUtils.deserialize(bais)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,byte,array,input,stream,bais,new,byte,array,input,stream,state,data,state,hash,map,string,serializable,serialization,utils,deserialize,bais,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in) throws Exception;1445608082;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			ByteArrayInputStream bais = new ByteArrayInputStream(stateData)__			state = (HashMap<String, Serializable>) SerializationUtils.deserialize(bais)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,byte,array,input,stream,bais,new,byte,array,input,stream,state,data,state,hash,map,string,serializable,serialization,utils,deserialize,bais,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in) throws Exception;1445608190;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			ByteArrayInputStream bais = new ByteArrayInputStream(stateData)__			state = (HashMap<String, Serializable>) SerializationUtils.deserialize(bais)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,byte,array,input,stream,bais,new,byte,array,input,stream,state,data,state,hash,map,string,serializable,serialization,utils,deserialize,bais,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in) throws Exception;1446662786;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			ByteArrayInputStream bais = new ByteArrayInputStream(stateData)__			state = (HashMap<String, Serializable>) SerializationUtils.deserialize(bais)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,byte,array,input,stream,bais,new,byte,array,input,stream,state,data,state,hash,map,string,serializable,serialization,utils,deserialize,bais,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor, 		WindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1454527721;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor,_		WindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,merging,state,in,acc,window,state,descriptor,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor, 		WindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1455138931;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor,_		WindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,merging,state,in,acc,window,state,descriptor,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor, 		WindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1455486690;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor,_		WindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,merging,state,in,acc,window,state,descriptor,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor, 		WindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1455703064;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor,_		WindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,merging,state,in,acc,window,state,descriptor,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor, 		WindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1456347641;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor,_		WindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,merging,state,in,acc,window,state,descriptor,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor, 		WindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger);1456347674;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends MergingState<IN, ACC>, ?> windowStateDescriptor,_		WindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,merging,state,in,acc,window,state,descriptor,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,set,chaining,strategy,chaining,strategy,always
WindowOperator -> @SuppressWarnings("unchecked") 	protected void processTriggerResult(TriggerResult triggerResult, W window) throws Exception;1461572320;Process {@link TriggerResult} for the currently active key and the given window. The caller_must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	protected void processTriggerResult(TriggerResult triggerResult, W window) throws Exception {_		if (!triggerResult.isFire() && !triggerResult.isPurge()) {_			_			return__		}__		AppendingState<IN, ACC> windowState___		MergingWindowSet<W> mergingWindows = null___		if (windowAssigner instanceof MergingWindowAssigner) {_			mergingWindows = getMergingWindowSet()__			W stateWindow = mergingWindows.getStateWindow(window)__			windowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor)___		} else {_			windowState = getPartitionedState(window, windowSerializer, windowStateDescriptor)__		}__		if (triggerResult.isFire()) {_			timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__			ACC contents = windowState.get()___			userFunction.apply(context.key, context.window, contents, timestampedCollector)___		}_		if (triggerResult.isPurge()) {_			windowState.clear()__			if (mergingWindows != null) {_				mergingWindows.retireWindow(window)__			}_			context.clear()__		}_	};process,link,trigger,result,for,the,currently,active,key,and,the,given,window,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,protected,void,process,trigger,result,trigger,result,trigger,result,w,window,throws,exception,if,trigger,result,is,fire,trigger,result,is,purge,return,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,null,if,window,assigner,instanceof,merging,window,assigner,merging,windows,get,merging,window,set,w,state,window,merging,windows,get,state,window,window,window,state,get,partitioned,state,state,window,window,serializer,window,state,descriptor,else,window,state,get,partitioned,state,window,window,serializer,window,state,descriptor,if,trigger,result,is,fire,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector,if,trigger,result,is,purge,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> @SuppressWarnings("unchecked") 	protected void processTriggerResult(TriggerResult triggerResult, W window) throws Exception;1462268186;Process {@link TriggerResult} for the currently active key and the given window. The caller_must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	protected void processTriggerResult(TriggerResult triggerResult, W window) throws Exception {_		if (!triggerResult.isFire() && !triggerResult.isPurge()) {_			_			return__		}__		AppendingState<IN, ACC> windowState___		MergingWindowSet<W> mergingWindows = null___		if (windowAssigner instanceof MergingWindowAssigner) {_			mergingWindows = getMergingWindowSet()__			W stateWindow = mergingWindows.getStateWindow(window)__			windowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor)___		} else {_			windowState = getPartitionedState(window, windowSerializer, windowStateDescriptor)__		}__		if (triggerResult.isFire()) {_			timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__			ACC contents = windowState.get()___			userFunction.apply(context.key, context.window, contents, timestampedCollector)___		}_		if (triggerResult.isPurge()) {_			windowState.clear()__			if (mergingWindows != null) {_				mergingWindows.retireWindow(window)__			}_			context.clear()__		}_	};process,link,trigger,result,for,the,currently,active,key,and,the,given,window,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,protected,void,process,trigger,result,trigger,result,trigger,result,w,window,throws,exception,if,trigger,result,is,fire,trigger,result,is,purge,return,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,null,if,window,assigner,instanceof,merging,window,assigner,merging,windows,get,merging,window,set,w,state,window,merging,windows,get,state,window,window,window,state,get,partitioned,state,state,window,window,serializer,window,state,descriptor,else,window,state,get,partitioned,state,window,window,serializer,window,state,descriptor,if,trigger,result,is,fire,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector,if,trigger,result,is,purge,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> @SuppressWarnings("unchecked") 	protected void processTriggerResult(TriggerResult triggerResult, W window) throws Exception;1466072007;Process {@link TriggerResult} for the currently active key and the given window. The caller_must ensure that the correct key is set in the state backend and the context object.;@SuppressWarnings("unchecked")_	protected void processTriggerResult(TriggerResult triggerResult, W window) throws Exception {_		if (!triggerResult.isFire() && !triggerResult.isPurge()) {_			_			return__		}__		AppendingState<IN, ACC> windowState___		MergingWindowSet<W> mergingWindows = null___		if (windowAssigner instanceof MergingWindowAssigner) {_			mergingWindows = getMergingWindowSet()__			W stateWindow = mergingWindows.getStateWindow(window)__			windowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor)___		} else {_			windowState = getPartitionedState(window, windowSerializer, windowStateDescriptor)__		}__		if (triggerResult.isFire()) {_			timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp())__			ACC contents = windowState.get()___			userFunction.apply(context.key, context.window, contents, timestampedCollector)___		}_		if (triggerResult.isPurge()) {_			windowState.clear()__			if (mergingWindows != null) {_				mergingWindows.retireWindow(window)__			}_			context.clear()__		}_	};process,link,trigger,result,for,the,currently,active,key,and,the,given,window,the,caller,must,ensure,that,the,correct,key,is,set,in,the,state,backend,and,the,context,object;suppress,warnings,unchecked,protected,void,process,trigger,result,trigger,result,trigger,result,w,window,throws,exception,if,trigger,result,is,fire,trigger,result,is,purge,return,appending,state,in,acc,window,state,merging,window,set,w,merging,windows,null,if,window,assigner,instanceof,merging,window,assigner,merging,windows,get,merging,window,set,w,state,window,merging,windows,get,state,window,window,window,state,get,partitioned,state,state,window,window,serializer,window,state,descriptor,else,window,state,get,partitioned,state,window,window,serializer,window,state,descriptor,if,trigger,result,is,fire,timestamped,collector,set,absolute,timestamp,window,max,timestamp,acc,contents,window,state,get,user,function,apply,context,key,context,window,contents,timestamped,collector,if,trigger,result,is,purge,window,state,clear,if,merging,windows,null,merging,windows,retire,window,window,context,clear
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception;1447162450;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			state = InstantiationUtil.deserializeObject(stateData, userClassloader)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,class,loader,user,classloader,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,state,instantiation,util,deserialize,object,state,data,user,classloader,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception;1447931003;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			state = InstantiationUtil.deserializeObject(stateData, userClassloader)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,class,loader,user,classloader,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,state,instantiation,util,deserialize,object,state,data,user,classloader,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception;1448353719;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			state = InstantiationUtil.deserializeObject(stateData, userClassloader)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,class,loader,user,classloader,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,state,instantiation,util,deserialize,object,state,data,user,classloader,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception;1448353719;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			state = InstantiationUtil.deserializeObject(stateData, userClassloader)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,class,loader,user,classloader,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,state,instantiation,util,deserialize,object,state,data,user,classloader,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception;1453987157;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(StateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			state = InstantiationUtil.deserializeObject(stateData, userClassloader)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,class,loader,user,classloader,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,state,instantiation,util,deserialize,object,state,data,user,classloader,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> Context -> @SuppressWarnings("unchecked") 		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception;1454527671;Constructs a new {@code Context} by reading from a {@link DataInputView} that_contains a serialized context that we wrote in_{@link #writeToState(AbstractStateBackend.CheckpointStateOutputView)};@SuppressWarnings("unchecked")_		protected Context(DataInputView in, ClassLoader userClassloader) throws Exception {_			this.key = keySerializer.deserialize(in)__			this.window = windowSerializer.deserialize(in)__			this.watermarkTimer = in.readLong()__			this.processingTimeTimer = in.readLong()___			int stateSize = in.readInt()__			byte[] stateData = new byte[stateSize]__			in.read(stateData)__			state = InstantiationUtil.deserializeObject(stateData, userClassloader)___			this.windowBuffer = windowBufferFactory.create()__			int numElements = in.readInt()__			MultiplexingStreamRecordSerializer<IN> recordSerializer = new MultiplexingStreamRecordSerializer<>(inputSerializer)__			for (int i = 0_ i < numElements_ i++) {_				windowBuffer.storeElement(recordSerializer.deserialize(in).<IN>asRecord())__			}_		};constructs,a,new,code,context,by,reading,from,a,link,data,input,view,that,contains,a,serialized,context,that,we,wrote,in,link,write,to,state,abstract,state,backend,checkpoint,state,output,view;suppress,warnings,unchecked,protected,context,data,input,view,in,class,loader,user,classloader,throws,exception,this,key,key,serializer,deserialize,in,this,window,window,serializer,deserialize,in,this,watermark,timer,in,read,long,this,processing,time,timer,in,read,long,int,state,size,in,read,int,byte,state,data,new,byte,state,size,in,read,state,data,state,instantiation,util,deserialize,object,state,data,user,classloader,this,window,buffer,window,buffer,factory,create,int,num,elements,in,read,int,multiplexing,stream,record,serializer,in,record,serializer,new,multiplexing,stream,record,serializer,input,serializer,for,int,i,0,i,num,elements,i,window,buffer,store,element,record,serializer,deserialize,in,in,as,record
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1466504046;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1466504186;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1467040572;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1467040572;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1467645848;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1468523508;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1469560325;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1470753725;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1471971066;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1472663401;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
WindowOperator -> public WindowOperator(WindowAssigner<? super IN, W> windowAssigner, 		TypeSerializer<W> windowSerializer, 		KeySelector<IN, K> keySelector, 		TypeSerializer<K> keySerializer, 		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor, 		InternalWindowFunction<ACC, OUT, K, W> windowFunction, 		Trigger<? super IN, ? super W> trigger, 		long allowedLateness);1472663401;Creates a new {@code WindowOperator} based on the given policies and user functions.;public WindowOperator(WindowAssigner<? super IN, W> windowAssigner,_		TypeSerializer<W> windowSerializer,_		KeySelector<IN, K> keySelector,_		TypeSerializer<K> keySerializer,_		StateDescriptor<? extends AppendingState<IN, ACC>, ?> windowStateDescriptor,_		InternalWindowFunction<ACC, OUT, K, W> windowFunction,_		Trigger<? super IN, ? super W> trigger,_		long allowedLateness) {__		super(windowFunction)___		this.windowAssigner = requireNonNull(windowAssigner)__		this.windowSerializer = windowSerializer__		this.keySelector = requireNonNull(keySelector)__		this.keySerializer = requireNonNull(keySerializer)___		this.windowStateDescriptor = windowStateDescriptor__		this.trigger = requireNonNull(trigger)___		Preconditions.checkArgument(allowedLateness >= 0)__		this.allowedLateness = allowedLateness___		setChainingStrategy(ChainingStrategy.ALWAYS)__	};creates,a,new,code,window,operator,based,on,the,given,policies,and,user,functions;public,window,operator,window,assigner,super,in,w,window,assigner,type,serializer,w,window,serializer,key,selector,in,k,key,selector,type,serializer,k,key,serializer,state,descriptor,extends,appending,state,in,acc,window,state,descriptor,internal,window,function,acc,out,k,w,window,function,trigger,super,in,super,w,trigger,long,allowed,lateness,super,window,function,this,window,assigner,require,non,null,window,assigner,this,window,serializer,window,serializer,this,key,selector,require,non,null,key,selector,this,key,serializer,require,non,null,key,serializer,this,window,state,descriptor,window,state,descriptor,this,trigger,require,non,null,trigger,preconditions,check,argument,allowed,lateness,0,this,allowed,lateness,allowed,lateness,set,chaining,strategy,chaining,strategy,always
