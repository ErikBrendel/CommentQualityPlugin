commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Trigger async operation for each stream input.  *  * @param input element coming from an upstream task  * @param resultFuture to be completed with the result data  * @exception Exception in case of a user code error. An exception will make the task fail and  * trigger fail-over process.  */ ;/**  * Trigger async operation for each stream input.  *  * @param input element coming from an upstream task  * @param resultFuture to be completed with the result data  * @exception Exception in case of a user code error. An exception will make the task fail and  * trigger fail-over process.  */ void asyncInvoke(IN input, ResultFuture<OUT> resultFuture) throws Exception.
true;default;2;4;/**  * {@link AsyncFunction#asyncInvoke} timeout occurred.  * By default, the result future is exceptionally completed with a timeout exception.  *  * @param input element coming from an upstream task  * @param resultFuture to be completed with the result data  */ ;/**  * {@link AsyncFunction#asyncInvoke} timeout occurred.  * By default, the result future is exceptionally completed with a timeout exception.  *  * @param input element coming from an upstream task  * @param resultFuture to be completed with the result data  */ default void timeout(IN input, ResultFuture<OUT> resultFuture) throws Exception {     resultFuture.completeExceptionally(new TimeoutException("Async function call has timed out.")). }
