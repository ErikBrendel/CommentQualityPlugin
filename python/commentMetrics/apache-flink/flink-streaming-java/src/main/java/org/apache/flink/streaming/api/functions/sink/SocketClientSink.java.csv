# id;timestamp;commentText;codeText;commentWords;codeWords
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1445418103;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1448637843;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1455486690;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1465991918;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1493195810;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1493195810;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1493195810;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1493195810;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1495484544;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1508317940;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> @Override 	public void open(Configuration parameters) throws Exception;1509723634;Initialize the connection with the Socket in the server._@param parameters Configuration.;@Override_	public void open(Configuration parameters) throws Exception {_		try {_			synchronized (lock) {_				createConnection()__			}_		}_		catch (IOException e) {_			throw new IOException("Cannot connect to socket server at " + hostName + ":" + port, e)__		}_	};initialize,the,connection,with,the,socket,in,the,server,param,parameters,configuration;override,public,void,open,configuration,parameters,throws,exception,try,synchronized,lock,create,connection,catch,ioexception,e,throw,new,ioexception,cannot,connect,to,socket,server,at,host,name,port,e
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1448637843;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1455486690;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1465991918;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1493195810;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1493195810;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1493195810;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1493195810;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1495484544;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1508317940;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries);1509723634;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times._The sink will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, int maxNumRetries) {_		this(hostName, port, schema, maxNumRetries, false)__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,the,sink,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,this,host,name,port,schema,max,num,retries,false
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1448637843;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush)_	{_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1455486690;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush)_	{_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1465991918;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush)_	{_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1493195810;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush)_	{_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1493195810;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush)_	{_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1493195810;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush)_	{_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1493195810;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush) {_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1495484544;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush) {_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1508317940;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush) {_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema, 							int maxNumRetries, boolean autoflush);1509723634;Creates a new SocketClientSink that retries connections upon failure up to a given number of times._A value of -1 for the number of retries will cause the system to retry an infinite number of times.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes._@param maxNumRetries The maximum number of retries after a message send failed._@param autoflush Flag to indicate whether the socket stream should be flushed after each message.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema,_							int maxNumRetries, boolean autoflush) {_		checkArgument(port > 0 && port < 65536, "port is out of range")__		checkArgument(maxNumRetries >= -1, "maxNumRetries must be zero or larger (num retries), or -1 (infinite retries)")___		this.hostName = checkNotNull(hostName, "hostname must not be null")__		this.port = port__		this.schema = checkNotNull(schema)__		this.maxNumRetries = maxNumRetries__		this.autoFlush = autoflush__	};creates,a,new,socket,client,sink,that,retries,connections,upon,failure,up,to,a,given,number,of,times,a,value,of,1,for,the,number,of,retries,will,cause,the,system,to,retry,an,infinite,number,of,times,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes,param,max,num,retries,the,maximum,number,of,retries,after,a,message,send,failed,param,autoflush,flag,to,indicate,whether,the,socket,stream,should,be,flushed,after,each,message;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,int,max,num,retries,boolean,autoflush,check,argument,port,0,port,65536,port,is,out,of,range,check,argument,max,num,retries,1,max,num,retries,must,be,zero,or,larger,num,retries,or,1,infinite,retries,this,host,name,check,not,null,host,name,hostname,must,not,be,null,this,port,port,this,schema,check,not,null,schema,this,max,num,retries,max,num,retries,this,auto,flush,autoflush
SocketClientSink -> @Override 	public void close() throws Exception;1445418103;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false__		_		_		synchronized (lock) {_			_			_			lock.notifyAll()__			_			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1448637843;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false__		_		_		synchronized (lock) {_			_			_			lock.notifyAll()__			_			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1455486690;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false__		_		_		synchronized (lock) {_			_			_			lock.notifyAll()__			_			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1465991918;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false__		_		_		synchronized (lock) {_			_			_			lock.notifyAll()__			_			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1493195810;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false__		_		_		synchronized (lock) {_			_			_			lock.notifyAll()__			_			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1493195810;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false___		_		synchronized (lock) {_			_			_			lock.notifyAll()___			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1493195810;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false___		_		synchronized (lock) {_			_			_			lock.notifyAll()___			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1493195810;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false___		_		synchronized (lock) {_			_			_			lock.notifyAll()___			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1495484544;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false___		_		synchronized (lock) {_			_			_			lock.notifyAll()___			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1508317940;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false___		_		synchronized (lock) {_			_			_			lock.notifyAll()___			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void close() throws Exception;1509723634;Closes the connection with the Socket server.;@Override_	public void close() throws Exception {_		_		isRunning = false___		_		synchronized (lock) {_			_			_			lock.notifyAll()___			try {_				if (outputStream != null) {_					outputStream.close()__				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_	};closes,the,connection,with,the,socket,server;override,public,void,close,throws,exception,is,running,false,synchronized,lock,lock,notify,all,try,if,output,stream,null,output,stream,close,finally,if,client,null,client,close
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1445418103;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}_			_			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port + _					". Trying to reconnect..." , e)__			_			_			_		_			synchronized (lock) {_				IOException lastException = null__				retries = 0__				_				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {_					_					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}_					_					_					retries++__					_					try {_						_						createConnection()__						_						_						outputStream.write(msg)__						_						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}_				_				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1448637843;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}_			_			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port + _					". Trying to reconnect..." , e)__			_			_			_		_			synchronized (lock) {_				IOException lastException = null__				retries = 0__				_				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {_					_					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}_					_					_					retries++__					_					try {_						_						createConnection()__						_						_						outputStream.write(msg)__						_						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}_				_				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1455486690;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}_			_			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port + _					". Trying to reconnect..." , e)__			_			_			_		_			synchronized (lock) {_				IOException lastException = null__				retries = 0__				_				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {_					_					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}_					_					_					retries++__					_					try {_						_						createConnection()__						_						_						outputStream.write(msg)__						_						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}_				_				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1465991918;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}_			_			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port + _					". Trying to reconnect..." , e)__			_			_			_		_			synchronized (lock) {_				IOException lastException = null__				retries = 0__				_				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {_					_					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}_					_					_					retries++__					_					try {_						_						createConnection()__						_						_						outputStream.write(msg)__						_						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}_				_				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1493195810;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}_			_			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port + _					". Trying to reconnect..." , e)__			_			_			_		_			synchronized (lock) {_				IOException lastException = null__				retries = 0__				_				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {_					_					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}_					_					_					retries++__					_					try {_						_						createConnection()__						_						_						outputStream.write(msg)__						_						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}_				_				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1493195810;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}__			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port +_					". Trying to reconnect..." , e)___			_			__			synchronized (lock) {_				IOException lastException = null__				retries = 0___				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {__					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}__					_					retries++___					try {_						_						createConnection()___						_						outputStream.write(msg)___						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}__				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1493195810;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}__			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port +_					". Trying to reconnect..." , e)___			_			__			synchronized (lock) {_				IOException lastException = null__				retries = 0___				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {__					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}__					_					retries++___					try {_						_						createConnection()___						_						outputStream.write(msg)___						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}__				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1493195810;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}__			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port +_					". Trying to reconnect..." , e)___			_			__			synchronized (lock) {_				IOException lastException = null__				retries = 0___				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {__					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}__					_					retries++___					try {_						_						createConnection()___						_						outputStream.write(msg)___						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}__				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1495484544;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}__			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port +_					". Trying to reconnect..." , e)___			_			__			synchronized (lock) {_				IOException lastException = null__				retries = 0___				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {__					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}__					_					retries++___					try {_						_						createConnection()___						_						outputStream.write(msg)___						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}__				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1508317940;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}__			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port +_					". Trying to reconnect..." , e)___			_			__			synchronized (lock) {_				IOException lastException = null__				retries = 0___				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {__					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}__					_					retries++___					try {_						_						createConnection()___						_						outputStream.write(msg)___						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}__				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> @Override 	public void invoke(IN value) throws Exception;1509723634;Called when new data arrives to the sink, and forwards it to Socket.__@param value The value to write to the socket.;@Override_	public void invoke(IN value) throws Exception {_		byte[] msg = schema.serialize(value)___		try {_			outputStream.write(msg)__			if (autoFlush) {_				outputStream.flush()__			}_		}_		catch (IOException e) {_			_			if (maxNumRetries == 0) {_				throw new IOException("Failed to send message '" + value + "' to socket server at "_						+ hostName + ":" + port + ". Connection re-tries are not enabled.", e)__			}__			LOG.error("Failed to send message '" + value + "' to socket server at " + hostName + ":" + port +_					". Trying to reconnect..." , e)___			_			__			synchronized (lock) {_				IOException lastException = null__				retries = 0___				while (isRunning && (maxNumRetries < 0 || retries < maxNumRetries)) {__					_					try {_						if (outputStream != null) {_							outputStream.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close output stream from failed write attempt", ee)__					}_					try {_						if (client != null) {_							client.close()__						}_					}_					catch (IOException ee) {_						LOG.error("Could not close socket from failed write attempt", ee)__					}__					_					retries++___					try {_						_						createConnection()___						_						outputStream.write(msg)___						_						return__					}_					catch (IOException ee) {_						lastException = ee__						LOG.error("Re-connect to socket server and send message failed. Retry time(s): " + retries, ee)__					}__					_					lock.wait(CONNECTION_RETRY_DELAY)__				}__				_				if (isRunning) {_					throw new IOException("Failed to send message '" + value + "' to socket server at "_							+ hostName + ":" + port + ". Failed after " + retries + " retries.", lastException)__				}_			}_		}_	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,socket,param,value,the,value,to,write,to,the,socket;override,public,void,invoke,in,value,throws,exception,byte,msg,schema,serialize,value,try,output,stream,write,msg,if,auto,flush,output,stream,flush,catch,ioexception,e,if,max,num,retries,0,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,connection,re,tries,are,not,enabled,e,log,error,failed,to,send,message,value,to,socket,server,at,host,name,port,trying,to,reconnect,e,synchronized,lock,ioexception,last,exception,null,retries,0,while,is,running,max,num,retries,0,retries,max,num,retries,try,if,output,stream,null,output,stream,close,catch,ioexception,ee,log,error,could,not,close,output,stream,from,failed,write,attempt,ee,try,if,client,null,client,close,catch,ioexception,ee,log,error,could,not,close,socket,from,failed,write,attempt,ee,retries,try,create,connection,output,stream,write,msg,return,catch,ioexception,ee,last,exception,ee,log,error,re,connect,to,socket,server,and,send,message,failed,retry,time,s,retries,ee,lock,wait,if,is,running,throw,new,ioexception,failed,to,send,message,value,to,socket,server,at,host,name,port,failed,after,retries,retries,last,exception
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1448637843;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1455486690;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1465991918;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1493195810;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1493195810;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1493195810;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1493195810;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1495484544;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1508317940;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
SocketClientSink -> public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema);1509723634;Creates a new SocketClientSink. The sink will not attempt to retry connections upon failure_and will not auto-flush the stream.__@param hostName Hostname of the server to connect to._@param port Port of the server._@param schema Schema used to serialize the data into bytes.;public SocketClientSink(String hostName, int port, SerializationSchema<IN> schema) {_		this(hostName, port, schema, 0)__	};creates,a,new,socket,client,sink,the,sink,will,not,attempt,to,retry,connections,upon,failure,and,will,not,auto,flush,the,stream,param,host,name,hostname,of,the,server,to,connect,to,param,port,port,of,the,server,param,schema,schema,used,to,serialize,the,data,into,bytes;public,socket,client,sink,string,host,name,int,port,serialization,schema,in,schema,this,host,name,port,schema,0
