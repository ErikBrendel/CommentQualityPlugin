# id;timestamp;commentText;codeText;commentWords;codeWords
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1445418103;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1446400804;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1448554589;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1449051578;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1452526242;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1453730836;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1454527671;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1455486690;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1455549373;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1456247173;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1456347641;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1472663071;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1484344044;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1485181339;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1485269495;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtuaPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtuaPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtua,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtua,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1485368829;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1488304750;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1488304750;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1489671807;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1489782894;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1489819457;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1489819457;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1492530130;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1492680901;Adds a new virtual node that is used to connect a downstream vertex to an input with a certain_partitioning.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1493195810;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1493195810;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1493195810;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1493195810;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1494867029;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1494935554;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1495484544;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1516295283;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1531381123;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1538386941;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner);1547905886;Adds a new virtual node that is used to connect a downstream vertex to an input with a_certain partitioning.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, but with the partitioning given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param partitioner The partitioner;public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {__		if (virtualPartitionNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual partition node with id " + virtualId)__		}__		virtualPartitionNodes.put(virtualId,_				new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,an,input,with,a,certain,partitioning,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,but,with,the,partitioning,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,partitioner,the,partitioner;public,void,add,virtual,partition,node,integer,original,id,integer,virtual,id,stream,partitioner,partitioner,if,virtual,partition,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,partition,node,with,id,virtual,id,virtual,partition,nodes,put,virtual,id,new,tuple2,integer,stream,partitioner,original,id,partitioner
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1489819457;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1489819457;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side input for the same id " +_						"with a different type. This is not allowed.")__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,input,for,the,same,id,with,a,different,type,this,is,not,allowed,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1492530130;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side input for the same id " +_						"with a different type. This is not allowed.")__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,input,for,the,same,id,with,a,different,type,this,is,not,allowed,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1492680901;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side input for the same id " +_						"with a different type. This is not allowed.")__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,input,for,the,same,id,with,a,different,type,this,is,not,allowed,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1493195810;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side input for the same id " +_						"with a different type. This is not allowed.")__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,input,for,the,same,id,with,a,different,type,this,is,not,allowed,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1493195810;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side input for the same id " +_						"with a different type. This is not allowed.")__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,input,for,the,same,id,with,a,different,type,this,is,not,allowed,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1493195810;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side input for the same id " +_						"with a different type. This is not allowed.")__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,input,for,the,same,id,with,a,different,type,this,is,not,allowed,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1493195810;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side input for the same id " +_						"with a different type. This is not allowed.")__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,input,for,the,same,id,with,a,different,type,this,is,not,allowed,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1494867029;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (tag.f1.getId().equals(outputTag.getId()) &&_					!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side output for the same" +_						"side-output id with a different type. This is not allowed.")__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,id,equals,output,tag,get,id,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,output,for,the,same,side,output,id,with,a,different,type,this,is,not,allowed,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1494935554;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (tag.f1.getId().equals(outputTag.getId()) &&_					!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side output for the same " +_						"side-output id with a different type. This is not allowed. Side-output ID: " +_						tag.f1.getId())__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,id,equals,output,tag,get,id,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,output,for,the,same,side,output,id,with,a,different,type,this,is,not,allowed,side,output,id,tag,f1,get,id,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1495484544;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (tag.f1.getId().equals(outputTag.getId()) &&_					!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side output for the same " +_						"side-output id with a different type. This is not allowed. Side-output ID: " +_						tag.f1.getId())__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,id,equals,output,tag,get,id,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,output,for,the,same,side,output,id,with,a,different,type,this,is,not,allowed,side,output,id,tag,f1,get,id,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1516295283;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (tag.f1.getId().equals(outputTag.getId()) &&_					!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side output for the same " +_						"side-output id with a different type. This is not allowed. Side-output ID: " +_						tag.f1.getId())__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,id,equals,output,tag,get,id,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,output,for,the,same,side,output,id,with,a,different,type,this,is,not,allowed,side,output,id,tag,f1,get,id,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1531381123;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (tag.f1.getId().equals(outputTag.getId()) &&_					!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side output for the same " +_						"side-output id with a different type. This is not allowed. Side-output ID: " +_						tag.f1.getId())__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,id,equals,output,tag,get,id,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,output,for,the,same,side,output,id,with,a,different,type,this,is,not,allowed,side,output,id,tag,f1,get,id,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1538386941;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (tag.f1.getId().equals(outputTag.getId()) &&_					!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side output for the same " +_						"side-output id with a different type. This is not allowed. Side-output ID: " +_						tag.f1.getId())__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,id,equals,output,tag,get,id,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,output,for,the,same,side,output,id,with,a,different,type,this,is,not,allowed,side,output,id,tag,f1,get,id,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag);1547905886;Adds a new virtual node that is used to connect a downstream vertex to only the outputs with_the selected side-output {@link OutputTag}.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param outputTag The selected side-output {@code OutputTag}.;public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {__		if (virtualSideOutputNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual output node with id " + virtualId)__		}__		_		_		_		__		for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {_			if (!tag.f0.equals(originalId)) {_				_				continue__			}__			if (tag.f1.getId().equals(outputTag.getId()) &&_					!tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {_				throw new IllegalArgumentException("Trying to add a side output for the same " +_						"side-output id with a different type. This is not allowed. Side-output ID: " +_						tag.f1.getId())__			}_		}__		virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,side,output,link,output,tag,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,output,tag,the,selected,side,output,code,output,tag;public,void,add,virtual,side,output,node,integer,original,id,integer,virtual,id,output,tag,output,tag,if,virtual,side,output,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,output,node,with,id,virtual,id,for,tuple2,integer,output,tag,tag,virtual,side,output,nodes,values,if,tag,f0,equals,original,id,continue,if,tag,f1,get,id,equals,output,tag,get,id,tag,f1,get,type,info,equals,output,tag,get,type,info,throw,new,illegal,argument,exception,trying,to,add,a,side,output,for,the,same,side,output,id,with,a,different,type,this,is,not,allowed,side,output,id,tag,f1,get,id,virtual,side,output,nodes,put,virtual,id,new,tuple2,original,id,output,tag
StreamGraph -> public JobGraph getJobGraph();1445418103;Gets the assembled {@link JobGraph} and adds a default name for it.;public JobGraph getJobGraph() {_		return getJobGraph(jobName)__	};gets,the,assembled,link,job,graph,and,adds,a,default,name,for,it;public,job,graph,get,job,graph,return,get,job,graph,job,name
StreamGraph -> public JobGraph getJobGraph();1446400804;Gets the assembled {@link JobGraph}.;public JobGraph getJobGraph() {_		_		if (isIterative() && isCheckpointingEnabled() && !forceCheckpoint) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;public,job,graph,get,job,graph,if,is,iterative,is,checkpointing,enabled,force,checkpoint,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1448554589;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1449051578;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1452526242;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1453730836;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1454527671;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1455486690;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1455549373;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1456247173;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph(jobName)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph,job,name
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1456347641;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1472663071;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1484344044;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1485181339;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1485269495;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1485368829;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1488304750;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1488304750;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1489671807;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1489782894;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this, defaultParallelism)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,default,parallelism,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1489819457;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this, defaultParallelism)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,default,parallelism,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1489819457;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this, defaultParallelism)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,default,parallelism,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1492530130;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		StreamingJobGraphGenerator jobgraphGenerator = new StreamingJobGraphGenerator(this)___		return jobgraphGenerator.createJobGraph()__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,streaming,job,graph,generator,jobgraph,generator,new,streaming,job,graph,generator,this,return,jobgraph,generator,create,job,graph
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1492680901;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1493195810;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1493195810;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1493195810;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1493195810;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1494867029;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1494935554;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1495484544;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1516295283;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> @SuppressWarnings("deprecation") 	public JobGraph getJobGraph();1531381123;Gets the assembled {@link JobGraph}.;@SuppressWarnings("deprecation")_	public JobGraph getJobGraph() {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_					"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_							+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_							+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this)__	};gets,the,assembled,link,job,graph;suppress,warnings,deprecation,public,job,graph,get,job,graph,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1445418103;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1446400804;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1448554589;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1449051578;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1452526242;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1453730836;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1454527671;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1455486690;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1455549373;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1456247173;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1456347641;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1472663071;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1484344044;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1485181339;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1485269495;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1485368829;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1488304750;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1488304750;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1489671807;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1489782894;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1489819457;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1489819457;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1492530130;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1492680901;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1493195810;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1493195810;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1493195810;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1493195810;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1494867029;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1494935554;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1495484544;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1516295283;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1531381123;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1538386941;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames);1547905886;Adds a new virtual node that is used to connect a downstream vertex to only the outputs_with the selected names.__<p>When adding an edge from the virtual node to a downstream node the connection will be made_to the original node, only with the selected names given here.__@param originalId ID of the node that should be connected to._@param virtualId ID of the virtual node._@param selectedNames The selected names.;public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {__		if (virtualSelectNodes.containsKey(virtualId)) {_			throw new IllegalStateException("Already has virtual select node with id " + virtualId)__		}__		virtualSelectNodes.put(virtualId,_				new Tuple2<Integer, List<String>>(originalId, selectedNames))__	};adds,a,new,virtual,node,that,is,used,to,connect,a,downstream,vertex,to,only,the,outputs,with,the,selected,names,p,when,adding,an,edge,from,the,virtual,node,to,a,downstream,node,the,connection,will,be,made,to,the,original,node,only,with,the,selected,names,given,here,param,original,id,id,of,the,node,that,should,be,connected,to,param,virtual,id,id,of,the,virtual,node,param,selected,names,the,selected,names;public,void,add,virtual,select,node,integer,original,id,integer,virtual,id,list,string,selected,names,if,virtual,select,nodes,contains,key,virtual,id,throw,new,illegal,state,exception,already,has,virtual,select,node,with,id,virtual,id,virtual,select,nodes,put,virtual,id,new,tuple2,integer,list,string,original,id,selected,names
StreamGraph -> public String getSlotSharingGroup(Integer id);1456247173;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtuaPartitionNodes.containsKey(id)) {_			Integer mappedId = virtuaPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtua,partition,nodes,contains,key,id,integer,mapped,id,virtua,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1456347641;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtuaPartitionNodes.containsKey(id)) {_			Integer mappedId = virtuaPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtua,partition,nodes,contains,key,id,integer,mapped,id,virtua,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1472663071;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtuaPartitionNodes.containsKey(id)) {_			Integer mappedId = virtuaPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtua,partition,nodes,contains,key,id,integer,mapped,id,virtua,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1484344044;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtuaPartitionNodes.containsKey(id)) {_			Integer mappedId = virtuaPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtua,partition,nodes,contains,key,id,integer,mapped,id,virtua,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1485181339;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtuaPartitionNodes.containsKey(id)) {_			Integer mappedId = virtuaPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtua,partition,nodes,contains,key,id,integer,mapped,id,virtua,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1485269495;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtuaPartitionNodes.containsKey(id)) {_			Integer mappedId = virtuaPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtua,partition,nodes,contains,key,id,integer,mapped,id,virtua,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1485368829;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1488304750;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1488304750;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1489671807;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1489782894;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1489819457;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1489819457;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1492530130;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1492680901;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1493195810;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1493195810;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1493195810;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1493195810;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1494867029;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1494935554;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1495484544;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1516295283;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1531381123;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1538386941;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> public String getSlotSharingGroup(Integer id);1547905886;Determines the slot sharing group of an operation across virtual nodes.;public String getSlotSharingGroup(Integer id) {_		if (virtualSideOutputNodes.containsKey(id)) {_			Integer mappedId = virtualSideOutputNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualSelectNodes.containsKey(id)) {_			Integer mappedId = virtualSelectNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else if (virtualPartitionNodes.containsKey(id)) {_			Integer mappedId = virtualPartitionNodes.get(id).f0__			return getSlotSharingGroup(mappedId)__		} else {_			StreamNode node = getStreamNode(id)__			return node.getSlotSharingGroup()__		}_	};determines,the,slot,sharing,group,of,an,operation,across,virtual,nodes;public,string,get,slot,sharing,group,integer,id,if,virtual,side,output,nodes,contains,key,id,integer,mapped,id,virtual,side,output,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,select,nodes,contains,key,id,integer,mapped,id,virtual,select,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,if,virtual,partition,nodes,contains,key,id,integer,mapped,id,virtual,partition,nodes,get,id,f0,return,get,slot,sharing,group,mapped,id,else,stream,node,node,get,stream,node,id,return,node,get,slot,sharing,group
StreamGraph -> @SuppressWarnings("deprecation") 	@Override 	public JobGraph getJobGraph(@Nullable JobID jobID);1538386941;Gets the assembled {@link JobGraph} with a given job id.;@SuppressWarnings("deprecation")_	@Override_	public JobGraph getJobGraph(@Nullable JobID jobID) {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_				"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_					+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_					+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this, jobID)__	};gets,the,assembled,link,job,graph,with,a,given,job,id;suppress,warnings,deprecation,override,public,job,graph,get,job,graph,nullable,job,id,job,id,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this,job,id
StreamGraph -> @SuppressWarnings("deprecation") 	@Override 	public JobGraph getJobGraph(@Nullable JobID jobID);1547905886;Gets the assembled {@link JobGraph} with a given job id.;@SuppressWarnings("deprecation")_	@Override_	public JobGraph getJobGraph(@Nullable JobID jobID) {_		_		if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {_			throw new UnsupportedOperationException(_				"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. "_					+ "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. "_					+ "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)")__		}__		return StreamingJobGraphGenerator.createJobGraph(this, jobID)__	};gets,the,assembled,link,job,graph,with,a,given,job,id;suppress,warnings,deprecation,override,public,job,graph,get,job,graph,nullable,job,id,job,id,if,is,iterative,checkpoint,config,is,checkpointing,enabled,checkpoint,config,is,force,checkpointing,throw,new,unsupported,operation,exception,checkpointing,is,currently,not,supported,by,default,for,iterative,jobs,as,we,cannot,guarantee,exactly,once,semantics,state,checkpoints,happen,normally,but,records,in,transit,during,the,snapshot,will,be,lost,upon,failure,n,the,user,can,force,enable,state,checkpoints,with,the,reduced,guarantees,by,calling,env,enable,checkpointing,interval,true,return,streaming,job,graph,generator,create,job,graph,this,job,id
StreamGraph -> public void clear();1445418103;Remove all registered nodes etc.;public void clear() {_		streamNodes = Maps.newHashMap()__		virtualSelectNodes = Maps.newHashMap()__		virtuaPartitionNodes = Maps.newHashMap()__		vertexIDtoBrokerID = Maps.newHashMap()__		vertexIDtoLoopTimeout = Maps.newHashMap()__		iterationSourceSinkPairs = Sets.newHashSet()__		sources = Sets.newHashSet()__		sinks = Sets.newHashSet()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,maps,new,hash,map,virtual,select,nodes,maps,new,hash,map,virtua,partition,nodes,maps,new,hash,map,vertex,idto,broker,id,maps,new,hash,map,vertex,idto,loop,timeout,maps,new,hash,map,iteration,source,sink,pairs,sets,new,hash,set,sources,sets,new,hash,set,sinks,sets,new,hash,set
StreamGraph -> public void clear();1446400804;Remove all registered nodes etc.;public void clear() {_		streamNodes = Maps.newHashMap()__		virtualSelectNodes = Maps.newHashMap()__		virtuaPartitionNodes = Maps.newHashMap()__		vertexIDtoBrokerID = Maps.newHashMap()__		vertexIDtoLoopTimeout = Maps.newHashMap()__		iterationSourceSinkPairs = Sets.newHashSet()__		sources = Sets.newHashSet()__		sinks = Sets.newHashSet()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,maps,new,hash,map,virtual,select,nodes,maps,new,hash,map,virtua,partition,nodes,maps,new,hash,map,vertex,idto,broker,id,maps,new,hash,map,vertex,idto,loop,timeout,maps,new,hash,map,iteration,source,sink,pairs,sets,new,hash,set,sources,sets,new,hash,set,sinks,sets,new,hash,set
StreamGraph -> public void clear();1448554589;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1449051578;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1452526242;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1453730836;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1454527671;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1455486690;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1455549373;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1456247173;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1456347641;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1472663071;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1484344044;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1485181339;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1485269495;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtuaPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtua,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1485368829;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1488304750;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1488304750;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1489671807;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1489782894;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1489819457;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1489819457;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1492530130;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1492680901;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1493195810;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1493195810;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1493195810;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1493195810;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1494867029;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1494935554;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1495484544;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1516295283;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1531381123;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1538386941;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
StreamGraph -> public void clear();1547905886;Remove all registered nodes etc.;public void clear() {_		streamNodes = new HashMap<>()__		virtualSelectNodes = new HashMap<>()__		virtualSideOutputNodes = new HashMap<>()__		virtualPartitionNodes = new HashMap<>()__		vertexIDtoBrokerID = new HashMap<>()__		vertexIDtoLoopTimeout  = new HashMap<>()__		iterationSourceSinkPairs = new HashSet<>()__		sources = new HashSet<>()__		sinks = new HashSet<>()__	};remove,all,registered,nodes,etc;public,void,clear,stream,nodes,new,hash,map,virtual,select,nodes,new,hash,map,virtual,side,output,nodes,new,hash,map,virtual,partition,nodes,new,hash,map,vertex,idto,broker,id,new,hash,map,vertex,idto,loop,timeout,new,hash,map,iteration,source,sink,pairs,new,hash,set,sources,new,hash,set,sinks,new,hash,set
