commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;/**  * Remove all registered nodes etc.  */ ;/**  * Remove all registered nodes etc.  */ public void clear() {     streamNodes = new HashMap<>().     virtualSelectNodes = new HashMap<>().     virtualSideOutputNodes = new HashMap<>().     virtualPartitionNodes = new HashMap<>().     vertexIDtoBrokerID = new HashMap<>().     vertexIDtoLoopTimeout = new HashMap<>().     iterationSourceSinkPairs = new HashSet<>().     sources = new HashSet<>().     sinks = new HashSet<>(). }
false;public;0;3;;public StreamExecutionEnvironment getEnvironment() {     return environment. }
false;public;0;3;;public ExecutionConfig getExecutionConfig() {     return executionConfig. }
false;public;0;3;;public CheckpointConfig getCheckpointConfig() {     return checkpointConfig. }
false;public;0;3;;public String getJobName() {     return jobName. }
false;public;1;3;;public void setJobName(String jobName) {     this.jobName = jobName. }
false;public;1;3;;public void setChaining(boolean chaining) {     this.chaining = chaining. }
false;public;1;3;;public void setStateBackend(StateBackend backend) {     this.stateBackend = backend. }
false;public;0;3;;public StateBackend getStateBackend() {     return this.stateBackend. }
false;public;0;3;;// Checkpointing public boolean isChainingEnabled() {     return chaining. }
false;public;0;3;;public boolean isIterative() {     return !vertexIDtoLoopTimeout.isEmpty(). }
false;public;7;10;;public <IN, OUT> void addSource(Integer vertexID, String slotSharingGroup, @Nullable String coLocationGroup, StreamOperator<OUT> operatorObject, TypeInformation<IN> inTypeInfo, TypeInformation<OUT> outTypeInfo, String operatorName) {     addOperator(vertexID, slotSharingGroup, coLocationGroup, operatorObject, inTypeInfo, outTypeInfo, operatorName).     sources.add(vertexID). }
false;public;7;10;;public <IN, OUT> void addSink(Integer vertexID, String slotSharingGroup, @Nullable String coLocationGroup, StreamOperator<OUT> operatorObject, TypeInformation<IN> inTypeInfo, TypeInformation<OUT> outTypeInfo, String operatorName) {     addOperator(vertexID, slotSharingGroup, coLocationGroup, operatorObject, inTypeInfo, outTypeInfo, operatorName).     sinks.add(vertexID). }
false;public;7;39;;public <IN, OUT> void addOperator(Integer vertexID, String slotSharingGroup, @Nullable String coLocationGroup, StreamOperator<OUT> operatorObject, TypeInformation<IN> inTypeInfo, TypeInformation<OUT> outTypeInfo, String operatorName) {     if (operatorObject instanceof StoppableStreamSource) {         addNode(vertexID, slotSharingGroup, coLocationGroup, StoppableSourceStreamTask.class, operatorObject, operatorName).     } else if (operatorObject instanceof StreamSource) {         addNode(vertexID, slotSharingGroup, coLocationGroup, SourceStreamTask.class, operatorObject, operatorName).     } else {         addNode(vertexID, slotSharingGroup, coLocationGroup, OneInputStreamTask.class, operatorObject, operatorName).     }     TypeSerializer<IN> inSerializer = inTypeInfo != null && !(inTypeInfo instanceof MissingTypeInfo) ? inTypeInfo.createSerializer(executionConfig) : null.     TypeSerializer<OUT> outSerializer = outTypeInfo != null && !(outTypeInfo instanceof MissingTypeInfo) ? outTypeInfo.createSerializer(executionConfig) : null.     setSerializers(vertexID, inSerializer, null, outSerializer).     if (operatorObject instanceof OutputTypeConfigurable && outTypeInfo != null) {         @SuppressWarnings("unchecked")         OutputTypeConfigurable<OUT> outputTypeConfigurable = (OutputTypeConfigurable<OUT>) operatorObject.         // sets the output type which must be know at StreamGraph creation time         outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig).     }     if (operatorObject instanceof InputTypeConfigurable) {         InputTypeConfigurable inputTypeConfigurable = (InputTypeConfigurable) operatorObject.         inputTypeConfigurable.setInputType(inTypeInfo, executionConfig).     }     if (LOG.isDebugEnabled()) {         LOG.debug("Vertex: {}", vertexID).     } }
false;public;8;28;;public <IN1, IN2, OUT> void addCoOperator(Integer vertexID, String slotSharingGroup, @Nullable String coLocationGroup, TwoInputStreamOperator<IN1, IN2, OUT> taskOperatorObject, TypeInformation<IN1> in1TypeInfo, TypeInformation<IN2> in2TypeInfo, TypeInformation<OUT> outTypeInfo, String operatorName) {     addNode(vertexID, slotSharingGroup, coLocationGroup, TwoInputStreamTask.class, taskOperatorObject, operatorName).     TypeSerializer<OUT> outSerializer = (outTypeInfo != null) && !(outTypeInfo instanceof MissingTypeInfo) ? outTypeInfo.createSerializer(executionConfig) : null.     setSerializers(vertexID, in1TypeInfo.createSerializer(executionConfig), in2TypeInfo.createSerializer(executionConfig), outSerializer).     if (taskOperatorObject instanceof OutputTypeConfigurable) {         @SuppressWarnings("unchecked")         OutputTypeConfigurable<OUT> outputTypeConfigurable = (OutputTypeConfigurable<OUT>) taskOperatorObject.         // sets the output type which must be know at StreamGraph creation time         outputTypeConfigurable.setOutputType(outTypeInfo, executionConfig).     }     if (LOG.isDebugEnabled()) {         LOG.debug("CO-TASK: {}", vertexID).     } }
false;protected;6;24;;protected StreamNode addNode(Integer vertexID, String slotSharingGroup, @Nullable String coLocationGroup, Class<? extends AbstractInvokable> vertexClass, StreamOperator<?> operatorObject, String operatorName) {     if (streamNodes.containsKey(vertexID)) {         throw new RuntimeException("Duplicate vertexID " + vertexID).     }     StreamNode vertex = new StreamNode(environment, vertexID, slotSharingGroup, coLocationGroup, operatorObject, operatorName, new ArrayList<OutputSelector<?>>(), vertexClass).     streamNodes.put(vertexID, vertex).     return vertex. }
true;public;3;9;/**  * Adds a new virtual node that is used to connect a downstream vertex to only the outputs  * with the selected names.  *  * <p>When adding an edge from the virtual node to a downstream node the connection will be made  * to the original node, only with the selected names given here.  *  * @param originalId ID of the node that should be connected to.  * @param virtualId ID of the virtual node.  * @param selectedNames The selected names.  */ ;/**  * Adds a new virtual node that is used to connect a downstream vertex to only the outputs  * with the selected names.  *  * <p>When adding an edge from the virtual node to a downstream node the connection will be made  * to the original node, only with the selected names given here.  *  * @param originalId ID of the node that should be connected to.  * @param virtualId ID of the virtual node.  * @param selectedNames The selected names.  */ public void addVirtualSelectNode(Integer originalId, Integer virtualId, List<String> selectedNames) {     if (virtualSelectNodes.containsKey(virtualId)) {         throw new IllegalStateException("Already has virtual select node with id " + virtualId).     }     virtualSelectNodes.put(virtualId, new Tuple2<Integer, List<String>>(originalId, selectedNames)). }
true;public;3;27;/**  * Adds a new virtual node that is used to connect a downstream vertex to only the outputs with  * the selected side-output {@link OutputTag}.  *  * @param originalId ID of the node that should be connected to.  * @param virtualId ID of the virtual node.  * @param outputTag The selected side-output {@code OutputTag}.  */ ;/**  * Adds a new virtual node that is used to connect a downstream vertex to only the outputs with  * the selected side-output {@link OutputTag}.  *  * @param originalId ID of the node that should be connected to.  * @param virtualId ID of the virtual node.  * @param outputTag The selected side-output {@code OutputTag}.  */ public void addVirtualSideOutputNode(Integer originalId, Integer virtualId, OutputTag outputTag) {     if (virtualSideOutputNodes.containsKey(virtualId)) {         throw new IllegalStateException("Already has virtual output node with id " + virtualId).     }     for (Tuple2<Integer, OutputTag> tag : virtualSideOutputNodes.values()) {         if (!tag.f0.equals(originalId)) {             // different source operator             continue.         }         if (tag.f1.getId().equals(outputTag.getId()) && !tag.f1.getTypeInfo().equals(outputTag.getTypeInfo())) {             throw new IllegalArgumentException("Trying to add a side output for the same " + "side-output id with a different type. This is not allowed. Side-output ID: " + tag.f1.getId()).         }     }     virtualSideOutputNodes.put(virtualId, new Tuple2<>(originalId, outputTag)). }
true;public;3;9;/**  * Adds a new virtual node that is used to connect a downstream vertex to an input with a  * certain partitioning.  *  * <p>When adding an edge from the virtual node to a downstream node the connection will be made  * to the original node, but with the partitioning given here.  *  * @param originalId ID of the node that should be connected to.  * @param virtualId ID of the virtual node.  * @param partitioner The partitioner  */ ;/**  * Adds a new virtual node that is used to connect a downstream vertex to an input with a  * certain partitioning.  *  * <p>When adding an edge from the virtual node to a downstream node the connection will be made  * to the original node, but with the partitioning given here.  *  * @param originalId ID of the node that should be connected to.  * @param virtualId ID of the virtual node.  * @param partitioner The partitioner  */ public void addVirtualPartitionNode(Integer originalId, Integer virtualId, StreamPartitioner<?> partitioner) {     if (virtualPartitionNodes.containsKey(virtualId)) {         throw new IllegalStateException("Already has virtual partition node with id " + virtualId).     }     virtualPartitionNodes.put(virtualId, new Tuple2<Integer, StreamPartitioner<?>>(originalId, partitioner)). }
true;public;1;15;/**  * Determines the slot sharing group of an operation across virtual nodes.  */ ;/**  * Determines the slot sharing group of an operation across virtual nodes.  */ public String getSlotSharingGroup(Integer id) {     if (virtualSideOutputNodes.containsKey(id)) {         Integer mappedId = virtualSideOutputNodes.get(id).f0.         return getSlotSharingGroup(mappedId).     } else if (virtualSelectNodes.containsKey(id)) {         Integer mappedId = virtualSelectNodes.get(id).f0.         return getSlotSharingGroup(mappedId).     } else if (virtualPartitionNodes.containsKey(id)) {         Integer mappedId = virtualPartitionNodes.get(id).f0.         return getSlotSharingGroup(mappedId).     } else {         StreamNode node = getStreamNode(id).         return node.getSlotSharingGroup().     } }
false;public;3;9;;public void addEdge(Integer upStreamVertexID, Integer downStreamVertexID, int typeNumber) {     addEdgeInternal(upStreamVertexID, downStreamVertexID, typeNumber, null, new ArrayList<String>(), null). }
false;private;6;56;;private void addEdgeInternal(Integer upStreamVertexID, Integer downStreamVertexID, int typeNumber, StreamPartitioner<?> partitioner, List<String> outputNames, OutputTag outputTag) {     if (virtualSideOutputNodes.containsKey(upStreamVertexID)) {         int virtualId = upStreamVertexID.         upStreamVertexID = virtualSideOutputNodes.get(virtualId).f0.         if (outputTag == null) {             outputTag = virtualSideOutputNodes.get(virtualId).f1.         }         addEdgeInternal(upStreamVertexID, downStreamVertexID, typeNumber, partitioner, null, outputTag).     } else if (virtualSelectNodes.containsKey(upStreamVertexID)) {         int virtualId = upStreamVertexID.         upStreamVertexID = virtualSelectNodes.get(virtualId).f0.         if (outputNames.isEmpty()) {             // selections that happen downstream override earlier selections             outputNames = virtualSelectNodes.get(virtualId).f1.         }         addEdgeInternal(upStreamVertexID, downStreamVertexID, typeNumber, partitioner, outputNames, outputTag).     } else if (virtualPartitionNodes.containsKey(upStreamVertexID)) {         int virtualId = upStreamVertexID.         upStreamVertexID = virtualPartitionNodes.get(virtualId).f0.         if (partitioner == null) {             partitioner = virtualPartitionNodes.get(virtualId).f1.         }         addEdgeInternal(upStreamVertexID, downStreamVertexID, typeNumber, partitioner, outputNames, outputTag).     } else {         StreamNode upstreamNode = getStreamNode(upStreamVertexID).         StreamNode downstreamNode = getStreamNode(downStreamVertexID).         // operator matches use forward partitioning, use rebalance otherwise.         if (partitioner == null && upstreamNode.getParallelism() == downstreamNode.getParallelism()) {             partitioner = new ForwardPartitioner<Object>().         } else if (partitioner == null) {             partitioner = new RebalancePartitioner<Object>().         }         if (partitioner instanceof ForwardPartitioner) {             if (upstreamNode.getParallelism() != downstreamNode.getParallelism()) {                 throw new UnsupportedOperationException("Forward partitioning does not allow " + "change of parallelism. Upstream operation: " + upstreamNode + " parallelism: " + upstreamNode.getParallelism() + ", downstream operation: " + downstreamNode + " parallelism: " + downstreamNode.getParallelism() + " You must use another partitioning strategy, such as broadcast, rebalance, shuffle or global.").             }         }         StreamEdge edge = new StreamEdge(upstreamNode, downstreamNode, typeNumber, outputNames, partitioner, outputTag).         getStreamNode(edge.getSourceId()).addOutEdge(edge).         getStreamNode(edge.getTargetId()).addInEdge(edge).     } }
false;public;2;14;;public <T> void addOutputSelector(Integer vertexID, OutputSelector<T> outputSelector) {     if (virtualPartitionNodes.containsKey(vertexID)) {         addOutputSelector(virtualPartitionNodes.get(vertexID).f0, outputSelector).     } else if (virtualSelectNodes.containsKey(vertexID)) {         addOutputSelector(virtualSelectNodes.get(vertexID).f0, outputSelector).     } else {         getStreamNode(vertexID).addOutputSelector(outputSelector).         if (LOG.isDebugEnabled()) {             LOG.debug("Outputselector set for {}", vertexID).         }     } }
false;public;2;5;;public void setParallelism(Integer vertexID, int parallelism) {     if (getStreamNode(vertexID) != null) {         getStreamNode(vertexID).setParallelism(parallelism).     } }
false;public;2;5;;public void setMaxParallelism(int vertexID, int maxParallelism) {     if (getStreamNode(vertexID) != null) {         getStreamNode(vertexID).setMaxParallelism(maxParallelism).     } }
false;public;3;5;;public void setResources(int vertexID, ResourceSpec minResources, ResourceSpec preferredResources) {     if (getStreamNode(vertexID) != null) {         getStreamNode(vertexID).setResources(minResources, preferredResources).     } }
false;public;3;5;;public void setOneInputStateKey(Integer vertexID, KeySelector<?, ?> keySelector, TypeSerializer<?> keySerializer) {     StreamNode node = getStreamNode(vertexID).     node.setStatePartitioner1(keySelector).     node.setStateKeySerializer(keySerializer). }
false;public;4;6;;public void setTwoInputStateKey(Integer vertexID, KeySelector<?, ?> keySelector1, KeySelector<?, ?> keySelector2, TypeSerializer<?> keySerializer) {     StreamNode node = getStreamNode(vertexID).     node.setStatePartitioner1(keySelector1).     node.setStatePartitioner2(keySelector2).     node.setStateKeySerializer(keySerializer). }
false;public;2;5;;public void setBufferTimeout(Integer vertexID, long bufferTimeout) {     if (getStreamNode(vertexID) != null) {         getStreamNode(vertexID).setBufferTimeout(bufferTimeout).     } }
false;public;4;6;;public void setSerializers(Integer vertexID, TypeSerializer<?> in1, TypeSerializer<?> in2, TypeSerializer<?> out) {     StreamNode vertex = getStreamNode(vertexID).     vertex.setSerializerIn1(in1).     vertex.setSerializerIn2(in2).     vertex.setSerializerOut(out). }
false;public;2;7;;public void setSerializersFrom(Integer from, Integer to) {     StreamNode fromVertex = getStreamNode(from).     StreamNode toVertex = getStreamNode(to).     toVertex.setSerializerIn1(fromVertex.getTypeSerializerOut()).     toVertex.setSerializerOut(fromVertex.getTypeSerializerIn1()). }
false;public;2;3;;public <OUT> void setOutType(Integer vertexID, TypeInformation<OUT> outType) {     getStreamNode(vertexID).setSerializerOut(outType.createSerializer(executionConfig)). }
false;public;2;3;;public <IN, OUT> void setOperator(Integer vertexID, StreamOperator<OUT> operatorObject) {     getStreamNode(vertexID).setOperator(operatorObject). }
false;public;2;3;;public void setInputFormat(Integer vertexID, InputFormat<?, ?> inputFormat) {     getStreamNode(vertexID).setInputFormat(inputFormat). }
false;;2;6;;void setTransformationUID(Integer nodeId, String transformationId) {     StreamNode node = streamNodes.get(nodeId).     if (node != null) {         node.setTransformationUID(transformationId).     } }
false;;2;7;;void setTransformationUserHash(Integer nodeId, String nodeHash) {     StreamNode node = streamNodes.get(nodeId).     if (node != null) {         node.setUserHash(nodeHash).     } }
false;public;1;3;;public StreamNode getStreamNode(Integer vertexID) {     return streamNodes.get(vertexID). }
false;protected;0;3;;protected Collection<? extends Integer> getVertexIDs() {     return streamNodes.keySet(). }
false;public;2;15;;public List<StreamEdge> getStreamEdges(int sourceId, int targetId) {     List<StreamEdge> result = new ArrayList<>().     for (StreamEdge edge : getStreamNode(sourceId).getOutEdges()) {         if (edge.getTargetId() == targetId) {             result.add(edge).         }     }     if (result.isEmpty()) {         throw new RuntimeException("No such edge in stream graph: " + sourceId + " -> " + targetId).     }     return result. }
false;public;0;3;;public Collection<Integer> getSourceIDs() {     return sources. }
false;public;0;3;;public Collection<Integer> getSinkIDs() {     return sinks. }
false;public;0;3;;public Collection<StreamNode> getStreamNodes() {     return streamNodes.values(). }
false;public;0;8;;public Set<Tuple2<Integer, StreamOperator<?>>> getOperators() {     Set<Tuple2<Integer, StreamOperator<?>>> operatorSet = new HashSet<>().     for (StreamNode vertex : streamNodes.values()) {         operatorSet.add(new Tuple2<Integer, StreamOperator<?>>(vertex.getId(), vertex.getOperator())).     }     return operatorSet. }
false;public;1;3;;public String getBrokerID(Integer vertexID) {     return vertexIDtoBrokerID.get(vertexID). }
false;public;1;3;;public long getLoopTimeout(Integer vertexID) {     return vertexIDtoLoopTimeout.get(vertexID). }
false;public;8;39;;public Tuple2<StreamNode, StreamNode> createIterationSourceAndSink(int loopId, int sourceId, int sinkId, long timeout, int parallelism, int maxParallelism, ResourceSpec minResources, ResourceSpec preferredResources) {     StreamNode source = this.addNode(sourceId, null, null, StreamIterationHead.class, null, "IterationSource-" + loopId).     sources.add(source.getId()).     setParallelism(source.getId(), parallelism).     setMaxParallelism(source.getId(), maxParallelism).     setResources(source.getId(), minResources, preferredResources).     StreamNode sink = this.addNode(sinkId, null, null, StreamIterationTail.class, null, "IterationSink-" + loopId).     sinks.add(sink.getId()).     setParallelism(sink.getId(), parallelism).     setMaxParallelism(sink.getId(), parallelism).     iterationSourceSinkPairs.add(new Tuple2<>(source, sink)).     this.vertexIDtoBrokerID.put(source.getId(), "broker-" + loopId).     this.vertexIDtoBrokerID.put(sink.getId(), "broker-" + loopId).     this.vertexIDtoLoopTimeout.put(source.getId(), timeout).     this.vertexIDtoLoopTimeout.put(sink.getId(), timeout).     return new Tuple2<>(source, sink). }
false;public;0;3;;public Set<Tuple2<StreamNode, StreamNode>> getIterationSourceSinkPairs() {     return iterationSourceSinkPairs. }
false;public;1;3;;public StreamNode getSourceVertex(StreamEdge edge) {     return streamNodes.get(edge.getSourceId()). }
false;public;1;3;;public StreamNode getTargetVertex(StreamEdge edge) {     return streamNodes.get(edge.getTargetId()). }
false;private;1;4;;private void removeEdge(StreamEdge edge) {     getSourceVertex(edge).getOutEdges().remove(edge).     getTargetVertex(edge).getInEdges().remove(edge). }
false;private;1;11;;private void removeVertex(StreamNode toRemove) {     Set<StreamEdge> edgesToRemove = new HashSet<>().     edgesToRemove.addAll(toRemove.getInEdges()).     edgesToRemove.addAll(toRemove.getOutEdges()).     for (StreamEdge edge : edgesToRemove) {         removeEdge(edge).     }     streamNodes.remove(toRemove.getId()). }
true;public;1;13;/**  * Gets the assembled {@link JobGraph} with a given job id.  */ ;/**  * Gets the assembled {@link JobGraph} with a given job id.  */ @SuppressWarnings("deprecation") @Override public JobGraph getJobGraph(@Nullable JobID jobID) {     // temporarily forbid checkpointing for iterative jobs     if (isIterative() && checkpointConfig.isCheckpointingEnabled() && !checkpointConfig.isForceCheckpointing()) {         throw new UnsupportedOperationException("Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. " + "State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. " + "\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)").     }     return StreamingJobGraphGenerator.createJobGraph(this, jobID). }
false;public;0;9;;@Override public String getStreamingPlanAsJSON() {     try {         return new JSONGenerator(this).getJSON().     } catch (Exception e) {         throw new RuntimeException("JSON plan creation failed", e).     } }
false;public;1;14;;@Override public void dumpStreamingPlanAsJSON(File file) throws IOException {     PrintWriter pw = null.     try {         pw = new PrintWriter(new FileOutputStream(file), false).         pw.write(getStreamingPlanAsJSON()).         pw.flush().     } finally {         if (pw != null) {             pw.close().         }     } }
